diff --git a/403.php b/403.php
index b1ec992f8468a506c6ee942964c2dd6c934e56ec..520ae1b168806889c4998c462aaeba2652cec903 100644
--- a/403.php
+++ b/403.php
@@ -9,14 +9,15 @@
  *  403 Forbidden page
  */
 
-header($_SERVER["SERVER_PROTOCOL"]." 403 Forbidden");
+header($_SERVER['SERVER_PROTOCOL'] . ' 403 Forbidden');
 
 define('PAGE', 403);
 $page_title = '403';
-require_once(ROOT_PATH . '/core/templates/frontend_init.php');
+
+require_once (ROOT_PATH . '/core/templates/frontend_init.php');
 
 // Load modules + template
-Module::loadPage($user, $pages, $cache, $smarty, array($navigation, $cc_nav, $mod_nav), $widgets);
+Module::loadPage($user, $pages, $cache, $smarty, [$navigation, $cc_nav, $mod_nav], $widgets);
 
 $page_load = microtime(true) - $start;
 define('PAGE_LOAD_TIME', str_replace('{x}', round($page_load, 3), $language->get('general', 'page_loaded_in')));
@@ -26,12 +27,13 @@ $template->onPageLoad();
 $smarty->assign('WIDGETS_LEFT', $widgets->getWidgets('left'));
 $smarty->assign('WIDGETS_RIGHT', $widgets->getWidgets('right'));
 
-require(ROOT_PATH . '/core/templates/navbar.php');
-require(ROOT_PATH . '/core/templates/footer.php');
+require (ROOT_PATH . '/core/templates/navbar.php');
+
+require (ROOT_PATH . '/core/templates/footer.php');
 
 // Assign Smarty variables
 $smarty->assign(
-    array(
+    [
         '403_TITLE' => $language->get('errors', '403_title'),
         'CONTENT' => $language->get('errors', '403_content'),
         'CONTENT_LOGIN' => $language->get('errors', '403_login'),
@@ -40,7 +42,7 @@ $smarty->assign(
         'LOGIN' => $language->get('general', 'sign_in'),
         'LOGIN_LINK' => URL::build('/login'),
         'PATH' => (defined('CONFIG_PATH') ? CONFIG_PATH : '')
-    )
+    ]
 );
 
 // Display template
diff --git a/404.php b/404.php
index 1807c6a3ea4c39dbc1e0b685bdcd4d8a694c5290..b92049782f4bb28cd2518989289ef4692824213a 100644
--- a/404.php
+++ b/404.php
@@ -9,14 +9,15 @@
  *  404 Not Found page
  */
 
-header($_SERVER["SERVER_PROTOCOL"]." 404 Not Found");
+header($_SERVER['SERVER_PROTOCOL'] . ' 404 Not Found');
 
 define('PAGE', 404);
 $page_title = '404';
-require_once(ROOT_PATH . '/core/templates/frontend_init.php');
+
+require_once (ROOT_PATH . '/core/templates/frontend_init.php');
 
 // Load modules + template
-Module::loadPage($user, $pages, $cache, $smarty, array($navigation, $cc_nav, $mod_nav), $widgets);
+Module::loadPage($user, $pages, $cache, $smarty, [$navigation, $cc_nav, $mod_nav], $widgets);
 
 $page_load = microtime(true) - $start;
 define(
@@ -32,19 +33,20 @@ $template->onPageLoad();
 $smarty->assign('WIDGETS_LEFT', $widgets->getWidgets('left'));
 $smarty->assign('WIDGETS_RIGHT', $widgets->getWidgets('right'));
 
-require(ROOT_PATH . '/core/templates/navbar.php');
-require(ROOT_PATH . '/core/templates/footer.php');
+require (ROOT_PATH . '/core/templates/navbar.php');
+
+require (ROOT_PATH . '/core/templates/footer.php');
 
 // Assign Smarty variables
 $smarty->assign(
-    array(
+    [
         '404_TITLE' => $language->get('errors', '404_title'),
         'CONTENT' => $language->get('errors', '404_content'),
         'BACK' => $language->get('errors', '404_back'),
         'HOME' => $language->get('errors', '404_home'),
-        'ERROR' => str_replace(array('{x}', '{y}'), array('<a href="' . URL::build('/contact') . '">', '</a>'), $language->get('errors', '404_error')),
+        'ERROR' => str_replace(['{x}', '{y}'], ['<a href="' . URL::build('/contact') . '">', '</a>'], $language->get('errors', '404_error')),
         'PATH' => (defined('CONFIG_PATH') ? CONFIG_PATH : '')
-    )
+    ]
 );
 
 // Display template
diff --git a/core/avatar/face.php b/core/avatar/face.php
index 6ed901b6d1fcd99257d07217107d91de6feff1c0..d167efdc16f4391e691c5750cd0c4da2118f04f8 100644
--- a/core/avatar/face.php
+++ b/core/avatar/face.php
@@ -8,18 +8,18 @@ Twitter:    @jamiebicknell
 Modified by Samerton for NamelessMC
 */
 
-require('../classes/Cache.php');
+require ('../classes/Cache.php');
 $cache = new Cache();
 
 $size = isset($_GET['s']) ? max(8, min(250, $_GET['s'])) : 48;
 $user = isset($_GET['u']) ? $_GET['u'] : '';
 $view = isset($_GET['v']) ? substr($_GET['v'], 0, 1) : 'f';
-$view = in_array($view, array('f', 'l', 'r', 'b')) ? $view : 'f';
+$view = in_array($view, ['f', 'l', 'r', 'b']) ? $view : 'f';
 
 function get_skin($user, $cache) {
-    
     // Check cache
     $cache->setCache('avatarCache_' . $user);
+
     if ($cache->isCached($user)) {
         return 'cached';
     }
@@ -47,6 +47,7 @@ function get_skin($user, $cache) {
     $output .= '9od++pvX8fdMAcj3/QJ9iJsAFPQCxHSnQt8vMJ3v2wCYpkhkAOR7vG7q4aCXoMoSgG8hFAuc/grMdAD4B/kHl9da7';
     $output .= 'Ne9AAAAAElFTkSuQmCC';
     $output = base64_decode($output);
+
     if ($user != '') {
         $ch = curl_init('https://sessionserver.mojang.com/session/minecraft/profile/' . $user);
 
@@ -87,7 +88,7 @@ if ($skin != 'cached') {
     $im = imagecreatefromstring($skin);
     $av = imagecreatetruecolor($size, $size);
 
-    $x = array('f' => 8, 'l' => 16, 'r' => 0, 'b' => 24);
+    $x = ['f' => 8, 'l' => 16, 'r' => 0, 'b' => 24];
 
     imagecopyresized($av, $im, 0, 0, $x[$view], 8, $size, $size, 8, 8);         // Face
     imagecolortransparent($im, imagecolorat($im, 63, 0));                       // Black Hat Issue
@@ -105,7 +106,7 @@ if ($skin != 'cached') {
     imagedestroy($av);
 } else {
     // Output - already cached
-    $im = imagecreatefrompng("cache/" . $user  . ".png");
+    $im = imagecreatefrompng('cache/' . $user . '.png');
     header('Content-type: image/png');
     imagepng($im);
     imagedestroy($im);
diff --git a/core/classes/Alert.php b/core/classes/Alert.php
index 60e4bdc1a6cb224be3af36e53178d8fb6a97e7b3..66fc97f5efe28fced281ee734d1f4b3dc082c5eb 100644
--- a/core/classes/Alert.php
+++ b/core/classes/Alert.php
@@ -8,8 +8,8 @@
  *
  *  Alert class
  */
-class Alert {
-
+class Alert
+{
     // Creates an alert for the specified user
     // Params:  $user_id (int) 			- contains the ID of the user who we are creating the alert for
     // 			$type (string) 			- contains the alert type, eg 'tag' for user tagging
@@ -19,20 +19,20 @@ class Alert {
     public static function create($user_id, $type, $text_short, $text, $link = '#') {
         $db = DB::getInstance();
 
-        $language = $db->query('SELECT nl2_languages.name AS `name` FROM nl2_users LEFT JOIN nl2_languages ON nl2_languages.id = nl2_users.language_id WHERE nl2_users.id = ?', array($user_id));
+        $language = $db->query('SELECT nl2_languages.name AS `name` FROM nl2_users LEFT JOIN nl2_languages ON nl2_languages.id = nl2_users.language_id WHERE nl2_users.id = ?', [$user_id]);
 
         if ($language->count()) {
             $language_name = $language->first()->name;
             $language = new Language($text_short['path'], $language_name);
 
-            if (!$db->insert('alerts', array(
+            if (! $db->insert('alerts', [
                 'user_id' => $user_id,
                 'type' => $type,
                 'url' => $link,
                 'content_short' => str_replace((isset($text_short['replace']) ? $text_short['replace'] : ''), (isset($text_short['replace_with']) ? $text_short['replace_with'] : ''), $language->get($text_short['file'], $text_short['term'])),
                 'content' => str_replace((isset($text['replace']) ? $text['replace'] : ''), (isset($text['replace_with']) ? $text['replace_with'] : ''), $language->get($text['file'], $text['term'])),
                 'created' => date('U')
-            ))) {
+            ])) {
                 throw new Exception('There was a problem creating an alert.');
             }
         }
@@ -45,17 +45,18 @@ class Alert {
         $db = DB::getInstance();
 
         if ($all == true) {
-            return $db->get('alerts', array('user_id', '=', $user_id))->results();
-        } else {
-            $alerts = $db->get('alerts', array('user_id', '=', $user_id))->results();
-            $unread = array();
+            return $db->get('alerts', ['user_id', '=', $user_id])->results();
+        }
+            $alerts = $db->get('alerts', ['user_id', '=', $user_id])->results();
+            $unread = [];
+
             foreach ($alerts as $alert) {
                 if ($alert->read == 0) {
                     $unread[] = $alert;
                 }
             }
+
             return $unread;
-        }
     }
 
     // Get user unread messages
@@ -65,49 +66,49 @@ class Alert {
         $db = DB::getInstance();
 
         if ($all == true) {
-            $pms_access = $db->get('private_messages_users', array('user_id', '=', $user_id))->results();
-            $pms = array();
+            $pms_access = $db->get('private_messages_users', ['user_id', '=', $user_id])->results();
+            $pms = [];
 
             foreach ($pms_access as $pm) {
                 // Get actual PM information
-                $pm_full = $db->get('private_messages', array('id', '=', $pm->pm_id))->results();
+                $pm_full = $db->get('private_messages', ['id', '=', $pm->pm_id])->results();
 
-                if (!count($pm_full)) continue;
-                else $pm_full = $pm_full[0];
+                if (! count($pm_full)) continue;
+                 $pm_full = $pm_full[0];
 
-                $pms[] = array(
+                $pms[] = [
                     'id' => $pm_full->id,
                     'title' => Output::getClean($pm_full->title),
                     'created' => $pm_full->created,
                     'author_id' => $pm_full->author_id,
                     'last_reply_user' => $pm_full->last_reply_user,
                     'last_reply_date' => $pm_full->last_reply_date
-                );
+                ];
             }
 
             return $pms;
-        } else {
-            $pms = $db->get('private_messages_users', array('user_id', '=', $user_id))->results();
-            $unread = array();
+        }
+            $pms = $db->get('private_messages_users', ['user_id', '=', $user_id])->results();
+            $unread = [];
 
             foreach ($pms as $pm) {
                 if ($pm->read == 0) {
-                    $pm_full = $db->get('private_messages', array('id', '=', $pm->pm_id))->results();
+                    $pm_full = $db->get('private_messages', ['id', '=', $pm->pm_id])->results();
 
-                    if (!count($pm_full)) continue;
-                    else $pm_full = $pm_full[0];
+                    if (! count($pm_full)) continue;
+                     $pm_full = $pm_full[0];
 
-                    $unread[] = array(
+                    $unread[] = [
                         'id' => $pm_full->id,
                         'title' => Output::getClean($pm_full->title),
                         'created' => $pm_full->created,
                         'author_id' => $pm_full->author_id,
                         'last_reply_user' => $pm_full->last_reply_user,
                         'last_reply_date' => $pm_full->last_reply_date
-                    );
+                    ];
                 }
             }
+
             return $unread;
-        }
     }
 }
diff --git a/core/classes/Announcements.php b/core/classes/Announcements.php
index fe313a1fb6ef104d4b8e17b629ba351ba8757325..718a227592e4de4c76b4680cfdaae06060c9e44e 100644
--- a/core/classes/Announcements.php
+++ b/core/classes/Announcements.php
@@ -9,65 +9,78 @@
  *
  *  Announcements class
  */
-class Announcements {
-
+class Announcements
+{
     public static function getAll() {
         $cache = new Cache();
         $cache->setCache('custom_announcements');
+
         if ($cache->isCached('custom_announcements')) return (array) $cache->retrieve('custom_announcements');
-        $cache->store('custom_announcements', DB::getInstance()->query("SELECT * FROM nl2_custom_announcements")->results());
+        $cache->store('custom_announcements', DB::getInstance()->query('SELECT * FROM nl2_custom_announcements')->results());
+
         return (array) $cache->retrieve('custom_announcements');
     }
 
-    public static function getAvailable($page = null, $custom_page = null, $user_groups = array(0)) {
-        $announcements = array();
-        foreach(self::getAll() as $announcement) {
+    public static function getAvailable($page = null, $custom_page = null, $user_groups = [0]) {
+        $announcements = [];
+
+        foreach (self::getAll() as $announcement) {
             if (Cookie::exists('announcement-' . $announcement->id)) {
                 continue;
             }
             $pages = (array) json_decode($announcement->pages, true);
             $groups = (array) json_decode($announcement->groups, true);
+
             if (in_array($page, $pages) || $page == 'api' || in_array($custom_page, $pages)) {
-                foreach($user_groups as $group) {
+                foreach ($user_groups as $group) {
                     if (in_array($group, $groups)) {
                         $announcements[] = $announcement;
+
                         break;
                     }
                 }
             }
         }
+
         return $announcements;
     }
 
     public static function getPages($pages) {
-        $available_pages = array();
-        foreach ($pages->returnPages() as $page) if (!empty($page['name'])) $available_pages[] = $page;
+        $available_pages = [];
+
+        foreach ($pages->returnPages() as $page) if (! empty($page['name'])) $available_pages[] = $page;
+
         return $available_pages;
     }
 
-    public static function getPagesCsv($pages_json = null){
+    public static function getPagesCsv($pages_json = null) {
         $pages = json_decode($pages_json);
-        if (!$pages) return null;
+
+        if (! $pages) return null;
+
         return implode(', ', array_map('ucfirst', $pages));
     }
 
     public static function edit($id = null, $pages = null, $groups = null, $text_colour = null, $background_colour = null, $icon = null, $closable = null, $header = null, $message = null) {
         $queries = new Queries();
-        $queries->update('custom_announcements', $id, array('pages' => json_encode($pages), 'groups' => json_encode($groups), 'text_colour' => $text_colour, 'background_colour' => $background_colour, 'icon' => $icon, 'closable' => $closable ? 1 : 0, 'header' => $header, 'message' => $message));
+        $queries->update('custom_announcements', $id, ['pages' => json_encode($pages), 'groups' => json_encode($groups), 'text_colour' => $text_colour, 'background_colour' => $background_colour, 'icon' => $icon, 'closable' => $closable ? 1 : 0, 'header' => $header, 'message' => $message]);
         self::resetCache();
+
         return true;
     }
 
     public static function create($pages = null, $groups = null, $text_colour = null, $background_colour = null, $icon = null, $closable = null, $header = null, $message = null) {
         $queries = new Queries();
-        $queries->create('custom_announcements', array('pages' => json_encode($pages), 'groups' => json_encode($groups), 'text_colour' => $text_colour, 'background_colour' => $background_colour, 'icon' => $icon, 'closable' => $closable ? 1 : 0, 'header' => $header, 'message' => $message));
+        $queries->create('custom_announcements', ['pages' => json_encode($pages), 'groups' => json_encode($groups), 'text_colour' => $text_colour, 'background_colour' => $background_colour, 'icon' => $icon, 'closable' => $closable ? 1 : 0, 'header' => $header, 'message' => $message]);
         self::resetCache();
+
         return true;
     }
 
-    public static function resetCache(){
+    public static function resetCache() {
         $cache = new Cache();
         $cache->setCache('custom_announcements');
+
         if ($cache->isCached('custom_announcements')) $cache->erase('custom_announcements');
         $cache->store('custom_announcements', self::getAll());
     }
diff --git a/core/classes/Cache.php b/core/classes/Cache.php
index 13b062eb41cfec69d8dd8f41464fffa4acdb7ea1..2bc7b9f373df41ed0fedcf4af4254c3795c8953b 100644
--- a/core/classes/Cache.php
+++ b/core/classes/Cache.php
@@ -25,9 +25,8 @@ THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
  * Modified by Samerton for NamelessMC
  * https://github.com/NamelessMC/Nameless
  */
-
-class Cache {
-
+class Cache
+{
     /**
      * The path to the cache file folder
      *
@@ -52,7 +51,7 @@ class Cache {
     /**
      * Default constructor
      *
-     * @param string|array [optional] $config
+     * @param  string|array [optional] $config
      * @return void
      */
     public function __construct($config = null) {
@@ -70,19 +69,21 @@ class Cache {
     /**
      * Check whether data accociated with a key
      *
-     * @param string $key
+     * @param  string  $key
      * @return boolean
      */
     public function isCached($key) {
         if ($this->_loadCache()) {
             $cachedData = $this->_loadCache();
+
             if (isset($cachedData[$key])) {
                 $entry = $cachedData[$key];
+
                 if ($entry && $this->_checkExpired($entry['time'], $entry['expire'])) {
                     return false;
-                } else {
-                    return isset($cachedData[$key]['data']);
                 }
+
+                    return isset($cachedData[$key]['data']);
             }
         }
     }
@@ -90,77 +91,86 @@ class Cache {
     /**
      * Store data in the cache
      *
-     * @param string $key
-     * @param mixed $data
-     * @param integer [optional] $expiration
+     * @param  string             $key
+     * @param  mixed              $data
+     * @param  integer [optional] $expiration
      * @return object
      */
     public function store($key, $data, $expiration = 0) {
-        $storeData = array(
-            'time'   => time(),
+        $storeData = [
+            'time' => time(),
             'expire' => $expiration,
-            'data'   => serialize($data)
-        );
+            'data' => serialize($data)
+        ];
         $dataArray = $this->_loadCache();
+
         if (is_array($dataArray)) {
             $dataArray[$key] = $storeData;
         } else {
-            $dataArray = array($key => $storeData);
+            $dataArray = [$key => $storeData];
         }
         $cacheData = json_encode($dataArray);
         file_put_contents($this->getCacheDir(), $cacheData);
+
         return $this;
     }
 
     /**
      * Retrieve cached data by its key
      *
-     * @param string $key
-     * @param boolean [optional] $timestamp
+     * @param  string             $key
+     * @param  boolean [optional] $timestamp
      * @return string
      */
     public function retrieve($key, $timestamp = false) {
         $cachedData = $this->_loadCache();
-        (!$timestamp) ? $type = 'data' : $type = 'time';
-        if (!isset($cachedData[$key][$type])) return null;
-        if (!$timestamp) {
+        (! $timestamp) ? $type = 'data' : $type = 'time';
+
+        if (! isset($cachedData[$key][$type])) return null;
+
+        if (! $timestamp) {
             $entry = $cachedData[$key];
+
             if ($entry && $this->_checkExpired($entry['time'], $entry['expire'])) {
                 return null;
             }
         }
+
         return unserialize($cachedData[$key][$type]);
     }
 
     /**
      * Retrieve all cached data
      *
-     * @param boolean [optional] $meta
+     * @param  boolean [optional] $meta
      * @return array
      */
     public function retrieveAll($meta = false) {
-        if (!$meta) {
-            $results = array();
+        if (! $meta) {
+            $results = [];
             $cachedData = $this->_loadCache();
+
             if ($cachedData) {
                 foreach ($cachedData as $k => $v) {
                     $results[$k] = unserialize($v['data']);
                 }
             }
+
             return $results;
-        } else {
-            return $this->_loadCache();
         }
+
+            return $this->_loadCache();
     }
 
     /**
      * Erase cached entry by its key
      *
-     * @param string $key
+     * @param  string $key
      * @return object
      */
     public function erase($key) {
         $cacheData = $this->_loadCache();
+
         if (is_array($cacheData)) {
             if (isset($cacheData[$key])) {
                 unset($cacheData[$key]);
@@ -170,6 +180,7 @@ class Cache {
                 throw new Exception("Error: erase() - Key '{$key}' not found.");
             }
         }
+
         return $this;
     }
 
@@ -180,18 +191,22 @@ class Cache {
      */
     public function eraseExpired() {
         $cacheData = $this->_loadCache();
+
         if (is_array($cacheData)) {
             $counter = 0;
+
             foreach ($cacheData as $key => $entry) {
                 if ($this->_checkExpired($entry['time'], $entry['expire'])) {
                     unset($cacheData[$key]);
                     $counter++;
                 }
             }
+
             if ($counter > 0) {
                 $cacheData = json_encode($cacheData);
                 file_put_contents($this->getCacheDir(), $cacheData);
             }
+
             return $counter;
         }
     }
@@ -203,10 +218,12 @@ class Cache {
      */
     public function eraseAll() {
         $cacheDir = $this->getCacheDir();
+
         if (file_exists($cacheDir)) {
             $cacheFile = fopen($cacheDir, 'w');
             fclose($cacheFile);
         }
+
         return $this;
     }
 
@@ -218,10 +235,11 @@ class Cache {
     private function _loadCache() {
         if (file_exists($this->getCacheDir())) {
             $file = file_get_contents($this->getCacheDir());
+
             return json_decode($file, true);
-        } else {
-            return false;
         }
+
+            return false;
     }
 
     /**
@@ -233,6 +251,7 @@ class Cache {
         if ($this->_checkCacheDir()) {
             $filename = $this->getCache();
             $filename = preg_replace('/[^0-9a-z\.\_\-]/i', '', strtolower($filename));
+
             return $this->getCachePath() . $this->_getHash($filename) . $this->getExtension();
         }
     }
@@ -249,16 +268,18 @@ class Cache {
     /**
      * Check whether a timestamp is still in the duration
      *
-     * @param integer $timestamp
-     * @param integer $expiration
+     * @param  integer $timestamp
+     * @param  integer $expiration
      * @return boolean
      */
     private function _checkExpired($timestamp, $expiration) {
         $result = false;
+
         if ($expiration !== 0) {
             $timeDiff = time() - $timestamp;
             ($timeDiff > $expiration) ? $result = true : $result = false;
         }
+
         return $result;
     }
 
@@ -268,24 +289,28 @@ class Cache {
      * @return boolean
      */
     private function _checkCacheDir() {
-        if (!is_dir($this->getCachePath()) && !mkdir($this->getCachePath(), 0775, true)) {
+        if (! is_dir($this->getCachePath()) && ! mkdir($this->getCachePath(), 0775, true)) {
             throw new Exception('Unable to create cache directory ' . $this->getCachePath());
-        } elseif (!is_readable($this->getCachePath()) || !is_writable($this->getCachePath())) {
-            if (!chmod($this->getCachePath(), 0775)) {
+        }
+
+        if (! is_readable($this->getCachePath()) || ! is_writable($this->getCachePath())) {
+            if (! chmod($this->getCachePath(), 0775)) {
                 throw new Exception('Your <b>' . $this->getCachePath() . '</b> directory must be readable and writeable. Check your file permissions.');
             }
         }
+
         return true;
     }
 
     /**
      * Cache path Setter
      *
-     * @param string $path
+     * @param  string $path
      * @return object
      */
     public function setCachePath($path) {
         $this->_cachepath = $path;
+
         return $this;
     }
 
@@ -301,11 +326,12 @@ class Cache {
     /**
      * Cache name Setter
      *
-     * @param string $name
+     * @param  string $name
      * @return object
      */
     public function setCache($name) {
         $this->_cachename = $name;
+
         return $this;
     }
 
@@ -321,11 +347,12 @@ class Cache {
     /**
      * Cache file extension Setter
      *
-     * @param string $ext
+     * @param  string $ext
      * @return object
      */
     public function setExtension($ext) {
         $this->_extension = $ext;
+
         return $this;
     }
 
diff --git a/core/classes/CollectionItemBase.php b/core/classes/CollectionItemBase.php
index 9b0b0c0abd8ebce3d1c9b466a28ef15c8c28674a..c516c77839c859c3b4109354351184cd6a6c14ca 100644
--- a/core/classes/CollectionItemBase.php
+++ b/core/classes/CollectionItemBase.php
@@ -9,9 +9,10 @@
  *  Base collection item class
  */
 
-abstract class CollectionItemBase {
-
-    private $_order, 
+abstract class CollectionItemBase
+{
+    private $_order,
+ 
             $_enabled;
 
     public function __construct($order, $enabled) {
@@ -27,5 +28,5 @@ abstract class CollectionItemBase {
         return $this->_enabled;
     }
 
-    public abstract function getContent();
+    abstract public function getContent();
 }
diff --git a/core/classes/CollectionManager.php b/core/classes/CollectionManager.php
index d306e4427825000372a54e260abf61b958b7259a..b302369e6f283019ec36894b6c36bf60b65d3ce4 100644
--- a/core/classes/CollectionManager.php
+++ b/core/classes/CollectionManager.php
@@ -9,12 +9,12 @@
  *  Collection manager class
  */
 
-class CollectionManager {
-
-    private static $_collections = array();
+class CollectionManager
+{
+    private static $_collections = [];
 
     public static function addItemToCollection($collection, $item) {
-        if (!isset(self::$_collections[$collection])) {
+        if (! isset(self::$_collections[$collection])) {
             self::$_collections[$collection] = new Collection();
         }
 
@@ -22,20 +22,20 @@ class CollectionManager {
     }
 
     public static function getFullCollection($collection) {
-        return (isset(self::$_collections[$collection]) ? self::$_collections[$collection]->getAllItems() : array());
+        return (isset(self::$_collections[$collection]) ? self::$_collections[$collection]->getAllItems() : []);
     }
 
     public static function getEnabledCollection($collection) {
-        return (isset(self::$_collections[$collection]) ? self::$_collections[$collection]->getEnabledItems() : array());
+        return (isset(self::$_collections[$collection]) ? self::$_collections[$collection]->getEnabledItems() : []);
     }
 }
 
-class Collection {
-
+class Collection
+{
     private $_items;
 
     public function __construct() {
-        $this->_items = array();
+        $this->_items = [];
     }
 
     public function addItem($item) {
@@ -43,7 +43,7 @@ class Collection {
     }
 
     public function getEnabledItems() {
-        $items = array();
+        $items = [];
 
         foreach ($this->_items as $item) {
             if ($item->isEnabled()) {
diff --git a/core/classes/Config.php b/core/classes/Config.php
index a25cc839f1dd6b2b859eab90028890a85131cd17..b13dcfc2de5309fe61d1217df161090568645241 100644
--- a/core/classes/Config.php
+++ b/core/classes/Config.php
@@ -9,12 +9,11 @@
  *  Config class
  */
 
-class Config {
-
+class Config
+{
     public static function get($path = null) {
         if ($path) {
-
-            if (!isset($GLOBALS['config'])) {
+            if (! isset($GLOBALS['config'])) {
                 throw new Exception('Config unavailable. Please refresh the page.');
             }
 
@@ -27,6 +26,7 @@ class Config {
                     $config = $config[$bit];
                 }
             }
+
             return $config;
         }
         
@@ -34,25 +34,26 @@ class Config {
     }
 
     public static function set($key, $value) {
-        if (!file_exists(ROOT_PATH . '/core/config.php')) {
+        if (! file_exists(ROOT_PATH . '/core/config.php')) {
             fopen(ROOT_PATH . '/core/config.php', 'w');
         }
 
-        require(ROOT_PATH . '/core/config.php');
+        require (ROOT_PATH . '/core/config.php');
 
         $loadedConfig = json_decode(file_get_contents(ROOT_PATH . '/core/config.php'), true);
 
-        if (!isset($conf) || !is_array($conf)) {
+        if (! isset($conf) || ! is_array($conf)) {
             $conf = [];
         }
 
         $path = explode('/', $key);
 
-        if (!is_array($path)) {
+        if (! is_array($path)) {
             $conf[$key] = $value;
         } else {
             $loc = &$conf;
-            foreach($path as $step) {
+
+            foreach ($path as $step) {
                 $loc = &$loc[$step];
             }
             $loc = $value;
@@ -64,6 +65,7 @@ class Config {
     public static function write($config) {
         $file = fopen(ROOT_PATH . '/core/config.php', 'wa+');
         fwrite($file, '<?php' . PHP_EOL . '$conf = ' . var_export($config, true) . ';' . PHP_EOL . '$CONFIG[\'installed\'] = true;');
+
         return fclose($file);
     }
 }
diff --git a/core/classes/Configuration.php b/core/classes/Configuration.php
index 62cc242abe1c3db1e2e53843ee2e752991246fca..619a3392cd24924fb340886c8f98f99121d06e15 100644
--- a/core/classes/Configuration.php
+++ b/core/classes/Configuration.php
@@ -9,12 +9,13 @@
  *  Configuration class
  */
 
-class Configuration {
-
+class Configuration
+{
     private $_db,
+
             $_cache;
 
-    public function __construct($cache){
+    public function __construct($cache) {
         $this->_db = DB::getInstance();
         $this->_cache = $cache;
     }
@@ -35,16 +36,18 @@ class Configuration {
         $module = ($module == 'Core' ? '' : $module . '_');
 
         $this->_cache->setCache($module . 'configuration');
+
         if ($this->_cache->isCached($setting)) {
             return $this->_cache->retrieve($setting);
-        } else {
-            $data = $this->_db->query('SELECT value FROM `nl2_'. Output::getClean($module) .'settings` WHERE `name` = ?', array($setting));
+        }
+            $data = $this->_db->query('SELECT value FROM `nl2_' . Output::getClean($module) . 'settings` WHERE `name` = ?', [$setting]);
+
             if ($data->count()) {
                 $results = $data->results();
                 $this->_cache->store($setting, $results[0]->value);
+
                 return $results[0]->value;
             }
-        }
     }
 
     /**
@@ -57,18 +60,18 @@ class Configuration {
      * @return void
      */
     public function set($module, $setting, $value) {
-        if ($module == null || $setting == null || $value === null ) {
+        if ($module == null || $setting == null || $value === null) {
             throw new InvalidArgumentException('Parameter is null');
         }
 
         $module = ($module == 'Core' ? '' : $module . '_');
 
         $this->_db->createQuery(
-            'UPDATE `nl2_'. Output::getClean($module) .'settings` SET `value` = ? WHERE `name` = ?',
-            array(
+            'UPDATE `nl2_' . Output::getClean($module) . 'settings` SET `value` = ? WHERE `name` = ?',
+            [
                 $value,
                 $setting
-            )
+            ]
         );
 
         $this->_cache->setCache($module . 'configuration');
diff --git a/core/classes/Cookie.php b/core/classes/Cookie.php
index d7f08abb4a03efcfe6649089081ea0a129f7a7c5..2ed8e3a62ac8f04b50fa8695af847adb700c731f 100644
--- a/core/classes/Cookie.php
+++ b/core/classes/Cookie.php
@@ -9,8 +9,8 @@
  *  Cookie class
  */
 
-class Cookie {
-
+class Cookie
+{
     // Check the specified cookie exists (returns true or false)
     // Params: $name (string) - name of cookie to check
     public static function exists($name) {
diff --git a/core/classes/DB.php b/core/classes/DB.php
index fad7669b2221f4c700d3493fcc71ecc3135952c5..0b3addbaddafaee3c29aac934461c679069b4da5 100644
--- a/core/classes/DB.php
+++ b/core/classes/DB.php
@@ -9,15 +9,20 @@
  *  Database class
  */
 
-class DB {
-
+class DB
+{
     private static $_instance = null;
 
     private $_pdo,
+
             $_query,
+
             $_error = false,
+
             $_results,
+
             $_prefix,
+
             $_count = 0;
 
     private function __construct() {
@@ -25,55 +30,58 @@ class DB {
             $this->_pdo = new PDO('mysql:host=' . Config::get('mysql/host') . ';port=' . Config::get('mysql/port') . ';dbname=' . Config::get('mysql/db'), Config::get('mysql/username'), Config::get('mysql/password'));
             $this->_pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
             $this->_prefix = Config::get('mysql/prefix');
-        } catch(PDOException $e) {
-            die("<strong>Error:<br /></strong><div class=\"alert alert-danger\">" . $e->getMessage() . "</div>Please check your database connection settings.");
+        } catch (PDOException $e) {
+            die('<strong>Error:<br /></strong><div class="alert alert-danger">' . $e->getMessage() . '</div>Please check your database connection settings.');
         }
     }
 
     public static function getInstance() {
-        if(!isset(self::$_instance)) {
+        if (! isset(self::$_instance)) {
             self::$_instance = new DB();
         }
 
         return self::$_instance;
     }
 
-    public function query($sql, $params = array(), $fetch_method = PDO::FETCH_OBJ) {
+    public function query($sql, $params = [], $fetch_method = PDO::FETCH_OBJ) {
         $this->_error = false;
-        if($this->_query = $this->_pdo->prepare($sql)) {
+
+        if ($this->_query = $this->_pdo->prepare($sql)) {
             $x = 1;
-            if(count($params)) {
-                foreach($params as $param) {
+
+            if (count($params)) {
+                foreach ($params as $param) {
                     $this->_query->bindValue($x, $param);
                     $x++;
                 }
             }
 
-            if($this->_query->execute()) {
+            if ($this->_query->execute()) {
                 $this->_results = $this->_query->fetchAll($fetch_method);
                 $this->_count = $this->_query->rowCount();
             } else {
                 print_r($this->_pdo->errorInfo());
                 $this->_error = true;
             }
-
         }
 
         return $this;
     }
 
-    public function createQuery($sql, $params = array()) {
+    public function createQuery($sql, $params = []) {
         $this->_error = false;
-        if($this->_query = $this->_pdo->prepare($sql)) {
+
+        if ($this->_query = $this->_pdo->prepare($sql)) {
             $x = 1;
-            if(count($params)) {
-                foreach($params as $param) {
+
+            if (count($params)) {
+                foreach ($params as $param) {
                     $this->_query->bindValue($x, $param);
                     $x++;
                 }
             }
 
-            if($this->_query->execute()) {
+            if ($this->_query->execute()) {
                 $this->_count = $this->_query->rowCount();
             } else {
                 print_r($this->_pdo->errorInfo());
@@ -84,31 +92,31 @@ class DB {
         return $this;
     }
 
-    public function createTable($name, $table_data, $other){
+    public function createTable($name, $table_data, $other) {
         $name = $this->_prefix . $name;
         $sql = "CREATE TABLE `{$name}` ({$table_data}) {$other}";
 
-        if(!$this->createQuery($sql)->error()) {
+        if (! $this->createQuery($sql)->error()) {
             return $this;
         }
 
         return false;
     }
 
-    public function action($action, $table, $where = array()) {
-        if(count($where) === 3) {
-            $operators = array('=', '>', '<', '>=', '<=', '<>');
+    public function action($action, $table, $where = []) {
+        if (count($where) === 3) {
+            $operators = ['=', '>', '<', '>=', '<=', '<>'];
 
-            $field 		= $where[0];
-            $operator 	= $where[1];
-            $value 		= $where[2];
+            $field = $where[0];
+            $operator = $where[1];
+            $value = $where[2];
 
             $table = $this->_prefix . $table;
 
-            if(in_array($operator, $operators)) {
+            if (in_array($operator, $operators)) {
                 $sql = "{$action} FROM {$table} WHERE {$field} {$operator} ?";
 
-                if(!$this->query($sql, array($value))->error()) {
+                if (! $this->query($sql, [$value])->error()) {
                     return $this;
                 }
             }
@@ -117,20 +125,20 @@ class DB {
         return false;
     }
 
-    public function deleteAction($action, $table, $where = array()) {
-        if(count($where) === 3) {
-            $operators = array('=', '>', '<', '>=', '<=', '<>');
+    public function deleteAction($action, $table, $where = []) {
+        if (count($where) === 3) {
+            $operators = ['=', '>', '<', '>=', '<=', '<>'];
 
-            $field 		= $where[0];
-            $operator 	= $where[1];
-            $value 		= $where[2];
+            $field = $where[0];
+            $operator = $where[1];
+            $value = $where[2];
 
             $table = $this->_prefix . $table;
 
-            if(in_array($operator, $operators)) {
+            if (in_array($operator, $operators)) {
                 $sql = "{$action} FROM {$table} WHERE {$field} {$operator} ?";
 
-                if(!$this->createQuery($sql, array($value))->error()) {
+                if (! $this->createQuery($sql, [$value])->error()) {
                     return $this;
                 }
             }
@@ -147,7 +155,7 @@ class DB {
         $table = $this->_prefix . $table;
         $sql = "SELECT * FROM {$table} WHERE {$column} LIKE '{$like}'";
 
-        if(!$this->query($sql)->error()) {
+        if (! $this->query($sql)->error()) {
             return $this;
         }
 
@@ -158,13 +166,14 @@ class DB {
         return $this->deleteAction('DELETE', $table, $where);
     }
 
-    public function insert($table, $fields = array()) {
+    public function insert($table, $fields = []) {
         $keys = array_keys($fields);
         $values = '';
         $x = 1;
 
-        foreach($fields as $field) {
+        foreach ($fields as $field) {
             $values .= '?';
+
             if ($x < count($fields)) {
                 $values .= ', ';
             }
@@ -174,17 +183,17 @@ class DB {
         $table = $this->_prefix . $table;
         $sql = "INSERT INTO {$table} (`" . implode('`,`', $keys) . "`) VALUES ({$values})";
 
-        return (!$this->createQuery($sql, $fields)->error());
+        return (! $this->createQuery($sql, $fields)->error());
     }
 
     public function update($table, $id, $fields) {
         $set = '';
         $x = 1;
 
-        foreach($fields as $name => $value) {
+        foreach ($fields as $name => $value) {
             $set .= "{$name} = ?";
 
-            if($x < count($fields)) {
+            if ($x < count($fields)) {
                 $set .= ', ';
             }
             $x++;
@@ -192,21 +201,21 @@ class DB {
         $table = $this->_prefix . $table;
         $sql = "UPDATE {$table} SET {$set} WHERE id = {$id}";
 
-        return (!$this->createQuery($sql, $fields)->error());
+        return (! $this->createQuery($sql, $fields)->error());
     }
 
     public function increment($table, $id, $field) {
         $table = $this->_prefix . $table;
         $sql = "UPDATE {$table} SET {$field} = {$field} + 1 WHERE id = ?";
 
-        return (!$this->createQuery($sql, array($id))->error());
+        return (! $this->createQuery($sql, [$id])->error());
     }
 
     public function decrement($table, $id, $field) {
         $table = $this->_prefix . $table;
         $sql = "UPDATE {$table} SET {$field} = {$field} - 1 WHERE id = ?";
 
-        return (!$this->createQuery($sql, array($id))->error());
+        return (! $this->createQuery($sql, [$id])->error());
     }
 
     public function results() {
@@ -235,21 +244,23 @@ class DB {
         $name = $this->_prefix . $name;
         $sql = "ALTER TABLE `{$name}` ADD {$column} {$attributes}";
 
-        if (!$this->createQuery($sql)->error()) {
+        if (! $this->createQuery($sql)->error()) {
             return $this;
         }
+
         return false;
     }
 
     public function orderAll($table, $order, $sort) {
         $table = $this->_prefix . $table;
+
         if (isset($sort)) {
             $sql = "SELECT * FROM {$table} ORDER BY {$order} {$sort}";
         } else {
             $sql = "SELECT * FROM {$table} ORDER BY {$order}";
         }
 
-        if(!$this->query($sql)->error()) {
+        if (! $this->query($sql)->error()) {
             return $this;
         }
 
@@ -258,13 +269,14 @@ class DB {
 
     public function orderWhere($table, $where, $order, $sort) {
         $table = $this->_prefix . $table;
+
         if (isset($sort)) {
             $sql = "SELECT * FROM {$table} WHERE {$where} ORDER BY {$order} {$sort}";
         } else {
             $sql = "SELECT * FROM {$table} WHERE {$where} ORDER BY {$order}";
         }
 
-        if(!$this->query($sql)->error()) {
+        if (! $this->query($sql)->error()) {
             return $this;
         }
 
@@ -275,7 +287,7 @@ class DB {
         $showTable = $this->_prefix . $showTable;
         $sql = "SHOW TABLES LIKE '{$showTable}'";
 
-        if (!$this->query($sql)->error()) {
+        if (! $this->query($sql)->error()) {
             return $this->_query->rowCount();
         }
 
diff --git a/core/classes/DB_Custom.php b/core/classes/DB_Custom.php
index 48f9cf1f11dc4ee39b1e96132eb9a9e12f91daf1..3010c720b8dab48a117874dfe657eeff93b8de93 100644
--- a/core/classes/DB_Custom.php
+++ b/core/classes/DB_Custom.php
@@ -9,38 +9,46 @@
  *  Custom database class
  */
 
-class DB_Custom {
-
+class DB_Custom
+{
     private static $_instance = null;
 
     private $_pdo,
+
         $_query,
+
         $_error = false,
+
         $_results,
+
         $_prefix,
+
         $_count = 0;
 
     public function __construct($host, $database, $username, $password, $port = 3306) {
         try {
-            $this->_pdo = new PDO('mysql:host=' . $host . ';port=' . $port . ';dbname=' . $database, $username, $password, array(PDO::MYSQL_ATTR_INIT_COMMAND => "SET NAMES 'utf8'"));
+            $this->_pdo = new PDO('mysql:host=' . $host . ';port=' . $port . ';dbname=' . $database, $username, $password, [PDO::MYSQL_ATTR_INIT_COMMAND => "SET NAMES 'utf8'"]);
             $this->_pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
             $this->_prefix = '';
         } catch (PDOException $e) {
-            die("<strong>Error:<br /></strong><div class=\"alert alert-danger\">" . $e->getMessage() . "</div>Please check your database connection settings.");
+            die('<strong>Error:<br /></strong><div class="alert alert-danger">' . $e->getMessage() . '</div>Please check your database connection settings.');
         }
     }
 
     public static function getInstance($host, $database, $username, $password, $port = 3306) {
-        if (!isset(self::$_instance)) {
+        if (! isset(self::$_instance)) {
             self::$_instance = new DB_Custom($host, $database, $username, $password, $port);
         }
+
         return self::$_instance;
     }
 
-    public function query($sql, $params = array()) {
+    public function query($sql, $params = []) {
         $this->_error = false;
+
         if ($this->_query = $this->_pdo->prepare($sql)) {
             $x = 1;
+
             if (count($params)) {
                 foreach ($params as $param) {
                     $this->_query->bindValue($x, $param, is_int($param) ? PDO::PARAM_INT : PDO::PARAM_STR);
@@ -56,13 +64,16 @@ class DB_Custom {
                 $this->_error = true;
             }
         }
+
         return $this;
     }
 
-    public function createQuery($sql, $params = array()) {
+    public function createQuery($sql, $params = []) {
         $this->_error = false;
+
         if ($this->_query = $this->_pdo->prepare($sql)) {
             $x = 1;
+
             if (count($params)) {
                 foreach ($params as $param) {
                     $this->_query->bindValue($x, $param);
@@ -84,26 +95,28 @@ class DB_Custom {
     public function createTable($name, $table_data, $other) {
         $name = $this->_prefix . $name;
         $sql = "CREATE TABLE `{$name}` ({$table_data}) {$other}";
-        if (!$this->createQuery($sql)->error()) {
+
+        if (! $this->createQuery($sql)->error()) {
             return $this;
         }
+
         return false;
     }
 
-    public function action($action, $table, $where = array()) {
+    public function action($action, $table, $where = []) {
         if (count($where) === 3) {
-            $operators = array('=', '>', '<', '>=', '<=', '<>');
+            $operators = ['=', '>', '<', '>=', '<=', '<>'];
 
-            $field         = $where[0];
-            $operator     = $where[1];
-            $value         = $where[2];
+            $field = $where[0];
+            $operator = $where[1];
+            $value = $where[2];
 
             $table = $this->_prefix . $table;
 
             if (in_array($operator, $operators)) {
                 $sql = "{$action} FROM {$table} WHERE {$field} {$operator} ?";
 
-                if (!$this->query($sql, array($value))->error()) {
+                if (! $this->query($sql, [$value])->error()) {
                     return $this;
                 }
             }
@@ -112,20 +125,20 @@ class DB_Custom {
         return false;
     }
 
-    public function deleteAction($action, $table, $where = array()) {
+    public function deleteAction($action, $table, $where = []) {
         if (count($where) === 3) {
-            $operators = array('=', '>', '<', '>=', '<=', '<>');
+            $operators = ['=', '>', '<', '>=', '<=', '<>'];
 
-            $field         = $where[0];
-            $operator     = $where[1];
-            $value         = $where[2];
+            $field = $where[0];
+            $operator = $where[1];
+            $value = $where[2];
 
             $table = $this->_prefix . $table;
 
             if (in_array($operator, $operators)) {
                 $sql = "{$action} FROM {$table} WHERE {$field} {$operator} ?";
 
-                if (!$this->createQuery($sql, array($value))->error()) {
+                if (! $this->createQuery($sql, [$value])->error()) {
                     return $this;
                 }
             }
@@ -142,7 +155,7 @@ class DB_Custom {
         $table = $this->_prefix . $table;
         $sql = "SELECT * FROM {$table} WHERE {$column} LIKE '{$like}'";
 
-        if (!$this->query($sql)->error()) {
+        if (! $this->query($sql)->error()) {
             return $this;
         }
 
@@ -153,13 +166,14 @@ class DB_Custom {
         return $this->deleteAction('DELETE', $table, $where);
     }
 
-    public function insert($table, $fields = array()) {
+    public function insert($table, $fields = []) {
         $keys = array_keys($fields);
         $values = '';
         $x = 1;
 
         foreach ($fields as $field) {
             $values .= '?';
+
             if ($x < count($fields)) {
                 $values .= ', ';
             }
@@ -169,11 +183,9 @@ class DB_Custom {
         $table = $this->_prefix . $table;
         $sql = "INSERT INTO {$table} (`" . implode('`,`', $keys) . "`) VALUES ({$values})";
 
-        if (!$this->createQuery($sql, $fields)->error()) {
-            return true;
-        }
-
-        return false;
+        return (bool) (! $this->createQuery($sql, $fields)->error())
+             
+         ;
     }
 
     public function update($table, $id, $fields) {
@@ -191,33 +203,27 @@ class DB_Custom {
         $table = $this->_prefix . $table;
         $sql = "UPDATE {$table} SET {$set} WHERE id = {$id}";
 
-        if (!$this->createQuery($sql, $fields)->error()) {
-            return true;
-        }
-
-        return false;
+        return (bool) (! $this->createQuery($sql, $fields)->error())
+             
+         ;
     }
 
     public function increment($table, $id, $field) {
         $table = $this->_prefix . $table;
         $sql = "UPDATE {$table} SET {$field} = {$field} + 1 WHERE id = ?";
 
-        if (!$this->createQuery($sql, array($id))->error()) {
-            return true;
-        }
-
-        return false;
+        return (bool) (! $this->createQuery($sql, [$id])->error())
+             
+         ;
     }
 
     public function decrement($table, $id, $field) {
         $table = $this->_prefix . $table;
         $sql = "UPDATE {$table} SET {$field} = {$field} - 1 WHERE id = ?";
 
-        if (!$this->createQuery($sql, array($id))->error()) {
-            return true;
-        }
-
-        return false;
+        return (bool) (! $this->createQuery($sql, [$id])->error())
+             
+         ;
     }
 
     public function results() {
@@ -245,7 +251,8 @@ class DB_Custom {
     public function alterTable($name, $column, $attributes) {
         $name = $this->_prefix . $name;
         $sql = "ALTER TABLE `{$name}` ADD {$column} {$attributes}";
-        if (!$this->createQuery($sql)->error()) {
+
+        if (! $this->createQuery($sql)->error()) {
             return $this;
         }
 
@@ -254,13 +261,14 @@ class DB_Custom {
 
     public function orderAll($table, $order, $sort) {
         $table = $this->_prefix . $table;
+
         if (isset($sort)) {
             $sql = "SELECT * FROM {$table} ORDER BY {$order} {$sort}";
         } else {
             $sql = "SELECT * FROM {$table} ORDER BY {$order}";
         }
 
-        if (!$this->query($sql)->error()) {
+        if (! $this->query($sql)->error()) {
             return $this;
         }
 
@@ -269,24 +277,25 @@ class DB_Custom {
 
     public function orderWhere($table, $where, $order, $sort) {
         $table = $this->_prefix . $table;
+
         if (isset($sort)) {
             $sql = "SELECT * FROM {$table} WHERE {$where} ORDER BY {$order} {$sort}";
         } else {
             $sql = "SELECT * FROM {$table} WHERE {$where} ORDER BY {$order}";
         }
 
-        if (!$this->query($sql)->error()) {
+        if (! $this->query($sql)->error()) {
             return $this;
         }
 
         return false;
     }
 
-    public function showTables($showTable)  {
+    public function showTables($showTable) {
         $showTable = $this->_prefix . $showTable;
         $sql = "SHOW TABLES LIKE '{$showTable}'";
 
-        if (!$this->query($sql)->error()) {
+        if (! $this->query($sql)->error()) {
             return $this->_query->rowCount();
         }
 
diff --git a/core/classes/Discord.php b/core/classes/Discord.php
index 0a34fda58d0b91d26ff379b5a134d24fdcfc9af9..36ee84fb65637a28c142108346fdc1fb173a352b 100644
--- a/core/classes/Discord.php
+++ b/core/classes/Discord.php
@@ -8,51 +8,56 @@
  *
  *  Discord class
  */
-class Discord {
-
-    private static $_valid_responses = array('success', 'badparameter', 'error', 'invguild', 'invuser', 'notlinked', 'unauthorized', 'invrole');
+class Discord
+{
+    private static $_valid_responses = ['success', 'badparameter', 'error', 'invguild', 'invuser', 'notlinked', 'unauthorized', 'invrole'];
 
     public static function discordBotRequest($url = '/status', $body = null) {
         $response = Util::curlGetContents(BOT_URL . $url, $body);
+
         if (in_array($response, self::$_valid_responses)) return $response;
-        else return false;
+
+         return false;
     }
 
     public static function getDiscordRoleId(DB $db, $group_id) {
-        $discord_role_id = $db->get('group_sync', array('website_group_id', '=', $group_id));
+        $discord_role_id = $db->get('group_sync', ['website_group_id', '=', $group_id]);
+
         if ($discord_role_id->count()) return $discord_role_id->first()->discord_role_id;
-        else return null;
+
+         return null;
     }
 
     public static function getWebsiteGroup(DB $db, $discord_role_id) {
-        $website_group_id = $db->get('group_sync', array('discord_role_id', '=', $discord_role_id));
+        $website_group_id = $db->get('group_sync', ['discord_role_id', '=', $discord_role_id]);
+
         if ($website_group_id->count()) {
-            $group = $db->get('groups', array('id', '=', $website_group_id->first()->website_group_id));
+            $group = $db->get('groups', ['id', '=', $website_group_id->first()->website_group_id]);
+
             if ($group->count()) return $group->first();
         }
+
         return null;
     }
 
     public static function removeDiscordRole($user_query, $group, Language $language) {
         if (Util::getSetting(DB::getInstance(), 'discord_integration')) {
             if ($user_query->data()->discord_id != null && $user_query->data()->discord_id != 010) {
-
                 $role_id = self::getDiscordRoleId(DB::getInstance(), $group);
 
                 if ($role_id != null) {
                     $json = self::assembleJson($user_query->data()->discord_id, 'remove_role_id', $role_id);
 
                     $result = self::discordBotRequest('/roleChange', $json);
-                    if ($result != 'success') {
 
+                    if ($result != 'success') {
                         if ($result != 'hierarchy') {
-
                             Session::flash('edit_user_errors', self::parseErrors($result, $language));
                             Redirect::to(URL::build('/panel/users/edit/', 'id=' . Output::getClean($user_query->data()->id)));
+
                             die();
-                        } else {
-                            Session::flash('edit_user_warnings', array($language->get('admin', 'discord_bot_error_hierarchy')));
                         }
+                            Session::flash('edit_user_warnings', [$language->get('admin', 'discord_bot_error_hierarchy')]);
                     }
                 }
             }
@@ -62,29 +67,30 @@ class Discord {
     public static function addDiscordRole($user_query, $group, Language $language, $redirect = true) {
         if (Util::getSetting(DB::getInstance(), 'discord_integration')) {
             if ($user_query->data()->discord_id != null && $user_query->data()->discord_id != 010) {
-
                 $role_id = self::getDiscordRoleId(DB::getInstance(), $group);
 
                 if ($role_id != null) {
                     $json = self::assembleJson($user_query->data()->discord_id, 'add_role_id', $role_id);
 
                     $result = self::discordBotRequest('/roleChange', $json);
-                    if ($result != 'success') {
 
+                    if ($result != 'success') {
                         if ($result != 'hierarchy') {
-
                             $errors = self::parseErrors($result, $language);
 
                             if ($redirect) {
                                 Session::flash('edit_user_errors', $errors);
                                 Redirect::to(URL::build('/panel/users/edit/', 'id=' . Output::getClean($user_query->data()->id)));
+
                                 die();
-                            } else return $errors;
-                        } else {
-                            if ($redirect) {
-                                Session::flash('edit_user_warnings', array($language->get('admin', 'discord_bot_error_hierarchy')));
                             }
+
+return $errors;
                         }
+
+                            if ($redirect) {
+                                Session::flash('edit_user_warnings', [$language->get('admin', 'discord_bot_error_hierarchy')]);
+                            }
                     }
                 }
             }
@@ -92,7 +98,7 @@ class Discord {
     }
 
     public static function saveRoles($roles) {
-        $roles = array(json_encode($roles));
+        $roles = [json_encode($roles)];
         file_put_contents(ROOT_PATH . DIRECTORY_SEPARATOR . 'cache' . DIRECTORY_SEPARATOR . sha1('discord_roles') . '.cache', $roles);
     }
 
@@ -100,11 +106,12 @@ class Discord {
         if (file_exists(ROOT_PATH . DIRECTORY_SEPARATOR . 'cache' . DIRECTORY_SEPARATOR . sha1('discord_roles') . '.cache')) {
             return json_decode(file_get_contents(ROOT_PATH . DIRECTORY_SEPARATOR . 'cache' . DIRECTORY_SEPARATOR . sha1('discord_roles') . '.cache'), true);
         }
-        return array();
+
+        return [];
     }
 
     private static function parseErrors($result, Language $language) {
-        $errors = array();
+        $errors = [];
 
         if ($result === false) {
             // This happens when the url is invalid OR the bot is unreachable (down, firewall, etc) OR they have `allow_url_fopen` disabled in php.ini
@@ -123,11 +130,12 @@ class Discord {
     
     private static function assembleJson($user_id, $action, $role_id) {
         // TODO cache or define() website api key and discord guild id
-        $return = array();
+        $return = [];
         $return['guild_id'] = trim(Output::getClean(Util::getSetting(DB::getInstance(), 'discord')));
         $return['user_id'] = $user_id;
         $return['api_key'] = trim(Output::getClean(Util::getSetting(DB::getInstance(), 'mc_api_key')));
         $return[$action] = $role_id;
+
         return json_encode($return);
     }
 }
diff --git a/core/classes/Email.php b/core/classes/Email.php
index 44fc34ca2d9ab0353b185fea98ec1450db4f5765..cb7a1cffe7dd0d99d5eae07e41b8e3f00bd4346f 100644
--- a/core/classes/Email.php
+++ b/core/classes/Email.php
@@ -9,21 +9,21 @@
 *  Email class
 */
 
-class Email {
-
+class Email
+{
     // Send an email
     // Params:  $email - array containing all necessary email information to send as per the sendPHP and sendMailer functions
     //          $method - email sending method to use (php or mailer)
     public static function send($email, $method = 'php') {
         if ($method == 'php') {
             return self::sendPHP($email);
-        } 
-        else if ($method == 'mailer') {
+        }
+
+         if ($method == 'mailer') {
             return self::sendMailer($email);
         }
-        else {
+         
             return false;
-        }
     }
 
     // Send an email using PHP's sendmail() function
@@ -35,26 +35,29 @@ class Email {
     private static function sendPHP($email) {
         try {
             $mail = mail($email['to'], $email['subject'], $email['message'], $email['headers']);
+
             if ($mail)
                 return true;
-            else {
+             
                 $error = error_get_last();
+
                 if (isset($error['message']))
-                    return array('error' => $error['message']);
-                else
-                    return array('error' => 'Unknown');
-            }
+                    return ['error' => $error['message']];
+                
+                    return ['error' => 'Unknown'];
         } catch (Exception $e) {
             // Error
-            return array('error' => $e->getMessage());
+            return ['error' => $e->getMessage()];
         }
+
         return false;
     }
 
     // Send an email using the PHPMailer library
     private static function sendMailer($email) {
-        require_once(ROOT_PATH . '/core/includes/phpmailer/PHPMailerAutoload.php');
-        require(ROOT_PATH . '/core/email.php');
+        require_once (ROOT_PATH . '/core/includes/phpmailer/PHPMailerAutoload.php');
+
+        require (ROOT_PATH . '/core/email.php');
 
         // Initialise PHPMailer
         $mail = new PHPMailer(true);
@@ -74,8 +77,8 @@ class Email {
                 $mail->AddReplyTo($email['replyto']['email'], $email['replyto']['name']);
             }
 
-            $mail->CharSet = "UTF-8";
-            $mail->Encoding = "base64";
+            $mail->CharSet = 'UTF-8';
+            $mail->Encoding = 'base64';
             $mail->setFrom($GLOBALS['email']['email'], $GLOBALS['email']['name']);
             $mail->From = $GLOBALS['email']['email'];
             $mail->FromName = $GLOBALS['email']['name'];
@@ -85,13 +88,13 @@ class Email {
             $mail->msgHTML($email['message']);
             $mail->Body = $email['message'];
 
-            if (!$mail->send()) {
-                return array('error' => $mail->ErrorInfo);
-            } else {
-                return true;
+            if (! $mail->send()) {
+                return ['error' => $mail->ErrorInfo];
             }
+
+                return true;
         } catch (Exception $e) {
-            return array('error' => $e->getMessage());
+            return ['error' => $e->getMessage()];
         }
     }
 
diff --git a/core/classes/EndpointBase.php b/core/classes/EndpointBase.php
index d35bb8d9c26ece8c5e37b443162c89c8ec666e43..77ed994fce443b4739b184dd617547d19b13127f 100644
--- a/core/classes/EndpointBase.php
+++ b/core/classes/EndpointBase.php
@@ -10,11 +10,14 @@
  *  EndpointsBase class
  */
 
-abstract class EndpointBase {
-
+abstract class EndpointBase
+{
     protected $_route,
+
               $_module,
+
               $_description,
+
               $_method;
 
     public function getRoute() {
@@ -33,6 +36,5 @@ abstract class EndpointBase {
         return $this->_method;
     }
 
-    public abstract function execute(Nameless2API $api);
-
+    abstract public function execute(Nameless2API $api);
 }
diff --git a/core/classes/Endpoints.php b/core/classes/Endpoints.php
index 645df330db71872c0952525c65cd4c2105a92ce8..642d8315c7a2bf2dffe24c6f64b83a7844ae1836 100644
--- a/core/classes/Endpoints.php
+++ b/core/classes/Endpoints.php
@@ -10,16 +10,16 @@
  *  Endpoints class
  */
 
-class Endpoints {
-
-    private $_endpoints = array();
+class Endpoints
+{
+    private $_endpoints = [];
 
     public function getAll() {
         return $this->_endpoints;
     }
 
     public function add(EndpointBase $endpoint) {
-        if (!isset($this->_endpoints[$endpoint->getRoute()])) {
+        if (! isset($this->_endpoints[$endpoint->getRoute()])) {
             $this->_endpoints[$endpoint->getRoute()] = $endpoint;
         }
     }
@@ -28,6 +28,7 @@ class Endpoints {
         foreach ($this->getAll() as $endpoint) {
             if ($endpoint->getRoute() == $request) {
                 $endpoint->execute($api);
+
                 return true;
             }
         }
diff --git a/core/classes/ErrorHandler.php b/core/classes/ErrorHandler.php
index 37bca2328e1b6e262fb4350ac68ac27d5e80f95c..436cc301a39cb056ca666526b5829ba37c3751f1 100644
--- a/core/classes/ErrorHandler.php
+++ b/core/classes/ErrorHandler.php
@@ -10,8 +10,8 @@
  *  Error handler class
  */
 
-class ErrorHandler {
-
+class ErrorHandler
+{
     /*
      * Defined for easy changing.
      * This constant indicates how many LOC from each frame's PHP file to show before and after the highlighted line
@@ -24,7 +24,6 @@ class ErrorHandler {
      * and a single trace frame will be generated for it.
      */
     public static function catchException($exception, $error_string = null, $error_file = null, $error_line = null) {
-
         // Define variables based on if a Throwable was caught by the compiler, or if this was called manually
         $error_string = is_null($exception) ? $error_string : $exception->getMessage();
         $error_file = is_null($exception) ? $error_file : $exception->getFile();
@@ -33,7 +32,7 @@ class ErrorHandler {
         // Create a log entry for viewing in staffcp
         self::logError('fatal', '[' . date('Y-m-d, H:i:s') . '] ' . $error_file . '(' . $error_line . '): ' . $error_string);
 
-        $frames = array();
+        $frames = [];
 
         // Most recent frame is not included in getTrace(), so deal with it individually
         $lines = file($error_file);
@@ -50,8 +49,8 @@ class ErrorHandler {
         // Loop all frames in the exception trace & get relevent information
         if ($exception != null) {
             $i = count($exception->getTrace());
-            foreach ($exception->getTrace() as $frame) {
 
+            foreach ($exception->getTrace() as $frame) {
                 $lines = file($frame['file']);
 
                 $code = self::parseFile($lines, $frame['line']);
@@ -69,12 +68,13 @@ class ErrorHandler {
         }
 
         define('ERRORHANDLER', true);
-        require_once(ROOT_PATH . DIRECTORY_SEPARATOR . 'error.php');
+
+        require_once (ROOT_PATH . DIRECTORY_SEPARATOR . 'error.php');
+
         die();
     }
 
     private static function parseFile($lines, $error_line) {
-
         $return = '';
 
         if ($lines == false || count($lines) < 1) {
@@ -95,8 +95,7 @@ class ErrorHandler {
     }
 
     public static function catchError($errno, $errstr, $errfile, $errline) {
-
-        if(!(error_reporting() & $errno)) {
+        if (! (error_reporting() & $errno)) {
             return false;
         }
 
@@ -106,18 +105,22 @@ class ErrorHandler {
                 // Since we registered an exception handler, I dont think this will ever be called,
                 // simply a precaution.
                 self::catchException(null, $errstr, $errfile, $errline);
+
                 break;
 
             case E_USER_WARNING:
                 self::logError('warning', '[' . date('Y-m-d, H:i:s') . '] ' . $errfile . '(' . $errline . ') ' . $errno . ': ' . $errstr);
+
                 break;
 
             case E_USER_NOTICE:
                 self::logError('notice', '[' . date('Y-m-d, H:i:s') . '] ' . $errfile . '(' . $errline . ') ' . $errno . ': ' . $errstr);
+
                 break;
 
             default:
                 self::logError('other', '[' . date('Y-m-d, H:i:s') . '] ' . $errfile . '(' . $errline . ') ' . $errno . ': ' . $errstr);
+
                 break;
         }
 
@@ -125,12 +128,10 @@ class ErrorHandler {
     }
 
     private static function logError($type, $contents) {
-
         $dir_exists = false;
 
         try {
-
-            if (!is_dir(join(DIRECTORY_SEPARATOR, array(ROOT_PATH, 'cache', 'logs')))) {
+            if (! is_dir(join(DIRECTORY_SEPARATOR, [ROOT_PATH, 'cache', 'logs']))) {
                 if (is_writable(ROOT_PATH . DIRECTORY_SEPARATOR . 'cache')) {
                     mkdir(ROOT_PATH . DIRECTORY_SEPARATOR . 'cache' . DIRECTORY_SEPARATOR . 'logs');
                     $dir_exists = true;
@@ -139,10 +140,9 @@ class ErrorHandler {
                 $dir_exists = true;
             }
 
-            if($dir_exists) {
-                file_put_contents(join(DIRECTORY_SEPARATOR, array(ROOT_PATH, 'cache', 'logs', $type . '-log.log')), $contents . PHP_EOL, FILE_APPEND);
+            if ($dir_exists) {
+                file_put_contents(join(DIRECTORY_SEPARATOR, [ROOT_PATH, 'cache', 'logs', $type . '-log.log']), $contents . PHP_EOL, FILE_APPEND);
             }
-
         } catch (Exception $exception) {
             // Unable to write to file, ignore for now
         }
diff --git a/core/classes/ExternalMCQuery.php b/core/classes/ExternalMCQuery.php
index ddd1e3a3deadafe5def5b63c7f89214e52b6b899..d2763b5076232aa60b4292b8dc28f013af7d5d7a 100644
--- a/core/classes/ExternalMCQuery.php
+++ b/core/classes/ExternalMCQuery.php
@@ -9,8 +9,8 @@
  *  External Minecraft query class
  */
 
-class ExternalMCQuery {
-
+class ExternalMCQuery
+{
     // Basic server query
     // Returns array containing query result
     // Params: $ip = IP to query, $port = port to query
@@ -32,29 +32,27 @@ class ExternalMCQuery {
             curl_close($ch);
 
             return $result;
-
-        } catch(Exception $e){
-            return array(
+        } catch (Exception $e){
+            return [
                 'error' => true,
                 'value' => $e->getMessage()
-            );
+            ];
         }
     }
 
     // Get a server's favicon
     // Params: $ip - server IP address
     public static function getFavicon($ip = null) {
-        if($ip){
+        if ($ip){
             $query_ip = explode(':', $ip);
 
-            if(count($query_ip) == 2){
+            if (count($query_ip) == 2){
                 $ip = $query_ip[0];
                 $port = $query_ip[1];
-            } else if(count($query_ip) == 1) {
+            } else if (count($query_ip) == 1) {
                 $ip = $query_ip[0];
                 $port = $query_ip[1];
-            } else
-                return false;
+            } else return false;
 
             $queryUrl = 'https://api.namelessmc.com/api/server/' . $ip . '/' . $port;
 
@@ -72,13 +70,12 @@ class ExternalMCQuery {
 
                 curl_close($ch);
 
-                if(!$result->error && $result->response->description->favicon)
+                if (! $result->error && $result->response->description->favicon)
                     return $result->response->description->favicon;
-
-            } catch(Exception $e){
-
+            } catch (Exception $e){
             }
         }
+
         return false;
     }
 }
diff --git a/core/classes/Hash.php b/core/classes/Hash.php
index 9f9739d355c1f57d7e942145128bb095265ad9ba..a97175ee15a80166d7c38c6da10817bb46db6d37 100644
--- a/core/classes/Hash.php
+++ b/core/classes/Hash.php
@@ -9,8 +9,8 @@
  *  Hash class
  */
 
-class Hash {
-
+class Hash
+{
     // Generate a hash using sha256
     // Params: $string (string) - string to hash
     //         $salt (string)   - salt (optional)
diff --git a/core/classes/HookHandler.php b/core/classes/HookHandler.php
index ce09bf1de0cf30a033f725708ca997dc75359a12..8db0286abbbc66214813dc880afff4ee5d4b3685 100644
--- a/core/classes/HookHandler.php
+++ b/core/classes/HookHandler.php
@@ -7,18 +7,19 @@
  *  Hook handler class
  */
 
-class HookHandler {
+class HookHandler
+{
+    private static $_events = [];
 
-    private static $_events = array();
-    private static $_hooks = array();
+    private static $_hooks = [];
 
     // Register an event name
     // Params:  $event - name of event to add
     //          $description - human readable description
     //          $params - array of available parameters and their descriptions
-    public static function registerEvent($event, $description, $params = array()) {
-        if (!isset(self::$_events[$event])) {
-            self::$_events[$event] = array();
+    public static function registerEvent($event, $description, $params = []) {
+        if (! isset(self::$_events[$event])) {
+            self::$_events[$event] = [];
         }
 
         self::$_events[$event]['description'] = $description;
@@ -37,8 +38,8 @@ class HookHandler {
     // Params:  $event - event name to hook into
     //          $hook - function name to execute, eg Class::method
     public static function registerHook($event, $hook) {
-        if (!isset(self::$_events[$event])) {
-            self::$_events[$event] = array();
+        if (! isset(self::$_events[$event])) {
+            self::$_events[$event] = [];
         }
 
         self::$_events[$event]['hooks'][] = $hook;
@@ -49,15 +50,15 @@ class HookHandler {
     // Execute an event
     // Params:  $event - event name to call
     public static function executeEvent($event, $params = null) {
-        if (!isset(self::$_events[$event])) {
+        if (! isset(self::$_events[$event])) {
             return false;
         }
 
-        if (!is_array($params)) {
-            $params = array();
+        if (! is_array($params)) {
+            $params = [];
         }
 
-        if (!isset($params['event']))
+        if (! isset($params['event']))
             $params['event'] = $event;
 
         // Execute system hooks
@@ -87,7 +88,8 @@ class HookHandler {
 
     // Get a list of hooks
     public static function getHooks() {
-        $return = array();
+        $return = [];
+
         foreach (self::$_events as $key => $item)
             $return[$key] = $item['description'];
 
@@ -98,7 +100,7 @@ class HookHandler {
     public static function getHook($hook) {
         if (isset(self::$_events[$hook]))
             return self::$_events[$hook];
-        else
+        
             return null;
     }
 
@@ -106,8 +108,8 @@ class HookHandler {
     public static function getParameters($event) {
         if (isset(self::$_events[$event]['parameters'])) {
             return self::$_events[$event]['parameters'];
-        } else {
-            return null;
         }
+
+            return null;
     }
 }
diff --git a/core/classes/Input.php b/core/classes/Input.php
index 15c20be784f6cc2dec459cae35e2285bf05cc799..2b226f4de187cd93277a307646d3fbd6ed69a453 100644
--- a/core/classes/Input.php
+++ b/core/classes/Input.php
@@ -8,25 +8,28 @@
  *
  *  Input class
  */
-class Input {
-
+class Input
+{
     // Check that input actually exists
     // Params: $type (string) - check for either POST or GET submission (optional, defaults to POST)
     public static function exists($type = 'post') {
         switch ($type) {
-            case 'post';
+            case 'post':
                 // Check the $_POST variable
-                return (!empty($_POST)) ? true : false;
+                return (! empty($_POST)) ? true : false;
+
                 break;
 
-            case 'get';
+            case 'get':
                 // Check the $_GET variable
-                return (!empty($_GET)) ? true : false;
+                return (! empty($_GET)) ? true : false;
+
                 break;
 
             default:
                 // Otherwise, return false
                 return false;
+
                 break;
         }
     }
@@ -36,8 +39,9 @@ class Input {
     public static function get($item) {
         if (isset($_POST[$item])) {
             return $_POST[$item];
-        } 
-        else if (isset($_GET[$item])) {
+        }
+
+         if (isset($_GET[$item])) {
             return $_GET[$item];
         }
 
@@ -72,7 +76,7 @@ class Input {
 
             $editor .= '],
 
-                removeButtons: \'Anchor,Styles,SpecialChar,About,Flash' . (!$admin ? ',Iframe,Table' : '') . ',Format\'
+                removeButtons: \'Anchor,Styles,SpecialChar,About,Flash' . (! $admin ? ',Iframe,Table' : '') . ',Format\'
             } );';
 
             if ($admin) {
@@ -121,7 +125,7 @@ class Input {
     //          $name (string) - name of input field ID
     public static function createTinyEditor($language, $name = null) {
         if ($name) {
-            $editor = '
+            return '
             tinymce.init({
               selector: \'#' . $name . '\',
               browser_spellcheck: true,
@@ -136,8 +140,6 @@ class Input {
               skin: "' . (defined('TEMPLATE_TINY_EDITOR_STYLE') ? TEMPLATE_TINY_EDITOR_STYLE : 'oxide') . '"
             });
             ';
-
-            return $editor;
         }
         
         return null;
diff --git a/core/classes/Language.php b/core/classes/Language.php
index e8ff3235227add35d3273d9a850035f414432023..c29b1fa3901282891f329aedb8e88dac128e5683 100644
--- a/core/classes/Language.php
+++ b/core/classes/Language.php
@@ -8,32 +8,35 @@
  *
  *  Language class
  */
-class Language {
-
+class Language
+{
     private $_activeLanguage,
+
         $_activeLanguageDirectory,
+
         $_activeLanguageEntries,
+
         $_module;
 
     // Construct Language class
     // Params: 	$active_language (string) 	- contains the active language set in cache (optional)
     //			$module (string)			- contains the path of the language files for custom modules (optional)
     public function __construct($module = null, $active_language = null) {
-        if (!$active_language) {
+        if (! $active_language) {
             // No active language set, default to EnglishUK
-            $this->_activeLanguage         = 'EnglishUK';
+            $this->_activeLanguage = 'EnglishUK';
         } else {
-            $this->_activeLanguage         = $active_language;
+            $this->_activeLanguage = $active_language;
         }
 
         // Require file
-        if (!$module || ($module && $module == 'core')) {
-            $path = join(DIRECTORY_SEPARATOR, array(ROOT_PATH, 'custom', 'languages', $this->_activeLanguage));
+        if (! $module || ($module && $module == 'core')) {
+            $path = join(DIRECTORY_SEPARATOR, [ROOT_PATH, 'custom', 'languages', $this->_activeLanguage]);
             $this->_module = 'Core';
         } else {
             $path = str_replace('/', DIRECTORY_SEPARATOR, $module) . DIRECTORY_SEPARATOR . $this->_activeLanguage;
 
-            if (!is_dir($path)) {
+            if (! is_dir($path)) {
                 $path = str_replace('/', DIRECTORY_SEPARATOR, $module) . DIRECTORY_SEPARATOR . 'EnglishUK';
             }
 
@@ -44,16 +47,16 @@ class Language {
 
         // HTML language definition
         if (is_file($path . DIRECTORY_SEPARATOR . 'version.php')) {
-            require($path . DIRECTORY_SEPARATOR . 'version.php');
+            require ($path . DIRECTORY_SEPARATOR . 'version.php');
 
             if (isset($language_html)) {
-                if (!defined('HTML_LANG')) {
+                if (! defined('HTML_LANG')) {
                     define('HTML_LANG', $language_html);
                 }
             }
 
             if (isset($language_rtl)) {
-                if (!defined('HTML_RTL')) {
+                if (! defined('HTML_RTL')) {
                     define('HTML_RTL', $language_rtl);
                 }
             }
@@ -66,11 +69,11 @@ class Language {
     //          $number (int)  - contains the number of items to pass through to a plural function (optional)
     public function get($file, $term, $number = null) {
         // Ensure the file exists + term is set
-        if (!is_file($this->_activeLanguageDirectory . DIRECTORY_SEPARATOR . $file . '.php')) {
+        if (! is_file($this->_activeLanguageDirectory . DIRECTORY_SEPARATOR . $file . '.php')) {
             if ($this->_activeLanguage != 'EnglishUK') {
                 if (is_file(rtrim($this->_activeLanguageDirectory, $this->_activeLanguage) . DIRECTORY_SEPARATOR . 'EnglishUK' . DIRECTORY_SEPARATOR . $file . '.php')) {
-                    if (!isset($this->_activeLanguageEntries[$file])) {
-                        require(rtrim($this->_activeLanguageDirectory, $this->_activeLanguage) . DIRECTORY_SEPARATOR . 'EnglishUK' . DIRECTORY_SEPARATOR . $file . '.php');
+                    if (! isset($this->_activeLanguageEntries[$file])) {
+                        require (rtrim($this->_activeLanguageDirectory, $this->_activeLanguage) . DIRECTORY_SEPARATOR . 'EnglishUK' . DIRECTORY_SEPARATOR . $file . '.php');
                         $this->_activeLanguageEntries[$file] = $language;
                     }
                 } else {
@@ -80,8 +83,8 @@ class Language {
                 die('Error loading language file ' . Output::getClean($file) . '.php in ' . ($this->_module == 'Core' ? 'Core' : $this->_module));
             }
         } else {
-            if (!isset($this->_activeLanguageEntries[$file])) {
-                require($this->_activeLanguageDirectory . DIRECTORY_SEPARATOR . $file . '.php');
+            if (! isset($this->_activeLanguageEntries[$file])) {
+                require ($this->_activeLanguageDirectory . DIRECTORY_SEPARATOR . $file . '.php');
                 $this->_activeLanguageEntries[$file] = $language;
             }
         }
@@ -91,20 +94,20 @@ class Language {
             if (is_array($this->_activeLanguageEntries[$file][$term])) {
                 if (function_exists('pluralForm') && $number != null) {
                     return pluralForm($number, $this->_activeLanguageEntries[$file][$term]);
-                } else {
-                    return 'Plural form not set for ' . Output::getClean($term);
                 }
-            } else {
-                return $this->_activeLanguageEntries[$file][$term];
+
+                    return 'Plural form not set for ' . Output::getClean($term);
             }
-        } else {
+
+                return $this->_activeLanguageEntries[$file][$term];
+        }
             // Not set, display an error
             return 'Term ' . Output::getClean($term) . ' not set (file: ' . $file . '.php)';
-        }
     }
 
     public function set($file, $term, $value) {
         $editing_file = ($this->_activeLanguageDirectory . DIRECTORY_SEPARATOR . $file . '.php');
+
         if (is_file($editing_file) && is_writable($editing_file)) {
             return file_put_contents($editing_file, html_entity_decode(
                 str_replace(
@@ -113,7 +116,9 @@ class Language {
                     htmlspecialchars(file_get_contents($editing_file))
                 )
             ));
-        } else return false;
+        }
+
+return false;
     }
 
     // Return the current time language
@@ -121,6 +126,7 @@ class Language {
     public function getTimeLanguage() {
         // Return time language variable
         $this->get('time', 'time');
+
         return $this->_activeLanguageEntries['time'];
     }
 
diff --git a/core/classes/Log.php b/core/classes/Log.php
index f76c85a160c94c689095be59e14ea2caff697887..9540f025abc49bcd65e8d4b66eb9bfc36f72e1ab 100644
--- a/core/classes/Log.php
+++ b/core/classes/Log.php
@@ -9,8 +9,8 @@
  *
  *
  */
-class Log {
-    
+class Log
+{
     private static $_actions = [
         'admin' => [
             'login' => 'acp_login',
@@ -53,8 +53,8 @@ class Log {
                 'submit' => 'acp_bgimage_submit',
                 'reset' => 'acp_bgimage_reset',
             ],
-            'mc'=> [
-                "update" => 'acp_mc_update',
+            'mc' => [
+                'update' => 'acp_mc_update',
             ],
             'authme' => [
                 'update' => 'acp_authme_update',
@@ -64,7 +64,7 @@ class Log {
                 'delete' => 'acp_server_delete',
                 'add' => 'acp_server_add',
                 'default' => 'acp_server_default_update',
-                'banner' => "acp_server_banner_update",
+                'banner' => 'acp_server_banner_update',
             ],
             'module' => [
                 'install' => 'acp_module_install',
@@ -77,7 +77,7 @@ class Log {
                 'delete' => 'acp_pages_delete',
             ],
             'template' => [
-                'update'=> 'acp_template_update',
+                'update' => 'acp_template_update',
                 'install' => 'acp_template_install',
                 'default' => 'acp_template_default_change',
                 'activate' => 'acp_template_activate',
@@ -183,20 +183,22 @@ class Log {
     }
 
     public static function getInstance() {
-        if (!isset(self::$_instance)) {
+        if (! isset(self::$_instance)) {
             self::$_instance = new Log();
         }
+
         return self::$_instance;
     }
 
     /**
      * Get an action from the Action array
-     * @param  String $path the path to the action
-     * @return String/Array       The keys
+     * @param  string       $path the path to the action
+     * @return String/Array The keys
      */
     public static function Action($path) {
         $path = explode('/', $path);
         $config = self::$_actions;
+
         foreach ($path as $bit) {
             if (isset($config[$bit])) {
                 $config = $config[$bit];
@@ -208,25 +210,26 @@ class Log {
 
     /**
      * Logs an action
-     * @param  String $action The action being logged
-     * @param  String $info   Some more information about what the action is about
-     * @param  Int $user   The User ID who is doing the action
-     * @param  String $ip The ip of the user
-     * @return boolean         Return true or false if inserted into the database.
+     * @param  string  $action The action being logged
+     * @param  string  $info   Some more information about what the action is about
+     * @param  int     $user   The User ID who is doing the action
+     * @param  string  $ip     The ip of the user
+     * @return boolean Return true or false if inserted into the database.
      */
     public function log($action, $info = '', $user = null, $ip = null) {
         $userTemp = new User();
         $ip = $userTemp->getIP();
+
         if ($user == null) {
             $user = ($userTemp->isLoggedIn() ? $userTemp->data()->id : 0);
         }
 
-        return $this->_db->insert('logs', array(
+        return $this->_db->insert('logs', [
             'time' => date('U'),
             'action' => $action,
             'user_id' => $user,
             'ip' => $ip,
             'info' => $info,
-        ));
+        ]);
     }
 }
diff --git a/core/classes/MCAssoc.php b/core/classes/MCAssoc.php
index 2617410d8263c7ef998c6af5123e1f39418f5573..1c9df9a136468d79d07a951b5728d80dcacd3537 100644
--- a/core/classes/MCAssoc.php
+++ b/core/classes/MCAssoc.php
@@ -1,11 +1,15 @@
 <?php
 
-class MCAssoc {
-
+class MCAssoc
+{
     private $siteId,
+
             $sharedSecret,
+
             $instanceSecret,
+
             $timestampLeeway,
+
             $insecureMode = false;
 
     public function __construct($siteId, $sharedSecret, $instanceSecret, $timestampLeeway = 300) {
@@ -20,10 +24,12 @@ class MCAssoc {
     }
 
     private function baseSign($data, $key) {
-        if (!$key && !$this->insecureMode) {
-            throw new Exception("key must be provided");
-        } else if ($this->insecureMode) {
-            $key = "insecure";
+        if (! $key && ! $this->insecureMode) {
+            throw new Exception('key must be provided');
+        }
+
+        if ($this->insecureMode) {
+            $key = 'insecure';
         }
 
         return hash_hmac('sha1', $data, $key, true);
@@ -38,14 +44,17 @@ class MCAssoc {
             return false;
 
         $res = 0;
+
         for ($i = 0; $i < strlen($str1); $i++) {
             $res |= ord($str1[$i]) ^ ord($str2[$i]);
         }
+
         return ($res == 0);
     }
 
     private function verify($input, $key) {
         $signed_data = base64_decode($input, true);
+
         if ($signed_data === false) {
             throw new Exception('bad base64 data');
         }
@@ -62,9 +71,10 @@ class MCAssoc {
         $signature = substr($signed_data, -20);
         $my_signature = $this->baseSign($data, $key);
 
-        if (!$this->constantCompare($my_signature, $signature)) {
+        if (! $this->constantCompare($my_signature, $signature)) {
             throw new Exception('signature invalid');
         }
+
         return $data;
     }
 
@@ -83,13 +93,15 @@ class MCAssoc {
 
         $data = $this->verify($input, $this->sharedSecret);
         $rdata = json_decode($data);
+
         if ($rdata === null) {
             throw new Exception('json data invalid');
         }
 
         $mintime = $time - $this->timestampLeeway;
         $maxtime = $time + $this->timestampLeeway;
-        if (!(($mintime < $rdata->now) && ($rdata->now < $maxtime))) {
+
+        if (! (($mintime < $rdata->now) && ($rdata->now < $maxtime))) {
             throw new Exception('timestamp stale');
         }
 
diff --git a/core/classes/MCQuery.php b/core/classes/MCQuery.php
index b28e3a92b2fe8f1cd4a18aff0de7504edb110fdb..a04d6476c99499c6b8681d9bba5b9aa66ac286a8 100644
--- a/core/classes/MCQuery.php
+++ b/core/classes/MCQuery.php
@@ -9,8 +9,8 @@
  *  Minecraft server query class
  */
 
-class MCQuery {
-
+class MCQuery
+{
     // Query a single server
     // Returns array containing query result
     // Params:  $ip - full server IP address with port (separated by :) to query
@@ -38,9 +38,9 @@ class MCQuery {
                         }
 
                         if (isset($query['players'])) {
-                            $player_list = isset($query['players']['sample']) ? $query['players']['sample'] : array();
+                            $player_list = isset($query['players']['sample']) ? $query['players']['sample'] : [];
 
-                            $return = array(
+                            $return = [
                                 'status_value' => 1,
                                 'status' => $language->get('general', 'online'),
                                 'player_count' => Output::getClean($query['players']['online']),
@@ -50,13 +50,13 @@ class MCQuery {
                                 'x_players_online' => str_replace('{x}', Output::getClean($query['players']['online']), $language->get('general', 'currently_x_players_online')),
                                 'motd' => (isset($query['description']['text']) ? $query['description']['text'] : ''),
                                 'version' => $query['version']['name']
-                            );
+                            ];
                         } else {
-                            $return = array(
+                            $return = [
                                 'status_value' => 0,
                                 'status' => $language->get('general', 'offline'),
                                 'server_offline' => $language->get('general', 'server_offline')
-                            );
+                            ];
                         }
 
                         $ping->close();
@@ -70,26 +70,26 @@ class MCQuery {
                     if (count($query_ip) <= 2) {
                         $query = ExternalMCQuery::query($query_ip[0], (isset($query_ip[1]) ? $query_ip[1] : 25565));
 
-                        if (!$query->error && isset($query->response)) {
-                            $player_list = isset($query->response->players->list) ? $query->response->players->list : array();
+                        if (! $query->error && isset($query->response)) {
+                            $player_list = isset($query->response->players->list) ? $query->response->players->list : [];
 
-                            return array(
+                            return [
                                 'status_value' => 1,
                                 'status' => $language->get('general', 'online'),
                                 'player_count' => Output::getClean($query->response->players->online),
                                 'player_count_max' => Output::getClean($query->response->players->max),
                                 'player_list' => $player_list,
-                                'format_player_list' => self::formatPlayerList((array)$player_list),
+                                'format_player_list' => self::formatPlayerList((array) $player_list),
                                 'x_players_online' => str_replace('{x}', Output::getClean($query->response->players->online), $language->get('general', 'currently_x_players_online')),
                                 'motd' => $query->response->description->text
-                            );
-                        } else {
-                            return array(
+                            ];
+                        }
+
+                            return [
                                 'status_value' => 0,
                                 'status' => $language->get('general', 'offline'),
                                 'server_offline' => $language->get('general', 'server_offline')
-                            );
-                        }
+                            ];
                     }
                 }
             } catch (Exception $e) {
@@ -99,20 +99,21 @@ class MCQuery {
 
                 $queries->create(
                     'query_errors',
-                    array(
+                    [
                         'date' => date('U'),
                         'error' => $error,
                         'ip' => $query_ip[0],
                         'port' => (isset($query_ip[1]) ? $query_ip[1] : 25565)
-                    )
+                    ]
                 );
 
-                return array(
+                return [
                     'error' => true,
                     'value' => $error
-                );
+                ];
             }
         }
+
         return false;
     }
 
@@ -133,7 +134,7 @@ class MCQuery {
         if (count($servers)) {
             if ($type == 'internal') {
                 // Internal query
-                $to_return = array();
+                $to_return = [];
                 $total_count = 0;
                 $status = 0;
 
@@ -153,29 +154,29 @@ class MCQuery {
                             // Unable to query
                             $error = $e->getMessage();
 
-                            $query = array();
+                            $query = [];
 
                             $queries->create(
                                 'query_errors',
-                                array(
+                                [
                                     'date' => date('U'),
                                     'error' => $error,
                                     'ip' => $query_ip[0],
                                     'port' => (isset($query_ip[1]) ? $query_ip[1] : 25565)
-                                )
+                                ]
                             );
                         }
 
                         if (isset($query['players'])) {
                             if ($accumulate === false) {
-                                $to_return[] = array(
+                                $to_return[] = [
                                     'name' => Output::getClean($server['name']),
                                     'status_value' => 1,
                                     'status' => $language->get('general', 'online'),
                                     'player_count' => Output::getClean($query['players']['online']),
                                     'player_count_max' => Output::getClean($query['players']['max']),
                                     'x_players_online' => str_replace('{x}', Output::getClean($query['players']['online']), $language->get('general', 'currently_x_players_online'))
-                                );
+                                ];
                             } else {
                                 if ($status == 0) {
                                     $status = 1;
@@ -184,12 +185,12 @@ class MCQuery {
                             }
                         } else {
                             if ($accumulate === true) {
-                                $to_return[] = array(
+                                $to_return[] = [
                                     'name' => Output::getClean($server['name']),
                                     'status_value' => 0,
                                     'status' => $language->get('general', 'offline'),
                                     'server_offline' => $language->get('general', 'server_offline')
-                                );
+                                ];
                             }
                         }
                     }
@@ -200,19 +201,19 @@ class MCQuery {
                 }
 
                 if ($accumulate === true) {
-                    $to_return = array(
+                    $to_return = [
                         'status_value' => $status,
                         'status' => (($status == 1) ? $language->get('general', 'online') : $language->get('general', 'offline')),
                         'status_full' => (($status == 1) ? str_replace('{x}', $total_count, $language->get('general', 'currently_x_players_online')) : $language->get('general', 'server_offline')),
                         'total_players' => $total_count,
                         'player_count' => $total_count
-                    );
+                    ];
                 }
 
                 return $to_return;
-            } else {
+            }
                 // External query
-                $to_return = array();
+                $to_return = [];
                 $total_count = 0;
                 $status = 0;
 
@@ -222,16 +223,16 @@ class MCQuery {
                     if (count($query_ip) <= 2) {
                         $query = ExternalMCQuery::query($query_ip[0], (isset($query_ip[1]) ? $query_ip[1] : 25565));
 
-                        if (!$query->error && isset($query->response)) {
+                        if (! $query->error && isset($query->response)) {
                             if ($accumulate === false) {
-                                $to_return[] = array(
+                                $to_return[] = [
                                     'name' => Output::getClean($server['name']),
                                     'status_value' => 1,
                                     'status' => $language->get('general', 'online'),
                                     'player_count' => Output::getClean($query->response->players->online),
                                     'player_count_max' => Output::getClean($query->response->players->max),
                                     'x_players_online' => str_replace('{x}', Output::getClean($query->response->players->online), $language->get('general', 'currently_x_players_online'))
-                                );
+                                ];
                             } else {
                                 if ($status == 0) {
                                     $status = 1;
@@ -240,30 +241,30 @@ class MCQuery {
                             }
                         } else {
                             if ($accumulate === true) {
-                                $to_return[] = array(
+                                $to_return[] = [
                                     'name' => Output::getClean($server['name']),
                                     'status_value' => 0,
                                     'status' => $language->get('general', 'offline'),
                                     'server_offline' => $language->get('general', 'server_offline')
-                                );
+                                ];
                             }
                         }
                     }
                 }
 
                 if ($accumulate === true) {
-                    $to_return = array(
+                    $to_return = [
                         'status_value' => $status,
                         'status' => (($status == 1) ? $language->get('general', 'online') : $language->get('general', 'offline')),
                         'status_full' => (($status == 1) ? str_replace('{x}', $total_count, $language->get('general', 'currently_x_players_online')) : $language->get('general', 'server_offline')),
                         'total_players' => $total_count,
                         'player_count' => $total_count
-                    );
+                    ];
                 }
 
                 return $to_return;
-            }
         }
+
         return false;
     }
 
@@ -273,19 +274,20 @@ class MCQuery {
      * @param $player_list array Unformatted array of players in format 'id' => string (UUID), 'name' => string (username)
 
      * @return array Array of formatted players
-     **/
+     */
     private static function formatPlayerList($player_list) {
-        $formatted = array();
+        $formatted = [];
 
         if (count($player_list)) {
             foreach ($player_list as $player) {
-                $player = (array)$player;
+                $player = (array) $player;
                 $user = new User($player['id'], 'uuid');
-                if (!$user->data()) {
+
+                if (! $user->data()) {
                     $user = new User($player['name'], 'username');
                 }
 
-                if (!$user->data()) {
+                if (! $user->data()) {
                     $avatar = Util::getAvatarFromUUID($player['id']);
                     $profile = '#';
                 } else {
@@ -293,12 +295,12 @@ class MCQuery {
                     $profile = $user->getProfileURL();
                 }
 
-                $formatted[] = array(
+                $formatted[] = [
                     'username' => Output::getClean($player['name']),
                     'uuid' => Output::getClean($player['id']),
                     'avatar' => $avatar,
                     'profile' => $profile
-                );
+                ];
             }
         }
 
diff --git a/core/classes/MentionsParser.php b/core/classes/MentionsParser.php
index 056c794714fdb5eb5e6734e9c14c05625cbbe48f..8a842c1241a54316126b487e1c91e2370c9e214c 100644
--- a/core/classes/MentionsParser.php
+++ b/core/classes/MentionsParser.php
@@ -9,8 +9,8 @@
  * https://github.com/NamelessMC/Nameless/
  * NamelessMC version 2.0.0-pr9
  */
-class MentionsParser {
-
+class MentionsParser
+{
     private $_db;
 
     /**
@@ -32,29 +32,30 @@ class MentionsParser {
      *
      * @throws Exception if alert is not created (see Alert::create())
      *
-     * @return String parsed post content
+     * @return string parsed post content
      */
     public function parse($author_id, $value, $link, $alert_short, $alert_full) {
-        if(preg_match_all("/\@([A-Za-z0-9\-_!\.]+)/", $value, $matches)){
+        if (preg_match_all("/\@([A-Za-z0-9\-_!\.]+)/", $value, $matches)){
             $matches = $matches[1];
 
-            foreach($matches as $possible_username){
+            foreach ($matches as $possible_username){
                 $user = null;
 
-                while((strlen($possible_username) > 0) && !$user){
+                while ((strlen($possible_username) > 0) && ! $user){
                     $user = new user($possible_username, 'nickname');
 
-                    if($user->data()){
-                        $value = preg_replace("/".preg_quote("@{$possible_username}", "/")."/", "<a style=\"" . Output::getClean($user->getGroupClass()) . "\" href=\"" . $user->getProfileURL() . "\">@{$possible_username}</a>", $value);
+                    if ($user->data()){
+                        $value = preg_replace('/' . preg_quote("@{$possible_username}", '/') . '/', '<a style="' . Output::getClean($user->getGroupClass()) . '" href="' . $user->getProfileURL() . "\">@{$possible_username}</a>", $value);
 
                         // Check if user is blocked by OP
-                        if(isset($author_id)){
-                            $user_blocked = $this->_db->get('blocked_users', array('user_id', '=', $user->data()->id));
-                            if($user_blocked->count()){
+                        if (isset($author_id)){
+                            $user_blocked = $this->_db->get('blocked_users', ['user_id', '=', $user->data()->id]);
+
+                            if ($user_blocked->count()){
                                 $user_blocked = $user_blocked->results();
 
-                                foreach($user_blocked as $item){
-                                    if($item->user_blocked_id == $author_id){
+                                foreach ($user_blocked as $item){
+                                    if ($item->user_blocked_id == $author_id){
                                         break 2;
                                     }
                                 }
@@ -67,8 +68,9 @@ class MentionsParser {
                     }
 
                     // chop last word off of it
-                    $new_possible_username = preg_replace("/([^A-Za-z0-9]{1}|[A-Za-z0-9]+)$/", "", $possible_username);
-                    if($new_possible_username !== $possible_username) $possible_username = $new_possible_username;
+                    $new_possible_username = preg_replace('/([^A-Za-z0-9]{1}|[A-Za-z0-9]+)$/', '', $possible_username);
+
+                    if ($new_possible_username !== $possible_username) $possible_username = $new_possible_username;
                     else break;
                 }
             }
diff --git a/core/classes/MinecraftBanner.php b/core/classes/MinecraftBanner.php
index 5ceb2f530d1513b6bb29f8e4d3914a6036d760fe..539615626501259b0ea0c85d9c919738de971803 100644
--- a/core/classes/MinecraftBanner.php
+++ b/core/classes/MinecraftBanner.php
@@ -25,31 +25,38 @@ OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 SOFTWARE.
 */
 
-class MinecraftBanner {
-
+class MinecraftBanner
+{
     public static function getBackgroundCanvas($width, $height, $background) {
         $texture_size = 32;
 
         $canvas = imagecreatetruecolor($width, $height);
-        if ($background == NULL) {
+
+        if ($background == null) {
             $background = imagecreatefrompng(ROOT_PATH . '/uploads/banners/texture.png');
         } else if (file_exists(ROOT_PATH . '/uploads/banners/' . $background)) {
             $background = imagecreatefrompng(ROOT_PATH . '/uploads/banners/' . $background);
         } else {
-            if (stristr($background, "http://") || stristr($background, "https://") || file_exists($background)) {
+            if (stristr($background, 'http://') || stristr($background, 'https://') || file_exists($background)) {
                 $info = pathinfo($background);
                 $ext = $info['extension'];
 
                 switch ($ext) {
-                    case "png":
+                    case 'png':
                         $background = imagecreatefrompng($background);
+
                         break;
-                    case "jpg":
+
+                    case 'jpg':
                         $background = imagecreatefromjpeg($background);
+
                         break;
-                    case "gif":
+
+                    case 'gif':
                         $background = imagecreatefromgif($background);
+
                         break;
+
                     default:
                         $background = imagecreatefrompng(ROOT_PATH . '/uploads/banners/texture.png');
                 }
@@ -63,9 +70,7 @@ class MinecraftBanner {
                 for ($xPos = 0; $xPos <= ($width / $texture_size); $xPos++) {
                     $startX = $xPos * $texture_size;
                     $startY = $yPos * $texture_size;
-                    imagecopyresampled($canvas, $background, $startX, $startY, 0, 0
-                            , $texture_size, $texture_size
-                            , $texture_size, $texture_size);
+                    imagecopyresampled($canvas, $background, $startX, $startY, 0, 0, $texture_size, $texture_size, $texture_size, $texture_size);
                 }
             }
         } else {
@@ -76,32 +81,31 @@ class MinecraftBanner {
     }
 
     public static function getColours() {
-        return array(
-            '0' => array(0, 0, 0), //Black
-            '1' => array(0, 0, 170), //Dark Blue
-            '2' => array(0, 170, 0), //Dark Green
-            '3' => array(0, 170, 170), //Dark Aqua
-            '4' => array(170, 0, 0), //Dark Red
-            '5' => array(170, 0, 170), //Dark Purple
-            '6' => array(255, 170, 0), //Gold
-            '7' => array(170, 170, 170), //Gray
-            '8' => array(85, 85, 85), //Dark Gray
-            '9' => array(85, 85, 255), //Blue
-            'a' => array(85, 255, 85), //Green
-            'b' => array(85, 255, 255), //Aqua
-            'c' => array(255, 85, 85), //Red
-            'd' => array(255, 85, 85), //Light Purple
-            'e' => array(255, 255, 85), //Yellow
-            'f' => array(255, 255, 255), //White
-        );
+        return [
+            '0' => [0, 0, 0], //Black
+            '1' => [0, 0, 170], //Dark Blue
+            '2' => [0, 170, 0], //Dark Green
+            '3' => [0, 170, 170], //Dark Aqua
+            '4' => [170, 0, 0], //Dark Red
+            '5' => [170, 0, 170], //Dark Purple
+            '6' => [255, 170, 0], //Gold
+            '7' => [170, 170, 170], //Gray
+            '8' => [85, 85, 85], //Dark Gray
+            '9' => [85, 85, 255], //Blue
+            'a' => [85, 255, 85], //Green
+            'b' => [85, 255, 255], //Aqua
+            'c' => [255, 85, 85], //Red
+            'd' => [255, 85, 85], //Light Purple
+            'e' => [255, 255, 85], //Yellow
+            'f' => [255, 255, 255], //White
+        ];
     }
 
     public static function getColourChar() {
-        return "§";
+        return '§';
     }
 
     public static function getFontFile() {
         return ROOT_PATH . '/core/assets/fonts/minecraft.ttf';
     }
-
 }
diff --git a/core/classes/MinecraftPing.php b/core/classes/MinecraftPing.php
index 65ddc0bf68a596ed2022a6197db62e47b42d4044..53f34401a881852376069fe85bfdb21c7a179b75 100644
--- a/core/classes/MinecraftPing.php
+++ b/core/classes/MinecraftPing.php
@@ -23,11 +23,13 @@ OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 SOFTWARE.
 */
 
-class MinecraftPingException extends \Exception {
+class MinecraftPingException extends \Exception
+{
     // Exception thrown by MinecraftPing class
 }
 
-class MinecraftPing {
+class MinecraftPing
+{
     /*
      * Queries Minecraft server
      * Returns array on success, false on failure.
@@ -51,8 +53,11 @@ class MinecraftPing {
      */
 
     private $Socket,
+
             $ServerAddress,
+
             $ServerPort,
+
             $Timeout;
 
     public function __construct($Address, $Port = 25565, $Timeout = 2, $ResolveSRV = true) {
@@ -83,7 +88,7 @@ class MinecraftPing {
         $connectTimeout = $this->Timeout;
         $this->Socket = @fsockopen($this->ServerAddress, $this->ServerPort, $errno, $errstr, $connectTimeout);
 
-        if (!$this->Socket) {
+        if (! $this->Socket) {
             throw new Exception("Failed to connect or create a socket: $errno ($errstr)");
         }
 
@@ -98,11 +103,11 @@ class MinecraftPing {
         $Data = "\x00"; // packet ID = 0 (varint)
 
         $Data .= "\x04"; // Protocol version (varint)
-        $Data .= Pack('c', StrLen($this->ServerAddress)) . $this->ServerAddress; // Server (varint len + UTF-8 addr)
-        $Data .= Pack('n', $this->ServerPort); // Server port (unsigned short)
+        $Data .= pack('c', strlen($this->ServerAddress)) . $this->ServerAddress; // Server (varint len + UTF-8 addr)
+        $Data .= pack('n', $this->ServerPort); // Server port (unsigned short)
         $Data .= "\x01"; // Next state: status (varint)
 
-        $Data = Pack('c', StrLen($Data)) . $Data; // prepend length of packet ID + data
+        $Data = pack('c', strlen($Data)) . $Data; // prepend length of packet ID + data
 
         fwrite($this->Socket, $Data); // handshake
         fwrite($this->Socket, "\x01\x00"); // status ping
@@ -110,43 +115,44 @@ class MinecraftPing {
         $Length = $this->ReadVarInt(); // full packet length
 
         if ($Length < 10) {
-            return FALSE;
+            return false;
         }
 
         $this->ReadVarInt(); // packet type, in server ping it's 0
 
         $Length = $this->ReadVarInt(); // string length
 
-        $Data = "";
+        $Data = '';
+
         do {
             if (microtime(true) - $TimeStart > $this->Timeout) {
                 throw new MinecraftPingException('Server read timed out');
             }
 
-            $Remainder = $Length - StrLen($Data);
+            $Remainder = $Length - strlen($Data);
             $block = fread($this->Socket, $Remainder); // and finally the json string
             // abort if there is no progress
-            if (!$block) {
+            if (! $block) {
                 throw new MinecraftPingException('Server returned too few data');
             }
 
             $Data .= $block;
-        } while (StrLen($Data) < $Length);
+        } while (strlen($Data) < $Length);
 
-        if ($Data === FALSE) {
+        if ($Data === false) {
             throw new MinecraftPingException('Server didn\'t return any data');
         }
 
-        $Data = JSON_Decode($Data, true);
+        $Data = json_decode($Data, true);
 
-        if (JSON_Last_Error() !== JSON_ERROR_NONE) {
-            if (Function_Exists('json_last_error_msg')) {
-                throw new MinecraftPingException(JSON_Last_Error_Msg());
-            } else {
-                throw new MinecraftPingException('JSON parsing failed');
+        if (json_last_error() !== JSON_ERROR_NONE) {
+            if (function_exists('json_last_error_msg')) {
+                throw new MinecraftPingException(json_last_error_msg());
             }
 
-            return FALSE;
+                throw new MinecraftPingException('JSON parsing failed');
+            
+            return false;
         }
 
         return $Data;
@@ -155,37 +161,37 @@ class MinecraftPing {
     public function QueryOldPre17() {
         fwrite($this->Socket, "\xFE\x01");
         $Data = fread($this->Socket, 512);
-        $Len = StrLen($Data);
+        $Len = strlen($Data);
 
         if ($Len < 4 || $Data[0] !== "\xFF") {
-            return FALSE;
+            return false;
         }
 
-        $Data = SubStr($Data, 3); // Strip packet header (kick message packet and short length)
+        $Data = substr($Data, 3); // Strip packet header (kick message packet and short length)
         $Data = iconv('UTF-16BE', 'UTF-8', $Data);
 
         // Are we dealing with Minecraft 1.4+ server?
         if ($Data[1] === "\xA7" && $Data[2] === "\x31") {
-            $Data = Explode("\x00", $Data);
-
-            return array(
-                'HostName'   => $Data[3],
-                'Players'    => IntVal($Data[4]),
-                'MaxPlayers' => IntVal($Data[5]),
-                'Protocol'   => IntVal($Data[1]),
-                'Version'    => $Data[2]
-            );
+            $Data = explode("\x00", $Data);
+
+            return [
+                'HostName' => $Data[3],
+                'Players' => intval($Data[4]),
+                'MaxPlayers' => intval($Data[5]),
+                'Protocol' => intval($Data[1]),
+                'Version' => $Data[2]
+            ];
         }
 
-        $Data = Explode("\xA7", $Data);
+        $Data = explode("\xA7", $Data);
 
-        return array(
-            'HostName'   => SubStr($Data[0], 0, -1),
-            'Players'    => isset($Data[1]) ? IntVal($Data[1]) : 0,
-            'MaxPlayers' => isset($Data[2]) ? IntVal($Data[2]) : 0,
-            'Protocol'   => 0,
-            'Version'    => '1.3'
-        );
+        return [
+            'HostName' => substr($Data[0], 0, -1),
+            'Players' => isset($Data[1]) ? intval($Data[1]) : 0,
+            'MaxPlayers' => isset($Data[2]) ? intval($Data[2]) : 0,
+            'Protocol' => 0,
+            'Version' => '1.3'
+        ];
     }
 
     private function ReadVarInt() {
@@ -195,11 +201,11 @@ class MinecraftPing {
         while (true) {
             $k = @fgetc($this->Socket);
 
-            if ($k === FALSE) {
+            if ($k === false) {
                 return 0;
             }
 
-            $k = Ord($k);
+            $k = ord($k);
 
             $i |= ($k & 0x7F) << $j++ * 7;
 
diff --git a/core/classes/Module.php b/core/classes/Module.php
index 66b11f2132abf58d702d2c6a148537380975eed3..2267902fceac71865e053faf81aaebd4366a61bd 100644
--- a/core/classes/Module.php
+++ b/core/classes/Module.php
@@ -9,18 +9,23 @@
  *  Modules class
  */
 
-abstract class Module {
-    
-    private static $_modules = array();
-
-    private $_name, 
-            $_author,  
-            $_version, 
+abstract class Module
+{
+    private static $_modules = [];
+
+    private $_name,
+ 
+            $_author,
+  
+            $_version,
+ 
             $_nameless_version,
+
             $_load_before,
+
             $_load_after;
 
-    public function __construct($module, $name, $author, $version, $nameless_version, $load_before = array(), $load_after = array()) {
+    public function __construct($module, $name, $author, $version, $nameless_version, $load_before = [], $load_after = []) {
         self::$_modules[] = $module;
         $this->_name = $name;
         $this->_author = $author;
@@ -35,27 +40,33 @@ abstract class Module {
         $this->_load_after = $load_after;
     }
 
-    protected final function setName($name) {
+    final protected function setName($name) {
         $this->_name = $name;
     }
 
-    protected final function setVersion($version) {
+    final protected function setVersion($version) {
         $this->_version = $version;
     }
 
-    protected final function setNamelessVersion($nameless_version) {
+    final protected function setNamelessVersion($nameless_version) {
         $this->_nameless_version = $nameless_version;
     }
 
-    protected final function setAuthor($author) {
+    final protected function setAuthor($author) {
         $this->_author = $author;
     }
 
-    abstract function onInstall();
-    abstract function onUninstall(); // TODO: Implement
-    abstract function onEnable();
-    abstract function onDisable();
-    abstract function onPageLoad($user, $pages, $cache, $smarty, $navs, $widgets, $template);
+    abstract public function onInstall();
+
+    abstract public function onUninstall();
+
+ // TODO: Implement
+
+    abstract public function onEnable();
+
+    abstract public function onDisable();
+
+    abstract public function onPageLoad($user, $pages, $cache, $smarty, $navs, $widgets, $template);
 
     public static function loadPage($user, $pages, $cache, $smarty, $navs, $widgets, $template = null) {
         foreach (self::$_modules as $module) {
@@ -92,8 +103,8 @@ abstract class Module {
     }
 
     private static function findBeforeAfter($modules, $current) {
-        $before = array($current);
-        $after = array();
+        $before = [$current];
+        $after = [];
         $found = false;
 
         foreach ($modules as $module) {
@@ -106,12 +117,12 @@ abstract class Module {
             }
         }
 
-        return array($before, $after);
+        return [$before, $after];
     }
 
     public static function determineModuleOrder() {
-        $module_order = array('Core');
-        $failed = array();
+        $module_order = ['Core'];
+        $failed = [];
 
         foreach (self::$_modules as $module) {
             if ($module->getName() == 'Core') continue;
@@ -119,8 +130,9 @@ abstract class Module {
             for ($n = 0; $n < count($module_order); $n++) {
                 $before_after = self::findBeforeAfter($module_order, $module_order[$n]);
 
-                if (!array_diff($module->getLoadAfter(), $before_after[0]) && !array_diff($module->getLoadBefore(), $before_after[1])) {
+                if (! array_diff($module->getLoadAfter(), $before_after[0]) && ! array_diff($module->getLoadBefore(), $before_after[1])) {
                     array_splice($module_order, $n + 1, 0, $module->getName());
+
                     continue 2;
                 }
             }
@@ -128,6 +140,6 @@ abstract class Module {
             $failed[] = $module->getName();
         }
 
-        return array('modules' => $module_order, 'failed' => $failed);
+        return ['modules' => $module_order, 'failed' => $failed];
     }
 }
diff --git a/core/classes/Navigation.php b/core/classes/Navigation.php
index 0ebd2453ff182e466fafc4cb87680d0aed6c02cd..3b9ba129b4f24ebdb562b96be57e8ef78ba440c2 100644
--- a/core/classes/Navigation.php
+++ b/core/classes/Navigation.php
@@ -9,10 +9,12 @@
  *  Navigation class
  */
 
-class Navigation {
+class Navigation
+{
+    private $_topNavbar = [],
+
+            $_footerNav = [],
 
-    private $_topNavbar = array(),
-            $_footerNav = array(),
             $_panel;
 
     // Panel sidebars discard provided order for links
@@ -45,22 +47,22 @@ class Navigation {
         // Add the link to the navigation
         if ($location == 'top') {
             // Add to top navbar
-            $this->_topNavbar[$name] = array(
+            $this->_topNavbar[$name] = [
                 'title' => $title,
                 'link' => $link,
                 'target' => $target,
                 'order' => $order,
                 'icon' => $icon
-            );
+            ];
         } else {
             // Add to footer navigation
-            $this->_footerNav[$name] = array(
+            $this->_footerNav[$name] = [
                 'title' => $title,
                 'link' => $link,
                 'target' => $target,
                 'order' => $order,
                 'icon' => $icon
-            );
+            ];
         }
     }
 
@@ -74,22 +76,22 @@ class Navigation {
         // Add the dropdown
         if ($location == 'top') {
             // Navbar
-            $this->_topNavbar[$name] = array(
+            $this->_topNavbar[$name] = [
                 'type' => 'dropdown',
                 'title' => $title,
-                'items' => array(),
+                'items' => [],
                 'order' => $order,
                 'icon' => $icon
-            );
+            ];
         } else {
             // Footer
-            $this->_footerNav[$name] = array(
+            $this->_footerNav[$name] = [
                 'type' => 'dropdown',
                 'title' => $title,
-                'items' => array(),
+                'items' => [],
                 'order' => $order,
                 'icon' => $icon
-            );
+            ];
         }
     }
 
@@ -106,22 +108,22 @@ class Navigation {
         // Add the item
         if ($location == 'top' && isset($this->_topNavbar[$dropdown])) {
             // Navbar
-            $this->_topNavbar[$dropdown]['items'][$name] = array(
+            $this->_topNavbar[$dropdown]['items'][$name] = [
                 'title' => $title,
                 'link' => $link,
                 'target' => $target,
                 'icon' => $icon,
                 'order' => $order
-            );
+            ];
         } else if (isset($this->_footerNav[$dropdown])) {
             // Footer
-            $this->_footerNav[$dropdown]['items'][$name] = array(
+            $this->_footerNav[$dropdown]['items'][$name] = [
                 'title' => $title,
                 'link' => $link,
                 'target' => $target,
                 'icon' => $icon,
                 'order' => $order
-            );
+            ];
         }
 
         // Unable to add item to dropdown, might not have been initialised
@@ -131,11 +133,13 @@ class Navigation {
     // Return top navigation - returns array to pass to template
     // Params: $location (string) - either 'top' or 'footer' (defaults to 'top')
     public function returnNav($location = 'top') {
-        $return = array(); // String to return
+        $return = []; // String to return
+
         if ($location == 'top') {
             if (count($this->_topNavbar)) {
                 foreach ($this->_topNavbar as $key => $item) {
                     $return[$key] = $item;
+
                     if (defined('PAGE') && PAGE == $key) {
                         $return[$key]['active'] = true;
                     }
@@ -148,9 +152,12 @@ class Navigation {
                                 function ($a, $b) {
                                     if ($a['order'] > $b['order']) {
                                         return 1;
-                                    } else if ($a['order'] < $b['order']) {
+                                    }
+
+                                    if ($a['order'] < $b['order']) {
                                         return -1;
                                     }
+
                                     return 0;
                                 }
                             );
@@ -164,6 +171,7 @@ class Navigation {
             if (count($this->_footerNav)) {
                 foreach ($this->_footerNav as $key => $item) {
                     $return[$key] = $item;
+
                     if (defined('PAGE') && PAGE == $key) {
                         $return[$key]['active'] = true;
                     }
@@ -175,9 +183,12 @@ class Navigation {
                             function ($a, $b) {
                                 if ($a['order'] > $b['order']) {
                                     return 1;
-                                } else if ($a['order'] < $b['order']) {
+                                }
+
+                                if ($a['order'] < $b['order']) {
                                     return -1;
                                 }
+
                                 return 0;
                             }
                         );
@@ -188,11 +199,13 @@ class Navigation {
 
         uasort($return, function ($a, $b) {
             $result = 0;
+
             if ($a['order'] > $b['order']) {
                 $result = 1;
             } else if ($a['order'] < $b['order']) {
                 $result = -1;
             }
+
             return $result;
         });
 
diff --git a/core/classes/Output.php b/core/classes/Output.php
index cc2a955a1e1c719f6b55c9f2d0b45474a6f80b83..e1a3cb357b80d3d91c2607c6a05dab8aa361cff1 100644
--- a/core/classes/Output.php
+++ b/core/classes/Output.php
@@ -8,8 +8,8 @@
  *
  *  Output class
  */
-class Output {
-    
+class Output
+{
     // Purifier object
     private static $_purifier = null;
 
@@ -29,8 +29,8 @@ class Output {
     // Params: $input (string) - contains the string which will be purified
     public static function getPurified($input) {
         // Require HTMLPurifier
-        if (!self::$_purifier) {
-            require_once(join(DIRECTORY_SEPARATOR, array(ROOT_PATH, 'core', 'includes', 'htmlpurifier', 'HTMLPurifier.standalone.php')));
+        if (! self::$_purifier) {
+            require_once (join(DIRECTORY_SEPARATOR, [ROOT_PATH, 'core', 'includes', 'htmlpurifier', 'HTMLPurifier.standalone.php']));
 
             $purifierConfig = HTMLPurifier_Config::createDefault();
 
@@ -39,11 +39,11 @@ class Output {
             $purifierConfig->set('URI.DisableExternalResources', false);
             $purifierConfig->set('URI.DisableResources', false);
             $purifierConfig->set('HTML.Allowed', 'u,a,p,b,i,small,blockquote,span[style],span[class],p,strong,em,li,ul,ol,div[align],br,img,figure,figcaption');
-            $purifierConfig->set('CSS.AllowedProperties', array('text-align', 'display', 'float', 'color', 'background-color', 'background', 'font-size', 'font-family', 'text-decoration', 'font-weight', 'font-style', 'font-size'));
+            $purifierConfig->set('CSS.AllowedProperties', ['text-align', 'display', 'float', 'color', 'background-color', 'background', 'font-size', 'font-family', 'text-decoration', 'font-weight', 'font-style', 'font-size']);
             $purifierConfig->set('CSS.AllowTricky', true);
             $purifierConfig->set('HTML.AllowedAttributes', 'target, rel, href, id, src, height, width, alt, class, *.style');
-            $purifierConfig->set('Attr.AllowedFrameTargets', array('_blank', '_self', '_parent', '_top'));
-            $purifierConfig->set('Attr.AllowedRel', array('noopener', 'nofollow'));
+            $purifierConfig->set('Attr.AllowedFrameTargets', ['_blank', '_self', '_parent', '_top']);
+            $purifierConfig->set('Attr.AllowedRel', ['noopener', 'nofollow']);
             $purifierConfig->set('HTML.SafeIframe', true);
             $purifierConfig->set('URI.SafeIframeRegexp', '%^(https?:)?//(www\.youtube(?:-nocookie)?\.com/embed/|player\.vimeo\.com/video/)%');
             $purifierConfig->set('Core.EscapeInvalidTags', true);
@@ -52,6 +52,7 @@ class Output {
             $purifierConfig->set('HTML.DefinitionID', 'namelessmc');
             $purifierConfig->set('HTML.DefinitionRev', 1);
             $purifierConfig->set('Cache.DefinitionImpl', null);
+
             if ($def = $purifierConfig->maybeGetRawHTMLDefinition()) {
                 $def->addElement('figure', 'Block', 'Optional: (figcaption, Flow) | (Flow, figcaption) | Flow', 'Common');
                 $def->addElement('figcaption', 'Inline', 'Flow', 'Common');
@@ -61,6 +62,7 @@ class Output {
 
         // Purify the string
         $purified = self::$_purifier->purify($input);
+
         return $purified;
     }
 }
diff --git a/core/classes/Pages.php b/core/classes/Pages.php
index 2e63bf0ac873b52a05286c84406bbd91de19c91d..5c8250a7047e6d0e31a3a08d3ed2a48cc4c1b848 100644
--- a/core/classes/Pages.php
+++ b/core/classes/Pages.php
@@ -9,12 +9,15 @@
  *  Pages class
  */
 
-class Pages {
-
+class Pages
+{
     private $_pages,
-			$_active_page,
+
+            $_active_page,
+
             $_sm_methods,
-            $_ajax_requests = array();
+
+            $_ajax_requests = [];
 
     private $_id = 1;
 
@@ -25,13 +28,13 @@ class Pages {
     //          $name (string)      - contains name of page (optional)
     //          $widgets (boolean)  - can widgets be used on the page? Default false
     public function add($module, $url, $file, $name = '', $widgets = false) {
-        $this->_pages[$url] = array(
+        $this->_pages[$url] = [
             'module' => $module,
             'file' => $file,
             'name' => $name,
             'widgets' => $widgets,
             'id' => $this->_id++
-        );
+        ];
     }
 
     // Defines a custom page
@@ -39,14 +42,14 @@ class Pages {
     //          $name (string)      - contains name of page
     //          $widgets (boolean)  - can widgets be used on the page? Default false
     public function addCustom($url, $name, $widgets = false) {
-        $this->_pages[$url] = array(
+        $this->_pages[$url] = [
             'module' => 'Core',
             'file' => 'custom.php',
             'name' => $name,
             'widgets' => $widgets,
             'custom' => true,
             'id' => $this->_id++
-        );
+        ];
     }
 
     // Returns the array of all pages
@@ -58,9 +61,10 @@ class Pages {
     // Return pages which allow widgets
     // No params
     public function returnWidgetPages() {
-        $ret = array();
+        $ret = [];
+
         foreach ($this->_pages as $page)
-            if (!empty($page['name']) && $page['widgets'] === true)
+            if (! empty($page['name']) && $page['widgets'] === true)
                 $ret[$page['module']][$page['name']] = true;
 
         return $ret;
@@ -69,8 +73,8 @@ class Pages {
     // Register a method for sitemap generation
     public function registerSitemapMethod($file, $method) {
         if ($file && $method) {
-            if (!isset($this->_sm_methods[$file]))
-                $this->_sm_methods[$file] = array();
+            if (! isset($this->_sm_methods[$file]))
+                $this->_sm_methods[$file] = [];
 
             $this->_sm_methods[$file] = $method;
         }
@@ -87,41 +91,46 @@ class Pages {
             foreach ($this->_pages as $key => $page) {
                 if ($page['id'] == $page_id) {
                     $page['key'] = $key;
+
                     return $page;
                 }
             }
         }
+
         return null;
     }
-	
+    
     // Get page by URL
     public function getPageByURL($url = null) {
         if ($url) {
             foreach ($this->_pages as $key => $page) {
                 if ($key == $url) {
-					$page['key'] = $key;
+                    $page['key'] = $key;
+
                     return $page;
                 }
             }
         }
+
         return null;
     }
-	
-	// Set the page the user currently viewing
-	public function setActivePage($page) {
-		$this->_active_page = $page;
-	}
-	
-	// Get the page details the user currently viewing
-	public function getActivePage() {
-		return $this->_active_page;
-	}
+    
+    // Set the page the user currently viewing
+    public function setActivePage($page) {
+        $this->_active_page = $page;
+    }
+    
+    // Get the page details the user currently viewing
+    public function getActivePage() {
+        return $this->_active_page;
+    }
 
     // Add a script for Javascript to perform a GET request to
     public function addAjaxScript($script = null) {
         if ($script) {
             $this->_ajax_requests[] = $script;
         }
+
         return false;
     }
 
diff --git a/core/classes/Paginator.php b/core/classes/Paginator.php
index 6795ad3c1e916c1f47ef3ca0a0d8834046f1b600..9b3d198fc97e5eb259a6aa7dba1ccf2abb8b848e 100644
--- a/core/classes/Paginator.php
+++ b/core/classes/Paginator.php
@@ -9,56 +9,57 @@
  *  Paginator class
  */
 
-class Paginator {
-
+class Paginator
+{
     private $_limit,
+
             $_page,
+
             $_total,
+
             $_class;
 
-    public function __construct($class = array()){
+    public function __construct($class = []) {
         // Constructor
-        if(!count($class))
-            $this->_class = array('ul' => 'pagination d-inline-flex', 'li' => 'page-item {x}', 'a' => 'page-link');
-        else
-            $this->_class = $class;
+        if (! count($class))
+            $this->_class = ['ul' => 'pagination d-inline-flex', 'li' => 'page-item {x}', 'a' => 'page-link'];
+        else $this->_class = $class;
     }
 
-    public function getLimited($data, $limit = 10, $page = 1, $total = 10){
-        $this->_limit   = $limit;
-        $this->_page    = (int)$page;
+    public function getLimited($data, $limit = 10, $page = 1, $total = 10) {
+        $this->_limit = $limit;
+        $this->_page = (int) $page;
 
-        $return = array();
+        $return = [];
 
-        for($i = ($this->_page != 1 ? (($this->_page - 1) * $limit) : 0); $i < ($this->_page * $limit); $i++){
-            if(!isset($data[$i])) break;
+        for ($i = ($this->_page != 1 ? (($this->_page - 1) * $limit) : 0); $i < ($this->_page * $limit); $i++){
+            if (! isset($data[$i])) break;
 
             $return[] = $data[$i];
         }
 
         $this->_total = $total;
 
-        $result         = new stdClass();
-        $result->page   = $this->_page;
-        $result->limit  = $this->_limit;
-        $result->total  = $this->_total;
-        $result->data   = $return;
+        $result = new stdClass();
+        $result->page = $this->_page;
+        $result->limit = $this->_limit;
+        $result->total = $this->_total;
+        $result->data = $return;
 
         return $result;
     }
 
-    public function generate($links, $href = '?'){
+    public function generate($links, $href = '?') {
         $last = ceil($this->_total / $this->_limit);
 
         $start = (($this->_page - $links) > 0) ? $this->_page - $links : 1;
         $end = (($this->_page + $links) < $last) ? $this->_page + $links : $last;
 
-        if(isset($this->_class['div']) && !empty($this->_class['div']))
+        if (isset($this->_class['div']) && ! empty($this->_class['div']))
             $html = '<div class="' . $this->_class['div'] . '">';
-        else
-            $html = '<ul class="' . $this->_class['ul'] . '">';
+        else $html = '<ul class="' . $this->_class['ul'] . '">';
 
-        if(empty($this->_class['ul'])){
+        if (empty($this->_class['ul'])){
             $class = str_replace('{x}', ($this->_page == 1 ? ' disabled ' : ''), ($this->_class['a']));
 
             $html .= '<a class="' . $class . '" href="' . (($this->_page == 1) ? '#' : $href . 'p=' . ($this->_page - 1)) . '">&laquo;</a>';
@@ -66,24 +67,23 @@ class Paginator {
             $class = str_replace('{x}', ($this->_page == 1) ? ' disabled' : '', $this->_class['li']);
 
             $html .= '<li class="' . $class . '"><a class="' . str_replace('{x}', ($this->_page == 1 ? ' disabled ' : ''), $this->_class['a']) . '" href="';
-            if($this->_page == 1) $html .= '#'; else $html .= $href . 'p=' . ($this->_page - 1);
+
+            if ($this->_page == 1) $html .= '#'; else $html .= $href . 'p=' . ($this->_page - 1);
             $html .= '">&laquo;</a></li>';
         }
 
-        if($start > 1){
-            if(empty($this->_class['ul'])){
+        if ($start > 1){
+            if (empty($this->_class['ul'])){
                 $html .= '<a class="' . str_replace('{x}', '', $this->_class['a']) . '" href="' . $href . 'p=1">1</a>';
                 $html .= '<a class="' . str_replace('{x}', ' disabled ', $this->_class['a']) . '" href="#">...</a>';
-
             } else {
                 $html .= '<li class="' . str_replace('{x}', '', $this->_class['li']) . '"><a class="' . str_replace('{x}', '', $this->_class['a']) . '" href="' . $href . 'p=1">1</a></li>';
                 $html .= '<li class="' . str_replace('{x}', ' disabled ', $this->_class['li']) . '"><a href="#" class="' . str_replace('{x}', ' disabled ', $this->_class['a']) . '">...</a></li>';
-
             }
         }
 
-        for($i = $start; $i <= $end; $i++){
-            if(empty($this->_class['ul'])){
+        for ($i = $start; $i <= $end; $i++){
+            if (empty($this->_class['ul'])){
                 $class = str_replace('{x}', ($this->_page == $i) ? ' active ' : '', $this->_class['a']);
                 $html .= '<a class="' . $class . '" href="' . $href . 'p=' . $i . '">' . $i . '</a>';
             } else {
@@ -92,8 +92,8 @@ class Paginator {
             }
         }
 
-        if($end < $last ){
-            if(empty($this->_class['ul'])){
+        if ($end < $last){
+            if (empty($this->_class['ul'])){
                 $html .= '<a class="' . str_replace('{x}', ' disabled ', $this->_class['a']) . '">...</a>';
                 $html .= '<a class="' . str_replace('{x}', '', $this->_class['a']) . '" href="' . $href . 'p=' . $last . '">' . $last . '</a>';
             } else {
@@ -102,26 +102,25 @@ class Paginator {
             }
         }
 
-        if(empty($this->_class['ul'])){
+        if (empty($this->_class['ul'])){
             $html .= '<a class="' . str_replace('{x}', ($this->_page == $last) ? ' disabled ' : '', $this->_class['a']) . '" href="' . (($this->_page == $last) ? '#' : $href . 'p=' . ($this->_page + 1)) . '">&raquo;</a>';
         } else {
             $html .= '<li class="' . str_replace('{x}', ($this->_page == $last) ? ' disabled ' : '', $this->_class['li']) . '"><a class="' . str_replace('{x}', ($this->_page == $last) ? ' disabled ' : '', $this->_class['a']) . '" href="';
-            if($this->_page == $last) $html .= '#'; else $html .= $href . 'p=' . ($this->_page + 1);
+
+            if ($this->_page == $last) $html .= '#'; else $html .= $href . 'p=' . ($this->_page + 1);
             $html .= '">&raquo;</a></li>';
         }
 
-        if(isset($this->_class['div']) && !empty($this->_class['div']))
+        if (isset($this->_class['div']) && ! empty($this->_class['div']))
             $html .= '</div>';
-        else
-            $html .= '</ul>';
+        else $html .= '</ul>';
 
         return $html;
     }
 
-    public function setValues($total, $limit, $page){
+    public function setValues($total, $limit, $page) {
         $this->_total = $total;
         $this->_limit = $limit;
         $this->_page = $page;
     }
-
 }
diff --git a/core/classes/PermissionHandler.php b/core/classes/PermissionHandler.php
index eee384baff0035951ce6965efb9c367cb4d50079..d09980056368adc2329cca1139f19406d9cd6c88 100644
--- a/core/classes/PermissionHandler.php
+++ b/core/classes/PermissionHandler.php
@@ -7,8 +7,8 @@
  *  Permission handler class
  */
 
-class PermissionHandler {
-
+class PermissionHandler
+{
     private static $_permissions;
 
     /*
@@ -18,12 +18,12 @@ class PermissionHandler {
      *          $title (string) - permission title - displays when managing permissions in StaffCP
      */
     public static function registerPermissions($section, $permissions) {
-        if(!is_array($permissions)) {
+        if (! is_array($permissions)) {
             return false;
         }
 
         foreach ($permissions as $permission => $title) {
-            if (!isset(self::$_permissions[$section][$permission])) {
+            if (! isset(self::$_permissions[$section][$permission])) {
                 self::$_permissions[$section][$permission] = $title;
             }
         }
diff --git a/core/classes/Queries.php b/core/classes/Queries.php
index 0e6454225322138e6a2f56a6afa3585a939a7c66..fcbe7c9d519b22e3a58327eaa8be47d7e5b9ec70 100644
--- a/core/classes/Queries.php
+++ b/core/classes/Queries.php
@@ -8,7 +8,8 @@
  *
  *  Queries class
  */
-class Queries {
+class Queries
+{
     private $_db;
 
     public function __construct() {
@@ -17,61 +18,66 @@ class Queries {
 
     public function getWhere($table, $where) {
         $data = $this->_db->get($table, $where);
+
         return $data->results();
     }
 
-    public function getAll($table, $where = array()) {
+    public function getAll($table, $where = []) {
         $data = $this->_db->get($table, $where);
+
         return $data->results();
     }
 
     public function orderAll($table, $order, $sort = null) {
         $data = $this->_db->orderAll($table, $order, $sort);
+
         return $data->results();
     }
 
     public function orderWhere($table, $where, $order, $sort = null) {
         $data = $this->_db->orderWhere($table, $where, $order, $sort);
+
         return $data->results();
     }
 
-    public function getLike($table, $where, $like){
+    public function getLike($table, $where, $like) {
         $data = $this->_db->like($table, $where, $like);
+
         return $data->results();
     }
 
-    public function update($table, $id, $fields = array()) {
-        if(!$this->_db->update($table, $id, $fields)) {
+    public function update($table, $id, $fields = []) {
+        if (! $this->_db->update($table, $id, $fields)) {
             throw new Exception('There was a problem performing that action.');
         }
     }
 
-    public function create($table, $fields = array()) {
-        if(!$this->_db->insert($table, $fields)) {
+    public function create($table, $fields = []) {
+        if (! $this->_db->insert($table, $fields)) {
             throw new Exception('There was a problem performing that action.');
         }
     }
 
     public function delete($table, $where) {
-        if(!$this->_db->delete($table, $where)) {
+        if (! $this->_db->delete($table, $where)) {
             throw new Exception('There was a problem performing that action.');
         }
     }
 
     public function increment($table, $id, $field) {
-        if(!$this->_db->increment($table, $id, $field)) {
+        if (! $this->_db->increment($table, $id, $field)) {
             throw new Exception('There was a problem performing that action.');
         }
     }
 
     public function decrement($table, $id, $field) {
-        if(!$this->_db->decrement($table, $id, $field)) {
+        if (! $this->_db->decrement($table, $id, $field)) {
             throw new Exception('There was a problem performing that action.');
         }
     }
 
     public function createTable($table, $columns, $other) {
-        if(!$this->_db->createTable($table, $columns, $other)) {
+        if (! $this->_db->createTable($table, $columns, $other)) {
             throw new Exception('There was a problem performing that action.');
         }
     }
@@ -80,90 +86,92 @@ class Queries {
         return $this->_db->lastId();
     }
 
-    public function alterTable($table, $column, $attributes){
-        if(!$this->_db->alterTable($table, $column, $attributes)) {
+    public function alterTable($table, $column, $attributes) {
+        if (! $this->_db->alterTable($table, $column, $attributes)) {
             throw new Exception('There was a problem performing that action.');
         }
     }
 
-    public function tableExists($table){
+    public function tableExists($table) {
         return $this->_db->showTables($table);
     }
 
     public function addPermissionGroup($group_id, $permission) {
-        $permissions = $this->getWhere('groups', array('id', '=', $group_id));
+        $permissions = $this->getWhere('groups', ['id', '=', $group_id]);
+
         if (count($permissions)) {
             $permissions = $permissions[0]->permissions;
             $permissions = json_decode($permissions, true);
+
             if (is_array($permissions)) {
                 $permissions[$permission] = 1;
                 $perms_json = json_encode($permissions);
-                $this->_db->update('groups', $group_id, array('permissions' => $perms_json));
+                $this->_db->update('groups', $group_id, ['permissions' => $perms_json]);
             }
         }
     }
 
-    public function dbInitialise($charset = 'latin1', $engine = 'InnoDB'){
+    public function dbInitialise($charset = 'latin1', $engine = 'InnoDB') {
         $data = $this->_db->showTables('settings');
-        if(!empty($data)){
+
+        if (! empty($data)){
             return '<div class="alert alert-warning">Database already initialised!</div>';
-        } else {
-            $data = $this->_db->createTable("alerts", " `id` int(11) NOT NULL AUTO_INCREMENT, `user_id` int(11) NOT NULL, `type` varchar(64) NOT NULL, `url` varchar(255) NOT NULL, `content_short` varchar(128) NOT NULL, `content` varchar(512) NOT NULL, `created` int(11) NOT NULL, `read` tinyint(1) NOT NULL DEFAULT '0', PRIMARY KEY (`id`)", "ENGINE=$engine DEFAULT CHARSET=$charset");
-            $data = $this->_db->createTable("blocked_users", " `id` int(11) NOT NULL AUTO_INCREMENT, `user_id` int(11) NOT NULL, `user_blocked_id` int(11) NOT NULL, PRIMARY KEY (`id`)", "ENGINE=$engine DEFAULT CHARSET=$charset");
-            $data = $this->_db->createTable("custom_announcements", " `id` int(11) NOT NULL AUTO_INCREMENT, `pages` varchar(1024) NOT NULL, `groups` varchar(1024) NOT NULL, `text_colour` varchar(7) NOT NULL, `background_colour` varchar(7) NOT NULL, `icon` varchar(64) NOT NULL, `closable` tinyint(1) NOT NULL DEFAULT '0', `header` varchar(64) NOT NULL, `message` varchar(1024) NOT NULL, PRIMARY KEY (`id`)", "ENGINE=$engine DEFAULT CHARSET=$charset");
-            $data = $this->_db->createTable("custom_pages", " `id` int(11) NOT NULL AUTO_INCREMENT, `url` varchar(20) NOT NULL, `title` varchar(30) NOT NULL, `content` mediumtext NOT NULL, `link_location` tinyint(1) NOT NULL DEFAULT '1', `redirect` tinyint(1) NOT NULL DEFAULT '0', `link` varchar(512) DEFAULT NULL, `target` tinyint(1) NOT NULL DEFAULT '0', `icon` varchar(64) DEFAULT NULL, `all_html` tinyint(1) NOT NULL DEFAULT '0', `sitemap` tinyint(1) NOT NULL DEFAULT '0', `basic` tinyint(1) NOT NULL DEFAULT '0', PRIMARY KEY (`id`)", "ENGINE=$engine DEFAULT CHARSET=$charset");
-            $data = $this->_db->createTable("custom_pages_permissions", " `id` int(11) NOT NULL AUTO_INCREMENT, `page_id` int(11) NOT NULL, `group_id` int(11) NOT NULL, `view` tinyint(4) NOT NULL DEFAULT '0', PRIMARY KEY (`id`)", "ENGINE=$engine DEFAULT CHARSET=$charset");
-            $data = $this->_db->createTable("discord_verifications", "`id` int(11) NOT NULL AUTO_INCREMENT, `token` varchar(23) NOT NULL, `user_id` int(11) NOT NULL, PRIMARY KEY (`id`)", "ENGINE=$engine DEFAULT CHARSET=$charset");
-            $data = $this->_db->createTable("email_errors", " `id` int(11) NOT NULL AUTO_INCREMENT, `type` int(11) NOT NULL, `content` text NOT NULL, `at` int(11) NOT NULL, `user_id` int(11) DEFAULT NULL, PRIMARY KEY (`id`)", "ENGINE=$engine DEFAULT CHARSET=$charset");
-            $data = $this->_db->createTable("forums", " `id` int(11) NOT NULL AUTO_INCREMENT, `forum_title` varchar(150) NOT NULL, `forum_description` varchar(255) DEFAULT NULL, `last_post_date` int(11) DEFAULT NULL, `last_user_posted` int(11) DEFAULT NULL, `last_topic_posted` int(11) DEFAULT NULL, `parent` int(11) NOT NULL DEFAULT '0', `forum_order` int(11) NOT NULL, `news` tinyint(1) NOT NULL DEFAULT '0', `forum_type` varchar(255) NOT NULL DEFAULT 'forum', `redirect_forum` tinyint(1) NOT NULL DEFAULT '0', `redirect_url` varchar(512) DEFAULT NULL, `icon` varchar(256) DEFAULT NULL, `topic_placeholder` mediumtext, `hooks` varchar(512) NULL DEFAULT NULL, `default_labels` varchar(128) DEFAULT NULL, PRIMARY KEY (`id`)", "ENGINE=$engine DEFAULT CHARSET=$charset");
-            $data = $this->_db->createTable("forums_labels", " `id` int(11) NOT NULL AUTO_INCREMENT, `name` varchar(32) NOT NULL, `html` varchar(1024) NOT NULL, PRIMARY KEY (`id`)", "ENGINE=$engine DEFAULT CHARSET=$charset");
-            $data = $this->_db->createTable("forums_permissions", " `id` int(11) NOT NULL AUTO_INCREMENT, `group_id` int(11) NOT NULL, `forum_id` int(11) NOT NULL, `view` tinyint(1) NOT NULL DEFAULT '0', `create_topic` tinyint(1) NOT NULL DEFAULT '0', `edit_topic` tinyint(1) NOT NULL DEFAULT '0', `create_post` tinyint(1) NOT NULL DEFAULT '0', `view_other_topics` tinyint(1) NOT NULL DEFAULT '0', `moderate` tinyint(1) NOT NULL DEFAULT '0', PRIMARY KEY (`id`)", "ENGINE=$engine DEFAULT CHARSET=$charset");
-            $data = $this->_db->createTable("forums_reactions", " `id` int(11) NOT NULL AUTO_INCREMENT, `post_id` int(11) NOT NULL, `user_received` int(11) NOT NULL, `user_given` int(11) NOT NULL, `reaction_id` int(11) NOT NULL, `time` int(11) NOT NULL, PRIMARY KEY (`id`)", "ENGINE=$engine DEFAULT CHARSET=$charset");
-            $data = $this->_db->createTable("forums_topic_labels", " `id` int(11) NOT NULL AUTO_INCREMENT, `fids` varchar(128) NOT NULL, `name` varchar(32) NOT NULL, `label` varchar(20) NOT NULL, `gids` varchar(256) DEFAULT NULL, PRIMARY KEY (`id`)", "ENGINE=$engine DEFAULT CHARSET=$charset");
-            $data = $this->_db->createTable("friends", " `id` int(11) NOT NULL AUTO_INCREMENT, `user_id` int(11) NOT NULL, `friend_id` int(11) NOT NULL, `notify` tinyint(1) NOT NULL DEFAULT '0', PRIMARY KEY (`id`)", "ENGINE=$engine DEFAULT CHARSET=$charset");
-            $data = $this->_db->createTable("groups", "`id` int(11) NOT NULL AUTO_INCREMENT, `name` varchar(20) NOT NULL, `group_html` varchar(1024) NOT NULL, `group_html_lg` varchar(1024) NOT NULL, `group_username_color` varchar(256) DEFAULT NULL, `group_username_css` varchar(256) DEFAULT NULL, `admin_cp` tinyint(1) NOT NULL DEFAULT '0', `staff` tinyint(1) NOT NULL DEFAULT '0', `permissions` mediumtext, `default_group` tinyint(1) NOT NULL DEFAULT '0', `order` int(11) NOT NULL DEFAULT '1', `force_tfa` tinyint(1) NOT NULL DEFAULT '0', `deleted` int(11) NOT NULL DEFAULT '0', PRIMARY KEY (`id`)", "ENGINE=$engine DEFAULT CHARSET=$charset");
-            $data = $this->_db->createTable("groups_templates", " `id` int(11) NOT NULL AUTO_INCREMENT, `group_id` int(11) NOT NULL, `template_id` int(11) NOT NULL, `can_use_template` tinyint(1) NOT NULL DEFAULT '1', PRIMARY KEY (`id`)", "ENGINE=$engine DEFAULT CHARSET=$charset");
-            $data = $this->_db->createTable("group_sync", " `id` int(11) NOT NULL AUTO_INCREMENT, `ingame_rank_name` varchar(64) NOT NULL, `discord_role_id` bigint(18) DEFAULT NULL, `website_group_id` int(11) NOT NULL, PRIMARY KEY (`id`)", "ENGINE=$engine DEFAULT CHARSET=$charset");
-            $data = $this->_db->createTable("hooks", " `id` int(11) NOT NULL AUTO_INCREMENT, `name` varchar(128) NOT NULL, `action` int(11) NOT NULL, `url` varchar(2048) NOT NULL, `events` varchar(2048) NOT NULL, PRIMARY KEY (`id`)", "ENGINE=$engine DEFAULT CHARSET=$charset");
-            $data = $this->_db->createTable("ip_bans", " `id` int(11) NOT NULL AUTO_INCREMENT, `ip` varchar(128) NOT NULL, `banned_by` int(11) NOT NULL, `banned_at` int(11) NOT NULL, `reason` varchar(255) DEFAULT NULL, PRIMARY KEY (`id`)", "ENGINE=$engine DEFAULT CHARSET=$charset");
-            $data = $this->_db->createTable("infractions", " `id` int(11) NOT NULL AUTO_INCREMENT, `type` int(11) NOT NULL, `punished` int(11) NOT NULL, `staff` int(11) NOT NULL, `reason` text NOT NULL, `infraction_date` datetime NOT NULL, `created` int(11) DEFAULT NULL, `acknowledged` tinyint(1) NOT NULL, `revoked` tinyint(1) NOT NULL DEFAULT '0', `revoked_by` int(11) DEFAULT NULL, `revoked_at` int(11) DEFAULT NULL, PRIMARY KEY (`id`)", "ENGINE=$engine DEFAULT CHARSET=$charset");
-            $data = $this->_db->createTable("languages", " `id` int(11) NOT NULL AUTO_INCREMENT, `name` varchar(64) NOT NULL, `is_default` tinyint(1) NOT NULL DEFAULT '0', PRIMARY KEY (`id`)", "ENGINE=$engine DEFAULT CHARSET=$charset");
-            $data = $this->_db->createTable("logs", " `id` int(11) NOT NULL AUTO_INCREMENT, `time` int(11) NOT NULL, `action` mediumtext NOT NULL, `ip` varchar(128) NOT NULL, `user_id` int(11) NOT NULL, `info` mediumtext, PRIMARY KEY (`id`)", "ENGINE=$engine DEFAULT CHARSET=$charset");
-            $data = $this->_db->createTable("mc_servers", " `id` int(11) NOT NULL AUTO_INCREMENT, `ip` varchar(64) NOT NULL, `query_ip` varchar(64) NOT NULL, `name` varchar(20) NOT NULL, `is_default` tinyint(1) NOT NULL DEFAULT '0', `display` tinyint(1) NOT NULL DEFAULT '1', `pre` tinyint(1) NOT NULL DEFAULT '0', `player_list` tinyint(1) NOT NULL DEFAULT '1', `parent_server` int(11) NOT NULL DEFAULT '0', `bungee` tinyint(1) NOT NULL DEFAULT '0', `port` int(11) DEFAULT NULL, `query_port` int(11) DEFAULT '25565', `banner_background` varchar(32) NOT NULL DEFAULT 'background.png', `show_ip` tinyint(1) NOT NULL DEFAULT '1', `order` int(11) NOT NULL DEFAULT '1', PRIMARY KEY (`id`)", "ENGINE=$engine DEFAULT CHARSET=$charset");
-            $data = $this->_db->createTable("modules", " `id` int(11) NOT NULL AUTO_INCREMENT, `name` varchar(64) NOT NULL, `enabled` tinyint(1) NOT NULL DEFAULT '0', PRIMARY KEY (`id`)", "ENGINE=$engine DEFAULT CHARSET=$charset");
-            $data = $this->_db->createTable("online_guests", " `id` int(11) NOT NULL AUTO_INCREMENT, `ip` varchar(128) NOT NULL, `last_seen` int(11) NOT NULL, PRIMARY KEY (`id`)", "ENGINE=$engine DEFAULT CHARSET=$charset");
-            $data = $this->_db->createTable("page_descriptions", " `id` int(11) NOT NULL AUTO_INCREMENT, `page` varchar(64) NOT NULL, `description` varchar(500) DEFAULT NULL, `tags` text, PRIMARY KEY (`id`)", "ENGINE=$engine DEFAULT CHARSET=$charset");
-            $data = $this->_db->createTable("panel_templates", " `id` int(11) NOT NULL AUTO_INCREMENT, `name` varchar(64) NOT NULL, `enabled` tinyint(1) NOT NULL DEFAULT '0', `is_default` tinyint(1) NOT NULL DEFAULT '0', PRIMARY KEY (`id`)", "ENGINE=$engine DEFAULT CHARSET=$charset");
-            $data = $this->_db->createTable("posts", " `id` int(11) NOT NULL AUTO_INCREMENT, `forum_id` int(11) NOT NULL, `topic_id` int(11) NOT NULL, `post_creator` int(11) NOT NULL, `post_content` mediumtext NOT NULL, `post_date` datetime DEFAULT NULL, `last_edited` int(11) DEFAULT NULL, `ip_address` varchar(128) DEFAULT NULL, `deleted` tinyint(1) NOT NULL DEFAULT '0', `created` int(11) DEFAULT NULL, PRIMARY KEY (`id`)", "ENGINE=$engine DEFAULT CHARSET=$charset");
-            $data = $this->_db->createTable("privacy_terms", " `id` int(11) NOT NULL AUTO_INCREMENT, `name` varchar(8) NOT NULL, `value` mediumtext NOT NULL, PRIMARY KEY (`id`)", "ENGINE=$engine DEFAULT CHARSET=$charset");
-            $data = $this->_db->createTable("private_messages", " `id` int(11) NOT NULL AUTO_INCREMENT, `author_id` int(11) NOT NULL, `title` varchar(128) NOT NULL, `created` int(11) NOT NULL, `last_reply_user` int(11) NOT NULL, `last_reply_date` int(11) NOT NULL, PRIMARY KEY (`id`)", "ENGINE=$engine DEFAULT CHARSET=$charset");
-            $data = $this->_db->createTable("private_messages_replies", " `id` int(11) NOT NULL AUTO_INCREMENT, `pm_id` int(11) NOT NULL, `author_id` int(11) NOT NULL, `created` int(11) NOT NULL, `content` mediumtext NOT NULL, PRIMARY KEY (`id`)", "ENGINE=$engine DEFAULT CHARSET=$charset");
-            $data = $this->_db->createTable("private_messages_users", " `id` int(11) NOT NULL AUTO_INCREMENT, `pm_id` int(11) NOT NULL, `user_id` int(11) NOT NULL, `read` tinyint(1) NOT NULL DEFAULT '0', PRIMARY KEY (`id`)", "ENGINE=$engine DEFAULT CHARSET=$charset");
-            $data = $this->_db->createTable("profile_fields", " `id` int(11) NOT NULL AUTO_INCREMENT, `name` varchar(16) NOT NULL, `type` int(11) NOT NULL DEFAULT '1', `public` tinyint(1) NOT NULL DEFAULT '1', `required` tinyint(1) NOT NULL DEFAULT '0', `description` text, `length` int(11) DEFAULT NULL, `forum_posts` tinyint(1) NOT NULL DEFAULT '0', `editable` tinyint(1) NOT NULL DEFAULT '1', PRIMARY KEY (`id`)", "ENGINE=$engine DEFAULT CHARSET=$charset");
-            $data = $this->_db->createTable("query_errors", " `id` int(11) NOT NULL AUTO_INCREMENT, `date` int(11) NOT NULL, `error` varchar(2048) NOT NULL, `ip` varchar(64) NOT NULL, `port` int(6) NOT NULL, PRIMARY KEY (`id`)", "ENGINE=$engine DEFAULT CHARSET=$charset");
-            $data = $this->_db->createTable("query_results", " `id` int(11) NOT NULL AUTO_INCREMENT, `server_id` int(11) NOT NULL, `queried_at` int(11) NOT NULL, `players_online` int(11) NOT NULL, `extra` text, `groups` text, PRIMARY KEY (`id`)", "ENGINE=$engine DEFAULT CHARSET=$charset");
-            $data = $this->_db->createTable("reactions", " `id` int(11) NOT NULL AUTO_INCREMENT, `name` varchar(16) NOT NULL, `html` varchar(255) NOT NULL, `enabled` tinyint(1) NOT NULL DEFAULT '1', `type` tinyint(1) NOT NULL DEFAULT '2', PRIMARY KEY (`id`)", "ENGINE=$engine DEFAULT CHARSET=$charset");
-            $data = $this->_db->createTable("reports", " `id` int(11) NOT NULL AUTO_INCREMENT, `type` tinyint(1) NOT NULL, `reporter_id` int(11) NOT NULL, `reported_id` int(11) NOT NULL, `status` tinyint(1) NOT NULL DEFAULT '0', `date_reported` datetime NOT NULL, `date_updated` datetime NOT NULL, `reported` int(11) DEFAULT NULL, `updated` int(11) DEFAULT NULL, `report_reason` mediumtext NOT NULL, `updated_by` int(11) NOT NULL, `reported_post` int(11) DEFAULT NULL, `link` varchar(128) DEFAULT NULL, `reported_mcname` varchar(64) DEFAULT NULL, `reported_uuid` varchar(64) DEFAULT NULL, PRIMARY KEY (`id`)", "ENGINE=$engine DEFAULT CHARSET=$charset");
-            $data = $this->_db->createTable("reports_comments", " `id` int(11) NOT NULL AUTO_INCREMENT, `report_id` int(11) NOT NULL, `commenter_id` int(11) NOT NULL, `comment_date` datetime NOT NULL, `date` int(11) DEFAULT NULL, `comment_content` mediumtext NOT NULL, PRIMARY KEY (`id`)", "ENGINE=$engine DEFAULT CHARSET=$charset");
-            $data = $this->_db->createTable("settings", " `id` int(11) NOT NULL AUTO_INCREMENT, `name` varchar(64) NOT NULL, `value` varchar(2048) DEFAULT NULL, PRIMARY KEY (`id`)", "ENGINE=$engine DEFAULT CHARSET=$charset");
-            $data = $this->_db->createTable("templates", " `id` int(11) NOT NULL AUTO_INCREMENT, `name` varchar(64) NOT NULL, `enabled` tinyint(1) NOT NULL DEFAULT '0', `is_default` tinyint(1) NOT NULL DEFAULT '0', PRIMARY KEY (`id`)", "ENGINE=$engine DEFAULT CHARSET=$charset");
-            $data = $this->_db->createTable("topics", " `id` int(11) NOT NULL AUTO_INCREMENT, `forum_id` int(11) NOT NULL, `topic_title` varchar(150) NOT NULL, `topic_creator` int(11) NOT NULL, `topic_last_user` int(11) NOT NULL, `topic_date` int(11) NOT NULL, `topic_reply_date` int(11) NOT NULL, `topic_views` int(11) NOT NULL DEFAULT '0', `locked` tinyint(1) NOT NULL DEFAULT '0', `sticky` tinyint(1) NOT NULL DEFAULT '0', `label` int(11) DEFAULT NULL, `deleted` tinyint(1) NOT NULL DEFAULT '0', `labels` VARCHAR(128) NULL DEFAULT NULL, PRIMARY KEY (`id`)", "ENGINE=$engine DEFAULT CHARSET=$charset");
-            $data = $this->_db->createTable("topics_following", "`id` int(11) NOT NULL AUTO_INCREMENT, `topic_id` int(11) NOT NULL, `user_id` int(11) NOT NULL, `existing_alerts` tinyint(1) NOT NULL DEFAULT '0', PRIMARY KEY (`id`)", "ENGINE=$engine DEFAULT CHARSET=$charset");
-            $data = $this->_db->createTable("users", " `id` int(11) NOT NULL AUTO_INCREMENT, `username` varchar(20) NOT NULL, `nickname` varchar(20) NOT NULL, `password` varchar(255) NOT NULL, `pass_method` varchar(12) NOT NULL DEFAULT 'default', `uuid` varchar(32) NOT NULL, `joined` int(11) NOT NULL, `email` varchar(64) NOT NULL, `isbanned` tinyint(1) NOT NULL DEFAULT '0', `lastip` varchar(128) DEFAULT NULL, `active` tinyint(1) NOT NULL DEFAULT '0', `signature` mediumtext, `profile_views` int(11) NOT NULL DEFAULT '0', `reputation` int(11) NOT NULL DEFAULT '0', `reset_code` varchar(60) DEFAULT NULL, `has_avatar` tinyint(1) NOT NULL DEFAULT '0', `gravatar` tinyint(1) NOT NULL DEFAULT '0', `topic_updates` tinyint(1) NOT NULL DEFAULT '1', `private_profile` tinyint(1) NOT NULL DEFAULT '0', `last_online` int(11) DEFAULT NULL, `user_title` varchar(64) DEFAULT NULL, `theme_id` int(11) DEFAULT NULL, `language_id` int(11) DEFAULT NULL, `warning_points` int(11) NOT NULL DEFAULT '0', `night_mode` tinyint(1) NOT NULL DEFAULT '0', `last_username_update` int(11) NOT NULL DEFAULT '0', `tfa_enabled` tinyint(1) NOT NULL DEFAULT '0', `tfa_type` int(11) NOT NULL DEFAULT '0', `tfa_secret` varchar(256) DEFAULT NULL, `tfa_complete` tinyint(1) NOT NULL DEFAULT '0', `banner` varchar(64) DEFAULT NULL, `timezone` varchar(32) NOT NULL DEFAULT 'Europe/London', `avatar_updated` int(11) DEFAULT NULL, `discord_id` bigint(18) NULL DEFAULT NULL, `discord_username` varchar(128) NULL DEFAULT NULL, PRIMARY KEY (`id`)", "ENGINE=$engine DEFAULT CHARSET=$charset");
-            $data = $this->_db->createTable("users_groups", " `id` int(11) NOT NULL AUTO_INCREMENT, `user_id` int(11) NOT NULL, `group_id` int(11) NOT NULL, `received` int(11) NOT NULL DEFAULT '0', `expire` int(11) NOT NULL DEFAULT '0', PRIMARY KEY (`id`)", "ENGINE=$engine DEFAULT CHARSET=$charset");
-            $data = $this->_db->createTable("users_admin_session", " `id` int(11) NOT NULL AUTO_INCREMENT, `user_id` int(11) NOT NULL, `hash` varchar(64) NOT NULL, PRIMARY KEY (`id`)", "ENGINE=$engine DEFAULT CHARSET=$charset");
-            $data = $this->_db->createTable("users_ips", " `id` int(11) NOT NULL AUTO_INCREMENT, `user_id` int(11) NOT NULL, `ip` varchar(128) NOT NULL, PRIMARY KEY (`id`)", "ENGINE=$engine DEFAULT CHARSET=$charset");
-            $data = $this->_db->createTable("users_profile_fields", " `id` int(11) NOT NULL AUTO_INCREMENT, `user_id` int(11) NOT NULL, `field_id` int(11) NOT NULL, `value` mediumtext, PRIMARY KEY (`id`)", "ENGINE=$engine DEFAULT CHARSET=$charset");
-            $data = $this->_db->createTable("users_session", " `id` int(11) NOT NULL AUTO_INCREMENT, `user_id` int(11) NOT NULL, `hash` varchar(64) NOT NULL, PRIMARY KEY (`id`)", "ENGINE=$engine DEFAULT CHARSET=$charset");
-            $data = $this->_db->createTable("users_username_history", " `id` int(11) NOT NULL AUTO_INCREMENT, `user_id` int(11) NOT NULL, `changed_to` varchar(64) NOT NULL, `changed_at` int(11) NOT NULL, `original` tinyint(1) NOT NULL DEFAULT '0', PRIMARY KEY (`id`)", "ENGINE=$engine DEFAULT CHARSET=$charset");
-            $data = $this->_db->createTable("user_profile_wall_posts", " `id` int(11) NOT NULL AUTO_INCREMENT, `user_id` int(11) NOT NULL, `author_id` int(11) NOT NULL, `time` int(11) NOT NULL, `content` mediumtext NOT NULL, PRIMARY KEY (`id`)", "ENGINE=$engine DEFAULT CHARSET=$charset");
-            $data = $this->_db->createTable("user_profile_wall_posts_reactions", " `id` int(11) NOT NULL AUTO_INCREMENT, `user_id` int(11) NOT NULL, `post_id` int(11) NOT NULL, `reaction_id` int(11) NOT NULL, `time` int(11) NOT NULL, PRIMARY KEY (`id`)", "ENGINE=$engine DEFAULT CHARSET=$charset");
-            $data = $this->_db->createTable("user_profile_wall_posts_replies", " `id` int(11) NOT NULL AUTO_INCREMENT, `post_id` int(11) NOT NULL, `author_id` int(11) NOT NULL, `time` int(11) NOT NULL, `content` mediumtext NOT NULL, PRIMARY KEY (`id`)", "ENGINE=$engine DEFAULT CHARSET=$charset");
-            $data = $this->_db->createTable("uuid_cache", " `id` int(11) NOT NULL AUTO_INCREMENT, `mcname` varchar(20) NOT NULL, `uuid` varchar(64) NOT NULL, PRIMARY KEY (`id`)", "ENGINE=$engine DEFAULT CHARSET=$charset");
-            $data = $this->_db->createTable("widgets", " `id` int(11) NOT NULL AUTO_INCREMENT, `name` varchar(20) NOT NULL, `enabled` tinyint(1) NOT NULL DEFAULT '0', `pages` text, `order` int(11) NOT NULL DEFAULT '10', `location` varchar(5) NOT NULL DEFAULT 'right', PRIMARY KEY (`id`)", "ENGINE=$engine DEFAULT CHARSET=$charset");
+        }
+            $data = $this->_db->createTable('alerts', " `id` int(11) NOT NULL AUTO_INCREMENT, `user_id` int(11) NOT NULL, `type` varchar(64) NOT NULL, `url` varchar(255) NOT NULL, `content_short` varchar(128) NOT NULL, `content` varchar(512) NOT NULL, `created` int(11) NOT NULL, `read` tinyint(1) NOT NULL DEFAULT '0', PRIMARY KEY (`id`)", "ENGINE=$engine DEFAULT CHARSET=$charset");
+            $data = $this->_db->createTable('blocked_users', ' `id` int(11) NOT NULL AUTO_INCREMENT, `user_id` int(11) NOT NULL, `user_blocked_id` int(11) NOT NULL, PRIMARY KEY (`id`)', "ENGINE=$engine DEFAULT CHARSET=$charset");
+            $data = $this->_db->createTable('custom_announcements', " `id` int(11) NOT NULL AUTO_INCREMENT, `pages` varchar(1024) NOT NULL, `groups` varchar(1024) NOT NULL, `text_colour` varchar(7) NOT NULL, `background_colour` varchar(7) NOT NULL, `icon` varchar(64) NOT NULL, `closable` tinyint(1) NOT NULL DEFAULT '0', `header` varchar(64) NOT NULL, `message` varchar(1024) NOT NULL, PRIMARY KEY (`id`)", "ENGINE=$engine DEFAULT CHARSET=$charset");
+            $data = $this->_db->createTable('custom_pages', " `id` int(11) NOT NULL AUTO_INCREMENT, `url` varchar(20) NOT NULL, `title` varchar(30) NOT NULL, `content` mediumtext NOT NULL, `link_location` tinyint(1) NOT NULL DEFAULT '1', `redirect` tinyint(1) NOT NULL DEFAULT '0', `link` varchar(512) DEFAULT NULL, `target` tinyint(1) NOT NULL DEFAULT '0', `icon` varchar(64) DEFAULT NULL, `all_html` tinyint(1) NOT NULL DEFAULT '0', `sitemap` tinyint(1) NOT NULL DEFAULT '0', `basic` tinyint(1) NOT NULL DEFAULT '0', PRIMARY KEY (`id`)", "ENGINE=$engine DEFAULT CHARSET=$charset");
+            $data = $this->_db->createTable('custom_pages_permissions', " `id` int(11) NOT NULL AUTO_INCREMENT, `page_id` int(11) NOT NULL, `group_id` int(11) NOT NULL, `view` tinyint(4) NOT NULL DEFAULT '0', PRIMARY KEY (`id`)", "ENGINE=$engine DEFAULT CHARSET=$charset");
+            $data = $this->_db->createTable('discord_verifications', '`id` int(11) NOT NULL AUTO_INCREMENT, `token` varchar(23) NOT NULL, `user_id` int(11) NOT NULL, PRIMARY KEY (`id`)', "ENGINE=$engine DEFAULT CHARSET=$charset");
+            $data = $this->_db->createTable('email_errors', ' `id` int(11) NOT NULL AUTO_INCREMENT, `type` int(11) NOT NULL, `content` text NOT NULL, `at` int(11) NOT NULL, `user_id` int(11) DEFAULT NULL, PRIMARY KEY (`id`)', "ENGINE=$engine DEFAULT CHARSET=$charset");
+            $data = $this->_db->createTable('forums', " `id` int(11) NOT NULL AUTO_INCREMENT, `forum_title` varchar(150) NOT NULL, `forum_description` varchar(255) DEFAULT NULL, `last_post_date` int(11) DEFAULT NULL, `last_user_posted` int(11) DEFAULT NULL, `last_topic_posted` int(11) DEFAULT NULL, `parent` int(11) NOT NULL DEFAULT '0', `forum_order` int(11) NOT NULL, `news` tinyint(1) NOT NULL DEFAULT '0', `forum_type` varchar(255) NOT NULL DEFAULT 'forum', `redirect_forum` tinyint(1) NOT NULL DEFAULT '0', `redirect_url` varchar(512) DEFAULT NULL, `icon` varchar(256) DEFAULT NULL, `topic_placeholder` mediumtext, `hooks` varchar(512) NULL DEFAULT NULL, `default_labels` varchar(128) DEFAULT NULL, PRIMARY KEY (`id`)", "ENGINE=$engine DEFAULT CHARSET=$charset");
+            $data = $this->_db->createTable('forums_labels', ' `id` int(11) NOT NULL AUTO_INCREMENT, `name` varchar(32) NOT NULL, `html` varchar(1024) NOT NULL, PRIMARY KEY (`id`)', "ENGINE=$engine DEFAULT CHARSET=$charset");
+            $data = $this->_db->createTable('forums_permissions', " `id` int(11) NOT NULL AUTO_INCREMENT, `group_id` int(11) NOT NULL, `forum_id` int(11) NOT NULL, `view` tinyint(1) NOT NULL DEFAULT '0', `create_topic` tinyint(1) NOT NULL DEFAULT '0', `edit_topic` tinyint(1) NOT NULL DEFAULT '0', `create_post` tinyint(1) NOT NULL DEFAULT '0', `view_other_topics` tinyint(1) NOT NULL DEFAULT '0', `moderate` tinyint(1) NOT NULL DEFAULT '0', PRIMARY KEY (`id`)", "ENGINE=$engine DEFAULT CHARSET=$charset");
+            $data = $this->_db->createTable('forums_reactions', ' `id` int(11) NOT NULL AUTO_INCREMENT, `post_id` int(11) NOT NULL, `user_received` int(11) NOT NULL, `user_given` int(11) NOT NULL, `reaction_id` int(11) NOT NULL, `time` int(11) NOT NULL, PRIMARY KEY (`id`)', "ENGINE=$engine DEFAULT CHARSET=$charset");
+            $data = $this->_db->createTable('forums_topic_labels', ' `id` int(11) NOT NULL AUTO_INCREMENT, `fids` varchar(128) NOT NULL, `name` varchar(32) NOT NULL, `label` varchar(20) NOT NULL, `gids` varchar(256) DEFAULT NULL, PRIMARY KEY (`id`)', "ENGINE=$engine DEFAULT CHARSET=$charset");
+            $data = $this->_db->createTable('friends', " `id` int(11) NOT NULL AUTO_INCREMENT, `user_id` int(11) NOT NULL, `friend_id` int(11) NOT NULL, `notify` tinyint(1) NOT NULL DEFAULT '0', PRIMARY KEY (`id`)", "ENGINE=$engine DEFAULT CHARSET=$charset");
+            $data = $this->_db->createTable('groups', "`id` int(11) NOT NULL AUTO_INCREMENT, `name` varchar(20) NOT NULL, `group_html` varchar(1024) NOT NULL, `group_html_lg` varchar(1024) NOT NULL, `group_username_color` varchar(256) DEFAULT NULL, `group_username_css` varchar(256) DEFAULT NULL, `admin_cp` tinyint(1) NOT NULL DEFAULT '0', `staff` tinyint(1) NOT NULL DEFAULT '0', `permissions` mediumtext, `default_group` tinyint(1) NOT NULL DEFAULT '0', `order` int(11) NOT NULL DEFAULT '1', `force_tfa` tinyint(1) NOT NULL DEFAULT '0', `deleted` int(11) NOT NULL DEFAULT '0', PRIMARY KEY (`id`)", "ENGINE=$engine DEFAULT CHARSET=$charset");
+            $data = $this->_db->createTable('groups_templates', " `id` int(11) NOT NULL AUTO_INCREMENT, `group_id` int(11) NOT NULL, `template_id` int(11) NOT NULL, `can_use_template` tinyint(1) NOT NULL DEFAULT '1', PRIMARY KEY (`id`)", "ENGINE=$engine DEFAULT CHARSET=$charset");
+            $data = $this->_db->createTable('group_sync', ' `id` int(11) NOT NULL AUTO_INCREMENT, `ingame_rank_name` varchar(64) NOT NULL, `discord_role_id` bigint(18) DEFAULT NULL, `website_group_id` int(11) NOT NULL, PRIMARY KEY (`id`)', "ENGINE=$engine DEFAULT CHARSET=$charset");
+            $data = $this->_db->createTable('hooks', ' `id` int(11) NOT NULL AUTO_INCREMENT, `name` varchar(128) NOT NULL, `action` int(11) NOT NULL, `url` varchar(2048) NOT NULL, `events` varchar(2048) NOT NULL, PRIMARY KEY (`id`)', "ENGINE=$engine DEFAULT CHARSET=$charset");
+            $data = $this->_db->createTable('ip_bans', ' `id` int(11) NOT NULL AUTO_INCREMENT, `ip` varchar(128) NOT NULL, `banned_by` int(11) NOT NULL, `banned_at` int(11) NOT NULL, `reason` varchar(255) DEFAULT NULL, PRIMARY KEY (`id`)', "ENGINE=$engine DEFAULT CHARSET=$charset");
+            $data = $this->_db->createTable('infractions', " `id` int(11) NOT NULL AUTO_INCREMENT, `type` int(11) NOT NULL, `punished` int(11) NOT NULL, `staff` int(11) NOT NULL, `reason` text NOT NULL, `infraction_date` datetime NOT NULL, `created` int(11) DEFAULT NULL, `acknowledged` tinyint(1) NOT NULL, `revoked` tinyint(1) NOT NULL DEFAULT '0', `revoked_by` int(11) DEFAULT NULL, `revoked_at` int(11) DEFAULT NULL, PRIMARY KEY (`id`)", "ENGINE=$engine DEFAULT CHARSET=$charset");
+            $data = $this->_db->createTable('languages', " `id` int(11) NOT NULL AUTO_INCREMENT, `name` varchar(64) NOT NULL, `is_default` tinyint(1) NOT NULL DEFAULT '0', PRIMARY KEY (`id`)", "ENGINE=$engine DEFAULT CHARSET=$charset");
+            $data = $this->_db->createTable('logs', ' `id` int(11) NOT NULL AUTO_INCREMENT, `time` int(11) NOT NULL, `action` mediumtext NOT NULL, `ip` varchar(128) NOT NULL, `user_id` int(11) NOT NULL, `info` mediumtext, PRIMARY KEY (`id`)', "ENGINE=$engine DEFAULT CHARSET=$charset");
+            $data = $this->_db->createTable('mc_servers', " `id` int(11) NOT NULL AUTO_INCREMENT, `ip` varchar(64) NOT NULL, `query_ip` varchar(64) NOT NULL, `name` varchar(20) NOT NULL, `is_default` tinyint(1) NOT NULL DEFAULT '0', `display` tinyint(1) NOT NULL DEFAULT '1', `pre` tinyint(1) NOT NULL DEFAULT '0', `player_list` tinyint(1) NOT NULL DEFAULT '1', `parent_server` int(11) NOT NULL DEFAULT '0', `bungee` tinyint(1) NOT NULL DEFAULT '0', `port` int(11) DEFAULT NULL, `query_port` int(11) DEFAULT '25565', `banner_background` varchar(32) NOT NULL DEFAULT 'background.png', `show_ip` tinyint(1) NOT NULL DEFAULT '1', `order` int(11) NOT NULL DEFAULT '1', PRIMARY KEY (`id`)", "ENGINE=$engine DEFAULT CHARSET=$charset");
+            $data = $this->_db->createTable('modules', " `id` int(11) NOT NULL AUTO_INCREMENT, `name` varchar(64) NOT NULL, `enabled` tinyint(1) NOT NULL DEFAULT '0', PRIMARY KEY (`id`)", "ENGINE=$engine DEFAULT CHARSET=$charset");
+            $data = $this->_db->createTable('online_guests', ' `id` int(11) NOT NULL AUTO_INCREMENT, `ip` varchar(128) NOT NULL, `last_seen` int(11) NOT NULL, PRIMARY KEY (`id`)', "ENGINE=$engine DEFAULT CHARSET=$charset");
+            $data = $this->_db->createTable('page_descriptions', ' `id` int(11) NOT NULL AUTO_INCREMENT, `page` varchar(64) NOT NULL, `description` varchar(500) DEFAULT NULL, `tags` text, PRIMARY KEY (`id`)', "ENGINE=$engine DEFAULT CHARSET=$charset");
+            $data = $this->_db->createTable('panel_templates', " `id` int(11) NOT NULL AUTO_INCREMENT, `name` varchar(64) NOT NULL, `enabled` tinyint(1) NOT NULL DEFAULT '0', `is_default` tinyint(1) NOT NULL DEFAULT '0', PRIMARY KEY (`id`)", "ENGINE=$engine DEFAULT CHARSET=$charset");
+            $data = $this->_db->createTable('posts', " `id` int(11) NOT NULL AUTO_INCREMENT, `forum_id` int(11) NOT NULL, `topic_id` int(11) NOT NULL, `post_creator` int(11) NOT NULL, `post_content` mediumtext NOT NULL, `post_date` datetime DEFAULT NULL, `last_edited` int(11) DEFAULT NULL, `ip_address` varchar(128) DEFAULT NULL, `deleted` tinyint(1) NOT NULL DEFAULT '0', `created` int(11) DEFAULT NULL, PRIMARY KEY (`id`)", "ENGINE=$engine DEFAULT CHARSET=$charset");
+            $data = $this->_db->createTable('privacy_terms', ' `id` int(11) NOT NULL AUTO_INCREMENT, `name` varchar(8) NOT NULL, `value` mediumtext NOT NULL, PRIMARY KEY (`id`)', "ENGINE=$engine DEFAULT CHARSET=$charset");
+            $data = $this->_db->createTable('private_messages', ' `id` int(11) NOT NULL AUTO_INCREMENT, `author_id` int(11) NOT NULL, `title` varchar(128) NOT NULL, `created` int(11) NOT NULL, `last_reply_user` int(11) NOT NULL, `last_reply_date` int(11) NOT NULL, PRIMARY KEY (`id`)', "ENGINE=$engine DEFAULT CHARSET=$charset");
+            $data = $this->_db->createTable('private_messages_replies', ' `id` int(11) NOT NULL AUTO_INCREMENT, `pm_id` int(11) NOT NULL, `author_id` int(11) NOT NULL, `created` int(11) NOT NULL, `content` mediumtext NOT NULL, PRIMARY KEY (`id`)', "ENGINE=$engine DEFAULT CHARSET=$charset");
+            $data = $this->_db->createTable('private_messages_users', " `id` int(11) NOT NULL AUTO_INCREMENT, `pm_id` int(11) NOT NULL, `user_id` int(11) NOT NULL, `read` tinyint(1) NOT NULL DEFAULT '0', PRIMARY KEY (`id`)", "ENGINE=$engine DEFAULT CHARSET=$charset");
+            $data = $this->_db->createTable('profile_fields', " `id` int(11) NOT NULL AUTO_INCREMENT, `name` varchar(16) NOT NULL, `type` int(11) NOT NULL DEFAULT '1', `public` tinyint(1) NOT NULL DEFAULT '1', `required` tinyint(1) NOT NULL DEFAULT '0', `description` text, `length` int(11) DEFAULT NULL, `forum_posts` tinyint(1) NOT NULL DEFAULT '0', `editable` tinyint(1) NOT NULL DEFAULT '1', PRIMARY KEY (`id`)", "ENGINE=$engine DEFAULT CHARSET=$charset");
+            $data = $this->_db->createTable('query_errors', ' `id` int(11) NOT NULL AUTO_INCREMENT, `date` int(11) NOT NULL, `error` varchar(2048) NOT NULL, `ip` varchar(64) NOT NULL, `port` int(6) NOT NULL, PRIMARY KEY (`id`)', "ENGINE=$engine DEFAULT CHARSET=$charset");
+            $data = $this->_db->createTable('query_results', ' `id` int(11) NOT NULL AUTO_INCREMENT, `server_id` int(11) NOT NULL, `queried_at` int(11) NOT NULL, `players_online` int(11) NOT NULL, `extra` text, `groups` text, PRIMARY KEY (`id`)', "ENGINE=$engine DEFAULT CHARSET=$charset");
+            $data = $this->_db->createTable('reactions', " `id` int(11) NOT NULL AUTO_INCREMENT, `name` varchar(16) NOT NULL, `html` varchar(255) NOT NULL, `enabled` tinyint(1) NOT NULL DEFAULT '1', `type` tinyint(1) NOT NULL DEFAULT '2', PRIMARY KEY (`id`)", "ENGINE=$engine DEFAULT CHARSET=$charset");
+            $data = $this->_db->createTable('reports', " `id` int(11) NOT NULL AUTO_INCREMENT, `type` tinyint(1) NOT NULL, `reporter_id` int(11) NOT NULL, `reported_id` int(11) NOT NULL, `status` tinyint(1) NOT NULL DEFAULT '0', `date_reported` datetime NOT NULL, `date_updated` datetime NOT NULL, `reported` int(11) DEFAULT NULL, `updated` int(11) DEFAULT NULL, `report_reason` mediumtext NOT NULL, `updated_by` int(11) NOT NULL, `reported_post` int(11) DEFAULT NULL, `link` varchar(128) DEFAULT NULL, `reported_mcname` varchar(64) DEFAULT NULL, `reported_uuid` varchar(64) DEFAULT NULL, PRIMARY KEY (`id`)", "ENGINE=$engine DEFAULT CHARSET=$charset");
+            $data = $this->_db->createTable('reports_comments', ' `id` int(11) NOT NULL AUTO_INCREMENT, `report_id` int(11) NOT NULL, `commenter_id` int(11) NOT NULL, `comment_date` datetime NOT NULL, `date` int(11) DEFAULT NULL, `comment_content` mediumtext NOT NULL, PRIMARY KEY (`id`)', "ENGINE=$engine DEFAULT CHARSET=$charset");
+            $data = $this->_db->createTable('settings', ' `id` int(11) NOT NULL AUTO_INCREMENT, `name` varchar(64) NOT NULL, `value` varchar(2048) DEFAULT NULL, PRIMARY KEY (`id`)', "ENGINE=$engine DEFAULT CHARSET=$charset");
+            $data = $this->_db->createTable('templates', " `id` int(11) NOT NULL AUTO_INCREMENT, `name` varchar(64) NOT NULL, `enabled` tinyint(1) NOT NULL DEFAULT '0', `is_default` tinyint(1) NOT NULL DEFAULT '0', PRIMARY KEY (`id`)", "ENGINE=$engine DEFAULT CHARSET=$charset");
+            $data = $this->_db->createTable('topics', " `id` int(11) NOT NULL AUTO_INCREMENT, `forum_id` int(11) NOT NULL, `topic_title` varchar(150) NOT NULL, `topic_creator` int(11) NOT NULL, `topic_last_user` int(11) NOT NULL, `topic_date` int(11) NOT NULL, `topic_reply_date` int(11) NOT NULL, `topic_views` int(11) NOT NULL DEFAULT '0', `locked` tinyint(1) NOT NULL DEFAULT '0', `sticky` tinyint(1) NOT NULL DEFAULT '0', `label` int(11) DEFAULT NULL, `deleted` tinyint(1) NOT NULL DEFAULT '0', `labels` VARCHAR(128) NULL DEFAULT NULL, PRIMARY KEY (`id`)", "ENGINE=$engine DEFAULT CHARSET=$charset");
+            $data = $this->_db->createTable('topics_following', "`id` int(11) NOT NULL AUTO_INCREMENT, `topic_id` int(11) NOT NULL, `user_id` int(11) NOT NULL, `existing_alerts` tinyint(1) NOT NULL DEFAULT '0', PRIMARY KEY (`id`)", "ENGINE=$engine DEFAULT CHARSET=$charset");
+            $data = $this->_db->createTable('users', " `id` int(11) NOT NULL AUTO_INCREMENT, `username` varchar(20) NOT NULL, `nickname` varchar(20) NOT NULL, `password` varchar(255) NOT NULL, `pass_method` varchar(12) NOT NULL DEFAULT 'default', `uuid` varchar(32) NOT NULL, `joined` int(11) NOT NULL, `email` varchar(64) NOT NULL, `isbanned` tinyint(1) NOT NULL DEFAULT '0', `lastip` varchar(128) DEFAULT NULL, `active` tinyint(1) NOT NULL DEFAULT '0', `signature` mediumtext, `profile_views` int(11) NOT NULL DEFAULT '0', `reputation` int(11) NOT NULL DEFAULT '0', `reset_code` varchar(60) DEFAULT NULL, `has_avatar` tinyint(1) NOT NULL DEFAULT '0', `gravatar` tinyint(1) NOT NULL DEFAULT '0', `topic_updates` tinyint(1) NOT NULL DEFAULT '1', `private_profile` tinyint(1) NOT NULL DEFAULT '0', `last_online` int(11) DEFAULT NULL, `user_title` varchar(64) DEFAULT NULL, `theme_id` int(11) DEFAULT NULL, `language_id` int(11) DEFAULT NULL, `warning_points` int(11) NOT NULL DEFAULT '0', `night_mode` tinyint(1) NOT NULL DEFAULT '0', `last_username_update` int(11) NOT NULL DEFAULT '0', `tfa_enabled` tinyint(1) NOT NULL DEFAULT '0', `tfa_type` int(11) NOT NULL DEFAULT '0', `tfa_secret` varchar(256) DEFAULT NULL, `tfa_complete` tinyint(1) NOT NULL DEFAULT '0', `banner` varchar(64) DEFAULT NULL, `timezone` varchar(32) NOT NULL DEFAULT 'Europe/London', `avatar_updated` int(11) DEFAULT NULL, `discord_id` bigint(18) NULL DEFAULT NULL, `discord_username` varchar(128) NULL DEFAULT NULL, PRIMARY KEY (`id`)", "ENGINE=$engine DEFAULT CHARSET=$charset");
+            $data = $this->_db->createTable('users_groups', " `id` int(11) NOT NULL AUTO_INCREMENT, `user_id` int(11) NOT NULL, `group_id` int(11) NOT NULL, `received` int(11) NOT NULL DEFAULT '0', `expire` int(11) NOT NULL DEFAULT '0', PRIMARY KEY (`id`)", "ENGINE=$engine DEFAULT CHARSET=$charset");
+            $data = $this->_db->createTable('users_admin_session', ' `id` int(11) NOT NULL AUTO_INCREMENT, `user_id` int(11) NOT NULL, `hash` varchar(64) NOT NULL, PRIMARY KEY (`id`)', "ENGINE=$engine DEFAULT CHARSET=$charset");
+            $data = $this->_db->createTable('users_ips', ' `id` int(11) NOT NULL AUTO_INCREMENT, `user_id` int(11) NOT NULL, `ip` varchar(128) NOT NULL, PRIMARY KEY (`id`)', "ENGINE=$engine DEFAULT CHARSET=$charset");
+            $data = $this->_db->createTable('users_profile_fields', ' `id` int(11) NOT NULL AUTO_INCREMENT, `user_id` int(11) NOT NULL, `field_id` int(11) NOT NULL, `value` mediumtext, PRIMARY KEY (`id`)', "ENGINE=$engine DEFAULT CHARSET=$charset");
+            $data = $this->_db->createTable('users_session', ' `id` int(11) NOT NULL AUTO_INCREMENT, `user_id` int(11) NOT NULL, `hash` varchar(64) NOT NULL, PRIMARY KEY (`id`)', "ENGINE=$engine DEFAULT CHARSET=$charset");
+            $data = $this->_db->createTable('users_username_history', " `id` int(11) NOT NULL AUTO_INCREMENT, `user_id` int(11) NOT NULL, `changed_to` varchar(64) NOT NULL, `changed_at` int(11) NOT NULL, `original` tinyint(1) NOT NULL DEFAULT '0', PRIMARY KEY (`id`)", "ENGINE=$engine DEFAULT CHARSET=$charset");
+            $data = $this->_db->createTable('user_profile_wall_posts', ' `id` int(11) NOT NULL AUTO_INCREMENT, `user_id` int(11) NOT NULL, `author_id` int(11) NOT NULL, `time` int(11) NOT NULL, `content` mediumtext NOT NULL, PRIMARY KEY (`id`)', "ENGINE=$engine DEFAULT CHARSET=$charset");
+            $data = $this->_db->createTable('user_profile_wall_posts_reactions', ' `id` int(11) NOT NULL AUTO_INCREMENT, `user_id` int(11) NOT NULL, `post_id` int(11) NOT NULL, `reaction_id` int(11) NOT NULL, `time` int(11) NOT NULL, PRIMARY KEY (`id`)', "ENGINE=$engine DEFAULT CHARSET=$charset");
+            $data = $this->_db->createTable('user_profile_wall_posts_replies', ' `id` int(11) NOT NULL AUTO_INCREMENT, `post_id` int(11) NOT NULL, `author_id` int(11) NOT NULL, `time` int(11) NOT NULL, `content` mediumtext NOT NULL, PRIMARY KEY (`id`)', "ENGINE=$engine DEFAULT CHARSET=$charset");
+            $data = $this->_db->createTable('uuid_cache', ' `id` int(11) NOT NULL AUTO_INCREMENT, `mcname` varchar(20) NOT NULL, `uuid` varchar(64) NOT NULL, PRIMARY KEY (`id`)', "ENGINE=$engine DEFAULT CHARSET=$charset");
+            $data = $this->_db->createTable('widgets', " `id` int(11) NOT NULL AUTO_INCREMENT, `name` varchar(20) NOT NULL, `enabled` tinyint(1) NOT NULL DEFAULT '0', `pages` text, `order` int(11) NOT NULL DEFAULT '10', `location` varchar(5) NOT NULL DEFAULT 'right', PRIMARY KEY (`id`)", "ENGINE=$engine DEFAULT CHARSET=$charset");
 
             // Success
             return true;
-        }
     }
 }
diff --git a/core/classes/Redirect.php b/core/classes/Redirect.php
index 1e207bea6132403e9e8c17140ca9bace7e253007..4a78150c67dcddf0e17330e911e9a8d07c551186 100644
--- a/core/classes/Redirect.php
+++ b/core/classes/Redirect.php
@@ -8,8 +8,8 @@
  *
  *  Redirect class
  */
-class Redirect {
-
+class Redirect
+{
     // Redirect the user to the specified location
     // Params: $location (string) - path or URL to redirect to, or (int) 404 if the page is not found
     public static function to($location = null) {
@@ -21,8 +21,11 @@ class Redirect {
                     // 404 request?
                     case 404:
                         header('HTTP/1.0 404 Not Found');
-                        require(ROOT_PATH . '/404.php');
+
+                        require (ROOT_PATH . '/404.php');
+
                         die();
+
                     break;
                 }
             }
diff --git a/core/classes/Report.php b/core/classes/Report.php
index c1dd3bd3d6f149c56be9660e59eed68dcb960002..3010ea559df213f815e0187674ba6ee3234c58e7 100644
--- a/core/classes/Report.php
+++ b/core/classes/Report.php
@@ -8,19 +8,20 @@
  *
  *  Report class
  */
-class Report {
+class Report
+{
     private $_db;
 
     // Construct Report class
-    public function __construct(){
+    public function __construct() {
         $this->_db = DB::getInstance();
     }
 
     // Create a report
     // Params: $post - array containing fields
-    public function create($post = array()){
+    public function create($post = []) {
         // Insert into database
-        if(!$this->_db->insert('reports', $post)) {
+        if (! $this->_db->insert('reports', $post)) {
             throw new Exception('There was a problem creating the report.');
         }
 
@@ -29,10 +30,11 @@ class Report {
         // Alert moderators
         $moderator_groups = DB::getInstance()->query('SELECT id FROM nl2_groups WHERE permissions LIKE \'%"modcp.reports":1%\'')->results();
 
-        if(count($moderator_groups)){
+        if (count($moderator_groups)){
             $groups = '(';
-            foreach($moderator_groups as $group){
-                if(is_numeric($group->id)){
+
+            foreach ($moderator_groups as $group){
+                if (is_numeric($group->id)){
                     $groups .= ((int) $group->id) . ',';
                 }
             }
@@ -40,19 +42,17 @@ class Report {
 
             $moderators = DB::getInstance()->query('SELECT DISTINCT(nl2_users.id) AS id FROM nl2_users LEFT JOIN nl2_users_groups ON nl2_users.id = nl2_users_groups.user_id WHERE group_id in ' . $groups)->results();
 
-            if(count($moderators)){
-                foreach($moderators as $moderator){
+            if (count($moderators)){
+                foreach ($moderators as $moderator){
                     try {
                         // Get language
-                        Alert::create($moderator->id, 'report', array('path' => 'core', 'file' => 'moderator', 'term' => 'report_alert'), array('path' => 'core', 'file' => 'moderator', 'term' => 'report_alert'), URL::build('/panel/users/reports/', 'id=' . $id));
-                    } catch(Exception $e){
+                        Alert::create($moderator->id, 'report', ['path' => 'core', 'file' => 'moderator', 'term' => 'report_alert'], ['path' => 'core', 'file' => 'moderator', 'term' => 'report_alert'], URL::build('/panel/users/reports/', 'id=' . $id));
+                    } catch (Exception $e){
                         // Unable to alert moderator
                         die($e->getMessage());
                     }
                 }
             }
-
         }
-
     }
 }
diff --git a/core/classes/ServerBanner.php b/core/classes/ServerBanner.php
index 1159990d3ded4b385073646ae5d3a4640dadb331..46dc4524e3273296d2d168cd904adc838fef747a 100644
--- a/core/classes/ServerBanner.php
+++ b/core/classes/ServerBanner.php
@@ -25,19 +25,20 @@ OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 SOFTWARE.
 */
 
-class ServerBanner {
+class ServerBanner
+{
     /**
      *
-     * @param string $address the server address
-     * @param string $motd message of the day which should be displayed
-     * @param int $players not implemented
-     * @param int $max_players not implemented
-     * @param resource $favicon not implemented
-     * @param string $background Image Path or Standard Value
-     * @param int $ping not implemented
+     * @param  string   $address     the server address
+     * @param  string   $motd        message of the day which should be displayed
+     * @param  int      $players     not implemented
+     * @param  int      $max_players not implemented
+     * @param  resource $favicon     not implemented
+     * @param  string   $background  Image Path or Standard Value
+     * @param  int      $ping        not implemented
      * @return resource the rendered banner
      */
-    public static function server($address, $motd = "§cOffline Server", $players = -1, $max_players = -1, $favicon = null, $background = null, $ping = 150) {
+    public static function server($address, $motd = '§cOffline Server', $players = -1, $max_players = -1, $favicon = null, $background = null, $ping = 150) {
         $canvas = MinecraftBanner::getBackgroundCanvas(650, 80, $background);
 
         if ($favicon == null) {
@@ -54,13 +55,14 @@ class ServerBanner {
         $titleY = $favicon_posY + 3 * 2 + 13;
         imagettftext($canvas, 13, 0, $startX, $titleY, $white, MinecraftBanner::getFontFile(), $address);
 
-        $motd = str_replace(array('§k', '§l', '§m', '§o', '§r'), '', $motd);
+        $motd = str_replace(['§k', '§l', '§m', '§o', '§r'], '', $motd);
 
         $components = explode(MinecraftBanner::getColourChar(), $motd);
 
         $nextX = $startX;
         $nextY = 50;
         $last_color = [255, 255, 255];
+
         foreach ($components as $component) {
             if (empty($component)) {
                 continue;
@@ -71,7 +73,8 @@ class ServerBanner {
 
             //default to white
             $text = $component;
-            if (!empty($color_code)) {
+
+            if (! empty($color_code)) {
                 //try to find the color rgb to the colro code
                 if (isset($colors[$color_code])) {
                     $color_rgb = $colors[$color_code];
@@ -87,6 +90,7 @@ class ServerBanner {
             imagettftext($canvas, 12, 0, $nextX, $nextY, $color, MinecraftBanner::getFontFile(), $lines[0]);
             $box = imagettfbbox(12, 0, MinecraftBanner::getFontFile(), $text);
             $text_width = abs($box[4] - $box[0]);
+
             if (count($lines) > 1) {
                 $nextX = $startX;
                 $nextY += 3 * 2 + 12;
diff --git a/core/classes/Session.php b/core/classes/Session.php
index 4034bcd8aba288a88396acb9d2f114a1d2701b0b..8b81454aef042ec0e4d89146262b76d24b7c5e2d 100644
--- a/core/classes/Session.php
+++ b/core/classes/Session.php
@@ -9,8 +9,8 @@
  *  Session class
  */
 
-class Session {
-
+class Session
+{
     // Check to see if a session exists
     // Params: $name (string) - contains the session variable name to check for
     public static function exists($name) {
@@ -46,10 +46,10 @@ class Session {
         if (self::exists($name)) {
             $session = self::get($name);
             self::delete($name);
+
             return $session;
-        } else {
+        }
             // The session doesn't exist, set it as a variable now so it can be "flashed" in the future
             self::put($name, $string);
-        }
     }
 }
diff --git a/core/classes/TemplateBase.php b/core/classes/TemplateBase.php
index ec91329f1565ac998716a9fb112aa050a8fddac4..ccf32092fb8ea546f960acc768926b090e801bcc 100644
--- a/core/classes/TemplateBase.php
+++ b/core/classes/TemplateBase.php
@@ -9,9 +9,21 @@
  *  Base template class
  */
 
-abstract class TemplateBase {
-    
-    protected $_name = '', $_version = '', $_nameless_version = '', $_author = '', $_settings = '', $_css = array(), $_js = array();
+abstract class TemplateBase
+{
+    protected $_name = '',
+
+ $_version = '',
+
+ $_nameless_version = '',
+
+ $_author = '',
+
+ $_settings = '',
+
+ $_css = [],
+
+ $_js = [];
 
     public function __construct($name, $version, $nameless_version, $author) {
         $this->_name = $name;
@@ -20,7 +32,7 @@ abstract class TemplateBase {
         $this->_author = $author;
     }
 
-    public abstract function onPageLoad();
+    abstract public function onPageLoad();
 
     public function addCSSFiles($files) {
         if (is_array($files) && count($files)) {
@@ -94,18 +106,18 @@ abstract class TemplateBase {
     }
 
     public function displayTemplate($template, $smarty) {
-        $smarty->assign(array(
+        $smarty->assign([
             'TEMPLATE_CSS' => $this->getCSS(),
             'TEMPLATE_JS' => $this->getJS()
-        ));
+        ]);
         $smarty->display($template);
     }
 
     public function getTemplate($template, $smarty) {
-        $smarty->assign(array(
+        $smarty->assign([
             'TEMPLATE_CSS' => $this->getCSS(),
             'TEMPLATE_JS' => $this->getJS()
-        ));
+        ]);
 
         return $smarty->fetch($template);
     }
diff --git a/core/classes/Timeago.php b/core/classes/Timeago.php
index 7e38b56d3c6a005a0fb315f81cb89ca79bc6cd26..7b61b9070af3b1d4fc7d7f50b1b9db8494614542 100644
--- a/core/classes/Timeago.php
+++ b/core/classes/Timeago.php
@@ -22,15 +22,12 @@ OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 THE SOFTWARE.
 */
 
-/*
- *  Modified by Samerton for NamelessMC (https://github.com/NamelessMC/Nameless)
- */
-
+// Modified by Samerton for NamelessMC (https://github.com/NamelessMC/Nameless)
 
 function timeAgoInWords($timestring, $timezone = null) {
     $timeAgo = new TimeAgo($timezone);
 
-    return $timeAgo->inWords($timestring, "now");
+    return $timeAgo->inWords($timestring, 'now');
 }
 
 /**
@@ -46,27 +43,32 @@ function timeAgoInWords($timestring, $timezone = null) {
  * @since 0.2.0 (2010/05/05)
  * @site http://github.com/jimmiw/php-time-ago
  */
-class TimeAgo {
-    
+class TimeAgo
+{
     // defines the number of seconds per "unit"
     private $secondsPerMinute = 60;
+
     private $secondsPerHour = 3600;
+
     private $secondsPerDay = 86400;
+
     private $secondsPerMonth = 2592000;
+
     private $secondsPerYear = 31104000;
+
     private $timezone;
 
     public function __construct($timezone = null) {
         // if the $timezone is null, we take 'Europe/London' as the default
         // this was done, because the parent construct tossed an exception
-        if($timezone == null) {
+        if ($timezone == null) {
             $timezone = 'Europe/London';
         }
 
         $this->timezone = $timezone;
     }
 
-    public function inWords($past, $time_language, $now = "now") {
+    public function inWords($past, $time_language, $now = 'now') {
         // sets the default timezone
         date_default_timezone_set($this->timezone);
         // finds the past in datetime
@@ -78,57 +80,54 @@ class TimeAgo {
         $timeDifference = $now - $past;
 
         // less than 29secs
-        if($timeDifference <= 29) {
+        if ($timeDifference <= 29) {
             $key = 'less_than_a_minute';
         }
         // more than 29secs and less than 1min29secss
-        else if($timeDifference > 29 && $timeDifference <= 89) {
+        else if ($timeDifference > 29 && $timeDifference <= 89) {
             $key = '1_minute';
         }
         // between 1min30secs and 44mins29secs
-        else if($timeDifference > 89 &&
-            $timeDifference <= (($this->secondsPerMinute * 44) + 29)
+        else if ($timeDifference > 89
+            && $timeDifference <= (($this->secondsPerMinute * 44) + 29)
         ) {
             $replace = floor($timeDifference / $this->secondsPerMinute);
             $key = '_minutes';
         }
         // between 44mins30secs and 1hour29mins29secs
-        else if(
+        else if (
             $timeDifference > (($this->secondsPerMinute * 44) + 29)
-            &&
-            $timeDifference < (($this->secondsPerMinute * 89) + 29)
+            && $timeDifference < (($this->secondsPerMinute * 89) + 29)
         ) {
             $key = 'about_1_hour';
         }
         // between 1hour29mins30secs and 23hours59mins29secs
-        else if(
+        else if (
             $timeDifference > (
                 ($this->secondsPerMinute * 89) +
                 29
             )
-            &&
-            $timeDifference <= (
+            && $timeDifference <= (
                 ($this->secondsPerHour * 23) +
                 ($this->secondsPerMinute * 59) +
                 29
             )
         ) {
             $replace = floor($timeDifference / $this->secondsPerHour);
-            if($replace == 1){
+
+            if ($replace == 1){
                 $key = 'about_1_hour';
                 unset($replace);
-            } else
-                $key = '_hours';
+            } else $key = '_hours';
         }
         // between 23hours59mins30secs and 47hours59mins29secs
-        else if(
+        else if (
             $timeDifference > (
                 ($this->secondsPerHour * 23) +
                 ($this->secondsPerMinute * 59) +
                 29
             )
-            &&
-            $timeDifference <= (
+            && $timeDifference <= (
                 ($this->secondsPerHour * 47) +
                 ($this->secondsPerMinute * 59) +
                 29
@@ -137,14 +136,13 @@ class TimeAgo {
             $key = '1_day';
         }
         // between 47hours59mins30secs and 29days23hours59mins29secs
-        else if(
+        else if (
             $timeDifference > (
                 ($this->secondsPerHour * 47) +
                 ($this->secondsPerMinute * 59) +
                 29
             )
-            &&
-            $timeDifference <= (
+            && $timeDifference <= (
                 ($this->secondsPerDay * 29) +
                 ($this->secondsPerHour * 23) +
                 ($this->secondsPerMinute * 59) +
@@ -155,15 +153,14 @@ class TimeAgo {
             $key = '_days';
         }
         // between 29days23hours59mins30secs and 59days23hours59mins29secs
-        else if(
+        else if (
             $timeDifference > (
                 ($this->secondsPerDay * 29) +
                 ($this->secondsPerHour * 23) +
                 ($this->secondsPerMinute * 59) +
                 29
             )
-            &&
-            $timeDifference <= (
+            && $timeDifference <= (
                 ($this->secondsPerDay * 59) +
                 ($this->secondsPerHour * 23) +
                 ($this->secondsPerMinute * 59) +
@@ -173,29 +170,27 @@ class TimeAgo {
             $key = 'about_1_month';
         }
         // between 59days23hours59mins30secs and 1year (minus 1sec)
-        else if(
+        else if (
             $timeDifference > (
                 ($this->secondsPerDay * 59) +
                 ($this->secondsPerHour * 23) +
                 ($this->secondsPerMinute * 59) +
                 29
             )
-            &&
-            $timeDifference < $this->secondsPerYear
+            && $timeDifference < $this->secondsPerYear
         ) {
             $replace = round($timeDifference / $this->secondsPerMonth);
             // if months is 1, then set it to 2, because we are "past" 1 month
-            if($replace == 1) {
+            if ($replace == 1) {
                 $replace = 2;
             }
 
             $key = '_months';
         }
         // between 1year and 2years (minus 1sec)
-        else if(
+        else if (
             $timeDifference >= $this->secondsPerYear
-            &&
-            $timeDifference < ($this->secondsPerYear * 2)
+            && $timeDifference < ($this->secondsPerYear * 2)
         ) {
             $key = 'about_1_year';
         }
@@ -205,29 +200,29 @@ class TimeAgo {
             $key = 'over_x_years';
         }
 
-        if(!isset($key))
+        if (! isset($key))
             return '';
 
-        if(is_array($time_language[$key])){
-            if(function_exists('pluralForm')){
-                if(isset($replace)){
+        if (is_array($time_language[$key])){
+            if (function_exists('pluralForm')){
+                if (isset($replace)){
                     return str_replace('{x}', $replace, pluralForm($replace, $time_language[$key]));
-                } else {
-                    return 'Plural specified but replace not set for ' . Output::getClean($key);
                 }
-            } else {
-                return 'Plural form function not defined';
+
+                    return 'Plural specified but replace not set for ' . Output::getClean($key);
             }
-        } else {
-            if(isset($replace)){
+
+                return 'Plural form function not defined';
+        }
+
+            if (isset($replace)){
                 return str_replace('{x}', $replace, $time_language[$key]);
-            } else {
-                return $time_language[$key];
             }
-        }
+
+                return $time_language[$key];
     }
 
-    public function dateDifference($past, $now = "now") {
+    public function dateDifference($past, $now = 'now') {
         // initializes the placeholders for the different "times"
         $seconds = 0;
         $minutes = 0;
@@ -248,59 +243,57 @@ class TimeAgo {
         $timeDifference = $now - $past;
 
         // starts determining the time difference
-        if($timeDifference >= 0) {
+        if ($timeDifference >= 0) {
             switch($timeDifference) {
                 // finds the number of years
                 case ($timeDifference >= $this->secondsPerYear):
                     // uses floor to remove decimals
                     $years = floor($timeDifference / $this->secondsPerYear);
                     // saves the amount of seconds left
-                    $timeDifference = $timeDifference-($years * $this->secondsPerYear);
+                    $timeDifference = $timeDifference - ($years * $this->secondsPerYear);
 
                 // finds the number of months
-                case ($timeDifference >= $this->secondsPerMonth && $timeDifference <= ($this->secondsPerYear-1)):
+                case ($timeDifference >= $this->secondsPerMonth && $timeDifference <= ($this->secondsPerYear - 1)):
                     // uses floor to remove decimals
                     $months = floor($timeDifference / $this->secondsPerMonth);
                     // saves the amount of seconds left
-                    $timeDifference = $timeDifference-($months * $this->secondsPerMonth);
+                    $timeDifference = $timeDifference - ($months * $this->secondsPerMonth);
 
                 // finds the number of days
-                case ($timeDifference >= $this->secondsPerDay && $timeDifference <= ($this->secondsPerYear-1)):
+                case ($timeDifference >= $this->secondsPerDay && $timeDifference <= ($this->secondsPerYear - 1)):
                     // uses floor to remove decimals
                     $days = floor($timeDifference / $this->secondsPerDay);
                     // saves the amount of seconds left
-                    $timeDifference = $timeDifference-($days * $this->secondsPerDay);
+                    $timeDifference = $timeDifference - ($days * $this->secondsPerDay);
 
                 // finds the number of hours
-                case ($timeDifference >= $this->secondsPerHour && $timeDifference <= ($this->secondsPerDay-1)):
+                case ($timeDifference >= $this->secondsPerHour && $timeDifference <= ($this->secondsPerDay - 1)):
                     // uses floor to remove decimals
                     $hours = floor($timeDifference / $this->secondsPerHour);
                     // saves the amount of seconds left
-                    $timeDifference = $timeDifference-($hours * $this->secondsPerHour);
+                    $timeDifference = $timeDifference - ($hours * $this->secondsPerHour);
 
                 // finds the number of minutes
-                case ($timeDifference >= $this->secondsPerMinute && $timeDifference <= ($this->secondsPerHour-1)):
+                case ($timeDifference >= $this->secondsPerMinute && $timeDifference <= ($this->secondsPerHour - 1)):
                     // uses floor to remove decimals
                     $minutes = floor($timeDifference / $this->secondsPerMinute);
                     // saves the amount of seconds left
-                    $timeDifference = $timeDifference-($minutes * $this->secondsPerMinute);
+                    $timeDifference = $timeDifference - ($minutes * $this->secondsPerMinute);
 
                 // finds the number of seconds
-                case ($timeDifference <= ($this->secondsPerMinute-1)):
+                case ($timeDifference <= ($this->secondsPerMinute - 1)):
                     // seconds is just what there is in the timeDifference variable
                     $seconds = $timeDifference;
             }
         }
 
-        $difference = array(
-            "years" => $years,
-            "months" => $months,
-            "days" => $days,
-            "hours" => $hours,
-            "minutes" => $minutes,
-            "seconds" => $seconds
-        );
-
-        return $difference;
+        return [
+            'years' => $years,
+            'months' => $months,
+            'days' => $days,
+            'hours' => $hours,
+            'minutes' => $minutes,
+            'seconds' => $seconds
+        ];
     }
 }
diff --git a/core/classes/Token.php b/core/classes/Token.php
index eb078f0c43a6809ee0867a8dc60adc09e98718fe..85cac9d6aff65fd1c0fc40ecbd6eeda3eaffebf9 100644
--- a/core/classes/Token.php
+++ b/core/classes/Token.php
@@ -9,8 +9,8 @@
  *  Token class
  */
 
-class Token {
-
+class Token
+{
     // Generate a form token and store in a session variable
     // No parameters
     public static function generate() {
@@ -27,10 +27,9 @@ class Token {
         if (Session::exists($tokenName)) {
             return Session::get($tokenName);
         }
-        else {
+         
             // Otherwise generate a new one
             return self::generate();
-        }
     }
 
     // Check a token in session matches
diff --git a/core/classes/URL.php b/core/classes/URL.php
index e5c311a3d7db843d9b3c2d8eb03d14e777fc10fd..13aa75c8f92ccfd662f2ee76c6df14c2a9f3fc5e 100644
--- a/core/classes/URL.php
+++ b/core/classes/URL.php
@@ -9,28 +9,31 @@
  *  URL class
  */
 
-class URL {
-
+class URL
+{
     // Returns a URL in the correct format (friendly or not)
     // Params:  $url (string) - contains the URL which will be formatted
     // 			$params (string) - contains string with URL parameters (optional)
     //          $force (string) - determines whether or not to force a URL type (optional, can be either "friendly" or "non-friendly")
     public static function build($url, $params = '', $force = null) {
         if (is_null($force)) {
-            if ((defined('FRIENDLY_URLS') && FRIENDLY_URLS == true) || (!defined('FRIENDLY_URLS') && Config::get('core/friendly') == true)) {
+            if ((defined('FRIENDLY_URLS') && FRIENDLY_URLS == true) || (! defined('FRIENDLY_URLS') && Config::get('core/friendly') == true)) {
                 // Friendly URLs are enabled
                 return self::buildFriendly($url, $params);
-            } else {
+            }
                 // Friendly URLs are disabled, we need to change it
                 return self::buildNonFriendly($url, $params);
-            }
-        } else {
+        }
+
             if ($force == 'friendly') {
                 return self::buildFriendly($url, $params);
-            } else if ($force == 'non-friendly') {
+            }
+
+            if ($force == 'non-friendly') {
                 return self::buildNonFriendly($url, $params);
-            } else return false;
-        }
+            }
+
+return false;
     }
 
     // Returns a friendly URL
@@ -43,6 +46,7 @@ class URL {
 
             $params = '?' . $params;
         }
+
         return (defined('CONFIG_PATH') ? CONFIG_PATH : '') . $url . ((substr($url, -1) == '/') ? '' : '/') . $params;
     }
 
@@ -54,8 +58,8 @@ class URL {
             if ($params === true) $params = '';
 
             return (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/index.php?route=' . $url . ((substr($url, -1) == '/') ? '' : '/') . '&' . $params;
-        } else {
-            return (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/index.php?route=' . $url . ((substr($url, -1) == '/') ? '' : '/');
         }
+
+            return (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/index.php?route=' . $url . ((substr($url, -1) == '/') ? '' : '/');
     }
 }
diff --git a/core/classes/User.php b/core/classes/User.php
index 76594fbaa554697edeba8470efb2eab9a2095dd1..5235ca153b4b0c3f6b1f3baaed13173195c7f875 100644
--- a/core/classes/User.php
+++ b/core/classes/User.php
@@ -6,15 +6,22 @@
  *
  *  User class
  */
-class User {
-
+class User
+{
     private $_db,
+
             $_data,
+
             $_groups,
+
             $_sessionName,
+
             $_cookieName,
+
             $_isLoggedIn,
+
             $_admSessionName,
+
             $_isAdmLoggedIn;
 
     public function __construct($user = null, $field = 'id') {
@@ -23,22 +30,23 @@ class User {
         $this->_cookieName = Config::get('remember/cookie_name');
         $this->_admSessionName = Config::get('session/admin_name');
 
-        if (!$user) {
+        if (! $user) {
             if (Session::exists($this->_sessionName)) {
                 $user = Session::get($this->_sessionName);
+
                 if ($this->find($user, $field)) {
                     $this->_isLoggedIn = true;
-                } else {
-                    // process logout
                 }
+                    // process logout
             }
+
             if (Session::exists($this->_admSessionName)) {
                 $user = Session::get($this->_admSessionName);
+
                 if ($user == $this->data()->id && $this->find($user, $field)) {
                     $this->_isAdmLoggedIn = true;
-                } else {
-                    // process logout
                 }
+                    // process logout
             }
         } else {
             $this->find($user, $field);
@@ -48,6 +56,7 @@ class User {
     // Get a group's CSS class
     public function getGroupClass() {
         $groups = $this->_groups;
+
         if (count($groups)) {
             foreach ($groups as $group) {
                 return 'color:' . htmlspecialchars($group->group_username_color) . '; ' . htmlspecialchars($group->group_username_css);
@@ -58,31 +67,31 @@ class User {
     }
 
     public function getIP() {
-        if (!empty($_SERVER['HTTP_CLIENT_IP'])) {
+        if (! empty($_SERVER['HTTP_CLIENT_IP'])) {
             $ip = $_SERVER['HTTP_CLIENT_IP'];
-        } else if (!empty($_SERVER['HTTP_X_FORWARDED_FOR'])) {
+        } else if (! empty($_SERVER['HTTP_X_FORWARDED_FOR'])) {
             $ip = $_SERVER['HTTP_X_FORWARDED_FOR'];
         } else {
             $ip = $_SERVER['REMOTE_ADDR'];
         }
+
         return $ip;
     }
 
     // Update a user's data
-    public function update($fields = array(), $id = null) {
-
-        if (!$id) {
+    public function update($fields = [], $id = null) {
+        if (! $id) {
             $id = $this->data()->id;
         }
 
-        if (!$this->_db->update('users', $id, $fields)) {
+        if (! $this->_db->update('users', $id, $fields)) {
             throw new Exception('There was a problem updating your details.');
         }
     }
 
     // Create a new user
-    public function create($fields = array()) {
-        if (!$this->_db->insert('users', $fields)) {
+    public function create($fields = []) {
+        if (! $this->_db->insert('users', $fields)) {
             throw new Exception('There was a problem creating an account.');
         }
     }
@@ -92,129 +101,143 @@ class User {
     //         $field (string) - database field to use, eg email, username, id
     public function find($user = null, $field = 'id') {
         if ($user) {
-            $data = $this->_db->get('users', array($field, '=', $user));
+            $data = $this->_db->get('users', [$field, '=', $user]);
 
             if ($data->count()) {
                 $this->_data = $data->first();
 
                 // Get user groups
-                $groups_query = $this->_db->query('SELECT nl2_groups.* FROM nl2_users_groups INNER JOIN nl2_groups ON group_id = nl2_groups.id WHERE user_id = ? AND deleted = 0 ORDER BY `order`;', array($this->_data->id));
+                $groups_query = $this->_db->query('SELECT nl2_groups.* FROM nl2_users_groups INNER JOIN nl2_groups ON group_id = nl2_groups.id WHERE user_id = ? AND deleted = 0 ORDER BY `order`;', [$this->_data->id]);
+
                 if ($groups_query->count()) {
                     $groups_query = $groups_query->results();
+
                     foreach ($groups_query as $item) {
                         $this->_groups[$item->id] = $item;
                     }
                 } else {
                     // Get default group
-                    $default_group = $this->_db->query('SELECT * FROM nl2_groups WHERE default_group = 1', array())->first();
+                    $default_group = $this->_db->query('SELECT * FROM nl2_groups WHERE default_group = 1', [])->first();
+
                     if ($default_group) {
                         $default_group_id = $default_group->id;
                     } else {
                         $default_group_id = 1; // default to 1
-                        $default_group = $this->_db->query('SELECT * FROM nl2_groups WHERE id = 1', array())->first();
+                        $default_group = $this->_db->query('SELECT * FROM nl2_groups WHERE id = 1', [])->first();
                     }
                     $this->addGroup($default_group_id);
                     $this->_groups[$default_group_id] = $default_group;
                 }
+
                 return true;
             }
         }
+
         return false;
     }
 
     // Get username from ID
     public function idToName($id = null) {
         if ($id) {
-            $data = $this->_db->get('users', array('id', '=', $id));
+            $data = $this->_db->get('users', ['id', '=', $id]);
 
             if ($data->count()) {
                 $results = $data->results();
+
                 return $results[0]->username;
             }
         }
+
         return false;
     }
 
     // Get nickname from ID
     public function IdToNickname($id = null) {
         if ($id) {
-            $data = $this->_db->get('users', array('id', '=', $id));
+            $data = $this->_db->get('users', ['id', '=', $id]);
 
             if ($data->count()) {
                 $results = $data->results();
+
                 return $results[0]->nickname;
             }
         }
+
         return false;
     }
 
     // Log the user in
     public function login($username = null, $password = null, $remember = false, $method = 'email') {
-        if (!$username && !$password && $this->exists()) {
+        if (! $username && ! $password && $this->exists()) {
             Session::put($this->_sessionName, $this->data()->id);
             $this->_isLoggedIn = true;
         } else {
             if ($this->checkCredentials($username, $password, $method) === true) {
                 // Valid credentials
                 Session::put($this->_sessionName, $this->data()->id);
+
                 if ($remember) {
                     $hash = Hash::unique();
-                    $hashCheck = $this->_db->get('users_session', array('user_id', '=', $this->data()->id));
+                    $hashCheck = $this->_db->get('users_session', ['user_id', '=', $this->data()->id]);
 
-                    if (!$hashCheck->count()) {
-                        $this->_db->insert('users_session', array(
+                    if (! $hashCheck->count()) {
+                        $this->_db->insert('users_session', [
                             'user_id' => $this->data()->id,
                             'hash' => $hash
-                        ));
-                    } else
-                        $hash = $hashCheck->first()->hash;
+                        ]);
+                    } else $hash = $hashCheck->first()->hash;
 
                     Cookie::put($this->_cookieName, $hash, Config::get('remember/cookie_expiry'));
                 }
+
                 return true;
             }
         }
+
         return false;
     }
 
     // Handle StaffCP logins
     public function adminLogin($username = null, $password = null, $method = 'email') {
-        if (!$username && !$password && $this->exists()) {
+        if (! $username && ! $password && $this->exists()) {
             Session::put($this->_admSessionName, $this->data()->id);
         } else {
             if ($this->checkCredentials($username, $password, $method) === true) {
                 Session::put($this->_admSessionName, $this->data()->id);
 
                 $hash = Hash::unique();
-                $hashCheck = $this->_db->get('users_admin_session', array('user_id', '=', $this->data()->id));
+                $hashCheck = $this->_db->get('users_admin_session', ['user_id', '=', $this->data()->id]);
 
-                if (!$hashCheck->count()) {
-                    $this->_db->insert('users_admin_session', array(
+                if (! $hashCheck->count()) {
+                    $this->_db->insert('users_admin_session', [
                         'user_id' => $this->data()->id,
                         'hash' => $hash
-                    ));
+                    ]);
                 } else {
                     $hash = $hashCheck->first()->hash;
                 }
 
-                Cookie::put($this->_cookieName . "_adm", $hash, 3600);
+                Cookie::put($this->_cookieName . '_adm', $hash, 3600);
 
                 return true;
             }
         }
+
         return false;
     }
 
     // Check whether given credentials are valid
     public function checkCredentials($username, $password, $method = 'email') {
         $user = $this->find($username, $method);
+
         if ($user) {
             switch ($this->data()->pass_method) {
                 case 'wordpress':
                     // phpass
-                    $phpass = new PasswordHash(8, FALSE);
+                    $phpass = new PasswordHash(8, false);
 
                     return ($phpass->checkPassword($password, $this->data()->password));
+
                     break;
 
                 case 'sha256':
@@ -224,6 +247,7 @@ class User {
                     $pass = $exploded[1];
 
                     return ($salt . hash('sha256', hash('sha256', $password) . $salt) == $salt . $pass);
+
                     break;
 
                 case 'pbkdf2':
@@ -236,16 +260,19 @@ class User {
                     $hashed = hash_pbkdf2('sha256', $password, $salt, $iterations, 64, true);
 
                     return ($hashed == hex2bin($pass));
+
                     break;
 
                 case 'modernbb':
                 case 'sha1':
                     return (sha1($password) == $this->data()->password);
+
                     break;
 
                 default:
                     // Default to bcrypt
                     return (password_verify($password, $this->data()->password));
+
                     break;
             }
         }
@@ -253,29 +280,30 @@ class User {
         return false;
     }
 
-
     // Get displayname
     // Params: $force - force username
     public function getDisplayname($force = false) {
         if ($force == true) {
             return Output::getClean($this->_data->username);
         }
+
         return Output::getClean($this->_data->nickname);
     }
 
     // Build profile link
     public function getProfileURL() {
-        return Output::getClean(URL::build("/profile/" . $this->data()->username));
+        return Output::getClean(URL::build('/profile/' . $this->data()->username));
     }
 
     // Get the order of a specified group
     public function getGroupOrder($group_id) {
-        return $this->_db->get('groups', array('id', '=', $group_id))->results()[0]->order;
+        return $this->_db->get('groups', ['id', '=', $group_id])->results()[0]->order;
     }
 
     // Get all of a user's groups. We can return their ID only or their HTML display code
     public function getAllGroups($html = null) {
-        $groups = array();
+        $groups = [];
+
         if (count($this->_groups)) {
             foreach ($this->_groups as $group) {
                 if (is_null($html)) {
@@ -285,33 +313,38 @@ class User {
                 }
             }
         }
+
         return $groups;
     }
 
     // Get all of a user's groups id.
     public function getAllGroupIds() {
         if (count($this->_groups)) {
-            $groups = array();
+            $groups = [];
+
             foreach ($this->_groups as $group) {
                 $groups[$group->id] = $group->id;
             }
+
             return $groups;
         }
-        return array(0);
+
+        return [0];
     }
 
     // Get a user's signature
     public function getSignature() {
-        if (!empty($this->data()->signature)) {
+        if (! empty($this->data()->signature)) {
             return $this->data()->signature;
-        } else {
-            return "";
         }
+
+            return '';
     }
 
     // Get a user's avatar, based on user ID
     public function getAvatar($path = null, $size = 128, $full = false) {
         $data = $this->data();
+
         if (empty($data)) {
             // User doesn't exist
             return false;
@@ -322,7 +355,7 @@ class User {
         else {
             $uuid = Output::getClean($data->username);
             //fix accounts with special characters in name having no avatar
-            if (preg_match("#[^][_A-Za-z0-9]#", $uuid))
+            if (preg_match('#[^][_A-Za-z0-9]#', $uuid))
                 $uuid = 'Steve';
         }
 
@@ -331,16 +364,21 @@ class User {
             // Custom avatars
             if ($data->gravatar == 1) {
                 // Gravatar
-                return "https://secure.gravatar.com/avatar/" . md5(strtolower(trim($data->email))) . "?s=128";
-            } else if ($data->has_avatar == 1) {
+                return 'https://secure.gravatar.com/avatar/' . md5(strtolower(trim($data->email))) . '?s=128';
+            }
+
+            if ($data->has_avatar == 1) {
                 // Custom avatar
-                $exts = array('gif', 'png', 'jpg', 'jpeg');
+                $exts = ['gif', 'png', 'jpg', 'jpeg'];
+
                 foreach ($exts as $ext) {
-                    if (file_exists(ROOT_PATH . "/uploads/avatars/" . $data->id . "." . $ext)) {
-                        $avatar_path = ($full ? rtrim(Util::getSelfURL(), '/') : '') . ((defined('CONFIG_PATH')) ? CONFIG_PATH . '/' : '/') . "uploads/avatars/" . $data->id . "." . $ext . '?v=' . Output::getClean($data->avatar_updated);
+                    if (file_exists(ROOT_PATH . '/uploads/avatars/' . $data->id . '.' . $ext)) {
+                        $avatar_path = ($full ? rtrim(Util::getSelfURL(), '/') : '') . ((defined('CONFIG_PATH')) ? CONFIG_PATH . '/' : '/') . 'uploads/avatars/' . $data->id . '.' . $ext . '?v=' . Output::getClean($data->avatar_updated);
+
                         break;
                     }
                 }
+
                 if (isset($avatar_path)) {
                     return $avatar_path;
                 }
@@ -351,19 +389,18 @@ class User {
         if (defined('DEFAULT_AVATAR_TYPE') && DEFAULT_AVATAR_TYPE == 'custom') {
             // Custom default avatar
             return (($full ? rtrim(Util::getSelfURL(), '/') : '') . ((defined('CONFIG_PATH')) ? CONFIG_PATH . '/' : '/') . 'uploads/avatars/defaults/' . DEFAULT_AVATAR_IMAGE);
-        } else {
+        }
             // Minecraft avatar
             if (defined('DEFAULT_AVATAR_SOURCE')) {
                 if (defined('DEFAULT_AVATAR_PERSPECTIVE'))
                     $perspective = DEFAULT_AVATAR_PERSPECTIVE;
-                else
-                    $perspective = 'face';
+                else $perspective = 'face';
 
                 switch (DEFAULT_AVATAR_SOURCE) {
                     case 'crafatar':
                         if ($perspective == 'face')
                             return 'https://crafatar.com/avatars/' . Output::getClean($uuid) . '?size=' . $size . '&amp;overlay';
-                        else
+                        
                             return 'https://crafatar.com/renders/head/' . Output::getClean($uuid) . '?overlay';
 
                         break;
@@ -372,7 +409,7 @@ class User {
                         // Only supports face currently
                         if (defined('FRIENDLY_URLS') && FRIENDLY_URLS == true)
                             return (($full ? rtrim(Util::getSelfURL(), '/') : '') . URL::build('/avatar/' . Output::getClean($uuid)));
-                        else
+                        
                             return (($full ? rtrim(Util::getSelfURL(), '/') : '') . ((defined('CONFIG_PATH')) ? CONFIG_PATH . '/' : '/') . 'core/avatar/face.php?u=' . Output::getClean($uuid));
 
                         break;
@@ -380,25 +417,26 @@ class User {
                     case 'mc-heads':
                         if ($perspective == 'face')
                             return 'https://mc-heads.net/avatar/' . Output::getClean($uuid) . '/' . $size;
-                        else
+                        
                             return 'https://mc-heads.net/head/' . Output::getClean($uuid) . '/' . $size;
 
                         break;
 
                     case 'minotar':
                         if ($perspective == 'face')
-                            return 'https://minotar.net/helm/' .  Output::getClean($uuid) . '/' . $size . '.png';
-                        else
-                            return 'https://minotar.net/cube/' .  Output::getClean($uuid) . '/' . $size . '.png';
+                            return 'https://minotar.net/helm/' . Output::getClean($uuid) . '/' . $size . '.png';
+                        
+                            return 'https://minotar.net/cube/' . Output::getClean($uuid) . '/' . $size . '.png';
 
                         break;
 
                     case 'visage':
                         if ($perspective == 'face')
                             return 'https://visage.surgeplay.com/face/' . $size . '/' . Output::getClean($uuid);
-                        else if ($perspective == 'bust')
+
+                         if ($perspective == 'bust')
                             return 'https://visage.surgeplay.com/bust/' . $size . '/' . Output::getClean($uuid);
-                        else
+                        
                             return 'https://visage.surgeplay.com/head/' . $size . '/' . Output::getClean($uuid);
 
                         break;
@@ -407,47 +445,48 @@ class User {
                     default:
                         if ($perspective == 'face')
                             return 'https://cravatar.eu/helmavatar/' . Output::getClean($uuid) . '/' . $size . '.png';
-                        else
+                        
                             return 'https://cravatar.eu/helmhead/' . Output::getClean($uuid) . '/' . $size . '.png';
+
                         break;
                 }
             } else {
                 // Fall back to cravatar
                 return 'https://cravatar.eu/helmavatar/' . Output::getClean($uuid) . '/' . $size . '.png';
             }
-        }
     }
 
     // Does the user have any infractions?
     public function hasInfraction() {
-        $data = $this->_db->get('infractions', array('punished', '=', $this->data()->id))->results();
+        $data = $this->_db->get('infractions', ['punished', '=', $this->data()->id])->results();
+
         if (empty($data)) {
             return false;
-        } else {
-            $return = array();
+        }
+            $return = [];
             $n = 0;
+
             foreach ($data as $infraction) {
                 if ($infraction->acknowledged == '0') {
-                    $return[$n]["id"] = $infraction->id;
-                    $return[$n]["staff"] = $infraction->staff;
-                    $return[$n]["reason"] = $infraction->reason;
-                    $return[$n]["date"] = $infraction->infraction_date;
+                    $return[$n]['id'] = $infraction->id;
+                    $return[$n]['staff'] = $infraction->staff;
+                    $return[$n]['reason'] = $infraction->reason;
+                    $return[$n]['date'] = $infraction->infraction_date;
                     $n++;
                 }
             }
+
             return $return;
-        }
     }
 
     // Does the user exist?
     public function exists() {
-        return (!empty($this->_data));
+        return (! empty($this->_data));
     }
 
     // Log the user out
     public function logout() {
-
-        $this->_db->delete('users_session', array('user_id', '=', $this->data()->id));
+        $this->_db->delete('users_session', ['user_id', '=', $this->data()->id]);
 
         Session::delete($this->_sessionName);
         Cookie::delete($this->_cookieName);
@@ -455,11 +494,10 @@ class User {
 
     // Process logout if user is admin
     public function admLogout() {
-
-        $this->_db->delete('users_admin_session', array('user_id', '=', $this->data()->id));
+        $this->_db->delete('users_admin_session', ['user_id', '=', $this->data()->id]);
 
         Session::delete($this->_admSessionName);
-        Cookie::delete($this->_cookieName . "_adm");
+        Cookie::delete($this->_cookieName . '_adm');
     }
 
     // Returns the currently logged in user's data
@@ -479,6 +517,7 @@ class User {
                 return $group;
             }
         }
+
         return false;
     }
 
@@ -486,19 +525,19 @@ class User {
     public function setGroup($group_id, $expire = 0) {
         $this->_db->createQuery(
             'DELETE FROM `nl2_users_groups` WHERE `user_id` = ?',
-            array(
+            [
                 $this->data()->id
-            )
+            ]
         );
 
         $this->_db->createQuery(
             'INSERT INTO `nl2_users_groups` (`user_id`, `group_id`, `received`, `expire`) VALUES (?, ?, ?, ?)',
-            array(
+            [
                 $this->data()->id,
                 $group_id,
                 date('U'),
                 $expire
-            )
+            ]
         );
     }
 
@@ -506,15 +545,16 @@ class User {
     // Returns false if they already had this group
     public function addGroup($group_id, $expire = 0) {
         $groups = $this->_groups ? $this->_groups : [];
-        if (!array_key_exists($group_id, $groups)) {
+
+        if (! array_key_exists($group_id, $groups)) {
             $this->_db->createQuery(
                 'INSERT INTO `nl2_users_groups` (`user_id`, `group_id`, `received`, `expire`) VALUES (?, ?, ?, ?)',
-                array(
+                [
                     $this->data()->id,
                     $group_id,
                     date('U'),
                     $expire
-                )
+                ]
             );
 
             return true;
@@ -527,6 +567,7 @@ class User {
     // Returns false if they did not have this group or the admin group is being removed from root user
     public function removeGroup($group_id) {
         $groups = $this->_groups ? $this->_groups : [];
+
         if (array_key_exists($group_id, $groups)) {
             if ($group_id == 2 && $this->data()->id == 1) {
                 return false;
@@ -534,10 +575,10 @@ class User {
 
             $this->_db->createQuery(
                 'DELETE FROM `nl2_users_groups` WHERE `user_id` = ? AND `group_id` = ?',
-                array(
+                [
                     $this->data()->id,
                     $group_id
-                )
+                ]
             );
 
             return true;
@@ -549,15 +590,16 @@ class User {
     // Removes all groups this user has
     public function removeGroups() {
         $where = 'WHERE `user_id` = ?';
+
         if ($this->data()->id == 1) {
             $where .= ' AND `group_id` <> 2';
         }
 
         $this->_db->createQuery(
             'DELETE FROM `nl2_users_groups` ' . $where,
-            array(
+            [
                 $this->data()->id
-            )
+            ]
         );
     }
 
@@ -578,8 +620,8 @@ class User {
 
     // Return a comma separated string of all users - this is for the new private message dropdown
     public function listAllUsers() {
-        $data = $this->_db->get('users', array('id', '<>', '0'))->results();
-        $return = "";
+        $data = $this->_db->get('users', ['id', '<>', '0'])->results();
+        $return = '';
         $i = 1;
 
         foreach ($data as $item) {
@@ -590,55 +632,62 @@ class User {
             }
             $i++;
         }
+
         return $return;
     }
 
     // Return an ID from a username
     public function nameToId($name = null) {
         if ($name) {
-            $data = $this->_db->get('users', array('username', '=', $name));
+            $data = $this->_db->get('users', ['username', '=', $name]);
 
             if ($data->count()) {
                 $results = $data->results();
+
                 return $results[0]->id;
             }
         }
+
         return false;
     }
 
     // Return an ID from an email
     public function emailToId($email = null) {
         if ($email) {
-            $data = $this->_db->get('users', array('email', '=', $email));
+            $data = $this->_db->get('users', ['email', '=', $email]);
 
             if ($data->count()) {
                 $results = $data->results();
+
                 return $results[0]->id;
             }
         }
+
         return false;
     }
 
     // Get a list of PMs a user has access to
     public function listPMs($user_id = null) {
         if ($user_id) {
-            $return = array(); // Array to return containing info of PMs
+            $return = []; // Array to return containing info of PMs
 
             // Get a list of PMs which the user is in
-            $data = $this->_db->get('private_messages_users', array('user_id', '=', $user_id));
+            $data = $this->_db->get('private_messages_users', ['user_id', '=', $user_id]);
 
             if ($data->count()) {
                 $data = $data->results();
+
                 foreach ($data as $result) {
                     // Get a list of users who are in this conversation and return them as an array
-                    $pms = $this->_db->get('private_messages_users', array('pm_id', '=', $result->pm_id))->results();
-                    $users = array(); // Array containing users with permission
+                    $pms = $this->_db->get('private_messages_users', ['pm_id', '=', $result->pm_id])->results();
+                    $users = []; // Array containing users with permission
+
                     foreach ($pms as $pm) {
                         $users[] = $pm->user_id;
                     }
 
                     // Get the PM data
-                    $pm = $this->_db->get('private_messages', array('id', '=', $result->pm_id))->results();
+                    $pm = $this->_db->get('private_messages', ['id', '=', $result->pm_id])->results();
                     $pm = $pm[0];
 
                     $return[$pm->id]['id'] = $pm->id;
@@ -659,6 +708,7 @@ class User {
 
             return $return;
         }
+
         return false;
     }
 
@@ -666,47 +716,52 @@ class User {
     public function getPM($pm_id = null, $user_id = null) {
         if ($user_id && $pm_id) {
             // Get the PM - is the user the author?
-            $data = $this->_db->get('private_messages', array('id', '=', $pm_id));
+            $data = $this->_db->get('private_messages', ['id', '=', $pm_id]);
+
             if ($data->count()) {
                 $data = $data->results();
                 $data = $data[0];
 
                 // Does the user have permission to view the PM?
-                $pms = $this->_db->get('private_messages_users', array('pm_id', '=', $pm_id))->results();
+                $pms = $this->_db->get('private_messages_users', ['pm_id', '=', $pm_id])->results();
+
                 foreach ($pms as $pm) {
                     if ($pm->user_id == $user_id) {
                         $has_permission = true;
                         $pm_user_id = $pm->id;
+
                         break;
                     }
                 }
 
-                if (!isset($has_permission)) {
+                if (! isset($has_permission)) {
                     return false; // User doesn't have permission
                 }
 
                 // Set message to "read"
                 if ($pm->read == 0) {
-                    $this->_db->update('private_messages_users', $pm_user_id, array(
+                    $this->_db->update('private_messages_users', $pm_user_id, [
                         '`read`' => 1
-                    ));
+                    ]);
                 }
 
                 // User has permission, return the PM information
 
                 // Get a list of users in the conversation
-                if (!isset($pms)) {
-                    $pms = $this->_db->get('private_messages_users', array('pm_id', '=', $pm_id))->results();
+                if (! isset($pms)) {
+                    $pms = $this->_db->get('private_messages_users', ['pm_id', '=', $pm_id])->results();
                 }
 
-                $users = array(); // Array to store users
+                $users = []; // Array to store users
+
                 foreach ($pms as $pm) {
                     $users[] = $pm->user_id;
                 }
 
-                return array($data, $users);
+                return [$data, $users];
             }
         }
+
         return false;
     }
 
@@ -714,49 +769,59 @@ class User {
     public function deletePM($pm_id = null, $user_id = null) {
         if ($user_id && $pm_id) {
             // Is the user the author?
-            $data = $this->_db->get('private_messages', array('id', '=', $pm_id));
+            $data = $this->_db->get('private_messages', ['id', '=', $pm_id]);
+
             if ($data->count()) {
                 $data = $data->results();
                 $data = $data[0];
+
                 if ($data->author_id != $user_id) {
                     // User is not the author, only delete
-                    $pms = $this->_db->get('private_messages_users', array('pm_id', '=', $pm_id))->results();
+                    $pms = $this->_db->get('private_messages_users', ['pm_id', '=', $pm_id])->results();
+
                     foreach ($pms as $pm) {
                         if ($pm->user_id == $user_id) {
                             // get the ID and delete
                             $id = $pm->id;
-                            $this->_db->delete('private_messages_users', array('id', '=', $id));
+                            $this->_db->delete('private_messages_users', ['id', '=', $id]);
+
                             return true;
                         }
                     }
                 } else {
                     // User is the author, delete the PM altogether
-                    $this->_db->delete('private_messages_users', array('pm_id', '=', $pm_id));
-                    $this->_db->delete('private_messages', array('id', '=', $pm_id));
+                    $this->_db->delete('private_messages_users', ['pm_id', '=', $pm_id]);
+                    $this->_db->delete('private_messages', ['id', '=', $pm_id]);
+
                     return true;
                 }
             }
         }
+
         return false;
     }
 
     // Get the number of unread PMs for the specified user
     public function getUnreadPMs($user_id = null) {
         if ($user_id) {
-            $pms = $this->_db->get('private_messages_users', array('user_id', '=', $user_id));
+            $pms = $this->_db->get('private_messages_users', ['user_id', '=', $user_id]);
+
             if ($pms->count()) {
                 $pms = $pms->results();
                 $count = 0;
+
                 foreach ($pms as $pm) {
                     if ($pm->read == 0) {
                         $count++;
                     }
                 }
+
                 return $count;
-            } else {
-                return 0;
             }
+
+                return 0;
         }
+
         return false;
     }
 
@@ -769,28 +834,33 @@ class User {
                 }
             }
         }
+
         return false;
     }
 
     // Can they view this staffcp page?
     public function handlePanelPageLoad($permission = null) {
-        if (!$this->isLoggedIn()) {
+        if (! $this->isLoggedIn()) {
             Redirect::to(URL::build('/login'));
+
             die();
         }
 
-        if (!$this->canViewACP()) {
+        if (! $this->canViewACP()) {
             Redirect::to(URL::build('/'));
+
             die();
         }
 
-        if (!$this->isAdmLoggedIn()) {
+        if (! $this->isAdmLoggedIn()) {
             Redirect::to(URL::build('/panel/auth'));
+
             die();
         }
 
-        if ($permission != null && !$this->hasPermission($permission)) {
-            require_once(ROOT_PATH . '/404.php');
+        if ($permission != null && ! $this->hasPermission($permission)) {
+            require_once (ROOT_PATH . '/404.php');
+
             die();
         }
     }
@@ -801,53 +871,59 @@ class User {
     //			$forum (boolean)   - whether to only return fields which display on forum posts, only if $public is true (default false)
     public function getProfileFields($user_id = null, $public = true, $forum = false) {
         if ($user_id) {
-            $data = $this->_db->get('users_profile_fields', array('user_id', '=', $user_id));
+            $data = $this->_db->get('users_profile_fields', ['user_id', '=', $user_id]);
 
             if ($data->count()) {
                 if ($public == true) {
                     // Return public fields only
-                    $return = array();
+                    $return = [];
+
                     foreach ($data->results() as $result) {
-                        $is_public = $this->_db->get('profile_fields', array('id', '=', $result->field_id));
-                        if (!$is_public->count()) continue;
-                        else $is_public = $is_public->results();
+                        $is_public = $this->_db->get('profile_fields', ['id', '=', $result->field_id]);
+
+                        if (! $is_public->count()) continue;
+                         $is_public = $is_public->results();
 
                         if ($is_public[0]->public == 1) {
                             if ($forum == true) {
                                 if ($is_public[0]->forum_posts == 1) {
-                                    $return[] = array(
+                                    $return[] = [
                                         'name' => Output::getClean($is_public[0]->name),
                                         'value' => Output::getClean($result->value)
-                                    );
+                                    ];
                                 }
                             } else {
-                                $return[] = array(
+                                $return[] = [
                                     'name' => Output::getClean($is_public[0]->name),
                                     'value' => Output::getClean($result->value)
-                                );
+                                ];
                             }
                         }
                     }
 
                     return $return;
-                } else {
+                }
                     // Return all fields
-                    $return = array();
+                    $return = [];
+
                     foreach ($data->results() as $result) {
-                        $name = $this->_db->get('profile_fields', array('id', '=', $result->field_id));
-                        if (!$name->count()) continue;
-                        else $name = $name->results();
+                        $name = $this->_db->get('profile_fields', ['id', '=', $result->field_id]);
 
-                        $return[] = array(
+                        if (! $name->count()) continue;
+                         $name = $name->results();
+
+                        $return[] = [
                             'name' => Output::getClean($name[0]->name),
                             'value' => Output::getClean($result->value)
-                        );
+                        ];
                     }
 
                     return $return;
-                }
-            } else return false;
+            }
+
+return false;
         }
+
         return false;
     }
 
@@ -858,7 +934,8 @@ class User {
      */
     public function isBlocked($user, $blocked) {
         if ($user && $blocked) {
-            $possible_users = $this->_db->get('blocked_users', array('user_id', '=', $user));
+            $possible_users = $this->_db->get('blocked_users', ['user_id', '=', $user]);
+
             if ($possible_users->count()) {
                 $possible_users = $possible_users->results();
 
@@ -868,6 +945,7 @@ class User {
                 }
             }
         }
+
         return false;
     }
 
@@ -880,6 +958,7 @@ class User {
      */
     public function hasPermission($permission) {
         $groups = $this->_groups;
+
         if ($this->isLoggedIn() && $groups) {
             foreach ($groups as $group) {
                 $this->_permissions = json_decode($group->permissions, true);
@@ -889,6 +968,7 @@ class User {
                 }
             }
         }
+
         return false;
     }
 
@@ -900,9 +980,9 @@ class User {
     public function getProfileViews() {
         if (count($this->data())) {
             return $this->data()->profile_views;
-        } else {
-            return 0;
         }
+
+            return 0;
     }
 
     /**
@@ -911,8 +991,9 @@ class User {
      * @return boolean
      */
     public function canPrivateProfile() {
-        $settings_data = $this->_db->get('settings', array('name', '=', 'private_profile'));
+        $settings_data = $this->_db->get('settings', ['name', '=', 'private_profile']);
         $settings_results = $settings_data->results();
+
         return (($settings_results[0]->value == 1) && ($this->hasPermission('usercp.private_profile')));
     }
 
@@ -922,13 +1003,11 @@ class User {
      * @return boolean
      */
     public function isPrivateProfile() {
-        if ($this->_data->private_profile == 1) {
+        return (bool) ($this->_data->private_profile == 1)
             // It's private
-            return true;
-        } else {
+             
             // It's not private
-            return false;
-        }
+             ;
     }
 
     /**
@@ -938,6 +1017,7 @@ class User {
      */
     public function getUserTemplates() {
         $groups = '(';
+
         foreach ($this->_groups as $group) {
             if (is_numeric($group->id)) {
                 $groups .= ((int) $group->id) . ',';
diff --git a/core/classes/Util.php b/core/classes/Util.php
index 74aa3fb929f71464d32c7c103a1a235c76a6fbe7..df7ea22108171a43ea4b96d606e715072ed1da22 100644
--- a/core/classes/Util.php
+++ b/core/classes/Util.php
@@ -9,7 +9,8 @@
  *  Util class
  */
 
-class Util {
+class Util
+{
     // Converting Cyrillic to Latin letters (https://en.wikipedia.org/wiki/ISO_9)
     public static function cyrillicToLatin($string) {
         $cyrillic = [
@@ -24,6 +25,7 @@ class Util {
             'A', 'B', 'V', 'G', 'D', 'E', 'Io', 'Zh', 'Z', 'I', 'Y', 'K', 'L', 'M', 'N', 'O', 'P',
             'R', 'S', 'T', 'U', 'F', 'H', 'Ts', 'Ch', 'Sh', 'Sht', 'A', 'I', 'Y', 'e', 'Yu', 'Ya'
         ];
+
         return str_replace($cyrillic, $latin, $string);
     }
 
@@ -38,14 +40,15 @@ class Util {
 
         foreach (glob($directory . '/*') as $file) {
             if (is_dir($file)) {
-                if (!self::recursiveRemoveDirectory($file))
+                if (! self::recursiveRemoveDirectory($file))
                     return false;
             } else {
-                if (!unlink($file))
+                if (! unlink($file))
                     return false;
             }
         }
         rmdir($directory);
+
         return true;
     }
 
@@ -53,10 +56,10 @@ class Util {
     // No params
     public static function listTimezones() {
         // Array to contain timezones
-        $timezones = array();
+        $timezones = [];
 
         // Array to contain offsets
-        $offsets = array();
+        $offsets = [];
 
         // Get all PHP timezones
         $all_timezones = DateTimeZone::listIdentifiers(DateTimeZone::ALL);
@@ -75,10 +78,10 @@ class Util {
             $offset = 'GMT ' . intval($current->getOffset() / 3600) . ':' . str_pad(abs(intval($current->getOffset() % 3600 / 60)), 2, 0);
 
             // Prettify timezone name
-            $name = Output::getClean(str_replace(array('/', '_'), array(', ', ' '), $timezone));
+            $name = Output::getClean(str_replace(['/', '_'], [', ', ' '], $timezone));
 
             // Add to timezones array
-            $timezones[$timezone] = array('offset' => $offset, 'name' => $name, 'time' => $current->format('H:i'));
+            $timezones[$timezone] = ['offset' => $offset, 'name' => $name, 'time' => $current->format('H:i')];
         }
 
         array_multisort($offsets, $timezones);
@@ -97,15 +100,16 @@ class Util {
                 $url = array_shift($matches);
 
                 $text = parse_url($url, PHP_URL_HOST) . parse_url($url, PHP_URL_PATH);
-                $text = preg_replace("/^www./", "", $text);
+                $text = preg_replace('/^www./', '', $text);
+
+                $last = -(strlen(strrchr($text, '/'))) + 1;
 
-                $last = - (strlen(strrchr($text, "/"))) + 1;
                 if ($last < 0) {
-                    $text = substr($text, 0, $last) . "&hellip;";
+                    $text = substr($text, 0, $last) . '&hellip;';
                 }
 
                 return sprintf('<a rel="nofollow noopener" target="_blank" href="%s">%s</a>', $url, $text);
-            }, 
+            },
         $text);
     }
 
@@ -114,14 +118,13 @@ class Util {
         if (defined('DEFAULT_AVATAR_SOURCE')) {
             if (defined('DEFAULT_AVATAR_PERSPECTIVE'))
                 $perspective = DEFAULT_AVATAR_PERSPECTIVE;
-            else
-                $perspective = 'face';
+            else $perspective = 'face';
 
             switch (DEFAULT_AVATAR_SOURCE) {
                 case 'crafatar':
                     if ($perspective == 'face')
                         return 'https://crafatar.com/avatars/' . Output::getClean($uuid) . '?size=' . $size . '&amp;overlay';
-                    else
+                    
                         return 'https://crafatar.com/renders/head/' . Output::getClean($uuid) . '?overlay';
 
                     break;
@@ -130,7 +133,7 @@ class Util {
                     // Only supports face currently
                     if (defined('FRIENDLY_URLS') && FRIENDLY_URLS == true)
                         return URL::build('/avatar/' . Output::getClean($uuid));
-                    else
+                    
                         return ((defined('CONFIG_PATH')) ? CONFIG_PATH . '/' : '/') . 'core/avatar/face.php?u=' . Output::getClean($uuid);
 
                     break;
@@ -138,25 +141,26 @@ class Util {
                 case 'mc-heads':
                     if ($perspective == 'face')
                         return 'https://mc-heads.net/avatar/' . Output::getClean($uuid) . '/' . $size;
-                    else
+                    
                         return 'https://mc-heads.net/head/' . Output::getClean($uuid) . '/' . $size;
 
                     break;
 
                 case 'minotar':
                     if ($perspective == 'face')
-                        return 'https://minotar.net/helm/' .  Output::getClean($uuid) . '/' . $size . '.png';
-                    else
-                        return 'https://minotar.net/cube/' .  Output::getClean($uuid) . '/' . $size . '.png';
+                        return 'https://minotar.net/helm/' . Output::getClean($uuid) . '/' . $size . '.png';
+                    
+                        return 'https://minotar.net/cube/' . Output::getClean($uuid) . '/' . $size . '.png';
 
                     break;
 
                 case 'visage':
                     if ($perspective == 'face')
                         return 'https://visage.surgeplay.com/face/' . $size . '/' . Output::getClean($uuid);
-                    else if ($perspective == 'bust')
+
+                     if ($perspective == 'bust')
                         return 'https://visage.surgeplay.com/bust/' . $size . '/' . Output::getClean($uuid);
-                    else
+                    
                         return 'https://visage.surgeplay.com/head/' . $size . '/' . Output::getClean($uuid);
 
                     break;
@@ -165,8 +169,9 @@ class Util {
                 default:
                     if ($perspective == 'face')
                         return 'https://cravatar.eu/helmavatar/' . Output::getClean($uuid) . '/' . $size . '.png';
-                    else
+                    
                         return 'https://cravatar.eu/helmhead/' . Output::getClean($uuid) . '/' . $size . '.png';
+
                     break;
             }
         } else {
@@ -180,27 +185,30 @@ class Util {
         if (defined('DEFAULT_AVATAR_SOURCE')) {
             if (defined('DEFAULT_AVATAR_PERSPECTIVE'))
                 $perspective = DEFAULT_AVATAR_PERSPECTIVE;
-            else
-                $perspective = 'face';
+            else $perspective = 'face';
 
             switch (DEFAULT_AVATAR_SOURCE) {
                 case 'crafatar':
                     if ($perspective == 'face')
                         return 'https://crafatar.com/avatars/{x}?size={y}&amp;overlay';
-                    else
+                    
                         return 'https://crafatar.com/renders/head/{x}?overlay';
+
                     break;
+
                 case 'nameless':
                     // Only supports face currently
                     if (defined('FRIENDLY_URLS') && FRIENDLY_URLS == true)
                         return URL::build('/avatar/{x}');
-                    else
+                    
                         return ((defined('CONFIG_PATH')) ? CONFIG_PATH . '/' : '/') . 'core/avatar/face.php?u={x}';
+
                     break;
+
                 case 'mc-heads':
                     if ($perspective == 'face')
                         return 'https://mc-heads.net/avatar/{x}/{y}';
-                    else
+                    
                         return 'https://mc-heads.net/head/{x}/{y}';
 
                     break;
@@ -208,7 +216,7 @@ class Util {
                 case 'minotar':
                     if ($perspective == 'face')
                         return 'https://minotar.net/helm/{x}/{y}.png';
-                    else
+                    
                         return 'https://minotar.net/cube/{x}/{y}.png';
 
                     break;
@@ -216,18 +224,21 @@ class Util {
                 case 'visage':
                     if ($perspective == 'face')
                         return 'https://visage.surgeplay.com/face/{y}/{x}';
-                    else if ($perspective == 'bust')
+
+                     if ($perspective == 'bust')
                         return 'https://visage.surgeplay.com/bust/{y}/{x}';
-                    else
+                    
                         return 'https://visage.surgeplay.com/head/{y}/{x}';
 
                     break;
+
                 case 'cravatar':
                 default:
                     if ($perspective == 'face')
                         return 'https://cravatar.eu/helmavatar/{x}/{y}.png';
-                    else
+                    
                         return 'https://cravatar.eu/helmhead/{x}/{y}.png';
+
                     break;
             }
         } else {
@@ -236,11 +247,10 @@ class Util {
         }
     }
 
-    /*
-     *  Get the server name
-     */
+    // Get the server name
     public static function getSelfURL($protocol = true) {
         $hostname = Config::get('core/hostname');
+
         if (is_array($hostname))
             $hostname = $_SERVER['SERVER_NAME'];
 
@@ -252,9 +262,9 @@ class Util {
 
         if ($protocol) {
             if ($_SERVER['SERVER_PORT'] == 80 || $_SERVER['SERVER_PORT'] == 443) {
-                $url = (isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] !== 'off' ? 'https' : 'http') . "://" . $www . Output::getClean($hostname);
+                $url = (isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] !== 'off' ? 'https' : 'http') . '://' . $www . Output::getClean($hostname);
             } else {
-                $url = (isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] !== 'off' ? 'https' : 'http') . "://" . $www . Output::getClean($hostname) . ":" . $_SERVER['SERVER_PORT'];
+                $url = (isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] !== 'off' ? 'https' : 'http') . '://' . $www . Output::getClean($hostname) . ':' . $_SERVER['SERVER_PORT'];
             }
         } else {
             $url = $www . Output::getClean($hostname);
@@ -277,13 +287,14 @@ class Util {
 
         $parsed = parse_url($url);
 
-        return !(str_replace('www.', '', rtrim(Util::getSelfURL(false), '/')) == str_replace('www.', '', $parsed['host']));
+        return ! (str_replace('www.', '', rtrim(Util::getSelfURL(false), '/')) == str_replace('www.', '', $parsed['host']));
     }
 
     // URL-ify a string
     public static function stringToURL($string = null) {
         if ($string) {
-            $string = preg_replace("/[^A-Za-z0-9 ]/", '', $string);
+            $string = preg_replace('/[^A-Za-z0-9 ]/', '', $string);
+
             return Output::getClean(strtolower(urlencode(str_replace(' ', '-', htmlspecialchars_decode($string)))));
         }
 
@@ -294,6 +305,7 @@ class Util {
      *  The truncate function is taken from CakePHP, license MIT
      *  https://github.com/cakephp/cakephp/blob/master/LICENSE
      */
+
     /**
      * Truncates text.
      *
@@ -306,17 +318,17 @@ class Util {
      * - `exact` If false, $text will not be cut mid-word
      * - `html` If true, HTML tags would be handled correctly
      *
-     * @param string  $text String to truncate.
-     * @param integer $length Length of returned string, including ellipsis.
-     * @param array $options An array of html attributes and options.
-     * @return string Trimmed string.
+     * @param  string  $text    String to truncate.
+     * @param  integer $length  Length of returned string, including ellipsis.
+     * @param  array   $options An array of html attributes and options.
+     * @return string  Trimmed string.
      * @access public
-     * @link http://book.cakephp.org/view/1469/Text#truncate-1625
+     * @see http://book.cakephp.org/view/1469/Text#truncate-1625
      */
-    public static function truncate($text, $length = 750, $options = array()) {
-        $default = array(
+    public static function truncate($text, $length = 750, $options = []) {
+        $default = [
             'ending' => '...', 'exact' => true, 'html' => false
-        );
+        ];
         $options = array_merge($default, $options);
         extract($options);
 
@@ -325,16 +337,18 @@ class Util {
                 return $text;
             }
             $totalLength = mb_strlen(strip_tags($ending));
-            $openTags = array();
+            $openTags = [];
             $truncate = '';
 
             preg_match_all('/(<\/?([\w+]+)[^>]*>)?([^<>]*)/', $text, $tags, PREG_SET_ORDER);
+
             foreach ($tags as $tag) {
-                if (!preg_match('/img|br|input|hr|area|base|basefont|col|frame|isindex|link|meta|param/s', $tag[2])) {
+                if (! preg_match('/img|br|input|hr|area|base|basefont|col|frame|isindex|link|meta|param/s', $tag[2])) {
                     if (preg_match('/<[\w]+[^>]*>/s', $tag[0])) {
                         array_unshift($openTags, $tag[2]);
                     } else if (preg_match('/<\/([\w]+)[^>]*>/s', $tag[0], $closeTag)) {
                         $pos = array_search($closeTag[1], $openTags);
+
                         if ($pos !== false) {
                             array_splice($openTags, $pos, 1);
                         }
@@ -343,9 +357,11 @@ class Util {
                 $truncate .= $tag[1];
 
                 $contentLength = mb_strlen(preg_replace('/&[0-9a-z]{2,8};|&#[0-9]{1,7};|&#x[0-9a-f]{1,6};/i', ' ', $tag[3]));
+
                 if ($contentLength + $totalLength > $length) {
                     $left = $length - $totalLength;
                     $entitiesLength = 0;
+
                     if (preg_match_all('/&[0-9a-z]{2,8};|&#[0-9]{1,7};|&#x[0-9a-f]{1,6};/i', $tag[3], $entities, PREG_OFFSET_CAPTURE)) {
                         foreach ($entities[0] as $entity) {
                             if ($entity[1] + 1 - $entitiesLength <= $left) {
@@ -358,11 +374,12 @@ class Util {
                     }
 
                     $truncate .= mb_substr($tag[3], 0, $left + $entitiesLength);
+
                     break;
-                } else {
+                }
                     $truncate .= $tag[3];
                     $totalLength += $contentLength;
-                }
+                
                 if ($totalLength >= $length) {
                     break;
                 }
@@ -370,19 +387,21 @@ class Util {
         } else {
             if (mb_strlen($text) <= $length) {
                 return $text;
-            } else {
-                $truncate = mb_substr($text, 0, $length - mb_strlen($ending));
             }
+                $truncate = mb_substr($text, 0, $length - mb_strlen($ending));
         }
-        if (!$exact) {
+
+        if (! $exact) {
             $spacepos = mb_strrpos($truncate, ' ');
+
             if (isset($spacepos)) {
                 if ($html) {
                     $bits = mb_substr($truncate, $spacepos);
                     preg_match_all('/<\/([a-z]+)>/', $bits, $droppedTags, PREG_SET_ORDER);
-                    if (!empty($droppedTags)) {
+
+                    if (! empty($droppedTags)) {
                         foreach ($droppedTags as $closingTag) {
-                            if (!in_array($closingTag[1], $openTags)) {
+                            if (! in_array($closingTag[1], $openTags)) {
                                 array_unshift($openTags, $closingTag[1]);
                             }
                         }
@@ -410,12 +429,12 @@ class Util {
         $queries = new Queries();
 
         // Check for updates
-        if (!$current_version) {
-            $current_version = $queries->getWhere('settings', array('name', '=', 'nameless_version'));
+        if (! $current_version) {
+            $current_version = $queries->getWhere('settings', ['name', '=', 'nameless_version']);
             $current_version = $current_version[0]->value;
         }
 
-        $uid = $queries->getWhere('settings', array('name', '=', 'unique_id'));
+        $uid = $queries->getWhere('settings', ['name', '=', 'unique_id']);
         $uid = $uid[0]->value;
 
         $ch = curl_init();
@@ -436,34 +455,30 @@ class Util {
         curl_close($ch);
 
         if (isset($error)) {
-            return json_encode(array('error' => $error));
-        } else {
+            return json_encode(['error' => $error]);
+        }
+
             if ($update_check == 'None') {
-                return json_encode(array('no_update' => true));
-            } else {
+                return json_encode(['no_update' => true]);
+            }
                 $info = json_decode($update_check);
 
-                if (!isset($info->error) && !isset($info->no_update) && isset($info->new_version)) {
+                if (! isset($info->error) && ! isset($info->no_update) && isset($info->new_version)) {
                     if (isset($info->urgent) && $info->urgent == 'true')
                         $to_db = 'urgent';
-                    else
-                        $to_db = 'true';
+                    else $to_db = 'true';
 
-                    $update_id = $queries->getWhere('settings', array('name', '=', 'version_update'));
+                    $update_id = $queries->getWhere('settings', ['name', '=', 'version_update']);
                     $update_id = $update_id[0]->id;
-                    $queries->update('settings', $update_id, array(
+                    $queries->update('settings', $update_id, [
                         'value' => $to_db
-                    ));
+                    ]);
                 }
 
                 return $update_check;
-            }
-        }
     }
 
-    /*
-     *  Get the latest Nameless news
-     */
+    // Get the latest Nameless news
     public static function getLatestNews() {
         $ch = curl_init();
         curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
@@ -479,18 +494,19 @@ class Util {
         curl_close($ch);
 
         if (isset($error)) {
-            return json_encode(array('error' => $error));
-        } else {
-            return $news;
+            return json_encode(['error' => $error]);
         }
+
+            return $news;
     }
 
     public static function curlGetContents($full_url, $body = null) {
         $ch = curl_init();
         curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
         curl_setopt($ch, CURLOPT_URL, $full_url);
+
         if ($body != null) {
-            curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type:application/json'));
+            curl_setopt($ch, CURLOPT_HTTPHEADER, ['Content-Type:application/json']);
             curl_setopt($ch, CURLOPT_POSTFIELDS, $body);
         }
         $contents = curl_exec($ch);
@@ -498,11 +514,12 @@ class Util {
         if ($contents == false) {
             Log::getInstance()->log(Log::Action('misc/curl_error'), curl_error($ch));
             curl_close($ch);
+
             return false;
-        } else {
+        }
             curl_close($ch);
+
             return $contents;
-        }
     }
 
     /*
@@ -510,19 +527,20 @@ class Util {
      *  From https://stackoverflow.com/a/53461987
      */
     public static function replaceAnchorsWithText($data) {
-        $data = preg_replace_callback('/]*href=["|\']([^"|\']*)["|\'][^>]*>([^<]*)<\/a>/i', function ($m) {
+        return preg_replace_callback('/]*href=["|\']([^"|\']*)["|\'][^>]*>([^<]*)<\/a>/i', function ($m) {
             if (strpos($m[1], self::getSelfURL()) === false)
                 return '<a href="' . $m[1] . '" rel="nofollow noopener" target="_blank">' . $m[2] . '</a>';
-            else
+            
                 return '<a href="' . $m[1] . '" target="_blank">' . $m[2] . '</a>';
         }, $data);
-        return $data;
     }
 
     public static function getSetting(DB $db, $setting, $fallback = null) {
-        $value = $db->get('settings', array('name', '=', $setting));
+        $value = $db->get('settings', ['name', '=', $setting]);
+
         if ($value->count()) return $value->first()->value;
-        else return $fallback;
+
+         return $fallback;
     }
 
     public static function loadEndpoints($path, $endpoints) {
@@ -534,26 +552,31 @@ class Util {
             } else {
                 $endpoint_path = $file->getPathName();
                 $endpoint_file_name = $file->getFilename();
-                require_once($endpoint_path);
+
+                require_once ($endpoint_path);
                 $endpoint_class_name = str_replace('.php', '', $endpoint_file_name);
-                $endpoints->add(new $endpoint_class_name);
+                $endpoints->add(new $endpoint_class_name());
             }
         }
     }
 
     public static function getIngameRankName($website_group_id) {
-        $data = DB::getInstance()->get('group_sync', array('website_group_id', '=', $website_group_id));
+        $data = DB::getInstance()->get('group_sync', ['website_group_id', '=', $website_group_id]);
+
         if ($data->count()) {
             return $data->first()->ingame_rank_name;
         }
+
         return null;
     }
 
     public static function getGroupNameFromId($group_id) {
-        $data = DB::getInstance()->get('groups', array('id', '=', $group_id));
+        $data = DB::getInstance()->get('groups', ['id', '=', $group_id]);
+
         if ($data->count()) {
             return $data->first()->name;
         }
+
         return null;
     }
 }
diff --git a/core/classes/Validate.php b/core/classes/Validate.php
index a117e27a595916e84cf0826bc96b90891ef50c41..c3ad61208096acb5e5edec8ed918961a6ecdfeb6 100644
--- a/core/classes/Validate.php
+++ b/core/classes/Validate.php
@@ -11,10 +11,12 @@
  * 	TODO: Regex validation? Example: Discord
  */
 
-class Validate {
-
+class Validate
+{
     private $_passed = false,
-        $_errors = array(),
+
+        $_errors = [],
+
         $_db = null;
 
     // Construct Validate class
@@ -27,7 +29,7 @@ class Validate {
             $host = null;
         }
 
-        if (!empty($host)) {
+        if (! empty($host)) {
             $this->_db = DB::getInstance();
         }
     }
@@ -35,14 +37,11 @@ class Validate {
     // Validate an array of inputs
     // Params: $source (array) - the array containing the form input (eg $_POST)
     //         $items (array)  - contains an array of items which need to be validated
-    public function check($source, $items = array()) {
-
+    public function check($source, $items = []) {
         // Loop through the items which need validating
         foreach ($items as $item => $rules) {
-
             // Loop through each validation rule for the set item
             foreach ($rules as $rule => $rule_value) {
-
                 $value = trim($source[$item]);
 
                 // Escape the item's contents just in case
@@ -52,48 +51,54 @@ class Validate {
                 if ($rule === 'required' && empty($value)) {
                     // The post array does not include this value, return an error
                     $this->addError("{$item} is required");
-                } else if (!empty($value)) {
+                } else if (! empty($value)) {
                     // The post array does include this value, continue validating
                     switch ($rule) {
                             // Minimum of $rule_value characters
-                        case 'min';
+                        case 'min':
                             if (mb_strlen($value) < $rule_value) {
                                 // Not a minumum of $rule_value characters, return an error
                                 $this->addError("{$item} must be a minimum of {$rule_value} characters.");
                             }
+
                             break;
 
                             // Maximum of $rule_value characters
-                        case 'max';
+                        case 'max':
                             if (mb_strlen($value) > $rule_value) {
                                 // Above the maximum of $rule_value characters, return an error
                                 $this->addError("{$item} must be a maximum of {$rule_value} characters.");
                             }
+
                             break;
 
                             // Check value matches another value
-                        case 'matches';
+                        case 'matches':
                             if ($value != $source[$rule_value]) {
                                 // Value does not match, return an error
                                 $this->addError("{$rule_value} must match {$item}.");
                             }
+
                             break;
 
                             // Check the user has agreed to the terms and conditions
-                        case 'agree';
+                        case 'agree':
                             if ($value != 1) {
                                 // The user has not agreed, return an error
-                                $this->addError("You must agree to our terms and conditions in order to register.");
+                                $this->addError('You must agree to our terms and conditions in order to register.');
                             }
+
                             break;
 
                             // Check the value has not already been inputted in the database
-                        case 'unique';
-                            $check = $this->_db->get($rule_value, array($item, '=', $value));
+                        case 'unique':
+                            $check = $this->_db->get($rule_value, [$item, '=', $value]);
+
                             if ($check->count()) {
                                 // The value has already been inputted, return an error
                                 $this->addError("The username/email {$item} already exists!");
                             }
+
                             break;
 
                         // TODO: Fix isvalid
@@ -109,59 +114,69 @@ class Validate {
                         */
 
                             // Check if email is valid
-                        case 'email';
-                            if (!filter_var($value, FILTER_VALIDATE_EMAIL)) {
+                        case 'email':
+                            if (! filter_var($value, FILTER_VALIDATE_EMAIL)) {
                                 // Value is not a valid email
                                 $this->addError("{$value} is not a valid email.");
                             }
+
                             break;
 
                         case 'timezone':
-                            if (!in_array($value, DateTimeZone::listIdentifiers(DateTimeZone::ALL))) {
+                            if (! in_array($value, DateTimeZone::listIdentifiers(DateTimeZone::ALL))) {
                                 $this->addError("The timezone {$item} is invalid.");
                             }
+
                             break;
 
                             // Check that the specified user account is set as active (ie validated)
-                        case 'isactive';
-                            $check = $this->_db->get('users', array($item, '=', $value));
+                        case 'isactive':
+                            $check = $this->_db->get('users', [$item, '=', $value]);
+
                             if ($check->count()) {
                                 $isuseractive = $check->first()->active;
+
                                 if ($isuseractive == 0) {
                                     // Not active, return an error
-                                    $this->addError("That username is inactive. Have you validated your account or requested a password reset?");
+                                    $this->addError('That username is inactive. Have you validated your account or requested a password reset?');
                                 }
                             }
+
                             break;
 
                             // Check that the specified user account is not banned
-                        case 'isbanned';
-                            $check = $this->_db->get('users', array($item, '=', $value));
+                        case 'isbanned':
+                            $check = $this->_db->get('users', [$item, '=', $value]);
+
                             if ($check->count()) {
                                 $isuserbanned = $check->first()->isbanned;
+
                                 if ($isuserbanned == 1) {
                                     // The user is banned, return an error
                                     $this->addError("The username {$item} is banned.");
                                 }
                             }
+
                             break;
 
-                        case 'isbannedip';
+                        case 'isbannedip':
                             // Todo: Check if IP is banned
                             break;
 
                         case 'alphanumeric':
-                            if (!ctype_alnum($value)) {
+                            if (! ctype_alnum($value)) {
                                 // $value is not alphanumeric
                                 $this->addError("{$item} must be alphanumeric.");
                             }
+
                             break;
 
                         case 'numeric':
-                            if (!is_numeric($value)) {
+                            if (! is_numeric($value)) {
                                 // $value is not numeric
                                 $this->addError("{$item} must be numeric.");
                             }
+
                             break;
                     }
                 }
diff --git a/core/classes/WidgetBase.php b/core/classes/WidgetBase.php
index 9b086985e000cab7f96ecb8e8e3d9ff1fdfeed28..4994e7f9cc90aed10eb2e8af978ef9eabaabc813 100644
--- a/core/classes/WidgetBase.php
+++ b/core/classes/WidgetBase.php
@@ -9,18 +9,25 @@
  *  Widget Base class
  */
 
-abstract class WidgetBase {
-
+abstract class WidgetBase
+{
     protected $_name,
+
               $_pages,
+
               $_location,
+
               $_content,
+
               $_description,
+
               $_module,
+
               $_order,
-              $_settings = null;
 
-    public function __construct($pages = array()) {
+              $_settings;
+
+    public function __construct($pages = []) {
         $this->_pages = $pages;
     }
 
@@ -56,5 +63,5 @@ abstract class WidgetBase {
         return $this->_order;
     }
 
-    public abstract function initialise();
+    abstract public function initialise();
 }
diff --git a/core/classes/Widgets.php b/core/classes/Widgets.php
index 40224bcb693a9e483b69a4046e6e7e941439cb08..d1a0bc2a063d8719d2d5547a543652286e89e294 100644
--- a/core/classes/Widgets.php
+++ b/core/classes/Widgets.php
@@ -9,12 +9,16 @@
  *  Widget class
  */
 
-class Widgets {
+class Widgets
+{
+    private $_widgets = [],
+
+            $_enabled = [],
 
-    private $_widgets = array(),
-            $_enabled = array(),
             $_cache,
+
             $_db,
+
             $_name;
 
     public function __construct($cache, $name = 'core') {
@@ -26,21 +30,18 @@ class Widgets {
         $this->_db = DB::getInstance();
 
         $enabled = $this->_cache->retrieve('enabled');
-        if(count($enabled))
+
+        if (count($enabled))
             $this->_enabled = $enabled;
     }
 
-    /*
-     *  Add a widget
-     */
+    // Add a widget
     public function add($widget) {
         // Add widget to added widget list
         $this->_widgets[$widget->getName()] = $widget;
     }
 
-    /*
-     *  Enable a widget
-     */
+    // Enable a widget
     public function enable($widget) {
         // Add widget to enabled widget list
         $this->_enabled[$widget->getName()] = true;
@@ -48,49 +49,45 @@ class Widgets {
         $this->_cache->store('enabled', $this->_enabled);
 
         // Update database
-        $widget_id = $this->_db->get('widgets', array('name', '=', $widget->getName()));
+        $widget_id = $this->_db->get('widgets', ['name', '=', $widget->getName()]);
+
         if ($widget_id->count()) {
             $widget_id = $widget_id->first();
-            $this->_db->update('widgets', $widget_id->id, array('enabled' => 1));
+            $this->_db->update('widgets', $widget_id->id, ['enabled' => 1]);
         }
     }
 
-    /*
-     *  Disable a widget
-     */
+    // Disable a widget
     public function disable($widget) {
         unset($this->_enabled[$widget->getName()]);
         $this->_cache->setCache($this->_name . '-widgets');
         $this->_cache->store('enabled', $this->_enabled);
 
         // Update database
-        $widget_id = $this->_db->get('widgets', array('name', '=', $widget->getName()));
-        if($widget_id->count()) {
+        $widget_id = $this->_db->get('widgets', ['name', '=', $widget->getName()]);
+
+        if ($widget_id->count()) {
             $widget_id = $widget_id->first();
-            $this->_db->update('widgets', $widget_id->id, array('enabled' => 0));
+            $this->_db->update('widgets', $widget_id->id, ['enabled' => 0]);
         }
     }
 
-    /*
-     *  Get a single widget by name
-     */
+    // Get a single widget by name
     public function getWidget($name = null) {
-        if($name)
-            if(array_key_exists($name, $this->_widgets))
+        if ($name)
+            if (array_key_exists($name, $this->_widgets))
                 return $this->_widgets[$name];
 
         return null;
     }
 
-    /*
-     *  Get code for all enabled widgets on the current page
-     */
+    // Get code for all enabled widgets on the current page
     public function getWidgets($location = 'right') {
-        $ret = array();
+        $ret = [];
 
         $widgets = $this->getAll();
 
-        foreach($widgets as $item) {
+        foreach ($widgets as $item) {
             if (array_key_exists($item->getName(), $this->_enabled)
                 && $item->getLocation() == $location
                 && is_array($item->getPages())
@@ -105,48 +102,40 @@ class Widgets {
         return $ret;
     }
 
-    /*
-     *  List all widgets
-     */
+    // List all widgets
     public function getAll() {
         $widgets = $this->_widgets;
-        uasort($widgets, function($a, $b) {
+        uasort($widgets, function ($a, $b) {
             return $a->getOrder() - $b->getOrder();
         });
 
         return $widgets;
     }
 
-    /*
-     *  Get all enabled widget names
-     */
+    // Get all enabled widget names
     public function getAllEnabledNames() {
         return $this->_enabled;
     }
 
-    /*
-     *  Is a widget enabled?
-     */
+    // Is a widget enabled?
     public function isEnabled($widget) {
         return array_key_exists($widget->getName(), $this->_enabled);
     }
 
-    /*
-     *  Get a list of pages a widget is enabled on, by name
-     */
+    // Get a list of pages a widget is enabled on, by name
     public function getPages($name) {
-        $pages = $this->_db->get('widgets', array('name', '=', $name));
-        if($pages->count()) {
+        $pages = $this->_db->get('widgets', ['name', '=', $name]);
+
+        if ($pages->count()) {
             $pages = $pages->first();
+
             return json_decode($pages->pages, true);
         }
 
-        return array();
+        return [];
     }
 
-    /*
-     *  Get the name of this collection of widgets
-     */
+    // Get the name of this collection of widgets
     public function getName() {
         return $this->_name;
     }
diff --git a/core/init.php b/core/init.php
index 7a85260b0c04a8f6be88a42dad8b106022d5b11d..ee61cf2b3c39c9578a848acc0e4b5831b7d7245d 100644
--- a/core/init.php
+++ b/core/init.php
@@ -10,7 +10,7 @@
  */
 
 // Nameless error handling
-require_once(join(DIRECTORY_SEPARATOR, array(ROOT_PATH, 'core', 'classes', 'ErrorHandler.php')));
+require_once (join(DIRECTORY_SEPARATOR, [ROOT_PATH, 'core', 'classes', 'ErrorHandler.php']));
 set_exception_handler([ErrorHandler::class, 'catchException']);
 // catchError() used for throw_error or any exceptions which may be missed by catchException()
 set_error_handler([ErrorHandler::class, 'catchError']);
@@ -18,11 +18,11 @@ set_error_handler([ErrorHandler::class, 'catchError']);
 session_start();
 
 // Page variable must be set
-if (!isset($page)) {
+if (! isset($page)) {
     die('$page variable is unset. Cannot continue.');
 }
 
-if (!file_exists(ROOT_PATH . '/core/config.php')) {
+if (! file_exists(ROOT_PATH . '/core/config.php')) {
     if (is_writable(ROOT_PATH . '/core')) {
         fopen(ROOT_PATH . '/core/config.php', 'w');
     } else {
@@ -30,7 +30,7 @@ if (!file_exists(ROOT_PATH . '/core/config.php')) {
     }
 }
 
-if (!file_exists(ROOT_PATH . '/cache/templates_c')) {
+if (! file_exists(ROOT_PATH . '/cache/templates_c')) {
     try {
         mkdir(ROOT_PATH . '/cache/templates_c', 0777, true);
     } catch (Exception $e) {
@@ -39,24 +39,23 @@ if (!file_exists(ROOT_PATH . '/cache/templates_c')) {
 }
 
 // Require config
-require(ROOT_PATH . '/core/config.php');
+require (ROOT_PATH . '/core/config.php');
 
 if (isset($conf) && is_array($conf)) {
     $GLOBALS['config'] = $conf;
-} else if (!isset($GLOBALS['config'])) {
+} else if (! isset($GLOBALS['config'])) {
     $page = 'install';
 }
 
-/*
- *  Autoload classes
- */
+// Autoload classes
 require_once ROOT_PATH . '/core/includes/smarty/Smarty.class.php';
 
 // Any errors thrown now will not be caught by the error handler, as they require some classes be preloaded
 spl_autoload_register(function ($class) {
-    $path = join(DIRECTORY_SEPARATOR, array(ROOT_PATH, 'core', 'classes', $class . '.php'));
+    $path = join(DIRECTORY_SEPARATOR, [ROOT_PATH, 'core', 'classes', $class . '.php']);
+
     if (file_exists($path)) {
-        require_once($path);
+        require_once ($path);
     }
 });
     
@@ -64,69 +63,72 @@ spl_autoload_register(function ($class) {
 if (isset($_GET['route']) && rtrim($_GET['route'], '/') == '/panel/upgrade') {
     $pages = new Pages();
     $pages->add('Core', '/panel/upgrade', 'pages/panel/upgrade.php');
+
     return;
 }
 
 if ($page != 'install') {
-    /*
-    *  Initialise
-    */
+    // Initialise
 
     // Friendly URLs?
     define('FRIENDLY_URLS', Config::get('core/friendly'));
 
     // Set up cache
-    $cache = new Cache(array('name' => 'nameless', 'extension' => '.cache', 'path' => ROOT_PATH . '/cache/'));
+    $cache = new Cache(['name' => 'nameless', 'extension' => '.cache', 'path' => ROOT_PATH . '/cache/']);
 
     // Force https?
     $cache->setCache('force_www_cache');
+
     if ($cache->isCached('force_www')) {
         $force_www = $cache->retrieve('force_www');
+
         if ($force_www == 'true')
             define('FORCE_WWW', true);
-    } else
-        $cache->store('force_www', false);
+    } else $cache->store('force_www', false);
 
     $cache->setCache('force_https_cache');
+
     if ($cache->isCached('force_https')) {
         $force_https = $cache->retrieve('force_https');
+
         if ($force_https == 'true') {
-            if ($_SERVER["HTTPS"] != "on") {
+            if ($_SERVER['HTTPS'] != 'on') {
                 // Redirect to https
 
                 // Force www?
                 if (defined('FORCE_WWW')) {
                     if (strpos($_SERVER['HTTP_HOST'], 'www.') === false) {
-                        header('Location: https://www.' . $_SERVER["HTTP_HOST"] . $_SERVER["REQUEST_URI"]);
-                        die();
-                    } else {
-                        header("Location: https://" . $_SERVER["HTTP_HOST"] . $_SERVER["REQUEST_URI"]);
+                        header('Location: https://www.' . $_SERVER['HTTP_HOST'] . $_SERVER['REQUEST_URI']);
+
                         die();
                     }
-                } else {
-                    header("Location: https://" . $_SERVER["HTTP_HOST"] . $_SERVER["REQUEST_URI"]);
-                    die();
+                        header('Location: https://' . $_SERVER['HTTP_HOST'] . $_SERVER['REQUEST_URI']);
+
+                        die();
                 }
-            } else {
+                    header('Location: https://' . $_SERVER['HTTP_HOST'] . $_SERVER['REQUEST_URI']);
+
+                    die();
+            }
                 // Force www?
                 if (defined('FORCE_WWW') && strpos($_SERVER['HTTP_HOST'], 'www.') === false) {
-                    header('Location: https://www.' . $_SERVER["HTTP_HOST"] . $_SERVER["REQUEST_URI"]);
+                    header('Location: https://www.' . $_SERVER['HTTP_HOST'] . $_SERVER['REQUEST_URI']);
+
                     die();
                 }
-            }
-
+            
             define('FORCE_SSL', true);
         }
     } else {
         $cache->store('force_https', false);
     }
 
-    if (!defined('FORCE_SSL')) {
+    if (! defined('FORCE_SSL')) {
         if (defined('FORCE_WWW') && strpos($_SERVER['HTTP_HOST'], 'www.') === false) {
-            if ($_SERVER["HTTPS"] != "on") {
-                header('Location: http://www.' . $_SERVER["HTTP_HOST"] . $_SERVER["REQUEST_URI"]);
+            if ($_SERVER['HTTPS'] != 'on') {
+                header('Location: http://www.' . $_SERVER['HTTP_HOST'] . $_SERVER['REQUEST_URI']);
             } else {
-                header('Location: https://www.' . $_SERVER["HTTP_HOST"] . $_SERVER["REQUEST_URI"]);
+                header('Location: https://www.' . $_SERVER['HTTP_HOST'] . $_SERVER['REQUEST_URI']);
             }
 
             die();
@@ -142,8 +144,9 @@ if ($page != 'install') {
     define('PAGE_LOADING', $page_loading);
 
     // Error reporting
-    if (!defined('DEBUGGING')) {
+    if (! defined('DEBUGGING')) {
         $cache->setCache('error_cache');
+
         if ($cache->isCached('error_reporting')) {
             if ($cache->retrieve('error_reporting') == 1) {
                 // Enabled
@@ -168,27 +171,29 @@ if ($page != 'install') {
     $configuration = new Configuration($cache);
 
     // Get the Nameless version
-    $nameless_version = $queries->getWhere('settings', array('name', '=', 'nameless_version'));
+    $nameless_version = $queries->getWhere('settings', ['name', '=', 'nameless_version']);
     $nameless_version = $nameless_version[0]->value;
     define('NAMELESS_VERSION', $nameless_version);
 
     // Get the Bot URL(s)
-    $bot_url = $queries->getWhere('settings', array('name', '=', 'discord_bot_url'));
+    $bot_url = $queries->getWhere('settings', ['name', '=', 'discord_bot_url']);
     $bot_url = $bot_url[0]->value;
+
     if ($bot_url == null) $bot_url = '';
     define('BOT_URL', $bot_url);
 
-    $bot_username = $queries->getWhere('settings', array('name', '=', 'discord_bot_username'));
+    $bot_username = $queries->getWhere('settings', ['name', '=', 'discord_bot_username']);
     $bot_username = $bot_username[0]->value;
+
     if ($bot_username == null) $bot_username = '';
     define('BOT_USERNAME', $bot_username);
 
     // User initialisation
     $user = new User();
     // Do they need logging in (checked remember me)?
-    if (Cookie::exists(Config::get('remember/cookie_name')) && !Session::exists(Config::get('session/session_name'))) {
+    if (Cookie::exists(Config::get('remember/cookie_name')) && ! Session::exists(Config::get('session/session_name'))) {
         $hash = Cookie::get(Config::get('remember/cookie_name'));
-        $hashCheck = DB::getInstance()->get('users_session', array('hash', '=', $hash));
+        $hashCheck = DB::getInstance()->get('users_session', ['hash', '=', $hash]);
 
         if ($hashCheck->count()) {
             $user = new User($hashCheck->first()->user_id);
@@ -206,7 +211,7 @@ if ($page != 'install') {
 
         $config_path = Config::get('core/path');
 
-        if (!empty($config_path)) {
+        if (! empty($config_path)) {
             $config_path = explode('/', Config::get('core/path'));
 
             for ($i = 0; $i < count($config_path); $i++) {
@@ -234,6 +239,7 @@ if ($page != 'install') {
             define('TIMEZONE', $user->data()->timezone);
         } else {
             $cache->setCache('timezone_cache');
+
             if ($cache->isCached('timezone')) {
                 define('TIMEZONE', $cache->retrieve('timezone'));
             } else {
@@ -247,12 +253,12 @@ if ($page != 'install') {
     }
 
     // Language
-    if (!$user->isLoggedIn() || !($user->data()->language_id)) {
+    if (! $user->isLoggedIn() || ! ($user->data()->language_id)) {
         // Default language for guests
         $cache->setCache('languagecache');
         $language = $cache->retrieve('language');
 
-        if (!$language) {
+        if (! $language) {
             define('LANGUAGE', 'EnglishUK');
             $language = new Language();
         } else {
@@ -261,13 +267,14 @@ if ($page != 'install') {
         }
     } else {
         // User selected language
-        $language = $queries->getWhere('languages', array('id', '=', $user->data()->language_id));
-        if (!count($language)) {
+        $language = $queries->getWhere('languages', ['id', '=', $user->data()->language_id]);
+
+        if (! count($language)) {
             // Get default language
             $cache->setCache('languagecache');
             $language = $cache->retrieve('language');
 
-            if (!$language) {
+            if (! $language) {
                 define('LANGUAGE', 'EnglishUK');
                 $language = new Language();
             } else {
@@ -284,32 +291,33 @@ if ($page != 'install') {
     $cache->setCache('sitenamecache');
     $sitename = $cache->retrieve('sitename');
 
-    if (!$sitename) {
+    if (! $sitename) {
         define('SITE_NAME', 'NamelessMC');
     } else {
         define('SITE_NAME', $sitename);
     }
 
     // Template
-    if (!$user->isLoggedIn() || !($user->data()->theme_id)) {
+    if (! $user->isLoggedIn() || ! ($user->data()->theme_id)) {
         // Default template for guests
         $cache->setCache('templatecache');
         $template = $cache->retrieve('default');
 
-        if (!$template) {
+        if (! $template) {
             define('TEMPLATE', 'DefaultRevamp');
         } else {
             define('TEMPLATE', $template);
         }
     } else {
         // User selected template
-        $template = $queries->getWhere('templates', array('id', '=', $user->data()->theme_id));
-        if (!count($template)) {
+        $template = $queries->getWhere('templates', ['id', '=', $user->data()->theme_id]);
+
+        if (! count($template)) {
             // Get default template
             $cache->setCache('templatecache');
             $template = $cache->retrieve('default');
 
-            if (!$template) {
+            if (! $template) {
                 define('TEMPLATE', 'DefaultRevamp');
             } else {
                 define('TEMPLATE', $template);
@@ -326,17 +334,18 @@ if ($page != 'install') {
                     if ($user_template->id === $template->id) {
                         $hasPermission = true;
                         define('TEMPLATE', $template->name);
+
                         break;
                     }
                 }
             }
 
-            if (!$hasPermission) {
+            if (! $hasPermission) {
                 // Get default template
                 $cache->setCache('templatecache');
                 $template = $cache->retrieve('default');
 
-                if (!$template) {
+                if (! $template) {
                     define('TEMPLATE', 'DefaultRevamp');
                 } else {
                     define('TEMPLATE', $template);
@@ -349,7 +358,7 @@ if ($page != 'install') {
     $cache->setCache('templatecache');
     $template = $cache->retrieve('panel_default');
 
-    if (!$template) {
+    if (! $template) {
         define('PANEL_TEMPLATE', 'Default');
     } else {
         define('PANEL_TEMPLATE', $template);
@@ -359,7 +368,7 @@ if ($page != 'install') {
     $smarty = new Smarty();
 
     // Basic Smarty variables
-    $smarty->assign(array(
+    $smarty->assign([
         'CONFIG_PATH' => defined('CONFIG_PATH') ? CONFIG_PATH . '/' : '/',
         'OG_URL' => Output::getClean(rtrim(Util::getSelfURL(), '/') . $_SERVER['REQUEST_URI']),
         'OG_IMAGE' => Output::getClean(rtrim(Util::getSelfURL(), '/') . '/core/assets/img/site_image.png'),
@@ -367,16 +376,16 @@ if ($page != 'install') {
         'SITE_HOME' => URL::build('/'),
         'USER_INFO_URL' => URL::build('/queries/user/', 'id='),
         'GUEST' => $language->get('user', 'guest')
-    ));
+    ]);
 
     // Cookie notice
-    if (!$user->isLoggedIn()) {
+    if (! $user->isLoggedIn()) {
         // Cookie notice for guests
-        if (!Cookie::exists('accept')) {
-            $smarty->assign(array(
+        if (! Cookie::exists('accept')) {
+            $smarty->assign([
                 'COOKIE_NOTICE' => $language->get('general', 'cookie_notice'),
                 'COOKIE_AGREE' => $language->get('general', 'cookie_agree')
-            ));
+            ]);
 
             define('COOKIE_NOTICE', true);
         }
@@ -384,43 +393,43 @@ if ($page != 'install') {
 
     // Avatars
     $cache->setCache('avatar_settings_cache');
+
     if ($cache->isCached('custom_avatars') && $cache->retrieve('custom_avatars') == 1) {
         define('CUSTOM_AVATARS', true);
     }
 
     if ($cache->isCached('default_avatar_type')) {
         define('DEFAULT_AVATAR_TYPE', $cache->retrieve('default_avatar_type'));
+
         if (DEFAULT_AVATAR_TYPE == 'custom' && $cache->isCached('default_avatar_image'))
             define('DEFAULT_AVATAR_IMAGE', $cache->retrieve('default_avatar_image'));
-        else
-            define('DEFAULT_AVATAR_IMAGE', '');
-    } else
-        define('DEFAULT_AVATAR_TYPE', 'minecraft');
+        else define('DEFAULT_AVATAR_IMAGE', '');
+    } else define('DEFAULT_AVATAR_TYPE', 'minecraft');
 
     if (DEFAULT_AVATAR_TYPE == 'minecraft') {
         if ($cache->isCached('avatar_source'))
             define('DEFAULT_AVATAR_SOURCE', $cache->retrieve('avatar_source'));
-        else
-            define('DEFAULT_AVATAR_SOURCE', 'cravatar');
+        else define('DEFAULT_AVATAR_SOURCE', 'cravatar');
 
         if ($cache->isCached('avatar_perspective'))
             define('DEFAULT_AVATAR_PERSPECTIVE', $cache->retrieve('avatar_perspective'));
-        else
-            define('DEFAULT_AVATAR_PERSPECTIVE', 'face');
+        else define('DEFAULT_AVATAR_PERSPECTIVE', 'face');
     }
 
     // Maintenance mode?
     $cache->setCache('maintenance_cache');
     $maintenance = $cache->retrieve('maintenance');
+
     if (isset($maintenance['maintenance']) && $maintenance['maintenance'] != 'false') {
         // Enabled
         // Admins only beyond this point
-        if (!$user->isLoggedIn() || !$user->canViewACP()) {
+        if (! $user->isLoggedIn() || ! $user->canViewACP()) {
             // Maintenance mode
             if (isset($_GET['route']) && (rtrim($_GET['route'], '/') == '/login' || rtrim($_GET['route'], '/') == '/forgot_password' || substr($_GET['route'], 0, 5) == '/api/')) {
                 // Can continue as normal
             } else {
-                require(ROOT_PATH . '/maintenance.php');
+                require (ROOT_PATH . '/maintenance.php');
+
                 die();
             }
         } else {
@@ -430,16 +439,16 @@ if ($page != 'install') {
     }
 
     // Minecraft integration?
-    $mc_integration = $queries->getWhere('settings', array('name', '=', 'mc_integration'));
+    $mc_integration = $queries->getWhere('settings', ['name', '=', 'mc_integration']);
+
     if (count($mc_integration) && $mc_integration[0]->value == '1')
         define('MINECRAFT', true);
-    else
-        define('MINECRAFT', false);
+    else define('MINECRAFT', false);
 
     // Navbar links
     $navigation = new Navigation();
-    $cc_nav     = new Navigation();
-    $mod_nav    = new Navigation(true); // $mod_nav = panel nav
+    $cc_nav = new Navigation();
+    $mod_nav = new Navigation(true); // $mod_nav = panel nav
 
     // Add links to cc_nav
     $cc_nav->add('cc_overview', $language->get('user', 'overview'), URL::build('/user'));
@@ -450,7 +459,8 @@ if ($page != 'install') {
     // Add homepage to navbar
     // Check navbar order + icon in cache
     $cache->setCache('navbar_order');
-    if (!$cache->isCached('index_order')) {
+
+    if (! $cache->isCached('index_order')) {
         // Create cache entry now
         $home_order = 1;
         $cache->store('index_order', 1);
@@ -459,10 +469,10 @@ if ($page != 'install') {
     }
 
     $cache->setCache('navbar_icons');
+
     if ($cache->isCached('index_icon'))
         $home_icon = $cache->retrieve('index_icon');
-    else
-        $home_icon = '';
+    else $home_icon = '';
 
     $navigation->add('index', $language->get('general', 'home'), URL::build('/'), 'top', null, $home_order, $home_icon);
 
@@ -474,10 +484,11 @@ if ($page != 'install') {
 
     // Modules
     $cache->setCache('modulescache');
-    if (!$cache->isCached('enabled_modules')) {
-        $cache->store('enabled_modules', array(
-            array('name' => 'Core', 'priority' => 1)
-        ));
+
+    if (! $cache->isCached('enabled_modules')) {
+        $cache->store('enabled_modules', [
+            ['name' => 'Core', 'priority' => 1]
+        ]);
         $cache->store('module_core', true);
     }
     $enabled_modules = (array) $cache->retrieve('enabled_modules');
@@ -485,15 +496,16 @@ if ($page != 'install') {
     foreach ($enabled_modules as $module) {
         if ($module['name'] == 'Core') {
             $core_exists = true;
+
             break;
         }
     }
 
-    if (!isset($core_exists)) {
-        $enabled_modules[] = array(
+    if (! isset($core_exists)) {
+        $enabled_modules[] = [
             'name' => 'Core',
             'priority' => 1
-        );
+        ];
     }
 
     $pages = new Pages();
@@ -505,7 +517,7 @@ if ($page != 'install') {
 
     foreach ($enabled_modules as $module) {
         if (file_exists(ROOT_PATH . '/modules/' . $module['name'] . '/init.php')) {
-            require(ROOT_PATH . '/modules/' . $module['name'] . '/init.php');
+            require (ROOT_PATH . '/modules/' . $module['name'] . '/init.php');
         }
     }
 
@@ -519,38 +531,42 @@ if ($page != 'install') {
             $user->logout();
             Session::flash('home_error', $language->get('user', 'you_have_been_banned'));
             Redirect::to(URL::build('/'));
+
             die();
         }
 
         // Is the IP address banned?
-        $ip_bans = $queries->getWhere('ip_bans', array('ip', '=', $ip));
+        $ip_bans = $queries->getWhere('ip_bans', ['ip', '=', $ip]);
+
         if (count($ip_bans)) {
             $user->logout();
             Session::flash('home_error', $language->get('user', 'you_have_been_banned'));
             Redirect::to(URL::build('/'));
+
             die();
         }
 
         // Update user last IP and last online
         if (filter_var($ip, FILTER_VALIDATE_IP)) {
-            $user->update(array(
+            $user->update([
                 'last_online' => date('U'),
                 'lastip' => $ip
-            ));
+            ]);
         } else {
-            $user->update(array(
+            $user->update([
                 'last_online' => date('U')
-            ));
+            ]);
         }
 
         // Insert it into the logs
-        $user_ip_logged = $queries->getWhere('users_ips', array('ip', '=', $ip));
-        if (!count($user_ip_logged)) {
+        $user_ip_logged = $queries->getWhere('users_ips', ['ip', '=', $ip]);
+
+        if (! count($user_ip_logged)) {
             // Create the entry now
-            $queries->create('users_ips', array(
+            $queries->create('users_ips', [
                 'user_id' => $user->data()->id,
                 'ip' => $ip
-            ));
+            ]);
         } else {
             if (count($user_ip_logged) > 1) {
                 foreach ($user_ip_logged as $user_ip) {
@@ -558,24 +574,25 @@ if ($page != 'install') {
                     if ($user_ip->user_id == $user->data()->id) {
                         // Already logged for this user
                         $already_logged = true;
+
                         break;
                     }
                 }
 
-                if (!isset($already_logged)) {
+                if (! isset($already_logged)) {
                     // Not yet logged, do so now
-                    $queries->create('users_ips', array(
+                    $queries->create('users_ips', [
                         'user_id' => $user->data()->id,
                         'ip' => $ip
-                    ));
+                    ]);
                 }
             } else {
                 // Does the entry already belong to the current user?
                 if ($user_ip_logged[0]->user_id != $user->data()->id) {
-                    $queries->create('users_ips', array(
+                    $queries->create('users_ips', [
                         'user_id' => $user->data()->id,
                         'ip' => $ip
-                    ));
+                    ]);
                 }
             }
         }
@@ -584,23 +601,25 @@ if ($page != 'install') {
         foreach ($user->getGroups() as $group) {
             if ($group->force_tfa) {
                 $forced = true;
+
                 break;
             }
         }
 
         if (isset($forced) && $forced) {
             // Do they have TFA configured?
-            if (!$user->data()->tfa_enabled) {
+            if (! $user->data()->tfa_enabled) {
                 if (strpos($_SERVER[REQUEST_URI], 'do=enable_tfa') === false) {
                     Session::put('force_tfa_alert', $language->get('admin', 'force_tfa_alert'));
                     Redirect::to(URL::build('/user/settings', 'do=enable_tfa'));
+
                     die();
                 }
             }
         }
 
         // Basic user variables
-        $smarty->assign('LOGGED_IN_USER', array(
+        $smarty->assign('LOGGED_IN_USER', [
             'username' => $user->getDisplayname(true),
             'nickname' => $user->getDisplayname(),
             'profile' => $user->getProfileURL(),
@@ -609,26 +628,26 @@ if ($page != 'install') {
             'user_title' => Output::getClean($user->data()->user_title),
             'avatar' => $user->getAvatar(),
             'uuid' => Output::getClean($user->data()->uuid)
-        ));
+        ]);
 
         // Panel access?
         if ($user->canViewACP()) {
-            $smarty->assign(array(
+            $smarty->assign([
                 'PANEL_LINK' => URL::build('/panel'),
                 'PANEL' => $language->get('moderator', 'staff_cp')
-            ));
+            ]);
         }
     } else {
         // Perform tasks for guests
-        if (!$_SESSION['checked'] || $_SESSION['checked'] <= strtotime('-5 minutes')) {
-            $already_online = $queries->getWhere('online_guests', array('ip', '=', $ip));
+        if (! $_SESSION['checked'] || $_SESSION['checked'] <= strtotime('-5 minutes')) {
+            $already_online = $queries->getWhere('online_guests', ['ip', '=', $ip]);
 
             $date = date('U');
 
             if (count($already_online)) {
-                $queries->update('online_guests', $already_online[0]->id, array('last_seen' => $date));
+                $queries->update('online_guests', $already_online[0]->id, ['last_seen' => $date]);
             } else {
-                $queries->create('online_guests', array('ip' => $ip, 'last_seen' => $date));
+                $queries->create('online_guests', ['ip' => $ip, 'last_seen' => $date]);
             }
 
             $_SESSION['checked'] = $date;
@@ -636,11 +655,7 @@ if ($page != 'install') {
     }
 
     // Auto unset signin tfa variables if set
-    if (strpos($_GET['route'], '/queries/') === false && (isset($_SESSION['remember']) || isset($_SESSION['username']) || isset($_SESSION['email']) || isset($_SESSION['password'])) && (!isset($_POST['tfa_code']) && !isset($_SESSION['mcassoc']))) {
-        unset($_SESSION['remember']);
-        unset($_SESSION['username']);
-        unset($_SESSION['email']);
-        unset($_SESSION['password']);
+    if (strpos($_GET['route'], '/queries/') === false && (isset($_SESSION['remember']) || isset($_SESSION['username']) || isset($_SESSION['email']) || isset($_SESSION['password'])) && (! isset($_POST['tfa_code']) && ! isset($_SESSION['mcassoc']))) {
+        unset($_SESSION['remember'], $_SESSION['username'], $_SESSION['email'], $_SESSION['password']);
     }
 }
-
diff --git a/core/installation/views/already_installed.view.php b/core/installation/views/already_installed.view.php
index 27a34d7ac3368a3473ba4ce48df1a543f177cce1..c6ce866b7f5bb6e86840b3a90cbde7d9aee7ba5d 100644
--- a/core/installation/views/already_installed.view.php
+++ b/core/installation/views/already_installed.view.php
@@ -1,4 +1,4 @@
-<?php require(__DIR__ . '/includes/header.php'); ?>
+<?php require (__DIR__ . '/includes/header.php'); ?>
 
 <div class="main-content">
     <div class="ui container">
@@ -16,4 +16,4 @@
     </div>
 </div>
 
-<?php require(__DIR__ . '/includes/footer.php'); ?>
+<?php require (__DIR__ . '/includes/footer.php'); ?>
diff --git a/core/installation/views/includes/functions.php b/core/installation/views/includes/functions.php
index c92b45d5042c2ca1432e927e1fb670e1121378a4..209081a8c4d60ba0d620ccd7e20fe1929c5624dc 100644
--- a/core/installation/views/includes/functions.php
+++ b/core/installation/views/includes/functions.php
@@ -1,4 +1,5 @@
 <?php
+
 $nameless_terms = 'This website uses "Nameless" website software. The ' .
 '"Nameless" software creators will not be held responsible for any content ' .
 'that may be experienced whilst browsing this site, nor are they responsible ' .
@@ -6,12 +7,12 @@ $nameless_terms = 'This website uses "Nameless" website software. The ' .
 'The website is run independently from the software creators, and any content' .
 ' is the responsibility of the website administration.';
 
-function create_step($name, $icon, $child_steps = array()) {
-
+function create_step($name, $icon, $child_steps = []) {
     global $step;
 
     $active = '';
-    if (!isset($step)) {
+
+    if (! isset($step)) {
         if (in_array('welcome', $child_steps)) {
             $active = 'active ';
         }
@@ -27,14 +28,12 @@ function create_step($name, $icon, $child_steps = array()) {
             </div>
         </div>
     ";
-
 }
 
-function create_field($type, $label, $name, $id, $value = '', $options = array(), $fallback = false) {
-
+function create_field($type, $label, $name, $id, $value = '', $options = [], $fallback = false) {
     if ($type == 'select') {
-
         $options_markup = '';
+
         foreach ($options as $option_value => $option_label) {
             $selected = ($value == $option_value ? ' selected' : ($fallback ? ($value == $option_label ? ' selected' : '') : ''));
             $option_value = ($fallback ? $option_label : $option_value);
@@ -49,22 +48,17 @@ function create_field($type, $label, $name, $id, $value = '', $options = array()
                 </select>
             </div>
         ";
-
     } else {
-
         echo "
             <div class=\"field\">
                 <label for=\"$id\">$label</label>
                 <input type=\"$type\" name=\"$name\" id=\"$id\" placeholder=\"$label\" value=\"$value\" autocomplete=\"off\">
             </div>
         ";
-
     }
-
 }
 
 function validate_requirement($text, $condition) {
-
     if ($condition == true) {
         echo "
             <div class=\"ui small positive message\">
@@ -81,12 +75,11 @@ function validate_requirement($text, $condition) {
         ";
     }
 
-    if (!isset($_SESSION['requirements_validated'])) {
+    if (! isset($_SESSION['requirements_validated'])) {
         $_SESSION['requirements_validated'] = $condition;
     } else {
         if ($_SESSION['requirements_validated'] == 'true') {
             $_SESSION['requirements_validated'] = $condition;
         }
     }
-
 }
diff --git a/core/installation/views/includes/header.php b/core/installation/views/includes/header.php
index 249a1b4070e57487ef677c844120b19f5d3c8bec..4863263723b4df4e6596ebbb49215b3b52e76276 100644
--- a/core/installation/views/includes/header.php
+++ b/core/installation/views/includes/header.php
@@ -8,8 +8,8 @@ if (isset($_SESSION['installer_language']) && is_file('custom/languages/' . $_SE
     $installer_language = 'EnglishUK';
 }
 
-$languages_folders = glob('custom' . DIRECTORY_SEPARATOR . 'languages' . DIRECTORY_SEPARATOR . '*' , GLOB_ONLYDIR);
-$languages = array();
+$languages_folders = glob('custom' . DIRECTORY_SEPARATOR . 'languages' . DIRECTORY_SEPARATOR . '*', GLOB_ONLYDIR);
+$languages = [];
 
 foreach ($languages_folders as $folder) {
     $folder = explode(DIRECTORY_SEPARATOR, $folder);
diff --git a/core/installation/views/includes/site_initialize.php b/core/installation/views/includes/site_initialize.php
index 73e482702c9ca08201e609336cae96e79e5409be..1d622422cb602ab3a043c232c519d1c46e1b7748 100644
--- a/core/installation/views/includes/site_initialize.php
+++ b/core/installation/views/includes/site_initialize.php
@@ -4,659 +4,658 @@ $queries = new Queries();
 $cache = new Cache();
 
 // Create first category + forum
-$queries->create('forums', array(
-	'forum_title' => 'Category',
-	'forum_description' => 'The first forum category!',
-	'forum_order' => 1,
-	'forum_type' => 'category'
-));
-
-$queries->create('forums', array(
-	'forum_title' => 'Forum',
-	'forum_description' => 'The first discussion forum!',
-	'forum_order' => 2,
-	'parent' => 1,
-	'forum_type' => 'forum',
-	'news' => 1
-));
-
-$queries->create('topics', array(
-	'forum_id' => 2,
-	'topic_title' => 'Welcome to NamelessMC!',
-	'topic_creator' => 1,
-	'topic_last_user' => 1,
-	'topic_date' => date('U'),
-	'topic_reply_date' => date('U'),
-	'label' => null
-));
-
-$queries->create("posts", array(
-	'forum_id' => 2,
-	'topic_id' => 1,
-	'post_creator' => 1,
-	'post_content' => Output::getClean(
-		'&lt;p&gt;Welcome!&lt;/p&gt;
+$queries->create('forums', [
+    'forum_title' => 'Category',
+    'forum_description' => 'The first forum category!',
+    'forum_order' => 1,
+    'forum_type' => 'category'
+]);
+
+$queries->create('forums', [
+    'forum_title' => 'Forum',
+    'forum_description' => 'The first discussion forum!',
+    'forum_order' => 2,
+    'parent' => 1,
+    'forum_type' => 'forum',
+    'news' => 1
+]);
+
+$queries->create('topics', [
+    'forum_id' => 2,
+    'topic_title' => 'Welcome to NamelessMC!',
+    'topic_creator' => 1,
+    'topic_last_user' => 1,
+    'topic_date' => date('U'),
+    'topic_reply_date' => date('U'),
+    'label' => null
+]);
+
+$queries->create('posts', [
+    'forum_id' => 2,
+    'topic_id' => 1,
+    'post_creator' => 1,
+    'post_content' => Output::getClean(
+        '&lt;p&gt;Welcome!&lt;/p&gt;
 		&lt;p&gt;To get started with NamelessMC, visit your StaffCP using the blue gear icon in the top right of your screen.&lt;/p&gt;
 		&lt;p&gt;If you need support, visit our Discord server: &lt;a href=&quot;https://discord.gg/QWdS9CB&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://discord.gg/QWdS9CB&lt;/a&gt;&lt;/p&gt;
 		&lt;p&gt;Thank you and enjoy,&lt;/p&gt;
 		&lt;p&gt;The NamelessMC Development team.&lt;/p&gt;'
-	),
-	'post_date' => date('Y-m-d H:i:s'),
-	'created' => date('U')
-));
+    ),
+    'post_date' => date('Y-m-d H:i:s'),
+    'created' => date('U')
+]);
 
 // Permissions
 for ($i = 0; $i < 4; $i++) {
-	for ($n = 1; $n < 3; $n++) {
-		$queries->create('forums_permissions', array(
-			'group_id' => $i,
-			'forum_id' => $n,
-			'view' => 1,
-			'create_topic' => (($i == 0 || $i == 4) ? 0 : 1),
-			'edit_topic' => (($i == 0 || $i == 4) ? 0 : 1),
-			'create_post' => (($i == 0 || $i == 4) ? 0 : 1),
-			'view_other_topics' => 1,
-			'moderate' => (($i == 2 || $i == 3) ? 1 : 0)
-		));
-	}
+    for ($n = 1; $n < 3; $n++) {
+        $queries->create('forums_permissions', [
+            'group_id' => $i,
+            'forum_id' => $n,
+            'view' => 1,
+            'create_topic' => (($i == 0 || $i == 4) ? 0 : 1),
+            'edit_topic' => (($i == 0 || $i == 4) ? 0 : 1),
+            'create_post' => (($i == 0 || $i == 4) ? 0 : 1),
+            'view_other_topics' => 1,
+            'moderate' => (($i == 2 || $i == 3) ? 1 : 0)
+        ]);
+    }
 }
 
 // Forum Labels
-$queries->create('forums_labels', array(
-	'name' => 'Default',
-	'html' => '<span class="badge badge-default">{x}</span>'
-));
-
-$queries->create('forums_labels', array(
-	'name' => 'Primary',
-	'html' => '<span class="badge badge-primary">{x}</span>'
-));
-
-$queries->create('forums_labels', array(
-	'name' => 'Success',
-	'html' => '<span class="badge badge-success">{x}</span>'
-));
-
-$queries->create('forums_labels', array(
-	'name' => 'Info',
-	'html' => '<span class="badge badge-info">{x}</span>'
-));
-
-$queries->create('forums_labels', array(
-	'name' => 'Warning',
-	'html' => '<span class="badge badge-warning">{x}</span>'
-));
-
-$queries->create('forums_labels', array(
-	'name' => 'Danger',
-	'html' => '<span class="badge badge-danger">{x}</span>'
-));
+$queries->create('forums_labels', [
+    'name' => 'Default',
+    'html' => '<span class="badge badge-default">{x}</span>'
+]);
+
+$queries->create('forums_labels', [
+    'name' => 'Primary',
+    'html' => '<span class="badge badge-primary">{x}</span>'
+]);
+
+$queries->create('forums_labels', [
+    'name' => 'Success',
+    'html' => '<span class="badge badge-success">{x}</span>'
+]);
+
+$queries->create('forums_labels', [
+    'name' => 'Info',
+    'html' => '<span class="badge badge-info">{x}</span>'
+]);
+
+$queries->create('forums_labels', [
+    'name' => 'Warning',
+    'html' => '<span class="badge badge-warning">{x}</span>'
+]);
+
+$queries->create('forums_labels', [
+    'name' => 'Danger',
+    'html' => '<span class="badge badge-danger">{x}</span>'
+]);
 
 // Groups
-$queries->create('groups', array(
-	'name' => 'Member',
-	'group_html' => '<span class="badge badge-success">Member</span>',
-	'group_html_lg' => '<span class="badge badge-success">Member</span>',
-	'permissions' => '{"usercp.messaging":1,"usercp.signature":1,"usercp.nickname":1,"usercp.private_profile":1,"usercp.profile_banner":1}',
-	'default_group' => 1,
-	'order' => 3
-));
-
-$queries->create('groups', array(
-	'name' => 'Admin',
-	'group_html' => '<span class="badge badge-danger">Admin</span>',
-	'group_html_lg' => '<span class="badge badge-danger">Admin</span>',
-	'group_username_color' => '#ff0000',
-	'group_username_css' => '',
-	'admin_cp' => 1,
-	'permissions' => '{"admincp.core":1,"admincp.core.api":1,"admincp.core.seo":1,"admincp.core.general":1,"admincp.core.avatars":1,"admincp.core.fields":1,"admincp.core.debugging":1,"admincp.core.emails":1,"admincp.core.navigation":1,"admincp.core.announcements":1,"admincp.core.reactions":1,"admincp.core.registration":1,"admincp.core.social_media":1,"admincp.core.terms":1,"admincp.errors":1,"admincp.integrations":1,"admincp.discord":1,"admincp.minecraft":1,"admincp.minecraft.authme":1,"admincp.minecraft.verification":1,"admincp.minecraft.servers":1,"admincp.minecraft.query_errors":1,"admincp.minecraft.banners":1,"admincp.modules":1,"admincp.pages":1,"admincp.security":1,"admincp.security.acp_logins":1,"admincp.security.template":1,"admincp.styles":1,"admincp.styles.panel_templates":1,"admincp.styles.templates":1,"admincp.styles.templates.edit":1,"admincp.styles.images":1,"admincp.update":1,"admincp.users":1,"admincp.users.edit":1,"admincp.groups":1,"admincp.groups.self":1,"admincp.widgets":1,"modcp.ip_lookup":1,"modcp.punishments":1,"modcp.punishments.warn":1,"modcp.punishments.ban":1,"modcp.punishments.banip":1,"modcp.punishments.revoke":1,"modcp.reports":1,"modcp.profile_banner_reset":1,"usercp.messaging":1,"usercp.signature":1,"admincp.forums":1,"usercp.private_profile":1,"usercp.nickname":1,"usercp.profile_banner":1,"profile.private.bypass":1, "admincp.security.all":1,"admincp.core.hooks":1,"admincp.security.group_sync":1,"admincp.core.emails_mass_message":1,"modcp.punishments.reset_avatar":1,"usercp.gif_avatar":1}',
-	'order' => 1,
-	'staff' => 1
-));
-
-$queries->create('groups', array(
-	'name' => 'Moderator',
-	'group_html' => '<span class="badge badge-primary">Moderator</span>',
-	'group_html_lg' => '<span class="badge badge-primary">Moderator</span>',
-	'admin_cp' => 1,
-	'permissions' => '{"modcp.ip_lookup":1,"modcp.punishments":1,"modcp.punishments.warn":1,"modcp.punishments.ban":1,"modcp.punishments.banip":1,"modcp.punishments.revoke":1,"modcp.reports":1,"admincp.users":1,"modcp.profile_banner_reset":1,"usercp.messaging":1,"usercp.signature":1,"usercp.private_profile":1,"usercp.nickname":1,"usercp.profile_banner":1,"profile.private.bypass":1}',
-	'order' => 2,
-	'staff' => 1
-));
-
-$queries->create('groups', array(
-	'name' => 'Unconfirmed Member',
-	'group_html' => '<span class="badge badge-secondary">Unconfirmed Member</span>',
-	'group_html_lg' => '<span class="badge badge-secondary">Unconfirmed Member</span>',
-	'group_username_color' => '#6c757d',
-	'order' => 4
-));
+$queries->create('groups', [
+    'name' => 'Member',
+    'group_html' => '<span class="badge badge-success">Member</span>',
+    'group_html_lg' => '<span class="badge badge-success">Member</span>',
+    'permissions' => '{"usercp.messaging":1,"usercp.signature":1,"usercp.nickname":1,"usercp.private_profile":1,"usercp.profile_banner":1}',
+    'default_group' => 1,
+    'order' => 3
+]);
+
+$queries->create('groups', [
+    'name' => 'Admin',
+    'group_html' => '<span class="badge badge-danger">Admin</span>',
+    'group_html_lg' => '<span class="badge badge-danger">Admin</span>',
+    'group_username_color' => '#ff0000',
+    'group_username_css' => '',
+    'admin_cp' => 1,
+    'permissions' => '{"admincp.core":1,"admincp.core.api":1,"admincp.core.seo":1,"admincp.core.general":1,"admincp.core.avatars":1,"admincp.core.fields":1,"admincp.core.debugging":1,"admincp.core.emails":1,"admincp.core.navigation":1,"admincp.core.announcements":1,"admincp.core.reactions":1,"admincp.core.registration":1,"admincp.core.social_media":1,"admincp.core.terms":1,"admincp.errors":1,"admincp.integrations":1,"admincp.discord":1,"admincp.minecraft":1,"admincp.minecraft.authme":1,"admincp.minecraft.verification":1,"admincp.minecraft.servers":1,"admincp.minecraft.query_errors":1,"admincp.minecraft.banners":1,"admincp.modules":1,"admincp.pages":1,"admincp.security":1,"admincp.security.acp_logins":1,"admincp.security.template":1,"admincp.styles":1,"admincp.styles.panel_templates":1,"admincp.styles.templates":1,"admincp.styles.templates.edit":1,"admincp.styles.images":1,"admincp.update":1,"admincp.users":1,"admincp.users.edit":1,"admincp.groups":1,"admincp.groups.self":1,"admincp.widgets":1,"modcp.ip_lookup":1,"modcp.punishments":1,"modcp.punishments.warn":1,"modcp.punishments.ban":1,"modcp.punishments.banip":1,"modcp.punishments.revoke":1,"modcp.reports":1,"modcp.profile_banner_reset":1,"usercp.messaging":1,"usercp.signature":1,"admincp.forums":1,"usercp.private_profile":1,"usercp.nickname":1,"usercp.profile_banner":1,"profile.private.bypass":1, "admincp.security.all":1,"admincp.core.hooks":1,"admincp.security.group_sync":1,"admincp.core.emails_mass_message":1,"modcp.punishments.reset_avatar":1,"usercp.gif_avatar":1}',
+    'order' => 1,
+    'staff' => 1
+]);
+
+$queries->create('groups', [
+    'name' => 'Moderator',
+    'group_html' => '<span class="badge badge-primary">Moderator</span>',
+    'group_html_lg' => '<span class="badge badge-primary">Moderator</span>',
+    'admin_cp' => 1,
+    'permissions' => '{"modcp.ip_lookup":1,"modcp.punishments":1,"modcp.punishments.warn":1,"modcp.punishments.ban":1,"modcp.punishments.banip":1,"modcp.punishments.revoke":1,"modcp.reports":1,"admincp.users":1,"modcp.profile_banner_reset":1,"usercp.messaging":1,"usercp.signature":1,"usercp.private_profile":1,"usercp.nickname":1,"usercp.profile_banner":1,"profile.private.bypass":1}',
+    'order' => 2,
+    'staff' => 1
+]);
+
+$queries->create('groups', [
+    'name' => 'Unconfirmed Member',
+    'group_html' => '<span class="badge badge-secondary">Unconfirmed Member</span>',
+    'group_html_lg' => '<span class="badge badge-secondary">Unconfirmed Member</span>',
+    'group_username_color' => '#6c757d',
+    'order' => 4
+]);
 
 // Languages
-$queries->create('languages', array(
-	'name' => 'EnglishUK',
-	'is_default' => (Session::get('default_language') == 'EnglishUK') ? 1 : 0
-));
-
-$queries->create('languages', array(
-	'name' => 'Chinese',
-	'is_default' => (Session::get('default_language') == 'Chinese') ? 1 : 0
-));
-
-$queries->create('languages', array(
-	'name' => 'Chinese(Simplified)',
-	'is_default' => (Session::get('default_language') == 'Chinese(Simplified)') ? 1 : 0
-));
-
-$queries->create('languages', array(
-	'name' => 'Czech',
-	'is_default' => (Session::get('default_language') == 'Czech') ? 1 : 0
-));
-
-$queries->create('languages', array(
-	'name' => 'EnglishUS',
-	'is_default' => (Session::get('default_language') == 'EnglishUS') ? 1 : 0
-));
-
-$queries->create('languages', array(
-	'name' => 'French',
-	'is_default' => (Session::get('default_language') == 'French') ? 1 : 0
-));
-
-$queries->create('languages', array(
-	'name' => 'Dutch',
-	'is_default' => (Session::get('default_language') == 'Dutch') ? 1 : 0
-));
-
-$queries->create('languages', array(
-	'name' => 'German',
-	'is_default' => (Session::get('default_language') == 'German') ? 1 : 0
-));
-
-$queries->create('languages', array(
-	'name' => 'Greek',
-	'is_default' => (Session::get('default_language') == 'Greek') ? 1 : 0
-));
-
-$queries->create('languages', array(
-	'name' => 'Japanese',
-	'is_default' => (Session::get('default_language') == 'Japanese') ? 1 : 0
-));
-
-$queries->create('languages', array(
-	'name' => 'Lithuanian',
-	'is_default' => (Session::get('default_language') == 'Lithuanian') ? 1 : 0
-));
-
-$queries->create('languages', array(
-	'name' => 'Norwegian',
-	'is_default' => (Session::get('default_language') == 'Norwegian') ? 1 : 0
-));
-
-$queries->create('languages', array(
-	'name' => 'Polish',
-	'is_default' => (Session::get('default_language') == 'Polish') ? 1 : 0
-));
-
-$queries->create('languages', array(
-	'name' => 'Portuguese',
-	'is_default' => (Session::get('default_language') == 'Portuguese') ? 1 : 0
-));
-
-$queries->create('languages', array(
-	'name' => 'Romanian',
-	'is_default' => (Session::get('default_language') == 'Romanian') ? 1 : 0
-));
-
-$queries->create('languages', array(
-	'name' => 'Russian',
-	'is_default' => (Session::get('default_language') == 'Russian') ? 1 : 0
-));
-
-
-$queries->create('languages', array(
-	'name' => 'Slovak',
-	'is_default' => (Session::get('default_language') == 'Slovak') ? 1 : 0
-));
-
-$queries->create('languages', array(
-	'name' => 'Spanish',
-	'is_default' => (Session::get('default_language') == 'Spanish') ? 1 : 0
-));
-
-$queries->create('languages', array(
-	'name' => 'Italian',
-	'is_default' => (Session::get('default_language') == 'Italian') ? 1 : 0
-));
-
-$queries->create('languages', array(
-	'name' => 'SwedishSE',
-	'is_default' => (Session::get('default_language') == 'SwedishSE') ? 1 : 0
-));
-
-$queries->create('languages', array(
-	'name' => 'SwedishES',
-	'is_default' => (Session::get('default_language') == 'SwedishES') ? 1 : 0
-));
-
-$queries->create('languages', array(
-	'name' => 'Turkish',
-	'is_default' => (Session::get('default_language') == 'Turkish') ? 1 : 0
-));
+$queries->create('languages', [
+    'name' => 'EnglishUK',
+    'is_default' => (Session::get('default_language') == 'EnglishUK') ? 1 : 0
+]);
+
+$queries->create('languages', [
+    'name' => 'Chinese',
+    'is_default' => (Session::get('default_language') == 'Chinese') ? 1 : 0
+]);
+
+$queries->create('languages', [
+    'name' => 'Chinese(Simplified)',
+    'is_default' => (Session::get('default_language') == 'Chinese(Simplified)') ? 1 : 0
+]);
+
+$queries->create('languages', [
+    'name' => 'Czech',
+    'is_default' => (Session::get('default_language') == 'Czech') ? 1 : 0
+]);
+
+$queries->create('languages', [
+    'name' => 'EnglishUS',
+    'is_default' => (Session::get('default_language') == 'EnglishUS') ? 1 : 0
+]);
+
+$queries->create('languages', [
+    'name' => 'French',
+    'is_default' => (Session::get('default_language') == 'French') ? 1 : 0
+]);
+
+$queries->create('languages', [
+    'name' => 'Dutch',
+    'is_default' => (Session::get('default_language') == 'Dutch') ? 1 : 0
+]);
+
+$queries->create('languages', [
+    'name' => 'German',
+    'is_default' => (Session::get('default_language') == 'German') ? 1 : 0
+]);
+
+$queries->create('languages', [
+    'name' => 'Greek',
+    'is_default' => (Session::get('default_language') == 'Greek') ? 1 : 0
+]);
+
+$queries->create('languages', [
+    'name' => 'Japanese',
+    'is_default' => (Session::get('default_language') == 'Japanese') ? 1 : 0
+]);
+
+$queries->create('languages', [
+    'name' => 'Lithuanian',
+    'is_default' => (Session::get('default_language') == 'Lithuanian') ? 1 : 0
+]);
+
+$queries->create('languages', [
+    'name' => 'Norwegian',
+    'is_default' => (Session::get('default_language') == 'Norwegian') ? 1 : 0
+]);
+
+$queries->create('languages', [
+    'name' => 'Polish',
+    'is_default' => (Session::get('default_language') == 'Polish') ? 1 : 0
+]);
+
+$queries->create('languages', [
+    'name' => 'Portuguese',
+    'is_default' => (Session::get('default_language') == 'Portuguese') ? 1 : 0
+]);
+
+$queries->create('languages', [
+    'name' => 'Romanian',
+    'is_default' => (Session::get('default_language') == 'Romanian') ? 1 : 0
+]);
+
+$queries->create('languages', [
+    'name' => 'Russian',
+    'is_default' => (Session::get('default_language') == 'Russian') ? 1 : 0
+]);
+
+$queries->create('languages', [
+    'name' => 'Slovak',
+    'is_default' => (Session::get('default_language') == 'Slovak') ? 1 : 0
+]);
+
+$queries->create('languages', [
+    'name' => 'Spanish',
+    'is_default' => (Session::get('default_language') == 'Spanish') ? 1 : 0
+]);
+
+$queries->create('languages', [
+    'name' => 'Italian',
+    'is_default' => (Session::get('default_language') == 'Italian') ? 1 : 0
+]);
+
+$queries->create('languages', [
+    'name' => 'SwedishSE',
+    'is_default' => (Session::get('default_language') == 'SwedishSE') ? 1 : 0
+]);
+
+$queries->create('languages', [
+    'name' => 'SwedishES',
+    'is_default' => (Session::get('default_language') == 'SwedishES') ? 1 : 0
+]);
+
+$queries->create('languages', [
+    'name' => 'Turkish',
+    'is_default' => (Session::get('default_language') == 'Turkish') ? 1 : 0
+]);
 
 $cache->setCache('languagecache');
 $cache->store('language', Session::get('default_language'));
 
 // Modules
-$queries->create('modules', array(
-	'name' => 'Core',
-	'enabled' => 1
-));
+$queries->create('modules', [
+    'name' => 'Core',
+    'enabled' => 1
+]);
 
-$queries->create('modules', array(
-	'name' => 'Forum',
-	'enabled' => 1
-));
+$queries->create('modules', [
+    'name' => 'Forum',
+    'enabled' => 1
+]);
 
 $cache->setCache('modulescache');
-$cache->store('enabled_modules', array(
-	array(
-		'name' => 'Core',
-		'priority' => 1
-	),
-	array(
-		'name' => 'Forum',
-		'priority' => 4
-	)
-));
+$cache->store('enabled_modules', [
+    [
+        'name' => 'Core',
+        'priority' => 1
+    ],
+    [
+        'name' => 'Forum',
+        'priority' => 4
+    ]
+]);
 $cache->store('module_core', true);
 $cache->store('module_forum', true);
 
 // Reactions
-$queries->create('reactions', array(
-	'name' => 'Like',
-	'html' => '<i class="fas fa-thumbs-up text-success"></i>',
-	'enabled' => 1,
-	'type' => 2
-));
-
-$queries->create('reactions', array(
-	'name' => 'Dislike',
-	'html' => '<i class="fas fa-thumbs-down text-danger"></i>',
-	'enabled' => 1,
-	'type' => 0
-));
-
-$queries->create('reactions', array(
-	'name' => 'Meh',
-	'html' => '<i class="fas fa-meh text-warning"></i>',
-	'enabled' => 1,
-	'type' => 1
-));
+$queries->create('reactions', [
+    'name' => 'Like',
+    'html' => '<i class="fas fa-thumbs-up text-success"></i>',
+    'enabled' => 1,
+    'type' => 2
+]);
+
+$queries->create('reactions', [
+    'name' => 'Dislike',
+    'html' => '<i class="fas fa-thumbs-down text-danger"></i>',
+    'enabled' => 1,
+    'type' => 0
+]);
+
+$queries->create('reactions', [
+    'name' => 'Meh',
+    'html' => '<i class="fas fa-meh text-warning"></i>',
+    'enabled' => 1,
+    'type' => 1
+]);
 
 // Settings
-$queries->create('settings', array(
-	'name' => 'registration_enabled',
-	'value' => 1
-));
-
-$queries->create('settings', array(
-	'name' => 'displaynames',
-	'value' => 'false'
-));
-
-$queries->create('settings', array(
-	'name' => 'uuid_linking',
-	'value' => 1
-));
-
-$queries->create('settings', array(
-	'name' => 'recaptcha',
-	'value' => 'false'
-));
-
-$queries->create('settings', array(
-	'name' => 'recaptcha_type',
-	'value' => 'reCaptcha'
-));
-
-$queries->create('settings', array(
-	'name' => 'recaptcha_login',
-	'value' => 'false'
-));
-
-$queries->create('settings', array(
-	'name' => 'recaptcha_key',
-	'value' => null
-));
-
-$queries->create('settings', array(
-	'name' => 'recaptcha_secret',
-	'value' => null
-));
-
-$queries->create('settings', array(
-	'name' => 'email_verification',
-	'value' => 1
-));
-
-$queries->create('settings', array(
-	'name' => 't_and_c',
-	'value' => 'By registering on our website, you agree to the following:<p>' . $nameless_terms . '</p>'
-));
-
-$queries->create('privacy_terms', array(
-	'name' => 'terms',
-	'value' => '<p>You agree to be bound by our website rules and any laws which may apply to this website and your participation.</p><p>The website administration have the right to terminate your account at any time, delete any content you may have posted, and your IP address and any data you input to the website is recorded to assist the site staff with their moderation duties.</p><p>The site administration have the right to change these terms and conditions, and any site rules, at any point without warning. Whilst you may be informed of any changes, it is your responsibility to check these terms and the rules at any point.</p>'
-));
-
-$queries->create('settings', array(
-	'name' => 'nameless_version',
-	'value' => '2.0.0-pr9'
-));
-
-$queries->create('settings', array(
-	'name' => 'version_checked',
-	'value' => date('U')
-));
-
-$queries->create('settings', array(
-	'name' => 'version_update',
-	'value' => 'false'
-));
-
-$queries->create('settings', array(
-	'name' => 'phpmailer',
-	'value' => 0
-));
-
-$queries->create('settings', array(
-	'name' => 'phpmailer_type',
-	'value' => 'smtp'
-));
-
-$queries->create('settings', array(
-	'name' => 'verify_accounts',
-	'value' => 0
-));
-
-$queries->create('settings', array(
-	'name' => 'mcassoc_key',
-	'value' => null
-));
-
-$queries->create('settings', array(
-	'name' => 'mcassoc_instance',
-	'value' => null
-));
-
-$queries->create('settings', array(
-	'name' => 'user_avatars',
-	'value' => 0
-));
-
-$queries->create('settings', array(
-	'name' => 'forum_layout',
-	'value' => 1
-));
-
-$queries->create('settings', array(
-	'name' => 'maintenance',
-	'value' => 'false'
-));
-
-$queries->create('settings', array(
-	'name' => 'avatar_site',
-	'value' => 'cravatar'
-));
-
-$queries->create('settings', array(
-	'name' => 'mc_integration',
-	'value' => 1
-));
-
-$queries->create('settings', array(
-	'name' => 'discord_bot_url',
-	'value' => null
-));
-
-$queries->create('settings', array(
+$queries->create('settings', [
+    'name' => 'registration_enabled',
+    'value' => 1
+]);
+
+$queries->create('settings', [
+    'name' => 'displaynames',
+    'value' => 'false'
+]);
+
+$queries->create('settings', [
+    'name' => 'uuid_linking',
+    'value' => 1
+]);
+
+$queries->create('settings', [
+    'name' => 'recaptcha',
+    'value' => 'false'
+]);
+
+$queries->create('settings', [
+    'name' => 'recaptcha_type',
+    'value' => 'reCaptcha'
+]);
+
+$queries->create('settings', [
+    'name' => 'recaptcha_login',
+    'value' => 'false'
+]);
+
+$queries->create('settings', [
+    'name' => 'recaptcha_key',
+    'value' => null
+]);
+
+$queries->create('settings', [
+    'name' => 'recaptcha_secret',
+    'value' => null
+]);
+
+$queries->create('settings', [
+    'name' => 'email_verification',
+    'value' => 1
+]);
+
+$queries->create('settings', [
+    'name' => 't_and_c',
+    'value' => 'By registering on our website, you agree to the following:<p>' . $nameless_terms . '</p>'
+]);
+
+$queries->create('privacy_terms', [
+    'name' => 'terms',
+    'value' => '<p>You agree to be bound by our website rules and any laws which may apply to this website and your participation.</p><p>The website administration have the right to terminate your account at any time, delete any content you may have posted, and your IP address and any data you input to the website is recorded to assist the site staff with their moderation duties.</p><p>The site administration have the right to change these terms and conditions, and any site rules, at any point without warning. Whilst you may be informed of any changes, it is your responsibility to check these terms and the rules at any point.</p>'
+]);
+
+$queries->create('settings', [
+    'name' => 'nameless_version',
+    'value' => '2.0.0-pr9'
+]);
+
+$queries->create('settings', [
+    'name' => 'version_checked',
+    'value' => date('U')
+]);
+
+$queries->create('settings', [
+    'name' => 'version_update',
+    'value' => 'false'
+]);
+
+$queries->create('settings', [
+    'name' => 'phpmailer',
+    'value' => 0
+]);
+
+$queries->create('settings', [
+    'name' => 'phpmailer_type',
+    'value' => 'smtp'
+]);
+
+$queries->create('settings', [
+    'name' => 'verify_accounts',
+    'value' => 0
+]);
+
+$queries->create('settings', [
+    'name' => 'mcassoc_key',
+    'value' => null
+]);
+
+$queries->create('settings', [
+    'name' => 'mcassoc_instance',
+    'value' => null
+]);
+
+$queries->create('settings', [
+    'name' => 'user_avatars',
+    'value' => 0
+]);
+
+$queries->create('settings', [
+    'name' => 'forum_layout',
+    'value' => 1
+]);
+
+$queries->create('settings', [
+    'name' => 'maintenance',
+    'value' => 'false'
+]);
+
+$queries->create('settings', [
+    'name' => 'avatar_site',
+    'value' => 'cravatar'
+]);
+
+$queries->create('settings', [
+    'name' => 'mc_integration',
+    'value' => 1
+]);
+
+$queries->create('settings', [
+    'name' => 'discord_bot_url',
+    'value' => null
+]);
+
+$queries->create('settings', [
     'name' => 'discord_bot_username',
     'value' => null
-));
-
-$queries->create('settings', array(
-	'name' => 'discord_integration',
-	'value' => 0
-));
-
-$queries->create('settings', array(
-	'name' => 'avatar_type',
-	'value' => 'helmavatar'
-));
-
-$queries->create('settings', array(
-	'name' => 'portal',
-	'value' => 0
-));
+]);
+
+$queries->create('settings', [
+    'name' => 'discord_integration',
+    'value' => 0
+]);
+
+$queries->create('settings', [
+    'name' => 'avatar_type',
+    'value' => 'helmavatar'
+]);
+
+$queries->create('settings', [
+    'name' => 'portal',
+    'value' => 0
+]);
 $cache->setCache('portal_cache');
 $cache->store('portal', 0);
 
-$queries->create('settings', array(
-	'name' => 'forum_reactions',
-	'value' => 1
-));
+$queries->create('settings', [
+    'name' => 'forum_reactions',
+    'value' => 1
+]);
 
-$queries->create('settings', array(
-	'name' => 'formatting_type',
-	'value' => 'html'
-));
+$queries->create('settings', [
+    'name' => 'formatting_type',
+    'value' => 'html'
+]);
 $cache->setCache('post_formatting');
 $cache->store('formatting', 'html');
 
-$queries->create('settings', array(
-	'name' => 'youtube_url',
-	'value' => null
-));
-
-$queries->create('settings', array(
-	'name' => 'twitter_url',
-	'value' => null
-));
-
-$queries->create('settings', array(
-	'name' => 'twitter_style',
-	'value' => null
-));
-
-$queries->create('settings', array(
-	'name' => 'fb_url',
-	'value' => null
-));
-
-$queries->create('settings', array(
-	'name' => 'ga_script',
-	'value' => null
-));
-
-$queries->create('settings', array(
-	'name' => 'error_reporting',
-	'value' => 0
-));
+$queries->create('settings', [
+    'name' => 'youtube_url',
+    'value' => null
+]);
+
+$queries->create('settings', [
+    'name' => 'twitter_url',
+    'value' => null
+]);
+
+$queries->create('settings', [
+    'name' => 'twitter_style',
+    'value' => null
+]);
+
+$queries->create('settings', [
+    'name' => 'fb_url',
+    'value' => null
+]);
+
+$queries->create('settings', [
+    'name' => 'ga_script',
+    'value' => null
+]);
+
+$queries->create('settings', [
+    'name' => 'error_reporting',
+    'value' => 0
+]);
 $cache->setCache('error_cache');
 $cache->store('error_reporting', 0);
 
-$queries->create('settings', array(
-	'name' => 'page_loading',
-	'value' => 0
-));
+$queries->create('settings', [
+    'name' => 'page_loading',
+    'value' => 0
+]);
 $cache->setCache('page_load_cache');
 $cache->store('page_load', 0);
 
-$queries->create('settings', array(
-	'name' => 'unique_id',
-	'value' => substr(str_shuffle("0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"), 0, 62)
-));
-
-$queries->create('settings', array(
-	'name' => 'use_api',
-	'value' => 0
-));
-
-$queries->create('settings', array(
-	'name' => 'mc_api_key',
-	'value' => substr(str_shuffle("0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"), 0, 32)
-));
-
-$queries->create('settings', array(
-	'name' => 'external_query',
-	'value' => 0
-));
-
-$queries->create('settings', array(
-	'name' => 'followers',
-	'value' => 0
-));
-
-$queries->create('settings', array(
-	'name' => 'discord',
-	'value' => null
-));
-
-$queries->create('settings', array(
-	'name' => 'language',
-	'value' => 1
-));
-
-$queries->create('settings', array(
-	'name' => 'timezone',
-	'value' => 'Europe/London'
-));
+$queries->create('settings', [
+    'name' => 'unique_id',
+    'value' => substr(str_shuffle('0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'), 0, 62)
+]);
+
+$queries->create('settings', [
+    'name' => 'use_api',
+    'value' => 0
+]);
+
+$queries->create('settings', [
+    'name' => 'mc_api_key',
+    'value' => substr(str_shuffle('0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'), 0, 32)
+]);
+
+$queries->create('settings', [
+    'name' => 'external_query',
+    'value' => 0
+]);
+
+$queries->create('settings', [
+    'name' => 'followers',
+    'value' => 0
+]);
+
+$queries->create('settings', [
+    'name' => 'discord',
+    'value' => null
+]);
+
+$queries->create('settings', [
+    'name' => 'language',
+    'value' => 1
+]);
+
+$queries->create('settings', [
+    'name' => 'timezone',
+    'value' => 'Europe/London'
+]);
 $cache->setCache('timezone_cache');
 $cache->store('timezone', 'Europe/London');
 
-$queries->create('settings', array(
-	'name' => 'maintenance_message',
-	'value' => 'This website is currently in maintenance mode.'
-));
+$queries->create('settings', [
+    'name' => 'maintenance_message',
+    'value' => 'This website is currently in maintenance mode.'
+]);
 $cache->setCache('maintenance_cache');
-$cache->store('maintenance', array(
-	'maintenance' => 'false',
-	'message' => 'This website is currently in maintenance mode.'
-));
-
-$queries->create('settings', array(
-	'name' => 'authme',
-	'value' => 0
-));
-
-$queries->create('settings', array(
-	'name' => 'authme_db',
-	'value' => null
-));
-
-$queries->create('settings', array(
-	'name' => 'force_https',
-	'value' => 'false'
-));
-
-$queries->create('settings', array(
-	'name' => 'default_avatar_type',
-	'value' => 'minecraft'
-));
-
-$queries->create('settings', array(
-	'name' => 'custom_default_avatar',
-	'value' => null
-));
-
-$queries->create('settings', array(
-	'name' => 'private_profile',
-	'value' => 1
-));
-
-$queries->create('settings', array(
-	'name' => 'registration_disabled_message',
-	'value' => null
-));
-
-$queries->create('settings', array(
-	'name' => 'discord_hooks',
-	'value' => '{}'
-));
-
-$queries->create('settings', array(
-	'name' => 'api_verification',
-	'value' => '0'
-));
-
-$queries->create('settings', array(
-	'name' => 'validate_user_action',
-	'value' => '{"action":"promote","group":1}'
-));
-
-$queries->create('settings', array(
-	'name' => 'login_method',
-	'value' => 'email'
-));
-
-$queries->create('settings', array(
-	'name' => 'username_sync',
-	'value' => '1'
-));
-
-$queries->create('privacy_terms', array(
-	'name' => 'privacy',
-	'value' => 'The following privacy policy outlines how your data is used on our website.<br /><br /><strong>Data</strong><br />Basic non-identifiable information about your user on the website is collected; the majority of which is provided during registration, such as email addresses and usernames.<br />In addition to this, IP addresses for registered users are stored within the system to aid with moderation duties. This includes spam prevention, and detecting alternative accounts.<br /><br />Accounts can be deleted by a site administrator upon request, which will remove all data relating to your user from our system.<br /><br /><strong>Cookies</strong><br />Cookies are used to store small pieces of non-identifiable information with your consent. In order to consent to the use of cookies, you must either close the cookie notice (as explained within the notice) or register on our website.<br />Data stored by cookies include any recently viewed topic IDs, along with a unique, unidentifiable hash upon logging in and selecting &quot;Remember Me&quot; to automatically log you in next time you visit.'
-));
-
-$queries->create('settings', array(
-	'name' => 'status_page',
-	'value' => '1'
-));
+$cache->store('maintenance', [
+    'maintenance' => 'false',
+    'message' => 'This website is currently in maintenance mode.'
+]);
+
+$queries->create('settings', [
+    'name' => 'authme',
+    'value' => 0
+]);
+
+$queries->create('settings', [
+    'name' => 'authme_db',
+    'value' => null
+]);
+
+$queries->create('settings', [
+    'name' => 'force_https',
+    'value' => 'false'
+]);
+
+$queries->create('settings', [
+    'name' => 'default_avatar_type',
+    'value' => 'minecraft'
+]);
+
+$queries->create('settings', [
+    'name' => 'custom_default_avatar',
+    'value' => null
+]);
+
+$queries->create('settings', [
+    'name' => 'private_profile',
+    'value' => 1
+]);
+
+$queries->create('settings', [
+    'name' => 'registration_disabled_message',
+    'value' => null
+]);
+
+$queries->create('settings', [
+    'name' => 'discord_hooks',
+    'value' => '{}'
+]);
+
+$queries->create('settings', [
+    'name' => 'api_verification',
+    'value' => '0'
+]);
+
+$queries->create('settings', [
+    'name' => 'validate_user_action',
+    'value' => '{"action":"promote","group":1}'
+]);
+
+$queries->create('settings', [
+    'name' => 'login_method',
+    'value' => 'email'
+]);
+
+$queries->create('settings', [
+    'name' => 'username_sync',
+    'value' => '1'
+]);
+
+$queries->create('privacy_terms', [
+    'name' => 'privacy',
+    'value' => 'The following privacy policy outlines how your data is used on our website.<br /><br /><strong>Data</strong><br />Basic non-identifiable information about your user on the website is collected; the majority of which is provided during registration, such as email addresses and usernames.<br />In addition to this, IP addresses for registered users are stored within the system to aid with moderation duties. This includes spam prevention, and detecting alternative accounts.<br /><br />Accounts can be deleted by a site administrator upon request, which will remove all data relating to your user from our system.<br /><br /><strong>Cookies</strong><br />Cookies are used to store small pieces of non-identifiable information with your consent. In order to consent to the use of cookies, you must either close the cookie notice (as explained within the notice) or register on our website.<br />Data stored by cookies include any recently viewed topic IDs, along with a unique, unidentifiable hash upon logging in and selecting &quot;Remember Me&quot; to automatically log you in next time you visit.'
+]);
+
+$queries->create('settings', [
+    'name' => 'status_page',
+    'value' => '1'
+]);
 
 // Templates
-$queries->create('templates', array(
-	'name' => 'DefaultRevamp',
-	'enabled' => 1,
-	'is_default' => 1
-));
+$queries->create('templates', [
+    'name' => 'DefaultRevamp',
+    'enabled' => 1,
+    'is_default' => 1
+]);
 
 $cache->setCache('templatecache');
 $cache->store('default', 'DefaultRevamp');
 
-$queries->create('panel_templates', array(
-	'name' => 'Default',
-	'enabled' => 1,
-	'is_default' => 1
-));
+$queries->create('panel_templates', [
+    'name' => 'Default',
+    'enabled' => 1,
+    'is_default' => 1
+]);
 $cache->store('panel_default', 'Default');
 
 // Widgets - initialise just a few default ones for now
-$queries->create('widgets', array(
-	'name' => 'Online Staff',
-	'enabled' => 1,
-	'pages' => '["index","forum"]'
-));
-
-$queries->create('widgets', array(
-	'name' => 'Online Users',
-	'enabled' => 1,
-	'pages' => '["index","forum"]'
-));
-
-$queries->create('widgets', array(
-	'name' => 'Statistics',
-	'enabled' => 1,
-	'pages' => '["index","forum"]'
-));
+$queries->create('widgets', [
+    'name' => 'Online Staff',
+    'enabled' => 1,
+    'pages' => '["index","forum"]'
+]);
+
+$queries->create('widgets', [
+    'name' => 'Online Users',
+    'enabled' => 1,
+    'pages' => '["index","forum"]'
+]);
+
+$queries->create('widgets', [
+    'name' => 'Statistics',
+    'enabled' => 1,
+    'pages' => '["index","forum"]'
+]);
 
 $cache->setCache('Core-widgets');
-$cache->store('enabled', array(
-	'Online Staff' => 1,
-	'Online Users' => 1,
-	'Statistics' => 1
-));
+$cache->store('enabled', [
+    'Online Staff' => 1,
+    'Online Users' => 1,
+    'Statistics' => 1
+]);
 
 $config_path = $conf['core']['path'];
 $config_path = ($config_path ? '/' . trim($config_path, '/') : '');
diff --git a/core/installation/views/includes/upgrade_perform.php b/core/installation/views/includes/upgrade_perform.php
index 70183e44d132321f6c1242fbc0022fb469d08ae2..30c8b63f3adcd118fbc468a7f89ca497b6797e4d 100644
--- a/core/installation/views/includes/upgrade_perform.php
+++ b/core/installation/views/includes/upgrade_perform.php
@@ -8,17 +8,17 @@ $queries = new Queries();
 $cache = new Cache();
 
 switch ($s) {
-
     case 0:
         // Alerts -> custom page permissions
         // Alerts
         try {
-            $old = $conn->get('nl1_alerts', array('id', '<>', 0));
+            $old = $conn->get('nl1_alerts', ['id', '<>', 0]);
+
             if ($old->count()) {
                 $old = $old->results();
 
                 foreach ($old as $item) {
-                    $queries->create('alerts', array(
+                    $queries->create('alerts', [
                         'id' => $item->id,
                         'user_id' => $item->user_id,
                         'type' => $item->type,
@@ -27,7 +27,7 @@ switch ($s) {
                         'content_short' => ((strlen($item->content) > 64) ? substr($item->content, 0, 64) : $item->content),
                         'created' => $item->created,
                         'read' => $item->read
-                    ));
+                    ]);
                 }
             }
         } catch (Exception $e) {
@@ -36,12 +36,13 @@ switch ($s) {
 
         // Custom pages
         try {
-            $old = $conn->get('nl1_custom_pages', array('id', '<>', 0));
+            $old = $conn->get('nl1_custom_pages', ['id', '<>', 0]);
+
             if ($old->count()) {
                 $old = $old->results();
 
                 foreach ($old as $item) {
-                    $queries->create('custom_pages', array(
+                    $queries->create('custom_pages', [
                         'id' => $item->id,
                         'url' => $item->url,
                         'title' => $item->title,
@@ -49,7 +50,7 @@ switch ($s) {
                         'link_location' => $item->link_location,
                         'redirect' => $item->redirect,
                         'link' => $item->link
-                    ));
+                    ]);
                 }
             }
         } catch (Exception $e) {
@@ -58,17 +59,18 @@ switch ($s) {
 
         // Custom page permissions
         try {
-            $old = $conn->get('nl1_custom_pages_permissions', array('id', '<>', 0));
+            $old = $conn->get('nl1_custom_pages_permissions', ['id', '<>', 0]);
+
             if ($old->count()) {
                 $old = $old->results();
 
                 foreach ($old as $item) {
-                    $queries->create('custom_pages_permissions', array(
+                    $queries->create('custom_pages_permissions', [
                         'id' => $item->id,
                         'page_id' => $item->page_id,
                         'group_id' => $item->group_id,
                         'view' => $item->view
-                    ));
+                    ]);
                 }
             }
         } catch (Exception $e) {
@@ -81,12 +83,13 @@ switch ($s) {
         // Forums -> groups
         // Forums
         try {
-            $old = $conn->get('nl1_forums', array('id', '<>', 0));
+            $old = $conn->get('nl1_forums', ['id', '<>', 0]);
+
             if ($old->count()) {
                 $old = $old->results();
 
                 foreach ($old as $item) {
-                    $queries->create('forums', array(
+                    $queries->create('forums', [
                         'id' => $item->id,
                         'forum_title' => $item->forum_title,
                         'forum_description' => $item->forum_description,
@@ -97,7 +100,7 @@ switch ($s) {
                         'parent' => $item->parent,
                         'forum_order' => $item->forum_order,
                         'news' => $item->news
-                    ));
+                    ]);
                 }
             }
         } catch (Exception $e) {
@@ -106,12 +109,13 @@ switch ($s) {
 
         // Forum permissions
         try {
-            $old = $conn->get('nl1_forums_permissions', array('id', '<>', 0));
+            $old = $conn->get('nl1_forums_permissions', ['id', '<>', 0]);
+
             if ($old->count()) {
                 $old = $old->results();
 
                 foreach ($old as $item) {
-                    $queries->create('forums_permissions', array(
+                    $queries->create('forums_permissions', [
                         'id' => $item->id,
                         'group_id' => $item->group_id,
                         'forum_id' => $item->forum_id,
@@ -119,7 +123,7 @@ switch ($s) {
                         'create_topic' => $item->create_topic,
                         'create_post' => $item->create_post,
                         'view_other_topics' => 1
-                    ));
+                    ]);
                 }
             }
         } catch (Exception $e) {
@@ -128,17 +132,18 @@ switch ($s) {
 
         // Forum topic labels
         try {
-            $old = $conn->get('nl1_forums_topic_labels', array('id', '<>', 0));
+            $old = $conn->get('nl1_forums_topic_labels', ['id', '<>', 0]);
+
             if ($old->count()) {
                 $old = $old->results();
 
                 foreach ($old as $item) {
-                    $queries->create('forums_topic_labels', array(
+                    $queries->create('forums_topic_labels', [
                         'id' => $item->id,
                         'fids' => $item->fids,
                         'name' => $item->name,
                         'label' => $item->label
-                    ));
+                    ]);
                 }
             }
         } catch (Exception $e) {
@@ -147,16 +152,17 @@ switch ($s) {
 
         // Friends/followers
         try {
-            $old = $conn->get('nl1_friends', array('id', '<>', 0));
+            $old = $conn->get('nl1_friends', ['id', '<>', 0]);
+
             if ($old->count()) {
                 $old = $old->results();
 
                 foreach ($old as $item) {
-                    $queries->create('friends', array(
+                    $queries->create('friends', [
                         'id' => $item->id,
                         'user_id' => $item->user_id,
                         'friend_id' => $item->friend_id
-                    ));
+                    ]);
                 }
             }
         } catch (Exception $e) {
@@ -165,24 +171,25 @@ switch ($s) {
 
         // Groups
         try {
-            $old = $conn->get('nl1_groups', array('id', '<>', 0));
+            $old = $conn->get('nl1_groups', ['id', '<>', 0]);
+
             if ($old->count()) {
                 $old = $old->results();
 
                 foreach ($old as $item) {
-                    $queries->create('groups', array(
+                    $queries->create('groups', [
                         'id' => $item->id,
                         'name' => $item->name,
                         'group_html' => $item->group_html,
                         'group_html_lg' => $item->group_html_lg,
                         'admin_cp' => (($item->staff) ? 1 : 0),
                         'default_group' => (($item->id == 1) ? 1 : 0)
-                    ));
+                    ]);
                 }
 
-                $queries->update('groups', 1, array('permissions' => '{"usercp.messaging":1,"usercp.signature":1,"usercp.nickname":1,"usercp.private_profile":1,"usercp.profile_banner":1}'));
-                $queries->update('groups', 2, array('permissions' => '{"admincp.core":1,"admincp.core.api":1,"admincp.core.seo":1,"admincp.core.general":1,"admincp.core.avatars":1,"admincp.core.fields":1,"admincp.core.debugging":1,"admincp.core.emails":1,"admincp.core.navigation":1,"admincp.core.announcements":1,"admincp.core.reactions":1,"admincp.core.registration":1,"admincp.core.social_media":1,"admincp.core.terms":1,"admincp.errors":1,"admincp.integrations":1,"admincp.discord":1,"admincp.minecraft":1,"admincp.minecraft.authme":1,"admincp.minecraft.verification":1,"admincp.minecraft.servers":1,"admincp.minecraft.query_errors":1,"admincp.minecraft.banners":1,"admincp.modules":1,"admincp.pages":1,"admincp.security":1,"admincp.security.acp_logins":1,"admincp.security.template":1,"admincp.styles":1,"admincp.styles.panel_templates":1,"admincp.styles.templates":1,"admincp.styles.templates.edit":1,"admincp.styles.images":1,"admincp.update":1,"admincp.users":1,"admincp.users.edit":1,"admincp.groups":1,"admincp.groups.self":1,"admincp.widgets":1,"modcp.ip_lookup":1,"modcp.punishments":1,"modcp.punishments.warn":1,"modcp.punishments.ban":1,"modcp.punishments.banip":1,"modcp.punishments.revoke":1,"modcp.reports":1,"modcp.profile_banner_reset":1,"usercp.messaging":1,"usercp.signature":1,"admincp.forums":1,"usercp.private_profile":1,"usercp.nickname":1,"usercp.profile_banner":1,"profile.private.bypass":1, "admincp.security.all":1,"admincp.core.hooks":1,"admincp.core.emails_mass_message":1,"usercp.gif_avatar":1}'));
-                $queries->update('groups', 3, array('permissions' => '{"modcp.ip_lookup":1,"modcp.punishments":1,"modcp.punishments.warn":1,"modcp.punishments.ban":1,"modcp.punishments.banip":1,"modcp.punishments.revoke":1,"modcp.reports":1,"admincp.users":1,"modcp.profile_banner_reset":1,"usercp.messaging":1,"usercp.signature":1,"usercp.private_profile":1,"usercp.nickname":1,"usercp.profile_banner":1,"profile.private.bypass":1}'));
+                $queries->update('groups', 1, ['permissions' => '{"usercp.messaging":1,"usercp.signature":1,"usercp.nickname":1,"usercp.private_profile":1,"usercp.profile_banner":1}']);
+                $queries->update('groups', 2, ['permissions' => '{"admincp.core":1,"admincp.core.api":1,"admincp.core.seo":1,"admincp.core.general":1,"admincp.core.avatars":1,"admincp.core.fields":1,"admincp.core.debugging":1,"admincp.core.emails":1,"admincp.core.navigation":1,"admincp.core.announcements":1,"admincp.core.reactions":1,"admincp.core.registration":1,"admincp.core.social_media":1,"admincp.core.terms":1,"admincp.errors":1,"admincp.integrations":1,"admincp.discord":1,"admincp.minecraft":1,"admincp.minecraft.authme":1,"admincp.minecraft.verification":1,"admincp.minecraft.servers":1,"admincp.minecraft.query_errors":1,"admincp.minecraft.banners":1,"admincp.modules":1,"admincp.pages":1,"admincp.security":1,"admincp.security.acp_logins":1,"admincp.security.template":1,"admincp.styles":1,"admincp.styles.panel_templates":1,"admincp.styles.templates":1,"admincp.styles.templates.edit":1,"admincp.styles.images":1,"admincp.update":1,"admincp.users":1,"admincp.users.edit":1,"admincp.groups":1,"admincp.groups.self":1,"admincp.widgets":1,"modcp.ip_lookup":1,"modcp.punishments":1,"modcp.punishments.warn":1,"modcp.punishments.ban":1,"modcp.punishments.banip":1,"modcp.punishments.revoke":1,"modcp.reports":1,"modcp.profile_banner_reset":1,"usercp.messaging":1,"usercp.signature":1,"admincp.forums":1,"usercp.private_profile":1,"usercp.nickname":1,"usercp.profile_banner":1,"profile.private.bypass":1, "admincp.security.all":1,"admincp.core.hooks":1,"admincp.core.emails_mass_message":1,"usercp.gif_avatar":1}']);
+                $queries->update('groups', 3, ['permissions' => '{"modcp.ip_lookup":1,"modcp.punishments":1,"modcp.punishments.warn":1,"modcp.punishments.ban":1,"modcp.punishments.banip":1,"modcp.punishments.revoke":1,"modcp.reports":1,"admincp.users":1,"modcp.profile_banner_reset":1,"usercp.messaging":1,"usercp.signature":1,"usercp.private_profile":1,"usercp.nickname":1,"usercp.profile_banner":1,"profile.private.bypass":1}']);
             }
         } catch (Exception $e) {
             $errors[] = 'Unable to convert groups: ' . $e->getMessage();
@@ -194,12 +201,13 @@ switch ($s) {
         // Infractions -> posts
         // Infractions
         try {
-            $old = $conn->get('nl1_infractions', array('id', '<>', 0));
+            $old = $conn->get('nl1_infractions', ['id', '<>', 0]);
+
             if ($old->count()) {
                 $old = $old->results();
 
                 foreach ($old as $item) {
-                    $queries->create('infractions', array(
+                    $queries->create('infractions', [
                         'id' => $item->id,
                         'type' => $item->type,
                         'punished' => $item->punished,
@@ -207,7 +215,7 @@ switch ($s) {
                         'reason' => $item->reason,
                         'infraction_date' => $item->infraction_date,
                         'acknowledged' => $item->acknowledged
-                    ));
+                    ]);
                 }
             }
         } catch (Exception $e) {
@@ -216,12 +224,13 @@ switch ($s) {
 
         // Minecraft servers
         try {
-            $old = $conn->get('nl1_mc_servers', array('id', '<>', 0));
+            $old = $conn->get('nl1_mc_servers', ['id', '<>', 0]);
+
             if ($old->count()) {
                 $old = $old->results();
 
                 foreach ($old as $item) {
-                    $queries->create('mc_servers', array(
+                    $queries->create('mc_servers', [
                         'id' => $item->id,
                         'ip' => $item->ip,
                         'query_ip' => $item->query_ip,
@@ -230,7 +239,7 @@ switch ($s) {
                         'display' => $item->display,
                         'pre' => $item->pre,
                         'player_list' => $item->player_list
-                    ));
+                    ]);
                 }
             }
         } catch (Exception $e) {
@@ -239,12 +248,13 @@ switch ($s) {
 
         // Posts
         try {
-            $old = $conn->get('nl1_posts', array('id', '<>', 0));
+            $old = $conn->get('nl1_posts', ['id', '<>', 0]);
+
             if ($old->count()) {
                 $old = $old->results();
 
                 foreach ($old as $item) {
-                    $queries->create('posts', array(
+                    $queries->create('posts', [
                         'id' => $item->id,
                         'forum_id' => $item->forum_id,
                         'topic_id' => $item->topic_id,
@@ -252,7 +262,7 @@ switch ($s) {
                         'post_content' => $item->post_content,
                         'created' => strtotime($item->post_date),
                         'deleted' => $item->deleted
-                    ));
+                    ]);
                 }
             }
         } catch (Exception $e) {
@@ -265,19 +275,20 @@ switch ($s) {
         // Private messages -> private message users
         // Private messages
         try {
-            $old = $conn->get('nl1_private_messages', array('id', '<>', 0));
+            $old = $conn->get('nl1_private_messages', ['id', '<>', 0]);
+
             if ($old->count()) {
                 $old = $old->results();
 
                 foreach ($old as $item) {
-                    $queries->create('private_messages', array(
+                    $queries->create('private_messages', [
                         'id' => $item->id,
                         'author_id' => $item->author_id,
                         'title' => $item->title,
                         'created' => 0, // will update later
                         'last_reply_user' => $item->author_id, // will update later
                         'last_reply_date' => $item->updated
-                    ));
+                    ]);
                 }
             }
         } catch (Exception $e) {
@@ -285,19 +296,21 @@ switch ($s) {
         }
 
         // Private message replies
-        $private_messages = array();
+        $private_messages = [];
+
         try {
-            $old = $conn->get('nl1_private_messages_replies', array('id', '<>', 0));
+            $old = $conn->get('nl1_private_messages_replies', ['id', '<>', 0]);
+
             if ($old->count()) {
                 $old = $old->results();
 
                 foreach ($old as $item) {
-                    if (!isset($private_messages[$item->pm_id])) {
-                        $private_messages[$item->pm_id] = array(
+                    if (! isset($private_messages[$item->pm_id])) {
+                        $private_messages[$item->pm_id] = [
                             'created' => $item->created,
                             'updated' => $item->created,
                             'last_reply_user' => $item->user_id
-                        );
+                        ];
                     } else {
                         if ($private_messages[$item->pm_id]['created'] > $item->created)
                             $private_messages[$item->pm_id]['created'] = $item->created;
@@ -308,13 +321,13 @@ switch ($s) {
                         }
                     }
 
-                    $queries->create('private_messages_replies', array(
+                    $queries->create('private_messages_replies', [
                         'id' => $item->id,
                         'pm_id' => $item->pm_id,
                         'author_id' => $item->user_id,
                         'created' => $item->created,
                         'content' => $item->content
-                    ));
+                    ]);
                 }
             }
         } catch (Exception $e) {
@@ -323,17 +336,18 @@ switch ($s) {
 
         // Private message users
         try {
-            $old = $conn->get('nl1_private_messages_users', array('id', '<>', 0));
+            $old = $conn->get('nl1_private_messages_users', ['id', '<>', 0]);
+
             if ($old->count()) {
                 $old = $old->results();
 
                 foreach ($old as $item) {
-                    $queries->create('private_messages_users', array(
+                    $queries->create('private_messages_users', [
                         'id' => $item->id,
                         'pm_id' => $item->pm_id,
                         'user_id' => $item->user_id,
                         'read' => $item->read
-                    ));
+                    ]);
                 }
             }
         } catch (Exception $e) {
@@ -343,10 +357,10 @@ switch ($s) {
         // Update private message columns
         foreach ($private_messages as $key => $message) {
             try {
-                $queries->update('private_messages', $key, array(
+                $queries->update('private_messages', $key, [
                     'created' => $message['created'],
                     'last_reply_user' => $message['last_reply_user']
-                ));
+                ]);
             } catch (Exception $e) {
                 $errors[] = 'Unable to convert update private message columns: ' . $e->getMessage();
             }
@@ -358,18 +372,19 @@ switch ($s) {
         // Query errors -> settings
         // Query errors
         try {
-            $old = $conn->get('nl1_query_errors', array('id', '<>', 0));
+            $old = $conn->get('nl1_query_errors', ['id', '<>', 0]);
+
             if ($old->count()) {
                 $old = $old->results();
 
                 foreach ($old as $item) {
-                    $queries->create('query_errors', array(
+                    $queries->create('query_errors', [
                         'id' => $item->id,
                         'date' => $item->date,
                         'error' => $item->error,
                         'ip' => $item->ip,
                         'port' => $item->port
-                    ));
+                    ]);
                 }
             }
         } catch (Exception $e) {
@@ -378,12 +393,13 @@ switch ($s) {
 
         // Reports
         try {
-            $old = $conn->get('nl1_reports', array('id', '<>', 0));
+            $old = $conn->get('nl1_reports', ['id', '<>', 0]);
+
             if ($old->count()) {
                 $old = $old->results();
 
                 foreach ($old as $item) {
-                    $queries->create('reports', array(
+                    $queries->create('reports', [
                         'id' => $item->id,
                         'type' => $item->type,
                         'reporter_id' => $item->reporter_id,
@@ -396,7 +412,7 @@ switch ($s) {
                         'reported_post' => $item->reported_post,
                         'reported_mcname' => $item->reported_mcname,
                         'reported_uuid' => $item->reported_uuid
-                    ));
+                    ]);
                 }
             }
         } catch (Exception $e) {
@@ -405,18 +421,19 @@ switch ($s) {
 
         // Report comments
         try {
-            $old = $conn->get('nl1_reports_comments', array('id', '<>', 0));
+            $old = $conn->get('nl1_reports_comments', ['id', '<>', 0]);
+
             if ($old->count()) {
                 $old = $old->results();
 
                 foreach ($old as $item) {
-                    $queries->create('reports_comments', array(
+                    $queries->create('reports_comments', [
                         'id' => $item->id,
                         'report_id' => $item->report_id,
                         'commenter_id' => $item->commenter_id,
                         'comment_date' => $item->comment_date,
                         'comment_content' => $item->comment_content
-                    ));
+                    ]);
                 }
             }
         } catch (Exception $e) {
@@ -425,19 +442,20 @@ switch ($s) {
 
         // Reputation
         try {
-            $old = $conn->get('nl1_reputation', array('id', '<>', 0));
+            $old = $conn->get('nl1_reputation', ['id', '<>', 0]);
+
             if ($old->count()) {
                 $old = $old->results();
 
                 foreach ($old as $item) {
-                    $queries->create('forums_reactions', array(
+                    $queries->create('forums_reactions', [
                         'id' => $item->id,
                         'post_id' => $item->post_id,
                         'user_received' => $item->user_received,
                         'user_given' => $item->user_given,
                         'reaction_id' => 1,
                         'time' => strtotime($item->time_given)
-                    ));
+                    ]);
                 }
             }
         } catch (Exception $e) {
@@ -446,16 +464,17 @@ switch ($s) {
 
         // Settings
         try {
-            $old = $conn->get('nl1_settings', array('id', '<>', 0));
+            $old = $conn->get('nl1_settings', ['id', '<>', 0]);
+
             if ($old->count()) {
                 $old = $old->results();
 
                 foreach ($old as $item) {
-                    $queries->create('settings', array(
+                    $queries->create('settings', [
                         'id' => $item->id,
                         'name' => $item->name,
                         'value' => $item->value
-                    ));
+                    ]);
                 }
             }
         } catch (Exception $e) {
@@ -467,12 +486,13 @@ switch ($s) {
     case 5:
         // Topics -> users
         try {
-            $old = $conn->get('nl1_topics', array('id', '<>', 0));
+            $old = $conn->get('nl1_topics', ['id', '<>', 0]);
+
             if ($old->count()) {
                 $old = $old->results();
 
                 foreach ($old as $item) {
-                    $queries->create('topics', array(
+                    $queries->create('topics', [
                         'id' => $item->id,
                         'forum_id' => $item->forum_id,
                         'topic_title' => $item->topic_title,
@@ -484,7 +504,7 @@ switch ($s) {
                         'locked' => $item->locked,
                         'sticky' => $item->sticky,
                         'label' => $item->label
-                    ));
+                    ]);
                 }
             }
         } catch (Exception $e) {
@@ -493,12 +513,13 @@ switch ($s) {
 
         // Users
         try {
-            $old = $conn->get('nl1_users', array('id', '<>', 0));
+            $old = $conn->get('nl1_users', ['id', '<>', 0]);
+
             if ($old->count()) {
                 $old = $old->results();
 
                 foreach ($old as $item) {
-                    $queries->create('users', array(
+                    $queries->create('users', [
                         'id' => $item->id,
                         'username' => $item->mcname,
                         'nickname' => $item->username,
@@ -522,12 +543,12 @@ switch ($s) {
                         'tfa_type' => $item->tfa_type,
                         'tfa_secret' => $item->tfa_secret,
                         'tfa_complete' => $item->tfa_complete
-                    ));
+                    ]);
 
-                    $queries->create('users_groups', array(
+                    $queries->create('users_groups', [
                         'user_id' => $item->id,
                         'group_id' => $item->group_id
-                    ));
+                    ]);
                 }
             }
         } catch (Exception $e) {
@@ -540,16 +561,17 @@ switch ($s) {
         // User admin session -> user profile wall replies
         // User admin sessions
         try {
-            $old = $conn->get('nl1_users_admin_session', array('id', '<>', 0));
+            $old = $conn->get('nl1_users_admin_session', ['id', '<>', 0]);
+
             if ($old->count()) {
                 $old = $old->results();
 
                 foreach ($old as $item) {
-                    $queries->create('users_admin_session', array(
+                    $queries->create('users_admin_session', [
                         'id' => $item->id,
                         'user_id' => $item->user_id,
                         'hash' => $item->hash
-                    ));
+                    ]);
                 }
             }
         } catch (Exception $e) {
@@ -558,16 +580,17 @@ switch ($s) {
 
         // User sessions
         try {
-            $old = $conn->get('nl1_users_session', array('id', '<>', 0));
+            $old = $conn->get('nl1_users_session', ['id', '<>', 0]);
+
             if ($old->count()) {
                 $old = $old->results();
 
                 foreach ($old as $item) {
-                    $queries->create('users_session', array(
+                    $queries->create('users_session', [
                         'id' => $item->id,
                         'user_id' => $item->user_id,
                         'hash' => $item->hash
-                    ));
+                    ]);
                 }
             }
         } catch (Exception $e) {
@@ -576,18 +599,19 @@ switch ($s) {
 
         // Username history
         try {
-            $old = $conn->get('nl1_users_username_history', array('id', '<>', 0));
+            $old = $conn->get('nl1_users_username_history', ['id', '<>', 0]);
+
             if ($old->count()) {
                 $old = $old->results();
 
                 foreach ($old as $item) {
-                    $queries->create('users_username_history', array(
+                    $queries->create('users_username_history', [
                         'id' => $item->id,
                         'user_id' => $item->user_id,
                         'changed_to' => $item->changed_to,
                         'changed_at' => $item->changed_at,
                         'original' => $item->original
-                    ));
+                    ]);
                 }
             }
         } catch (Exception $e) {
@@ -596,18 +620,19 @@ switch ($s) {
 
         // Profile wall posts
         try {
-            $old = $conn->get('nl1_user_profile_wall_posts', array('id', '<>', 0));
+            $old = $conn->get('nl1_user_profile_wall_posts', ['id', '<>', 0]);
+
             if ($old->count()) {
                 $old = $old->results();
 
                 foreach ($old as $item) {
-                    $queries->create('user_profile_wall_posts', array(
+                    $queries->create('user_profile_wall_posts', [
                         'id' => $item->id,
                         'user_id' => $item->user_id,
                         'author_id' => $item->author_id,
                         'time' => $item->time,
                         'content' => $item->content
-                    ));
+                    ]);
                 }
             }
         } catch (Exception $e) {
@@ -616,18 +641,19 @@ switch ($s) {
 
         // Profile wall likes
         try {
-            $old = $conn->get('nl1_user_profile_wall_posts_likes', array('id', '<>', 0));
+            $old = $conn->get('nl1_user_profile_wall_posts_likes', ['id', '<>', 0]);
+
             if ($old->count()) {
                 $old = $old->results();
 
                 foreach ($old as $item) {
-                    $queries->create('user_profile_wall_posts_reactions', array(
+                    $queries->create('user_profile_wall_posts_reactions', [
                         'id' => $item->id,
                         'user_id' => $item->user_id,
                         'post_id' => $item->post_id,
                         'reaction_id' => 1,
                         'time' => 0
-                    ));
+                    ]);
                 }
             }
         } catch (Exception $e) {
@@ -636,18 +662,19 @@ switch ($s) {
 
         // Profile wall replies
         try {
-            $old = $conn->get('nl1_user_profile_wall_posts_replies', array('id', '<>', 0));
+            $old = $conn->get('nl1_user_profile_wall_posts_replies', ['id', '<>', 0]);
+
             if ($old->count()) {
                 $old = $old->results();
 
                 foreach ($old as $item) {
-                    $queries->create('user_profile_wall_posts_replies', array(
+                    $queries->create('user_profile_wall_posts_replies', [
                         'id' => $item->id,
                         'post_id' => $item->post_id,
                         'author_id' => $item->author_id,
                         'time' => $item->time,
                         'content' => $item->content
-                    ));
+                    ]);
                 }
             }
         } catch (Exception $e) {
@@ -659,16 +686,17 @@ switch ($s) {
     case 7:
         // UUID cache
         try {
-            $old = $conn->get('nl1_uuid_cache', array('id', '<>', 0));
+            $old = $conn->get('nl1_uuid_cache', ['id', '<>', 0]);
+
             if ($old->count()) {
                 $old = $old->results();
 
                 foreach ($old as $item) {
-                    $queries->create('uuid_cache', array(
+                    $queries->create('uuid_cache', [
                         'id' => $item->id,
                         'mcname' => $item->mcname,
                         'uuid' => $item->uuid
-                    ));
+                    ]);
                 }
             }
         } catch (Exception $e) {
@@ -680,8 +708,9 @@ switch ($s) {
     case 8:
         // New settings/initialise cache
         // Site name
-        $sitename = $queries->getWhere('settings', array('name', '=', 'sitename'));
-        if (!count($sitename)) {
+        $sitename = $queries->getWhere('settings', ['name', '=', 'sitename']);
+
+        if (! count($sitename)) {
             $cache->setCache('sitenamecache');
             $cache->store('sitename', 'NamelessMC');
         } else {
@@ -690,430 +719,434 @@ switch ($s) {
         }
 
         // Languages
-        $queries->create('languages', array(
+        $queries->create('languages', [
             'name' => 'EnglishUK',
             'is_default' => 1
-        ));
-        $queries->create('languages', array(
+        ]);
+        $queries->create('languages', [
             'name' => 'Chinese',
             'is_default' => 0
-        ));
-        $queries->create('languages', array(
+        ]);
+        $queries->create('languages', [
             'name' => 'Czech',
             'is_default' => 0
-        ));
-        $queries->create('languages', array(
+        ]);
+        $queries->create('languages', [
             'name' => 'Dutch',
             'is_default' => 0
-        ));
-        $queries->create('languages', array(
+        ]);
+        $queries->create('languages', [
             'name' => 'EnglishUS',
             'is_default' => 0
-        ));
-        $queries->create('languages', array(
+        ]);
+        $queries->create('languages', [
             'name' => 'German',
             'is_default' => 0
-        ));
-        $queries->create('languages', array(
+        ]);
+        $queries->create('languages', [
             'name' => 'Greek',
             'is_default' => 0
-        ));
-        $queries->create('languages', array(
+        ]);
+        $queries->create('languages', [
             'name' => 'Japanese',
             'is_default' => 0
-        ));
-        $queries->create('languages', array(
+        ]);
+        $queries->create('languages', [
             'name' => 'Lithuanian',
             'is_default' => 0
-        ));
-        $queries->create('languages', array(
+        ]);
+        $queries->create('languages', [
             'name' => 'Norwegian',
             'is_default' => 0
-        ));
-        $queries->create('languages', array(
+        ]);
+        $queries->create('languages', [
             'name' => 'Polish',
             'is_default' => 0
-        ));
-        $queries->create('languages', array(
+        ]);
+        $queries->create('languages', [
             'name' => 'Portuguese',
             'is_default' => 0
-        ));
-        $queries->create('languages', array(
+        ]);
+        $queries->create('languages', [
             'name' => 'Romanian',
             'is_default' => 0
-        ));
-        $queries->create('languages', array(
+        ]);
+        $queries->create('languages', [
             'name' => 'Slovak',
             'is_default' => 0
-        ));
-        $queries->create('languages', array(
+        ]);
+        $queries->create('languages', [
             'name' => 'Spanish',
             'is_default' => 0
-        ));
-        $queries->create('languages', array(
+        ]);
+        $queries->create('languages', [
             'name' => 'SwedishSE',
             'is_default' => 0
-        ));
-        $queries->create('languages', array(
+        ]);
+        $queries->create('languages', [
             'name' => 'Turkish',
             'is_default' => 0
-        ));
+        ]);
         $cache->setCache('languagecache');
         $cache->store('language', 'EnglishUK');
 
         // Modules
-        $queries->create('modules', array(
+        $queries->create('modules', [
             'name' => 'Core',
             'enabled' => 1
-        ));
-        $queries->create('modules', array(
+        ]);
+        $queries->create('modules', [
             'name' => 'Forum',
             'enabled' => 1
-        ));
+        ]);
         $cache->setCache('modulescache');
-        $cache->store('enabled_modules', array(
-            array('name' => 'Core', 'priority' => 1),
-            array('name' => 'Forum', 'priority' => 4)
-        ));
+        $cache->store('enabled_modules', [
+            ['name' => 'Core', 'priority' => 1],
+            ['name' => 'Forum', 'priority' => 4]
+        ]);
         $cache->store('module_core', true);
         $cache->store('module_forum', true);
 
         // Reactions
-        $queries->create('reactions', array(
+        $queries->create('reactions', [
             'name' => 'Like',
             'html' => '<i class="fas fa-thumbs-up text-success"></i>',
             'enabled' => 1,
             'type' => 2
-        ));
-        $queries->create('reactions', array(
+        ]);
+        $queries->create('reactions', [
             'name' => 'Dislike',
             'html' => '<i class="fas fa-thumbs-down text-danger"></i>',
             'enabled' => 1,
             'type' => 0
-        ));
-        $queries->create('reactions', array(
+        ]);
+        $queries->create('reactions', [
             'name' => 'Meh',
             'html' => '<i class="fas fa-meh text-warning"></i>',
             'enabled' => 1,
             'type' => 1
-        ));
+        ]);
 
         // Forum Labels
-        $queries->create('forums_labels', array(
+        $queries->create('forums_labels', [
             'name' => 'Default',
             'html' => '<span class="badge badge-default">{x}</span>'
-        ));
-        $queries->create('forums_labels', array(
+        ]);
+        $queries->create('forums_labels', [
             'name' => 'Primary',
             'html' => '<span class="badge badge-primary">{x}</span>'
-        ));
-        $queries->create('forums_labels', array(
+        ]);
+        $queries->create('forums_labels', [
             'name' => 'Success',
             'html' => '<span class="badge badge-success">{x}</span>'
-        ));
-        $queries->create('forums_labels', array(
+        ]);
+        $queries->create('forums_labels', [
             'name' => 'Info',
             'html' => '<span class="badge badge-info">{x}</span>'
-        ));
-        $queries->create('forums_labels', array(
+        ]);
+        $queries->create('forums_labels', [
             'name' => 'Warning',
             'html' => '<span class="badge badge-warning">{x}</span>'
-        ));
-        $queries->create('forums_labels', array(
+        ]);
+        $queries->create('forums_labels', [
             'name' => 'Danger',
             'html' => '<span class="badge badge-danger">{x}</span>'
-        ));
+        ]);
 
         // Settings
-        $queries->create('settings', array(
+        $queries->create('settings', [
             'name' => 'registration_enabled',
             'value' => 1
-        ));
+        ]);
 
-        $queries->create('settings', array(
+        $queries->create('settings', [
             'name' => 'recaptcha_login',
             'value' => 'false'
-        ));
+        ]);
 
-        $queries->create('settings', array(
+        $queries->create('settings', [
             'name' => 'recaptcha_type',
             'value' => 'reCaptcha'
-        ));
+        ]);
+
+        $version = $queries->getWhere('settings', ['name', '=', 'version']);
 
-        $version = $queries->getWhere('settings', array('name', '=', 'version'));
         if (count($version)) {
-            $queries->update('settings', $version[0]->id, array(
+            $queries->update('settings', $version[0]->id, [
                 'name' => 'nameless_version',
                 'value' => '2.0.0-pr9'
-            ));
+            ]);
         } else {
-            $queries->create('settings', array(
+            $queries->create('settings', [
                 'name' => 'nameless_version',
                 'value' => '2.0.0-pr9'
-            ));
+            ]);
         }
 
-        $version_update = $queries->getWhere('settings', array('name', '=', 'version_update'));
+        $version_update = $queries->getWhere('settings', ['name', '=', 'version_update']);
+
         if (count($version_update)) {
-            $queries->update('settings', $version_update[0]->id, array(
+            $queries->update('settings', $version_update[0]->id, [
                 'value' => 'false'
-            ));
+            ]);
         } else {
-            $queries->create('settings', array(
+            $queries->create('settings', [
                 'name' => 'version_update',
                 'value' => 'false'
-            ));
+            ]);
         }
 
-        $mcassoc = $queries->getWhere('settings', array('name', '=', 'use_mcassoc'));
+        $mcassoc = $queries->getWhere('settings', ['name', '=', 'use_mcassoc']);
+
         if (count($mcassoc)) {
-            $queries->update('settings', $mcassoc[0]->id, array(
+            $queries->update('settings', $mcassoc[0]->id, [
                 'name' => 'verify_accounts'
-            ));
+            ]);
         } else {
-            $queries->create('settings', array(
+            $queries->create('settings', [
                 'name' => 'verify_accounts',
                 'value' => 0
-            ));
+            ]);
         }
 
-        $avatar_site = $queries->getWhere('settings', array('name', '=', 'avatar_api'));
+        $avatar_site = $queries->getWhere('settings', ['name', '=', 'avatar_api']);
+
         if (count($avatar_site)) {
-            $queries->update('settings', $avatar_site[0]->id, array(
+            $queries->update('settings', $avatar_site[0]->id, [
                 'name' => 'avatar_site'
-            ));
+            ]);
         } else {
-            $queries->create('settings', array(
+            $queries->create('settings', [
                 'name' => 'avatar_site',
                 'value' => 'cravatar'
-            ));
+            ]);
         }
 
-        $queries->create('settings', array(
+        $queries->create('settings', [
             'name' => 'mc_integration',
             'value' => 1
-        ));
+        ]);
 
-        $queries->create('settings', array(
+        $queries->create('settings', [
             'name' => 'portal',
             'value' => 0
-        ));
+        ]);
         $cache->setCache('portal_cache');
         $cache->store('portal', 0);
 
-        $queries->create('settings', array(
+        $queries->create('settings', [
             'name' => 'forum_reactions',
             'value' => 1
-        ));
+        ]);
 
-        $queries->create('settings', array(
+        $queries->create('settings', [
             'name' => 'formatting_type',
             'value' => 'html'
-        ));
+        ]);
         $cache->setCache('post_formatting');
         $cache->store('formatting', 'html');
 
-        $error_reporting = $queries->getWhere('settings', array('name', '=', 'error_reporting'));
+        $error_reporting = $queries->getWhere('settings', ['name', '=', 'error_reporting']);
+
         if (count($error_reporting)) {
             $cache->setCache('error_cache');
             $cache->store('error_reporting', $error_reporting[0]->value);
         } else {
-            $queries->create('settings', array(
+            $queries->create('settings', [
                 'name' => 'error_reporting',
                 'value' => 0
-            ));
+            ]);
             $cache->setCache('error_cache');
             $cache->store('error_reporting', 0);
         }
 
-        $queries->create('settings', array(
+        $queries->create('settings', [
             'name' => 'page_loading',
             'value' => 0
-        ));
+        ]);
         $cache->setCache('page_load_cache');
         $cache->store('page_load', 0);
 
-        $use_plugin = $queries->getWhere('settings', array('name', '=', 'use_plugin'));
+        $use_plugin = $queries->getWhere('settings', ['name', '=', 'use_plugin']);
+
         if (count($use_plugin)) {
-            $queries->update('settings', $use_plugin[0]->id, array(
+            $queries->update('settings', $use_plugin[0]->id, [
                 'name' => 'use_api'
-            ));
+            ]);
         } else {
-            $queries->create('settings', array(
+            $queries->create('settings', [
                 'name' => 'use_api',
                 'value' => 0
-            ));
+            ]);
         }
 
-        $queries->create('settings', array(
+        $queries->create('settings', [
             'name' => 'timezone',
             'value' => 'Europe/London'
-        ));
+        ]);
         $cache->setCache('timezone_cache');
         $cache->store('timezone', 'Europe/London');
 
-        $queries->create('settings', array(
+        $queries->create('settings', [
             'name' => 'maintenance_message',
             'value' => 'This website is currently in maintenance mode.'
-        ));
+        ]);
         $cache->setCache('maintenance_cache');
-        $cache->store('maintenance', array('maintenance' => 'false', 'message' => 'This website is currently in maintenance mode.'));
+        $cache->store('maintenance', ['maintenance' => 'false', 'message' => 'This website is currently in maintenance mode.']);
 
-        $queries->create('settings', array(
+        $queries->create('settings', [
             'name' => 'authme',
             'value' => 0
-        ));
+        ]);
 
-        $queries->create('settings', array(
+        $queries->create('settings', [
             'name' => 'authme_db',
             'value' => null
-        ));
+        ]);
 
-        $queries->create('settings', array(
+        $queries->create('settings', [
             'name' => 'force_https',
             'value' => 'false'
-        ));
+        ]);
 
-        $queries->create('settings', array(
+        $queries->create('settings', [
             'name' => 'default_avatar_type',
             'value' => 'minecraft'
-        ));
+        ]);
 
-        $queries->create('settings', array(
+        $queries->create('settings', [
             'name' => 'custom_default_avatar',
             'value' => null
-        ));
+        ]);
 
-        $queries->create('settings', array(
+        $queries->create('settings', [
             'name' => 'private_profile',
             'value' => 1
-        ));
+        ]);
 
-        $queries->create('settings', array(
+        $queries->create('settings', [
             'name' => 'registration_disabled_message',
             'value' => null
-        ));
+        ]);
 
-        $queries->create('settings', array(
+        $queries->create('settings', [
             'name' => 'discord_hooks',
             'value' => '{}'
-        ));
+        ]);
 
-        $queries->create('settings', array(
+        $queries->create('settings', [
             'name' => 'api_verification',
             'value' => '1'
-        ));
+        ]);
 
-        $queries->create('settings', array(
+        $queries->create('settings', [
             'name' => 'validate_user_action',
             'value' => '{"action":"activate"}'
-        ));
+        ]);
 
-        $queries->create('settings', array(
+        $queries->create('settings', [
             'name' => 'login_method',
             'value' => 'email'
-        ));
+        ]);
 
-        $queries->create('settings', array(
+        $queries->create('settings', [
             'name' => 'username_sync',
             'value' => '1'
-        ));
+        ]);
 
-        $queries->create('privacy_terms', array(
+        $queries->create('privacy_terms', [
             'name' => 'privacy',
             'value' => 'The following privacy policy outlines how your data is used on our website.<br /><br /><strong>Data</strong><br />Basic non-identifiable information about your user on the website is collected; the majority of which is provided during registration, such as email addresses and usernames.<br />In addition to this, IP addresses for registered users are stored within the system to aid with moderation duties. This includes spam prevention, and detecting alternative accounts.<br /><br />Accounts can be deleted by a site administrator upon request, which will remove all data relating to your user from our system.<br /><br /><strong>Cookies</strong><br />Cookies are used to store small pieces of non-identifiable information with your consent. In order to consent to the use of cookies, you must either close the cookie notice (as explained within the notice) or register on our website.<br />Data stored by cookies include any recently viewed topic IDs, along with a unique, unidentifiable hash upon logging in and selecting &quot;Remember Me&quot; to automatically log you in next time you visit.'
-        ));
+        ]);
+
+        $terms = $queries->getWhere('settings', ['name', '=', 't_and_c_site']);
 
-        $terms = $queries->getWhere('settings', array('name', '=', 't_and_c_site'));
         if (count($terms)) {
-            $queries->create('privacy_terms', array(
+            $queries->create('privacy_terms', [
                 'name' => 'terms',
                 'value' => $terms[0]->value
-            ));
+            ]);
         }
 
-        $queries->create('settings', array(
+        $queries->create('settings', [
             'name' => 'status_page',
             'value' => '1'
-        ));
+        ]);
 
-        $queries->create('settings', array(
+        $queries->create('settings', [
             'name' => 'discord_integration',
             'value' => 0,
-        ));
+        ]);
 
-        $queries->create('settings', array(
+        $queries->create('settings', [
             'name' => 'discord_bot_url',
             'value' => null
-        ));
+        ]);
 
-        $queries->create('settings', array(
+        $queries->create('settings', [
             'name' => 'discord_bot_username',
             'value' => null
-        ));
+        ]);
 
         // Templates
-        $queries->create('templates', array(
+        $queries->create('templates', [
             'name' => 'Default',
             'enabled' => 1,
             'is_default' => 0
-        ));
+        ]);
 
-        $queries->create('templates', array(
+        $queries->create('templates', [
             'name' => 'DefaultRevamp',
             'enabled' => 1,
             'is_default' => 1
-        ));
+        ]);
 
         $cache->setCache('templatecache');
         $cache->store('default', 'DefaultRevamp');
 
-        $queries->create('panel_templates', array(
+        $queries->create('panel_templates', [
             'name' => 'Default',
             'enabled' => 1,
             'is_default' => 1
-        ));
+        ]);
         $cache->store('panel_default', 'Default');
 
         // Widgets - initialise just a few default ones for now
-        $queries->create('widgets', array(
+        $queries->create('widgets', [
             'name' => 'Online Staff',
             'enabled' => 1,
             'pages' => '["index","forum"]'
-        ));
+        ]);
 
-        $queries->create('widgets', array(
+        $queries->create('widgets', [
             'name' => 'Online Users',
             'enabled' => 1,
             'pages' => '["index","forum"]'
-        ));
+        ]);
 
-        $queries->create('widgets', array(
+        $queries->create('widgets', [
             'name' => 'Statistics',
             'enabled' => 1,
             'pages' => '["index","forum"]'
-        ));
+        ]);
 
         $cache->setCache('Core-widgets');
-        $cache->store('enabled', array(
+        $cache->store('enabled', [
             'Online Staff' => 1,
             'Online Users' => 1,
             'Statistics' => 1
-        ));
+        ]);
 
         $cache->setCache('backgroundcache');
         $cache->store('banner_image', '/uploads/template_banners/homepage_bg_trimmed.jpg');
 
-        unset($_SESSION['db_address']);
-        unset($_SESSION['db_port']);
-        unset($_SESSION['db_username']);
-        unset($_SESSION['db_password']);
-        unset($_SESSION['db_name']);
-
+        unset($_SESSION['db_address'], $_SESSION['db_port'], $_SESSION['db_username'], $_SESSION['db_password'], $_SESSION['db_name']);
+        
         break;
 
     case 9:
         // Complete
         $message = 'Upgrade complete!';
+
         break;
 }
diff --git a/core/installation/views/installer.view.php b/core/installation/views/installer.view.php
index f57eebf22e4fbd06e4702c1231b377cbffa86d7d..3546793a81c41740e081353ef934c582f036afac 100644
--- a/core/installation/views/installer.view.php
+++ b/core/installation/views/installer.view.php
@@ -1,26 +1,29 @@
 <?php
-require(__DIR__ . '/includes/functions.php');
+require (__DIR__ . '/includes/functions.php');
 
 if (isset($_GET['do'])) {
-	$_SESSION['action'] = ($_GET['do'] == 'upgrade' ? 'upgrade' : 'install');
+    $_SESSION['action'] = ($_GET['do'] == 'upgrade' ? 'upgrade' : 'install');
 
-	Redirect::to('?step=requirements_validation');
-	die();
+    Redirect::to('?step=requirements_validation');
 
-} else if (isset($_GET['step'])) {
-	$step = strtolower($_GET['step']);
-	if (!file_exists(__DIR__ . '/steps/' . $step . '.php')) {
-		$error = 'Unknown step.';
-	}
+    die();
+}
+
+if (isset($_GET['step'])) {
+    $step = strtolower($_GET['step']);
 
+    if (! file_exists(__DIR__ . '/steps/' . $step . '.php')) {
+        $error = 'Unknown step.';
+    }
 }
 
 if (isset($step) && $step == 'ajax_initialise') {
-	require(__DIR__ . '/steps/' . $step . '.php');
-	die();
+    require (__DIR__ . '/steps/' . $step . '.php');
+
+    die();
 }
 
-require(__DIR__ . '/includes/header.php');
+require (__DIR__ . '/includes/header.php');
 ?>
 
 <div class="main-content">
@@ -29,19 +32,19 @@ require(__DIR__ . '/includes/header.php');
 			<div class="five wide computer only column">
 				<div class="ui fluid vertical steps">
 					<?php
-						create_step($language['step_home'], 'home icon', array('welcome'));
-						create_step($language['step_requirements'], 'tasks icon', array('requirements_validation'));
-						create_step($language['step_general_config'], 'cog icon', array('general_configuration'));
-						create_step($language['step_database_config'], 'server icon', array('database_configuration', 'database_initialization', 'upgrade', 'upgrade_perform'));
-						create_step($language['step_site_config'], 'globe icon', array('site_configuration', 'site_initialization'));
-						create_step($language['step_admin_account'], 'user icon', array('admin_account_setup'));
-						create_step($language['step_conversion'], 'exchange icon', array('conversion'));
-						create_step($language['step_finish'], 'check icon', array('finish'));
-					?>
+                        create_step($language['step_home'], 'home icon', ['welcome']);
+                        create_step($language['step_requirements'], 'tasks icon', ['requirements_validation']);
+                        create_step($language['step_general_config'], 'cog icon', ['general_configuration']);
+                        create_step($language['step_database_config'], 'server icon', ['database_configuration', 'database_initialization', 'upgrade', 'upgrade_perform']);
+                        create_step($language['step_site_config'], 'globe icon', ['site_configuration', 'site_initialization']);
+                        create_step($language['step_admin_account'], 'user icon', ['admin_account_setup']);
+                        create_step($language['step_conversion'], 'exchange icon', ['conversion']);
+                        create_step($language['step_finish'], 'check icon', ['finish']);
+                    ?>
 				</div>
 			</div>
 			<div class="sixteen wide tablet eleven wide computer column">
-				<?php if (!isset($step)) { ?>
+				<?php if (! isset($step)) { ?>
 					<div class="ui red message">
 						<?php echo $language['pre-release_warning']; ?>
 					</div>
@@ -72,20 +75,19 @@ require(__DIR__ . '/includes/header.php');
 						<?php echo $error; ?>
 					</div>
 				<?php
-				} else {
-					if (!isset($_SESSION['action'])) {
-						?>
+                } else {
+                    if (! isset($_SESSION['action'])) {
+                        ?>
 						<div class="ui red message">
 							<?php echo $language['session_doesnt_exist']; ?>
 						</div>
 						<?php
-					} else
-						require(__DIR__ . '/steps/' . $step . '.php');
-				}
-				?>
+                    } else require (__DIR__ . '/steps/' . $step . '.php');
+                }
+                ?>
 			</div>
 		</div>
 	</div>
 </div>
 
-<?php require(__DIR__ . '/includes/footer.php'); ?>
+<?php require (__DIR__ . '/includes/footer.php'); ?>
diff --git a/core/installation/views/steps/admin_account_setup.php b/core/installation/views/steps/admin_account_setup.php
index 6685f69dd523b3947a0889a968dc495cfe058126..2e22eb6eb9fabd7d0c4ba623ca17297c8b2f16f8 100644
--- a/core/installation/views/steps/admin_account_setup.php
+++ b/core/installation/views/steps/admin_account_setup.php
@@ -1,105 +1,104 @@
 <?php
 if (isset($_SESSION['admin_setup']) && $_SESSION['admin_setup'] == true) {
-	Redirect::to('?step=conversion');
-	die();
+    Redirect::to('?step=conversion');
+
+    die();
 }
 
-if (!isset($_SESSION['site_initialized']) || $_SESSION['site_initialized'] != true) {
-	Redirect::to('?step=site_configuration');
-	die();
+if (! isset($_SESSION['site_initialized']) || $_SESSION['site_initialized'] != true) {
+    Redirect::to('?step=site_configuration');
+
+    die();
 }
 
-require(ROOT_PATH . '/core/includes/password.php');
+require (ROOT_PATH . '/core/includes/password.php');
 
 if ($_SERVER['REQUEST_METHOD'] == 'POST') {
-
-	$validate = new Validate();
-	$validation = $validate->check($_POST, array(
-		'username' => array(
-			'required' => true,
-			'min' => 3,
-			'max' => 20,
-		),
-		'email' => array(
-			'required' => true,
-			'min' => 4,
-			'max' => 64,
-			'email' => true,
-		),
-		'password' => array(
-			'required' => true,
-			'min' => 6,
-			'max' => 64,
-		),
-		'password_again' => array(
-			'required' => true,
-			'matches' => 'password',
-		),
-	));
-
-	if (!$validation->passed()) {
-
-		foreach ($validation->errors() as $item) {
-			if (strpos($item, 'is required') !== false) {
-				$error = $language['input_required'];
-			} else if (strpos($item, 'minimum') !== false) {
-				$error = $language['input_minimum'];
-			} else if (strpos($item, 'maximum') !== false) {
-				$error = $language['input_maximum'];
-			} else if (strpos($item, 'must match') !== false) {
-				$error = $language['passwords_must_match'];
-			} else if( strpos($item, 'not a valid email') !== false) {
-				$error = $language['email_invalid'];
-			}
-		}
-
-	} else {
-		$user = new User();
-		$password = password_hash(Input::get('password'), PASSWORD_BCRYPT, array('cost' => 13));
-
-		try {
-
-			$queries = new Queries();
-
-			$language = $queries->getWhere('languages', array('is_default', '=', 1));
-
-			$ip = $user->getIP();
-			$user->create(array(
-				'username' => Output::getClean(Input::get('username')),
-				'nickname' => Output::getClean(Input::get('username')),
-				'password' => $password,
-				'pass_method' => 'default',
-				'uuid' => 'none',
-				'joined' => date('U'),
-				'email' => Output::getClean(Input::get('email')),
-				'lastip' => $ip,
-				'active' => 1,
-				'last_online' => date('U'),
-				'theme_id' => 1,
-				'language_id' => $language[0]->id,
-			));
-			
-			$login = $user->login(Input::get('email'), Input::get('password'), true);
-			if ($login) {
-				$_SESSION['admin_setup'] = true;
-				$user->addGroup(2);
-
-				Redirect::to('?step=conversion');
-				die();
-			}
-
-			$error = $language['unable_to_login'];
-
-			$queries->delete('users', array('id', '=', 1));
-
-		} catch(Exception $e) {
-			$error = $language['unable_to_create_account'] . ': ' . $e->getMessage();
-		}
-	}
+    $validate = new Validate();
+    $validation = $validate->check($_POST, [
+        'username' => [
+            'required' => true,
+            'min' => 3,
+            'max' => 20,
+        ],
+        'email' => [
+            'required' => true,
+            'min' => 4,
+            'max' => 64,
+            'email' => true,
+        ],
+        'password' => [
+            'required' => true,
+            'min' => 6,
+            'max' => 64,
+        ],
+        'password_again' => [
+            'required' => true,
+            'matches' => 'password',
+        ],
+    ]);
+
+    if (! $validation->passed()) {
+        foreach ($validation->errors() as $item) {
+            if (strpos($item, 'is required') !== false) {
+                $error = $language['input_required'];
+            } else if (strpos($item, 'minimum') !== false) {
+                $error = $language['input_minimum'];
+            } else if (strpos($item, 'maximum') !== false) {
+                $error = $language['input_maximum'];
+            } else if (strpos($item, 'must match') !== false) {
+                $error = $language['passwords_must_match'];
+            } else if (strpos($item, 'not a valid email') !== false) {
+                $error = $language['email_invalid'];
+            }
+        }
+    } else {
+        $user = new User();
+        $password = password_hash(Input::get('password'), PASSWORD_BCRYPT, ['cost' => 13]);
+
+        try {
+            $queries = new Queries();
+
+            $language = $queries->getWhere('languages', ['is_default', '=', 1]);
+
+            $ip = $user->getIP();
+            $user->create([
+                'username' => Output::getClean(Input::get('username')),
+                'nickname' => Output::getClean(Input::get('username')),
+                'password' => $password,
+                'pass_method' => 'default',
+                'uuid' => 'none',
+                'joined' => date('U'),
+                'email' => Output::getClean(Input::get('email')),
+                'lastip' => $ip,
+                'active' => 1,
+                'last_online' => date('U'),
+                'theme_id' => 1,
+                'language_id' => $language[0]->id,
+            ]);
+            
+            $login = $user->login(Input::get('email'), Input::get('password'), true);
+
+            if ($login) {
+                $_SESSION['admin_setup'] = true;
+                $user->addGroup(2);
+
+                Redirect::to('?step=conversion');
+
+                die();
+            }
+
+            $error = $language['unable_to_login'];
+
+            $queries->delete('users', ['id', '=', 1]);
+        } catch (Exception $e) {
+            $error = $language['unable_to_create_account'] . ': ' . $e->getMessage();
+        }
+    }
 }
 
 if (isset($error)) {
-	?>
+    ?>
 	<div class="ui error message">
 		<?php echo $error; ?>
 	</div>
@@ -118,11 +117,11 @@ if (isset($error)) {
 				<div class="sixteen wide mobile twelve wide tablet ten wide computer column">
 					<div class="ui form">
 						<?php
-							create_field('text', $language['username'], 'username', 'inputUsername', getenv('NAMELESS_ADMIN_USERNAME') ?: '');
-							create_field('email', $language['email_address'], 'email', 'inputEmail', getenv('NAMELESS_ADMIN_EMAIL') ?: '');
-							create_field('password', $language['password'], 'password', 'inputPassword');
-							create_field('password', $language['confirm_password'], 'password_again', 'inputPasswordAgain');
-						?>
+                            create_field('text', $language['username'], 'username', 'inputUsername', getenv('NAMELESS_ADMIN_USERNAME') ?: '');
+                            create_field('email', $language['email_address'], 'email', 'inputEmail', getenv('NAMELESS_ADMIN_EMAIL') ?: '');
+                            create_field('password', $language['password'], 'password', 'inputPassword');
+                            create_field('password', $language['confirm_password'], 'password_again', 'inputPasswordAgain');
+                        ?>
 					</div>
 				</div>
 			</div>
diff --git a/core/installation/views/steps/ajax_initialise.php b/core/installation/views/steps/ajax_initialise.php
index c0d6484c4d09d64f719773539e81cf2a85d71d9e..71385e4e75155c1697e78355dffa2c1bf322d7c8 100644
--- a/core/installation/views/steps/ajax_initialise.php
+++ b/core/installation/views/steps/ajax_initialise.php
@@ -1,43 +1,43 @@
 <?php
-if (isset($_POST) && isset($_POST['perform']) && $_POST['perform'] == 'true') {
-	try {
-		if ($_GET['initialise'] === 'db') {
-			$charset = $_SESSION['charset'];
-			$engine = $_SESSION['engine'];
-
-			$queries = new Queries();
-			$success = $queries->dbInitialise($charset, $engine);
-
-			$redirect_url = (($_SESSION['action'] == 'install') ? '?step=site_configuration' : '?step=upgrade');
-
-			$json = array(
-				'success' => $success,
-				'redirect_url' => $redirect_url,
-			);
-
-			$_SESSION['database_initialized'] = true;
-
-		} else if ($_GET['initialise'] === 'site') {
-			require(realpath(__DIR__ . '/../includes/site_initialize.php'));
-
-			$json = array(
-				'success' => true,
-				'redirect_url' => '?step=admin_account_setup',
-			);
-
-			$_SESSION['site_initialized'] = true;
-
-		} else {
-			throw new Exception('Invalid initialisation');
-		}
-	} catch (Exception $e) {
-		$json = array(
-			'error' => true,
-			'message' => $e->getMessage(),
-		);
-	}
-
-	header('Content-Type: application/json');
-	echo json_encode($json);
-	die();
+
+if (isset($_POST, $_POST['perform']) && $_POST['perform'] == 'true') {
+    try {
+        if ($_GET['initialise'] === 'db') {
+            $charset = $_SESSION['charset'];
+            $engine = $_SESSION['engine'];
+
+            $queries = new Queries();
+            $success = $queries->dbInitialise($charset, $engine);
+
+            $redirect_url = (($_SESSION['action'] == 'install') ? '?step=site_configuration' : '?step=upgrade');
+
+            $json = [
+                'success' => $success,
+                'redirect_url' => $redirect_url,
+            ];
+
+            $_SESSION['database_initialized'] = true;
+        } else if ($_GET['initialise'] === 'site') {
+            require (realpath(__DIR__ . '/../includes/site_initialize.php'));
+
+            $json = [
+                'success' => true,
+                'redirect_url' => '?step=admin_account_setup',
+            ];
+
+            $_SESSION['site_initialized'] = true;
+        } else {
+            throw new Exception('Invalid initialisation');
+        }
+    } catch (Exception $e) {
+        $json = [
+            'error' => true,
+            'message' => $e->getMessage(),
+        ];
+    }
+
+    header('Content-Type: application/json');
+    echo json_encode($json);
+
+    die();
 }
diff --git a/core/installation/views/steps/conversion.php b/core/installation/views/steps/conversion.php
index 41d0c5ca7a227f745809b5593b5e41b7e46b5f57..d854825ff35df660e053ed45f324ff40191b8e06 100644
--- a/core/installation/views/steps/conversion.php
+++ b/core/installation/views/steps/conversion.php
@@ -1,7 +1,8 @@
 <?php
-if (!isset($_SESSION['admin_setup']) || $_SESSION['admin_setup'] != true) {
-	Redirect::to('?step=admin_account_setup');
-	die();
+if (! isset($_SESSION['admin_setup']) || $_SESSION['admin_setup'] != true) {
+    Redirect::to('?step=admin_account_setup');
+
+    die();
 }
 ?>
 
diff --git a/core/installation/views/steps/conversion_perform.php b/core/installation/views/steps/conversion_perform.php
index d08847170c4ee1bff01742e11b1f2d3c0fdd5efd..ec3bd30744f9922e43b72dbe5ca8df7145320eff 100644
--- a/core/installation/views/steps/conversion_perform.php
+++ b/core/installation/views/steps/conversion_perform.php
@@ -1,85 +1,73 @@
 <?php
 
-if (!isset($_SESSION['admin_setup']) || $_SESSION['admin_setup'] != true) {
-	Redirect::to('?step=admin_account_setup');
-	die();
+if (! isset($_SESSION['admin_setup']) || $_SESSION['admin_setup'] != true) {
+    Redirect::to('?step=admin_account_setup');
+
+    die();
 }
 
 $available_converters = array_filter(glob(ROOT_PATH . '/custom/converters/*'), 'is_dir');
-$converters = array();
-
-if (!empty($available_converters)) {
-	foreach ($available_converters as $converter) {
-		if (file_exists($converter . '/converter.php')) {
-			$path = explode(DIRECTORY_SEPARATOR, $converter);
-			$converters[] = $path[count($path) - 1];
-		}
-	}
+$converters = [];
+
+if (! empty($available_converters)) {
+    foreach ($available_converters as $converter) {
+        if (file_exists($converter . '/converter.php')) {
+            $path = explode(DIRECTORY_SEPARATOR, $converter);
+            $converters[] = $path[count($path) - 1];
+        }
+    }
 }
 
 if ($_SERVER['REQUEST_METHOD'] == 'POST') {
-
-	if (!empty($converters)) {
-
-		$validate = new Validate();
-		$validation = $validate->check($_POST, array(
-			'db_address' => array(
-				'required' => true,
-			),
-			'db_port' => array(
-				'required' => true,
-			),
-			'db_username' => array(
-				'required' => true,
-			),
-			'db_name' => array(
-				'required' => true,
-			),
-		));
-
-		if (!$validation->passed()) {
-
-			$error = $language['database_error'];
-
-		} else {
-
-			$db_address = $_POST['db_address'];
-			$db_port = $_POST['db_port'];
-			$db_username = $_POST['db_username'];
-			$db_password =  ((isset($_POST['db_password']) && !empty($_POST['db_password'])) ? str_replace('\'', '\\\'', $_POST['db_password']) : '');
-			$db_name = $_POST['db_name'];
-
-			$mysqli = new mysqli($db_address, $db_username, $db_password, $db_name, $db_port);
-			if ($mysqli->connect_errno) {
-
-				$error = $mysqli->connect_errno . ' - ' . $mysqli->connect_error;
-
-			} else {
-
-				$mysqli->close();
-
-				if (!isset($_POST['converter']) || !in_array($_POST['converter'], $converters)) {
-
-					$error = $language['unable_to_load_converter'];
-
-				} else {
-
-					$conn = DB_Custom::getInstance(Input::get('db_address'), Input::get('db_name'), Input::get('db_username'), $password, Input::get('db_port'));
-					require_once(ROOT_PATH . '/custom/converters/' . $_POST['converter'] . '/converter.php');
-
-					if (!isset($error)) {
-						Redirect::to('?step=finish');
-						die();
-					}
-
-				}
-
-			}
-
-		}
-
-	}
-
+    if (! empty($converters)) {
+        $validate = new Validate();
+        $validation = $validate->check($_POST, [
+            'db_address' => [
+                'required' => true,
+            ],
+            'db_port' => [
+                'required' => true,
+            ],
+            'db_username' => [
+                'required' => true,
+            ],
+            'db_name' => [
+                'required' => true,
+            ],
+        ]);
+
+        if (! $validation->passed()) {
+            $error = $language['database_error'];
+        } else {
+            $db_address = $_POST['db_address'];
+            $db_port = $_POST['db_port'];
+            $db_username = $_POST['db_username'];
+            $db_password = ((isset($_POST['db_password']) && ! empty($_POST['db_password'])) ? str_replace('\'', '\\\'', $_POST['db_password']) : '');
+            $db_name = $_POST['db_name'];
+
+            $mysqli = new mysqli($db_address, $db_username, $db_password, $db_name, $db_port);
+
+            if ($mysqli->connect_errno) {
+                $error = $mysqli->connect_errno . ' - ' . $mysqli->connect_error;
+            } else {
+                $mysqli->close();
+
+                if (! isset($_POST['converter']) || ! in_array($_POST['converter'], $converters)) {
+                    $error = $language['unable_to_load_converter'];
+                } else {
+                    $conn = DB_Custom::getInstance(Input::get('db_address'), Input::get('db_name'), Input::get('db_username'), $password, Input::get('db_port'));
+
+                    require_once (ROOT_PATH . '/custom/converters/' . $_POST['converter'] . '/converter.php');
+
+                    if (! isset($error)) {
+                        Redirect::to('?step=finish');
+
+                        die();
+                    }
+                }
+            }
+        }
+    }
 }
 
 ?>
@@ -98,22 +86,23 @@ if ($_SERVER['REQUEST_METHOD'] == 'POST') {
 			</h4>
 		</div>
 		<div class="ui segment">
-			<?php if (!empty($converters)) { ?>
+			<?php if (! empty($converters)) { ?>
 				<div class="ui centered grid">
 					<div class="sixteen wide mobile twelve wide tablet ten wide computer column">
 						<div class="ui form">
 							<?php
-								$converter_options = array();
-								foreach ($converters as $converter) {
-									$converter_options[Output::getClean($converter)] = str_replace('_', ' ', Output::getClean($converter));
-								}
-								create_field('select', $language['converter'], 'converter', 'inputConverter', '', $converter_options);
-								create_field('text', $language['database_address'], 'db_address', 'inputDBAddress', '127.0.0.1');
-								create_field('text', $language['database_port'], 'db_port', 'inputDBPort', '3306');
-								create_field('text', $language['database_username'], 'db_username', 'inputDBUsername');
-								create_field('text', $language['database_password'], 'db_password', 'inputDBPassword');
-								create_field('text', $language['database_name'], 'db_name', 'inputDBName');
-							?>
+                                $converter_options = [];
+
+                                foreach ($converters as $converter) {
+                                    $converter_options[Output::getClean($converter)] = str_replace('_', ' ', Output::getClean($converter));
+                                }
+                                create_field('select', $language['converter'], 'converter', 'inputConverter', '', $converter_options);
+                                create_field('text', $language['database_address'], 'db_address', 'inputDBAddress', '127.0.0.1');
+                                create_field('text', $language['database_port'], 'db_port', 'inputDBPort', '3306');
+                                create_field('text', $language['database_username'], 'db_username', 'inputDBUsername');
+                                create_field('text', $language['database_password'], 'db_password', 'inputDBPassword');
+                                create_field('text', $language['database_name'], 'db_name', 'inputDBName');
+                            ?>
 						</div>
 					</div>
 				</div>
@@ -125,7 +114,7 @@ if ($_SERVER['REQUEST_METHOD'] == 'POST') {
 			<a href="?step=conversion" class="ui small button">
 				<?php echo $language['back']; ?>
 			</a>
-			<?php if (!empty($converters)) { ?>
+			<?php if (! empty($converters)) { ?>
 				<button type="submit" class="ui small primary button">
 					<?php echo $language['proceed']; ?>
 				</button>
diff --git a/core/installation/views/steps/database_configuration.php b/core/installation/views/steps/database_configuration.php
index 907abe6f9806bbf42c891fdec48a71bda5abc0f0..98fd089ff2ec189692788f57ac92061a31b05780 100644
--- a/core/installation/views/steps/database_configuration.php
+++ b/core/installation/views/steps/database_configuration.php
@@ -1,114 +1,100 @@
 <?php
 
 if (isset($_SESSION['database_initialized']) && $_SESSION['database_initialized'] == true) {
-	Redirect::to('?step=site_configuration');
-	die();
-}
+    Redirect::to('?step=site_configuration');
 
-if (!isset($_SESSION['hostname']) || !isset($_SESSION['install_path']) || !isset($_SESSION['friendly_urls'])) {
-	Redirect::to('?step=general_configuration');
-	die();
+    die();
 }
 
-if ($_SERVER['REQUEST_METHOD'] == 'POST') {
-
-	$validate = new Validate();
-	$validation = $validate->check($_POST, array(
-		'db_address' => array(
-			'required' => true,
-		),
-		'db_port' => array(
-			'required' => true,
-		),
-		'db_username' => array(
-			'required' => true,
-		),
-		'db_name' => array(
-			'required' => true,
-		),
-	));
-
-	if (!$validation->passed()) {
-
-		$error = $language['database_error'];
-
-	} else {
-
-		$db_address = $_POST['db_address'];
-		$db_port = $_POST['db_port'];
-		$db_username = $_POST['db_username'];
-		$db_password =  ((isset($_POST['db_password']) && !empty($_POST['db_password'])) ? str_replace('\'', '\\\'', $_POST['db_password']) : '');
-		$db_name = $_POST['db_name'];
-
-		$charset = ($_POST['charset'] == 'latin1') ? 'latin1' : 'utf8mb4';
-		$engine = ($_POST['engine'] == 'MyISAM') ? 'MyISAM' : 'InnoDB';
-
-		$mysqli = new mysqli($db_address, $db_username, $db_password, $db_name, $db_port);
-		if ($mysqli->connect_errno) {
-
-			$error = $mysqli->connect_errno . ' - ' . $mysqli->connect_error;
-
-		} else {
-
-			$mysqli->close();
-
-			$conf = array(
-				'mysql' => array(
-					'host' => $db_address,
-					'port' => $db_port,
-					'username' => $db_username,
-					'password' => $db_password,
-					'db' => $db_name,
-					'prefix' => 'nl2_',
-					'charset' => $charset,
-					'engine' => $engine,
-				),
-				'remember' => array(
-					'cookie_name' => 'nl2',
-					'cookie_expiry' => 604800,
-				),
-				'session' => array(
-					'session_name' => '2user',
-					'admin_name' => '2admin',
-					'token_name' => '2token',
-				),
-				'core' => array(
-					'hostname' => $_SESSION['hostname'],
-					'path' => $_SESSION['install_path'],
-					'friendly' => $_SESSION['friendly_urls'] == 'true' ? true : false,
-				),
-				'allowedProxies' => '',
-			);
-
-			try {
+if (! isset($_SESSION['hostname']) || ! isset($_SESSION['install_path']) || ! isset($_SESSION['friendly_urls'])) {
+    Redirect::to('?step=general_configuration');
 
-				if (!is_writable('core/config.php')) {
-
-					$error = $language['config_not_writable'];
-
-				} else {
-
-					$config_content = '<?php' . PHP_EOL . '$conf = ' . var_export($conf, true) . ';';
-					file_put_contents('core/config.php', $config_content);
-
-					$_SESSION['charset'] = $charset;
-					$_SESSION['engine'] = $engine;
-
-					Redirect::to('?step=database_initialization');
-					die();
-
-				}
-
-			} catch (Exception $e) {
-
-				$error = $e->getMessage();
-
-			}
-
-		}
-
-	}
+    die();
+}
 
+if ($_SERVER['REQUEST_METHOD'] == 'POST') {
+    $validate = new Validate();
+    $validation = $validate->check($_POST, [
+        'db_address' => [
+            'required' => true,
+        ],
+        'db_port' => [
+            'required' => true,
+        ],
+        'db_username' => [
+            'required' => true,
+        ],
+        'db_name' => [
+            'required' => true,
+        ],
+    ]);
+
+    if (! $validation->passed()) {
+        $error = $language['database_error'];
+    } else {
+        $db_address = $_POST['db_address'];
+        $db_port = $_POST['db_port'];
+        $db_username = $_POST['db_username'];
+        $db_password = ((isset($_POST['db_password']) && ! empty($_POST['db_password'])) ? str_replace('\'', '\\\'', $_POST['db_password']) : '');
+        $db_name = $_POST['db_name'];
+
+        $charset = ($_POST['charset'] == 'latin1') ? 'latin1' : 'utf8mb4';
+        $engine = ($_POST['engine'] == 'MyISAM') ? 'MyISAM' : 'InnoDB';
+
+        $mysqli = new mysqli($db_address, $db_username, $db_password, $db_name, $db_port);
+
+        if ($mysqli->connect_errno) {
+            $error = $mysqli->connect_errno . ' - ' . $mysqli->connect_error;
+        } else {
+            $mysqli->close();
+
+            $conf = [
+                'mysql' => [
+                    'host' => $db_address,
+                    'port' => $db_port,
+                    'username' => $db_username,
+                    'password' => $db_password,
+                    'db' => $db_name,
+                    'prefix' => 'nl2_',
+                    'charset' => $charset,
+                    'engine' => $engine,
+                ],
+                'remember' => [
+                    'cookie_name' => 'nl2',
+                    'cookie_expiry' => 604800,
+                ],
+                'session' => [
+                    'session_name' => '2user',
+                    'admin_name' => '2admin',
+                    'token_name' => '2token',
+                ],
+                'core' => [
+                    'hostname' => $_SESSION['hostname'],
+                    'path' => $_SESSION['install_path'],
+                    'friendly' => $_SESSION['friendly_urls'] == 'true' ? true : false,
+                ],
+                'allowedProxies' => '',
+            ];
+
+            try {
+                if (! is_writable('core/config.php')) {
+                    $error = $language['config_not_writable'];
+                } else {
+                    $config_content = '<?php' . PHP_EOL . '$conf = ' . var_export($conf, true) . ';';
+                    file_put_contents('core/config.php', $config_content);
+
+                    $_SESSION['charset'] = $charset;
+                    $_SESSION['engine'] = $engine;
+
+                    Redirect::to('?step=database_initialization');
+
+                    die();
+                }
+            } catch (Exception $e) {
+                $error = $e->getMessage();
+            }
+        }
+    }
 }
 
 ?>
@@ -131,27 +117,27 @@ if ($_SERVER['REQUEST_METHOD'] == 'POST') {
 				<div class="sixteen wide mobile twelve wide tablet ten wide computer column">
 					<div class="ui form">
 						<?php
-							$default_addr = getenv('NAMELESS_DATABASE_ADDRESS') ?: '127.0.0.1';
-							$default_port = getenv('NAMELESS_DATABASE_PORT') ?: '3306';
-							$default_user = getenv('NAMELESS_DATABASE_USERNAME') ?: 'root';
-							$default_pass = getenv('NAMELESS_DATABASE_PASSWORD') ?: '';
-							$default_name = getenv('NAMELESS_DATABASE_NAME') ?: 'nameless';
-							$default_charset = getenv('NAMELESS_DATABASE_CHARSET') ?: 'utf8mb4';
-							$default_engine = getenv('NAMELESS_DATABASE_ENGINE') ?: 'InnoDB';
-							create_field('text', $language['database_address'], 'db_address', 'inputDBAddress', $default_addr);
-							create_field('text', $language['database_port'], 'db_port', 'inputDBPort', $default_port);
-							create_field('text', $language['database_username'], 'db_username', 'inputDBUsername', $default_user);
-							create_field('password', $language['database_password'], 'db_password', 'inputDBPassword', $default_pass);
-							create_field('text', $language['database_name'], 'db_name', 'inputDBName', $default_name);
-							create_field('select', $language['character_set'], 'charset', 'inputCharset', $default_charset, array(
-								'utf8mb4' => 'Unicode (utf8mb4)',
-								'latin1' => 'Latin (latin1)',
-							));
-							create_field('select', $language['database_engine'], 'engine', 'inputEngine', $default_engine, array(
-								'InnoDB' => 'InnoDB',
-								'MyISAM' => 'MyISAM',
-							));
-						?>
+                            $default_addr = getenv('NAMELESS_DATABASE_ADDRESS') ?: '127.0.0.1';
+                            $default_port = getenv('NAMELESS_DATABASE_PORT') ?: '3306';
+                            $default_user = getenv('NAMELESS_DATABASE_USERNAME') ?: 'root';
+                            $default_pass = getenv('NAMELESS_DATABASE_PASSWORD') ?: '';
+                            $default_name = getenv('NAMELESS_DATABASE_NAME') ?: 'nameless';
+                            $default_charset = getenv('NAMELESS_DATABASE_CHARSET') ?: 'utf8mb4';
+                            $default_engine = getenv('NAMELESS_DATABASE_ENGINE') ?: 'InnoDB';
+                            create_field('text', $language['database_address'], 'db_address', 'inputDBAddress', $default_addr);
+                            create_field('text', $language['database_port'], 'db_port', 'inputDBPort', $default_port);
+                            create_field('text', $language['database_username'], 'db_username', 'inputDBUsername', $default_user);
+                            create_field('password', $language['database_password'], 'db_password', 'inputDBPassword', $default_pass);
+                            create_field('text', $language['database_name'], 'db_name', 'inputDBName', $default_name);
+                            create_field('select', $language['character_set'], 'charset', 'inputCharset', $default_charset, [
+                                'utf8mb4' => 'Unicode (utf8mb4)',
+                                'latin1' => 'Latin (latin1)',
+                            ]);
+                            create_field('select', $language['database_engine'], 'engine', 'inputEngine', $default_engine, [
+                                'InnoDB' => 'InnoDB',
+                                'MyISAM' => 'MyISAM',
+                            ]);
+                        ?>
 					</div>
 				</div>
 			</div>
diff --git a/core/installation/views/steps/database_initialization.php b/core/installation/views/steps/database_initialization.php
index 6f9ee4582031fdc0660b8687526ea7f992514f3e..30e252fc7964aa7bac72958caa88b120a63c34d0 100644
--- a/core/installation/views/steps/database_initialization.php
+++ b/core/installation/views/steps/database_initialization.php
@@ -1,16 +1,18 @@
 <?php
 if (isset($_SESSION['database_initialized']) && $_SESSION['database_initialized'] == true) {
-	Redirect::to('?step=site_configuration');
-	die();
+    Redirect::to('?step=site_configuration');
+
+    die();
 }
 
-if (!isset($_SESSION['charset']) || !isset($_SESSION['engine'])) {
-	Redirect::to('?step=database_configuration');
-	die();
+if (! isset($_SESSION['charset']) || ! isset($_SESSION['engine'])) {
+    Redirect::to('?step=database_configuration');
+
+    die();
 }
 
-$scripts = array(
-	'
+$scripts = [
+    '
 	<script>
 		$(document).ready(function() {
 			$.post("?step=ajax_initialise&initialise=db", {perform: "true"}, function(response) {
@@ -30,7 +32,7 @@ $scripts = array(
 		});
 	</script>
 	'
-);
+];
 ?>
 
 <div class="ui segments">
diff --git a/core/installation/views/steps/finish.php b/core/installation/views/steps/finish.php
index 3f76499bc6b190625a58189ecfdae73253aad789..85a9b01fa46ea682967892cdfa950337a3c2b457 100644
--- a/core/installation/views/steps/finish.php
+++ b/core/installation/views/steps/finish.php
@@ -1,26 +1,21 @@
 <?php
 
-if (!isset($_SESSION['admin_setup']) || $_SESSION['admin_setup'] != true) {
-	Redirect::to('?step=admin_account_setup');
-	die();
+if (! isset($_SESSION['admin_setup']) || $_SESSION['admin_setup'] != true) {
+    Redirect::to('?step=admin_account_setup');
+
+    die();
 }
 
 try {
+    if (! is_writable('core/config.php')) {
+        $error = $language['config_not_writable'];
+    } else {
+        file_put_contents('core/config.php', PHP_EOL . '$CONFIG[\'installed\'] = true;', FILE_APPEND);
+    }
 
-	if (!is_writable('core/config.php')) {
-		$error = $language['config_not_writable'];
-	} else {
-		file_put_contents('core/config.php', PHP_EOL . '$CONFIG[\'installed\'] = true;', FILE_APPEND);
-	}
-
-	unset($_SESSION['admin_setup']);
-	unset($_SESSION['database_initialized']);
-	unset($_SESSION['site_initialized']);
-
+    unset($_SESSION['admin_setup'], $_SESSION['database_initialized'], $_SESSION['site_initialized']);
 } catch (Exception $e) {
-
-	$error = $e->getMessage();
-
+    $error = $e->getMessage();
 }
 
 ?>
diff --git a/core/installation/views/steps/general_configuration.php b/core/installation/views/steps/general_configuration.php
index f1daf253fb86682353eba690dc50f89b60666365..8bded3b0048e0e4dbcc41c84c271f87eec95d090 100644
--- a/core/installation/views/steps/general_configuration.php
+++ b/core/installation/views/steps/general_configuration.php
@@ -1,17 +1,18 @@
 <?php
-if (!isset($_SESSION['requirements_validated']) || $_SESSION['requirements_validated'] != true) {
-	Redirect::to('?step=requirements_validation');
-	die();
+if (! isset($_SESSION['requirements_validated']) || $_SESSION['requirements_validated'] != true) {
+    Redirect::to('?step=requirements_validation');
+
+    die();
 }
 
 if ($_SERVER['REQUEST_METHOD'] == 'POST') {
-	$_SESSION['hostname'] = (isset($_POST['hostname']) ? $_POST['hostname'] : $_SERVER['SERVER_NAME']);
-	$_SESSION['install_path'] = (isset($_POST['install_path']) ? $_POST['install_path'] : '');
-	$_SESSION['friendly_urls'] = (isset($_POST['friendly']) ? $_POST['friendly'] : false);
+    $_SESSION['hostname'] = (isset($_POST['hostname']) ? $_POST['hostname'] : $_SERVER['SERVER_NAME']);
+    $_SESSION['install_path'] = (isset($_POST['install_path']) ? $_POST['install_path'] : '');
+    $_SESSION['friendly_urls'] = (isset($_POST['friendly']) ? $_POST['friendly'] : false);
 
-	Redirect::to('?step=database_configuration');
-	die();
+    Redirect::to('?step=database_configuration');
 
+    die();
 }
 ?>
 
@@ -32,10 +33,10 @@ if ($_SERVER['REQUEST_METHOD'] == 'POST') {
 						<?php create_field('text', $language['nameless_path'], 'install_path', 'inputPath', getenv('NAMELESS_PATH') ?: Output::getClean($install_path)); ?>
 						<p><?php echo $language['nameless_path_info']; ?></p>
 						<div class="ui divider"></div>
-						<?php create_field('select', $language['friendly_urls'], 'friendly', 'inputFriendly', getenv('NAMELESS_FRIENDLY_URLS') ?: 'false', array(
-							'true' => $language['enabled'],
-							'false' => $language['disabled'],
-						)); ?>
+						<?php create_field('select', $language['friendly_urls'], 'friendly', 'inputFriendly', getenv('NAMELESS_FRIENDLY_URLS') ?: 'false', [
+                            'true' => $language['enabled'],
+                            'false' => $language['disabled'],
+                        ]); ?>
 						<p><?php echo $language['friendly_urls_info']; ?></p>
 					</div>
 				</div>
diff --git a/core/installation/views/steps/requirements_validation.php b/core/installation/views/steps/requirements_validation.php
index 69397df890fb39363d149c2ad3040730f6121a5c..e7420d2bc5381637310a8900b4df2a7a34ff8c0f 100644
--- a/core/installation/views/steps/requirements_validation.php
+++ b/core/installation/views/steps/requirements_validation.php
@@ -1,8 +1,9 @@
 <?php
 
-if (!isset($_SESSION['action'])) {
-	Redirect::to('install.php');
-	die();
+if (! isset($_SESSION['action'])) {
+    Redirect::to('install.php');
+
+    die();
 }
 
 unset($_SESSION['requirements_validated']);
@@ -19,25 +20,25 @@ unset($_SESSION['requirements_validated']);
 		<div class="ui centered grid">
 			<div class="sixteen wide mobile eight wide tablet seven wide computer column">
 				<?php
-					validate_requirement('PHP 5.4+', version_compare(phpversion(), '5.4', '>='));
-					validate_requirement('PHP MySQL', extension_loaded('mysql') || extension_loaded('mysqlnd'));
-					validate_requirement('PHP PDO', extension_loaded('PDO'));
-					validate_requirement('PHP XML', extension_loaded('xml'));
-					validate_requirement('PHP MBString', extension_loaded('mbstring'));
-					validate_requirement('PHP GD', extension_loaded('gd'));
-					validate_requirement('PHP cURL', function_exists('curl_version'));
-					validate_requirement('PHP exif_imagetype', function_exists('exif_imagetype'));
-					validate_requirement('PHP JSON', function_exists('json_decode'));
-				?>
+                    validate_requirement('PHP 5.4+', version_compare(phpversion(), '5.4', '>='));
+                    validate_requirement('PHP MySQL', extension_loaded('mysql') || extension_loaded('mysqlnd'));
+                    validate_requirement('PHP PDO', extension_loaded('PDO'));
+                    validate_requirement('PHP XML', extension_loaded('xml'));
+                    validate_requirement('PHP MBString', extension_loaded('mbstring'));
+                    validate_requirement('PHP GD', extension_loaded('gd'));
+                    validate_requirement('PHP cURL', function_exists('curl_version'));
+                    validate_requirement('PHP exif_imagetype', function_exists('exif_imagetype'));
+                    validate_requirement('PHP JSON', function_exists('json_decode'));
+                ?>
 			</div>
 			<div class="sixteen wide mobile eight wide tablet eight wide computer column">
 				<?php
-					validate_requirement('Core Writable <span class="ui basic label">/core</span>', is_writable('core'));
-					validate_requirement('Core Config Writable <span class="ui basic label">/core/config.php</span>', is_writable('core/config.php'));
-					validate_requirement('Core Email Writable <span class="ui basic label">/core/email.php</span>', is_writable('core/email.php'));
-					validate_requirement('Cache Writable <span class="ui basic label">/cache</span>', is_writable('cache'));
-					validate_requirement('Template Cache Writable <span class="ui basic label">/cache/templates_c</span>', is_writable('cache/templates_c'));
-				?>
+                    validate_requirement('Core Writable <span class="ui basic label">/core</span>', is_writable('core'));
+                    validate_requirement('Core Config Writable <span class="ui basic label">/core/config.php</span>', is_writable('core/config.php'));
+                    validate_requirement('Core Email Writable <span class="ui basic label">/core/email.php</span>', is_writable('core/email.php'));
+                    validate_requirement('Cache Writable <span class="ui basic label">/cache</span>', is_writable('cache'));
+                    validate_requirement('Template Cache Writable <span class="ui basic label">/cache/templates_c</span>', is_writable('cache/templates_c'));
+                ?>
 			</div>
 		</div>
 	</div>
diff --git a/core/installation/views/steps/site_configuration.php b/core/installation/views/steps/site_configuration.php
index df1487fe2952492e6c6e41d9740fdd071c532bb8..531e8b963b3f154b9e8d5cb305ff5da18ec9fe79 100644
--- a/core/installation/views/steps/site_configuration.php
+++ b/core/installation/views/steps/site_configuration.php
@@ -1,75 +1,73 @@
 <?php
 
 if (isset($_SESSION['site_initialized']) && $_SESSION['site_initialized'] == true) {
-	Redirect::to('?step=admin_account_setup');
-	die();
-}
+    Redirect::to('?step=admin_account_setup');
 
-if (!isset($_SESSION['database_initialized']) || $_SESSION['database_initialized'] != true) {
-	Redirect::to('?step=database_configuration');
-	die();
+    die();
 }
 
-if ($_SERVER['REQUEST_METHOD'] == 'POST') {
-
-	$validate = new Validate();
-	$validation = $validate->check($_POST, array(
-		'sitename' => array(
-			'required' => true,
-			'min' => 1,
-			'max' => 32,
-		),
-		'incoming' => array(
-			'required' => true,
-			'min' => 4,
-			'max' => 64,
-		),
-		'outgoing' => array(
-			'required' => true,
-			'min' => 4,
-			'max' => 64,
-		),
-		'language' => array(
-			'required' => true
-		)
-	));
-
-	if (!$validation->passed()) {
-
-		$error = $language['configuration_error'];
-	} else {
-
-		try {
-
-			$queries = new Queries();
-			$queries->create('settings', array(
-				'name' => 'sitename',
-				'value' => Output::getClean(Input::get('sitename'))
-			));
+if (! isset($_SESSION['database_initialized']) || $_SESSION['database_initialized'] != true) {
+    Redirect::to('?step=database_configuration');
 
-			$cache = new Cache();
-			$cache->setCache('sitenamecache');
-			$cache->store('sitename', Output::getClean(Input::get('sitename')));
-
-			$queries->create('settings', array(
-				'name' => 'incoming_email',
-				'value' => Output::getClean(Input::get('incoming'))
-			));
-
-			$queries->create('settings', array(
-				'name' => 'outgoing_email',
-				'value' => Output::getClean(Input::get('outgoing'))
-			));
-
-			$_SESSION['default_language'] = Output::getClean(Input::get('language'));
-
-			Redirect::to('?step=site_initialization');
-			die();
-		} catch (Exception $e) {
+    die();
+}
 
-			$error = $e->getMessage();
-		}
-	}
+if ($_SERVER['REQUEST_METHOD'] == 'POST') {
+    $validate = new Validate();
+    $validation = $validate->check($_POST, [
+        'sitename' => [
+            'required' => true,
+            'min' => 1,
+            'max' => 32,
+        ],
+        'incoming' => [
+            'required' => true,
+            'min' => 4,
+            'max' => 64,
+        ],
+        'outgoing' => [
+            'required' => true,
+            'min' => 4,
+            'max' => 64,
+        ],
+        'language' => [
+            'required' => true
+        ]
+    ]);
+
+    if (! $validation->passed()) {
+        $error = $language['configuration_error'];
+    } else {
+        try {
+            $queries = new Queries();
+            $queries->create('settings', [
+                'name' => 'sitename',
+                'value' => Output::getClean(Input::get('sitename'))
+            ]);
+
+            $cache = new Cache();
+            $cache->setCache('sitenamecache');
+            $cache->store('sitename', Output::getClean(Input::get('sitename')));
+
+            $queries->create('settings', [
+                'name' => 'incoming_email',
+                'value' => Output::getClean(Input::get('incoming'))
+            ]);
+
+            $queries->create('settings', [
+                'name' => 'outgoing_email',
+                'value' => Output::getClean(Input::get('outgoing'))
+            ]);
+
+            $_SESSION['default_language'] = Output::getClean(Input::get('language'));
+
+            Redirect::to('?step=site_initialization');
+
+            die();
+        } catch (Exception $e) {
+            $error = $e->getMessage();
+        }
+    }
 }
 
 ?>
@@ -95,7 +93,7 @@ if ($_SERVER['REQUEST_METHOD'] == 'POST') {
 						<?php create_field('text', $language['site_name'], 'sitename', 'inputSitename', getenv('NAMELESS_SITE_NAME') ?: ''); ?>
 						<?php create_field('email', $language['contact_email'], 'incoming', 'contact_email', getenv('NAMELESS_SITE_CONTACT_EMAIL') ?: ''); ?>
 						<?php create_field('email', $language['outgoing_email'], 'outgoing', 'outgoing_email', getenv('NAMELESS_SITE_OUTGOING_EMAIL') ?: ''); ?>
-						<?php create_field('select', $language['language'], 'language', 'inputLanguage', $installer_language, $languages, true) ?>
+						<?php create_field('select', $language['language'], 'language', 'inputLanguage', $installer_language, $languages, true); ?>
 					</div>
 				</div>
 			</div>
diff --git a/core/installation/views/steps/site_initialization.php b/core/installation/views/steps/site_initialization.php
index 4fab1aacb35649439c00602ec049f5a42f958c44..6c2ba679ac336006d7c19f9783b0912dd93475dc 100644
--- a/core/installation/views/steps/site_initialization.php
+++ b/core/installation/views/steps/site_initialization.php
@@ -1,17 +1,19 @@
 <?php
 
 if (isset($_SESSION['site_initialized']) && $_SESSION['site_initialized'] == true) {
-	Redirect::to('?step=admin_account_setup');
-	die();
+    Redirect::to('?step=admin_account_setup');
+
+    die();
 }
 
-if (!isset($_SESSION['database_initialized']) || $_SESSION['database_initialized'] != true) {
-	Redirect::to('?step=database_configuration');
-	die();
+if (! isset($_SESSION['database_initialized']) || $_SESSION['database_initialized'] != true) {
+    Redirect::to('?step=database_configuration');
+
+    die();
 }
 
-$scripts = array(
-	'
+$scripts = [
+    '
 	<script>
 		$(document).ready(function() {
 			$.post("?step=ajax_initialise&initialise=site", {perform: "true"}, function(response) {
@@ -31,7 +33,7 @@ $scripts = array(
 		});
 	</script>
 	'
-);
+];
 ?>
 
 <div class="ui segments">
diff --git a/core/installation/views/steps/upgrade.php b/core/installation/views/steps/upgrade.php
index 134baf75c7986ee301ee3337f57656288cfd689e..c3a44f3b0a78a65f22a0c53a03cd17586b86b519 100644
--- a/core/installation/views/steps/upgrade.php
+++ b/core/installation/views/steps/upgrade.php
@@ -1,60 +1,53 @@
 <?php
 
-if (!isset($_SESSION['database_initialized']) || $_SESSION['database_initialized'] != true) {
-	Redirect::to('?step=database_configuration');
-	die();
+if (! isset($_SESSION['database_initialized']) || $_SESSION['database_initialized'] != true) {
+    Redirect::to('?step=database_configuration');
+
+    die();
 }
 
 if ($_SERVER['REQUEST_METHOD'] == 'POST') {
-	
-	$validate = new Validate();
-	$validation = $validate->check($_POST, array(
-		'db_address' => array(
-			'required' => true,
-		),
-		'db_port' => array(
-			'required' => true,
-		),
-		'db_username' => array(
-			'required' => true,
-		),
-		'db_name' => array(
-			'required' => true,
-		),
-	));
-
-	if (!$validation->passed()) {
-
-		$error = $language['database_error'];
-
-	} else {
-
-		$db_address = $_POST['db_address'];
-		$db_port = $_POST['db_port'];
-		$db_username = $_POST['db_username'];
-		$db_password =  ((isset($_POST['db_password']) && !empty($_POST['db_password'])) ? $_POST['db_password'] : '');
-		$db_name = $_POST['db_name'];
-
-		$mysqli = new mysqli($db_address, $db_username, $db_password, $db_name, $db_port);
-		if ($mysqli->connect_errno) {
-
-			$error = $mysqli->connect_errno . ' - ' . $mysqli->connect_error;
-
-		} else {
-
-			$_SESSION['db_address'] = $db_address;
-			$_SESSION['db_port'] = $db_port;
-			$_SESSION['db_username'] = $db_username;
-			$_SESSION['db_password'] = $db_password;
-			$_SESSION['db_name'] = $db_name;
-			
-			Redirect::to('?step=upgrade_perform');
-			die();
-
-		}
-
-	}
-
+    $validate = new Validate();
+    $validation = $validate->check($_POST, [
+        'db_address' => [
+            'required' => true,
+        ],
+        'db_port' => [
+            'required' => true,
+        ],
+        'db_username' => [
+            'required' => true,
+        ],
+        'db_name' => [
+            'required' => true,
+        ],
+    ]);
+
+    if (! $validation->passed()) {
+        $error = $language['database_error'];
+    } else {
+        $db_address = $_POST['db_address'];
+        $db_port = $_POST['db_port'];
+        $db_username = $_POST['db_username'];
+        $db_password = ((isset($_POST['db_password']) && ! empty($_POST['db_password'])) ? $_POST['db_password'] : '');
+        $db_name = $_POST['db_name'];
+
+        $mysqli = new mysqli($db_address, $db_username, $db_password, $db_name, $db_port);
+
+        if ($mysqli->connect_errno) {
+            $error = $mysqli->connect_errno . ' - ' . $mysqli->connect_error;
+        } else {
+            $_SESSION['db_address'] = $db_address;
+            $_SESSION['db_port'] = $db_port;
+            $_SESSION['db_username'] = $db_username;
+            $_SESSION['db_password'] = $db_password;
+            $_SESSION['db_name'] = $db_name;
+            
+            Redirect::to('?step=upgrade_perform');
+
+            die();
+        }
+    }
 }
 
 ?>
@@ -78,12 +71,12 @@ if ($_SERVER['REQUEST_METHOD'] == 'POST') {
 				<div class="sixteen wide mobile twelve wide tablet ten wide computer column">
 					<div class="ui form">
 						<?php
-							create_field('text', $language['database_address'], 'db_address', 'inputDBAddress', '127.0.0.1');
-							create_field('text', $language['database_port'], 'db_port', 'inputDBPort', '3306');
-							create_field('text', $language['database_username'], 'db_username', 'inputDBUsername');
-							create_field('text', $language['database_password'], 'db_password', 'inputDBPassword');
-							create_field('text', $language['database_name'], 'db_name', 'inputDBName');
-						?>
+                            create_field('text', $language['database_address'], 'db_address', 'inputDBAddress', '127.0.0.1');
+                            create_field('text', $language['database_port'], 'db_port', 'inputDBPort', '3306');
+                            create_field('text', $language['database_username'], 'db_username', 'inputDBUsername');
+                            create_field('text', $language['database_password'], 'db_password', 'inputDBPassword');
+                            create_field('text', $language['database_name'], 'db_name', 'inputDBName');
+                        ?>
 					</div>
 				</div>
 			</div>
diff --git a/core/installation/views/steps/upgrade_perform.php b/core/installation/views/steps/upgrade_perform.php
index 245e59441b56baee3afeb7c52a6e3e9c68807336..9cbd1d99884d5e57fbc7e5fc386068dcf8a5d947 100644
--- a/core/installation/views/steps/upgrade_perform.php
+++ b/core/installation/views/steps/upgrade_perform.php
@@ -1,58 +1,47 @@
 <?php
 
-$s = (isset($_GET['s']) ? (int)$_GET['s'] : 0);
+$s = (isset($_GET['s']) ? (int) $_GET['s'] : 0);
 
 if ($_SERVER['REQUEST_METHOD'] == 'POST') {
-
-	if (isset($_POST['perform']) && $_POST['perform'] == 'true') {
-
-		try {
-
-			require(realpath(__DIR__ . '/../includes/upgrade_perform.php'));
-			$redirect_url = ($s < 9 ? '?step=upgrade_perform&s=' . ($s + 1) : '?step=finish');
-			
-			if (!empty($errors)) {
-
-				if (!isset($message)) {
-					$message = '<p>' . $language['errors_logged'] . '</p>';
-					$message .= '<div class="ui bulleted list">' . implode('', array_map(function($err) {
-						return '<div class="item">' . $err . '</div>';
-					}, $errors)) . '</div>';
-				}
-
-				$json = array(
-					'error' => true,
-					'message' => $message,
-					'redirect_url' => $redirect_url,
-				);
-
-			} else {
-
-				$json = array(
-					'success' => true,
-					'message' => $message,
-					'redirect_url' => $redirect_url,
-				);
-
-			}
-
-		} catch (Exception $e) {
-
-			$json = array(
-				'error' => true,
-				'message' => $e->getMessage(),
-				'redirect_url' => '',
-			);
-
-		}
-
-		ob_clean();
-		header('Content-Type: application/json');
-		echo json_encode($json);
-		die();
-
-	}
-
+    if (isset($_POST['perform']) && $_POST['perform'] == 'true') {
+        try {
+            require (realpath(__DIR__ . '/../includes/upgrade_perform.php'));
+            $redirect_url = ($s < 9 ? '?step=upgrade_perform&s=' . ($s + 1) : '?step=finish');
+            
+            if (! empty($errors)) {
+                if (! isset($message)) {
+                    $message = '<p>' . $language['errors_logged'] . '</p>';
+                    $message .= '<div class="ui bulleted list">' . implode('', array_map(function ($err) {
+                        return '<div class="item">' . $err . '</div>';
+                    }, $errors)) . '</div>';
+                }
+
+                $json = [
+                    'error' => true,
+                    'message' => $message,
+                    'redirect_url' => $redirect_url,
+                ];
+            } else {
+                $json = [
+                    'success' => true,
+                    'message' => $message,
+                    'redirect_url' => $redirect_url,
+                ];
+            }
+        } catch (Exception $e) {
+            $json = [
+                'error' => true,
+                'message' => $e->getMessage(),
+                'redirect_url' => '',
+            ];
+        }
+
+        ob_clean();
+        header('Content-Type: application/json');
+        echo json_encode($json);
+
+        die();
+    }
 }
 
 ?>
diff --git a/core/integration/run_mcassoc.php b/core/integration/run_mcassoc.php
index a97efdbd1841857070820148d2ae67591501206f..0dfd1b0c8f9c05e961146dd4b4b809a0e208ab87 100644
--- a/core/integration/run_mcassoc.php
+++ b/core/integration/run_mcassoc.php
@@ -9,129 +9,129 @@
  *  MCAssoc integration
  */
 
-if(!defined('MCASSOC') || !(isset($_POST['username']) || isset($_SESSION['mcassoc'])) || !isset($mcassoc_site_id)) die();
+if (! defined('MCASSOC') || ! (isset($_POST['username']) || isset($_SESSION['mcassoc'])) || ! isset($mcassoc_site_id)) die();
 
 $page_title = $language->get('general', 'verify_account');
-require_once(ROOT_PATH . '/core/templates/frontend_init.php');
 
-$template->addJSFiles(array(
-	(defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/js/client.js' => array()
-));
+require_once (ROOT_PATH . '/core/templates/frontend_init.php');
+
+$template->addJSFiles([
+    (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/js/client.js' => []
+]);
 
 // Assign post data to session variable
-if(!isset($_SESSION['mcassoc'])) $_SESSION['mcassoc'] = $_POST;
-
-$smarty->assign(array(
-	'VERIFY_ACCOUNT' => $language->get('user', 'verify_account'),
-	'VERIFY_ACCOUNT_HELP' => $language->get('user', 'verify_account_help')
-));
-
-if(!isset($_GET['step'])){
-	// Step 1 - MCAssoc
-	if($custom_usernames == 'true'){
-		if(isset($_SESSION['mcassoc']['mcname'])){
-			$username = $_SESSION['mcassoc']['mcname'];
-		}
-	} else {
-		if(isset($_SESSION['mcassoc']['username'])){
-			$username = $_SESSION['mcassoc']['username'];
-		}
-	}
-
-	$return_link = Output::getClean(rtrim(Util::getSelfURL(), '/')) . URL::build('/register/', 'step=2');
-	$key = $mcassoc->generateKey($username);
-
-	$smarty->assign('MCASSOC', '
+if (! isset($_SESSION['mcassoc'])) $_SESSION['mcassoc'] = $_POST;
+
+$smarty->assign([
+    'VERIFY_ACCOUNT' => $language->get('user', 'verify_account'),
+    'VERIFY_ACCOUNT_HELP' => $language->get('user', 'verify_account_help')
+]);
+
+if (! isset($_GET['step'])){
+    // Step 1 - MCAssoc
+    if ($custom_usernames == 'true'){
+        if (isset($_SESSION['mcassoc']['mcname'])){
+            $username = $_SESSION['mcassoc']['mcname'];
+        }
+    } else {
+        if (isset($_SESSION['mcassoc']['username'])){
+            $username = $_SESSION['mcassoc']['username'];
+        }
+    }
+
+    $return_link = Output::getClean(rtrim(Util::getSelfURL(), '/')) . URL::build('/register/', 'step=2');
+    $key = $mcassoc->generateKey($username);
+
+    $smarty->assign('MCASSOC', '
 	  <center>
 	    <iframe id="mcassoc" width="100%" height="400" frameBorder="0" seamless scrolling="no"></iframe>
 	  </center>
     ');
 
-	$template->addJSFiles(array((defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/js/client.js' => array()));
-	$template->addJSScript('
+    $template->addJSFiles([(defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/js/client.js' => []]);
+    $template->addJSScript('
 	  MCAssoc.init("' . $mcassoc_site_id . '", "' . $key . '", "' . $return_link . '");
 	');
-
-} else if($_GET['step'] == 2){
-	// Final step - verify data matches form
-	if($custom_usernames == 'true'){
-		if(isset($_SESSION['mcassoc']['mcname'])){
-			$username = $_SESSION['mcassoc']['mcname'];
-		}
-	} else {
-		if(isset($_SESSION['mcassoc']['username'])){
-			$username = $_SESSION['mcassoc']['username'];
-		}
-	}
-
-	if(!isset($username)) die('Session expired, please try again.');
-
-	$smarty->assign('STEP', 2);
-
-	try {
-		$data = $mcassoc->unwrapData($_POST['data']);
-
-		if(!$data || $username != $data->username){
-			// Does not match MCAssoc
-			$smarty->assign('ERROR', $language->get('user', 'verification_failed'));
-			$smarty->assign('RETRY_LINK', URL::build('/register'));
-			$smarty->assign('RETRY_TEXT', $language->get('general', 'register'));
-
-			unset($_SESSION['mcassoc']);
-		} else {
-			// Matches
-			// Register the account
-			// Password (already hashed)
-			$password = $_SESSION['password'];
-
-			// Get IP
-			$ip = $user->getIP();
-
-			$user->create(array(
-				'username' => htmlspecialchars($username),
-				'nickname' => htmlspecialchars($_SESSION['mcassoc']['username']),
-				'uuid' => htmlspecialchars($data->uuid),
-				'password' => $password,
-				'pass_method' => 'default',
-				'joined' => date('U'),
-				'email' => htmlspecialchars($_SESSION['mcassoc']['email']),
-				'active' => 1,
-				'lastip' => htmlspecialchars($ip),
-				'last_online' => date('U')
-            ));
+} else if ($_GET['step'] == 2){
+    // Final step - verify data matches form
+    if ($custom_usernames == 'true'){
+        if (isset($_SESSION['mcassoc']['mcname'])){
+            $username = $_SESSION['mcassoc']['mcname'];
+        }
+    } else {
+        if (isset($_SESSION['mcassoc']['username'])){
+            $username = $_SESSION['mcassoc']['username'];
+        }
+    }
+
+    if (! isset($username)) die('Session expired, please try again.');
+
+    $smarty->assign('STEP', 2);
+
+    try {
+        $data = $mcassoc->unwrapData($_POST['data']);
+
+        if (! $data || $username != $data->username){
+            // Does not match MCAssoc
+            $smarty->assign('ERROR', $language->get('user', 'verification_failed'));
+            $smarty->assign('RETRY_LINK', URL::build('/register'));
+            $smarty->assign('RETRY_TEXT', $language->get('general', 'register'));
+
+            unset($_SESSION['mcassoc']);
+        } else {
+            // Matches
+            // Register the account
+            // Password (already hashed)
+            $password = $_SESSION['password'];
+
+            // Get IP
+            $ip = $user->getIP();
+
+            $user->create([
+                'username' => htmlspecialchars($username),
+                'nickname' => htmlspecialchars($_SESSION['mcassoc']['username']),
+                'uuid' => htmlspecialchars($data->uuid),
+                'password' => $password,
+                'pass_method' => 'default',
+                'joined' => date('U'),
+                'email' => htmlspecialchars($_SESSION['mcassoc']['email']),
+                'active' => 1,
+                'lastip' => htmlspecialchars($ip),
+                'last_online' => date('U')
+            ]);
             
             $new_user = new User(DB::getInstance()->lastId());
-            // TODO: which group should they be set to? 
+            // TODO: which group should they be set to?
             // VALIDATED_DEFAULT
             // PRE_VALIDATED_DEFAULT
             $new_user->setGroup(1);
 
-			unset($_SESSION['mcassoc']);
+            unset($_SESSION['mcassoc']);
 
-			$smarty->assign('SUCCESS', $language->get('user', 'verification_success'));
-			$smarty->assign('LOGIN_LINK', URL::build('/login'));
-			$smarty->assign('LOGIN_TEXT', $language->get('general', 'sign_in'));
+            $smarty->assign('SUCCESS', $language->get('user', 'verification_success'));
+            $smarty->assign('LOGIN_LINK', URL::build('/login'));
+            $smarty->assign('LOGIN_TEXT', $language->get('general', 'sign_in'));
+        }
+    } catch (Exception $e) {
+        $smarty->assign('ERROR', $language->get('user', 'verification_failed') . ' - ' . $e->getMessage());
+        $smarty->assign('RETRY_LINK', URL::build('/register'));
+        $smarty->assign('RETRY_TEXT', $language->get('general', 'register'));
 
-		}
-	} catch (Exception $e) {
-		$smarty->assign('ERROR', $language->get('user', 'verification_failed') . ' - ' . $e->getMessage());
-		$smarty->assign('RETRY_LINK', URL::build('/register'));
-		$smarty->assign('RETRY_TEXT', $language->get('general', 'register'));
-
-		unset($_SESSION['mcassoc']);
-	}
+        unset($_SESSION['mcassoc']);
+    }
 }
 
 // Load modules + template
-Module::loadPage($user, $pages, $cache, $smarty, array($navigation, $cc_nav, $mod_nav), $widgets);
+Module::loadPage($user, $pages, $cache, $smarty, [$navigation, $cc_nav, $mod_nav], $widgets);
 
 $page_load = microtime(true) - $start;
 define('PAGE_LOAD_TIME', str_replace('{x}', round($page_load, 3), $language->get('general', 'page_loaded_in')));
 
 $template->onPageLoad();
 
-require(ROOT_PATH . '/core/templates/navbar.php');
-require(ROOT_PATH . '/core/templates/footer.php');
+require (ROOT_PATH . '/core/templates/navbar.php');
+
+require (ROOT_PATH . '/core/templates/footer.php');
 
 // Display template
 $template->displayTemplate('mcassoc.tpl', $smarty);
diff --git a/core/integration/uuid.php b/core/integration/uuid.php
index 8ed187754ecdf1ed659738f50b2bff31cf9757c4..4f952f77ac92965454a2b0228d52b1f807530c4e 100644
--- a/core/integration/uuid.php
+++ b/core/integration/uuid.php
@@ -8,17 +8,20 @@
  * https://github.com/NamelessMC/Nameless
  */
 
-class MinecraftProfile {
+class MinecraftProfile
+{
     private $username;
+
     private $uuid;
+
     private $properties;
 
     /**
-     * @param string $username The player's username.
-     * @param string $uuid The player's UUID.
-     * @param array $properties The player's properties specified on their Mojang profile.
+     * @param string $username   The player's username.
+     * @param string $uuid       The player's UUID.
+     * @param array  $properties The player's properties specified on their Mojang profile.
      */
-    function __CONSTRUCT($username, $uuid, $properties = array()) {
+    public function __construct($username, $uuid, $properties = []) {
         $this->username = $username;
         $this->uuid = $uuid;
         $this->properties = $properties;
@@ -49,41 +52,43 @@ class MinecraftProfile {
      * @return array Returns an array with keys of 'properties, usernname and uuid'.
      */
     public function getProfileAsArray() {
-        return array("username" => $this->username, "uuid" => $this->uuid, "properties" => $this->properties);
+        return ['username' => $this->username, 'uuid' => $this->uuid, 'properties' => $this->properties];
     }
 }
 
-class ProfileUtils {
+class ProfileUtils
+{
     /**
-     * @param string $identifier Either the player's Username or UUID.
-     * @param int $timeout The length in seconds of the http request timeout.
+     * @param  string                $identifier Either the player's Username or UUID.
+     * @param  int                   $timeout    The length in seconds of the http request timeout.
      * @return MinecraftProfile|null Returns null if fetching of profile failed. Else returns completed user profile.
      */
     public static function getProfile($identifier, $timeout = 5) {
-        if(strlen($identifier) <= 16){
+        if (strlen($identifier) <= 16){
             $identifier = ProfileUtils::getUUIDFromUsername($identifier, $timeout);
-            $url = "https://sessionserver.mojang.com/session/minecraft/profile/".$identifier['uuid'];
+            $url = 'https://sessionserver.mojang.com/session/minecraft/profile/' . $identifier['uuid'];
         } else {
-            $url = "https://sessionserver.mojang.com/session/minecraft/profile/" . $identifier;
+            $url = 'https://sessionserver.mojang.com/session/minecraft/profile/' . $identifier;
         }
 
-		// Use cURL instead of file_get_contents
-		$ch = curl_init();
-		curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
-		curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
-		curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 0); 
-		curl_setopt($ch, CURLOPT_TIMEOUT, $timeout);
-		curl_setopt($ch, CURLOPT_URL, $url);
-		
-		// Execute
-		$ret = curl_exec($ch);
-		
-        if(!empty($ret) && $ret != null && $ret != false) {
+        // Use cURL instead of file_get_contents
+        $ch = curl_init();
+        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
+        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
+        curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 0);
+        curl_setopt($ch, CURLOPT_TIMEOUT, $timeout);
+        curl_setopt($ch, CURLOPT_URL, $url);
+        
+        // Execute
+        $ret = curl_exec($ch);
+        
+        if (! empty($ret) && $ret != null && $ret != false) {
             $data = json_decode($ret, true);
+
             return new MinecraftProfile($data['name'], $data['id'], $data['properties']);
-        }else {
-            return null;
         }
+
+            return null;
     }
 
     /**
@@ -92,44 +97,45 @@ class ProfileUtils {
      * @return array (Key => Value) "username" => Minecraft username (properly capitalized) "uuid" => Minecraft UUID
      */
     public static function getUUIDFromUsername($username, $timeout = 5) {
-        if(strlen($username) > 16)
-            return array("username" => "", "uuid" => "");
-        $url = 'https://api.mojang.com/users/profiles/minecraft/'.htmlspecialchars($username);
-		
-		// Use cURL instead of file_get_contents
-		$ch = curl_init();
-		curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
-		curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
-		curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 0); 
-		curl_setopt($ch, CURLOPT_TIMEOUT, $timeout);
-		curl_setopt($ch, CURLOPT_URL, $url);
-		curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
-		
-		// Execute
-		$result = curl_exec($ch);
+        if (strlen($username) > 16)
+            return ['username' => '', 'uuid' => ''];
+        $url = 'https://api.mojang.com/users/profiles/minecraft/' . htmlspecialchars($username);
+        
+        // Use cURL instead of file_get_contents
+        $ch = curl_init();
+        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
+        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
+        curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 0);
+        curl_setopt($ch, CURLOPT_TIMEOUT, $timeout);
+        curl_setopt($ch, CURLOPT_URL, $url);
+        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
+        
+        // Execute
+        $result = curl_exec($ch);
 
         // Verification
-        if(isset($result) && $result != null && $result != false)
+        if (isset($result) && $result != null && $result != false)
         {
             $ress = json_decode($result, true);
-            $res = Array("username" =>  $ress['name'], "uuid" => $ress['id']);
-            return $res;
+
+            return ['username' => $ress['name'], 'uuid' => $ress['id']];
         }
-        else
+        
             return null;
     }
 
     /**
-    * @param $uuid string UUID to format
-    * @return string Properly formatted UUID (According to UUID v4 Standards xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx WHERE y = 8,9,A,or B and x = random digits.)
-    */
+     * @param $uuid string UUID to format
+     * @return string Properly formatted UUID (According to UUID v4 Standards xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx WHERE y = 8,9,A,or B and x = random digits.)
+     */
     public static function formatUUID($uuid) {
-        $uid = "";
-        $uid .= substr($uuid, 0, 8)."-";
-        $uid .= substr($uuid, 8, 4)."-";
-        $uid .= substr($uuid, 12, 4)."-";
-        $uid .= substr($uuid, 16, 4)."-";
+        $uid = '';
+        $uid .= substr($uuid, 0, 8) . '-';
+        $uid .= substr($uuid, 8, 4) . '-';
+        $uid .= substr($uuid, 12, 4) . '-';
+        $uid .= substr($uuid, 16, 4) . '-';
         $uid .= substr($uuid, 20);
+
         return $uid;
     }
-}
\ No newline at end of file
+}
diff --git a/core/templates/backend_init.php b/core/templates/backend_init.php
index 1ab77b29aac3380aa7101d21e2cf7504f8cfb603..d957d4078445d06edd88ba49e3545ccc773a047e 100644
--- a/core/templates/backend_init.php
+++ b/core/templates/backend_init.php
@@ -12,39 +12,36 @@
 define('BACK_END', true);
 
 // Set current page URL in session, provided it's not the login page
-if(defined('PAGE') && PAGE != 'login' && PAGE != 404){
-	if(FRIENDLY_URLS === true){
-		$split = explode('?', $_SERVER['REQUEST_URI']);
-
-		if(count($split) > 1)
-			$_SESSION['last_page'] = URL::build($split[0], $split[1]);
-		else
-			$_SESSION['last_page'] = URL::build($split[0]);
-	} else
-		$_SESSION['last_page'] = URL::build($_GET['route']);
-
-	if(defined('CONFIG_PATH'))
-		$_SESSION['last_page'] = substr($_SESSION['last_page'], strlen(CONFIG_PATH));
+if (defined('PAGE') && PAGE != 'login' && PAGE != 404){
+    if (FRIENDLY_URLS === true){
+        $split = explode('?', $_SERVER['REQUEST_URI']);
+
+        if (count($split) > 1)
+            $_SESSION['last_page'] = URL::build($split[0], $split[1]);
+        else $_SESSION['last_page'] = URL::build($split[0]);
+    } else $_SESSION['last_page'] = URL::build($_GET['route']);
+
+    if (defined('CONFIG_PATH'))
+        $_SESSION['last_page'] = substr($_SESSION['last_page'], strlen(CONFIG_PATH));
 }
 
 $template_path = ROOT_PATH . '/custom/panel_templates/' . PANEL_TEMPLATE;
 $smarty->setTemplateDir($template_path);
 $smarty->setCompileDir(ROOT_PATH . '/cache/templates_c');
 
-if(file_exists(ROOT_PATH . '/custom/panel_templates/' . PANEL_TEMPLATE . '/template.php'))
-	require(ROOT_PATH . '/custom/panel_templates/' . PANEL_TEMPLATE . '/template.php');
-else
-	require(ROOT_PATH . '/custom/panel_templates/Default/template.php');
+if (file_exists(ROOT_PATH . '/custom/panel_templates/' . PANEL_TEMPLATE . '/template.php'))
+    require (ROOT_PATH . '/custom/panel_templates/' . PANEL_TEMPLATE . '/template.php');
+else require (ROOT_PATH . '/custom/panel_templates/Default/template.php');
 
 $cache->setCache('backgroundcache');
 $logo_image = $cache->retrieve('logo_image');
 
-if(!empty($logo_image))
+if (! empty($logo_image))
     $smarty->assign('PANEL_LOGO_IMAGE', Output::getClean($logo_image));
 
 $favicon_image = $cache->retrieve('favicon_image');
 
-if(!empty($favicon_image))
+if (! empty($favicon_image))
     $smarty->assign('FAVICON', Output::getClean($favicon_image));
 
-$smarty->assign('TITLE', $page_title);
\ No newline at end of file
+$smarty->assign('TITLE', $page_title);
diff --git a/core/templates/cc_navbar.php b/core/templates/cc_navbar.php
index b52654b4084ad2aafd6d43ab9dcda4d1cd8092cc..0a3c39c0d3ca4bf7fc4ff755e7d3210244ca88dd 100644
--- a/core/templates/cc_navbar.php
+++ b/core/templates/cc_navbar.php
@@ -9,6 +9,6 @@
  *  UserCP navbar generation
  */
 
-$smarty->assign(array(
-	'CC_NAV_LINKS' => $cc_nav->returnNav('top')
-));
\ No newline at end of file
+$smarty->assign([
+    'CC_NAV_LINKS' => $cc_nav->returnNav('top')
+]);
diff --git a/core/templates/footer.php b/core/templates/footer.php
index 785a72b756f6aa86a0e02616dfe278ed34f6b9e8..dbc2521f78f680d3d428544620e236696cc009a8 100644
--- a/core/templates/footer.php
+++ b/core/templates/footer.php
@@ -13,56 +13,59 @@
 // Check cache
 $cache->setCache('social_media');
 
-$social_media_icons = array();
+$social_media_icons = [];
 
 // Facebook
 $social_media = $cache->retrieve('facebook');
-if($social_media){
-	$social_media_icons[] = array(
-		'short' => 'fb',
-		'long' => 'facebook',
-		'link' => Output::getClean($social_media),
-		'text' => 'Facebook'
-	);
+
+if ($social_media){
+    $social_media_icons[] = [
+        'short' => 'fb',
+        'long' => 'facebook',
+        'link' => Output::getClean($social_media),
+        'text' => 'Facebook'
+    ];
 }
 
 // Twitter
 $social_media = $cache->retrieve('twitter');
-if($social_media){
-	$social_media_icons[] = array(
-		'short' => 'tw',
-		'long' => 'twitter',
-		'link' => Output::getClean($social_media),
-		'text' => 'Twitter'
-	);
+
+if ($social_media){
+    $social_media_icons[] = [
+        'short' => 'tw',
+        'long' => 'twitter',
+        'link' => Output::getClean($social_media),
+        'text' => 'Twitter'
+    ];
 }
 
 // Youtube
 $social_media = $cache->retrieve('youtube');
-if($social_media){
-	$social_media_icons[] = array(
-		'short' => 'gp',
-		'long' => 'youtube',
-		'link' => Output::getClean($social_media),
-		'text' => 'YouTube'
-	);
+
+if ($social_media){
+    $social_media_icons[] = [
+        'short' => 'gp',
+        'long' => 'youtube',
+        'link' => Output::getClean($social_media),
+        'text' => 'YouTube'
+    ];
 }
 
 // Always add contact link
-$social_media_icons[] = array(
-	'short' => 'em',
-	'long' => 'envelope',
-	'link' => URL::build('/contact'),
-	'text' => $language->get('general', 'contact')
-);
+$social_media_icons[] = [
+    'short' => 'em',
+    'long' => 'envelope',
+    'link' => URL::build('/contact'),
+    'text' => $language->get('general', 'contact')
+];
 
 // Smarty template
 // Assign to Smarty variables
-$smarty->assign(array(
-	'SOCIAL_MEDIA_ICONS' => $social_media_icons, 
-	'PAGE_LOAD_TIME' => ((isset($page_loading) && $page_loading == '1') ? true : false),
-	'FOOTER_NAVIGATION' => $navigation->returnNav('footer')
-));
+$smarty->assign([
+    'SOCIAL_MEDIA_ICONS' => $social_media_icons,
+    'PAGE_LOAD_TIME' => ((isset($page_loading) && $page_loading == '1') ? true : false),
+    'FOOTER_NAVIGATION' => $navigation->returnNav('footer')
+]);
 
 // Terms
 $smarty->assign('TERMS_LINK', URL::build('/terms'));
@@ -70,4 +73,4 @@ $smarty->assign('TERMS_TEXT', $language->get('user', 'terms_and_conditions'));
 
 // Privacy
 $smarty->assign('PRIVACY_LINK', URL::build('/privacy'));
-$smarty->assign('PRIVACY_TEXT', $language->get('general', 'privacy_policy'));
\ No newline at end of file
+$smarty->assign('PRIVACY_TEXT', $language->get('general', 'privacy_policy'));
diff --git a/core/templates/frontend_init.php b/core/templates/frontend_init.php
index 53a79c2db697f122259b230156d882d48649e6eb..4e4eb9773a37b4a7b2013dc5d00673a5337957c6 100644
--- a/core/templates/frontend_init.php
+++ b/core/templates/frontend_init.php
@@ -12,91 +12,91 @@
 define('FRONT_END', true);
 
 // Set current page URL in session, provided it's not the login page
-if(defined('PAGE') && PAGE != 'login' && PAGE != 'register' && PAGE != 404 && PAGE != 'maintenance' && (!isset($_GET['route']) || strpos($_GET['route'], '/queries') === false)){
-	if(FRIENDLY_URLS === true){
-		$split = explode('?', $_SERVER['REQUEST_URI']);
+if (defined('PAGE') && PAGE != 'login' && PAGE != 'register' && PAGE != 404 && PAGE != 'maintenance' && (! isset($_GET['route']) || strpos($_GET['route'], '/queries') === false)){
+    if (FRIENDLY_URLS === true){
+        $split = explode('?', $_SERVER['REQUEST_URI']);
 
-		if(count($split) > 1)
-			$_SESSION['last_page'] = URL::build($split[0], $split[1]);
-		else
-			$_SESSION['last_page'] = URL::build($split[0]);
-
-		if(defined('CONFIG_PATH'))
-			$_SESSION['last_page'] = substr($_SESSION['last_page'], strlen(CONFIG_PATH));
-
-	} else
-		$_SESSION['last_page'] = URL::build($_GET['route']);
+        if (count($split) > 1)
+            $_SESSION['last_page'] = URL::build($split[0], $split[1]);
+        else $_SESSION['last_page'] = URL::build($split[0]);
 
+        if (defined('CONFIG_PATH'))
+            $_SESSION['last_page'] = substr($_SESSION['last_page'], strlen(CONFIG_PATH));
+    } else $_SESSION['last_page'] = URL::build($_GET['route']);
 }
 
 $template_path = ROOT_PATH . '/custom/templates/' . TEMPLATE;
 $smarty->setTemplateDir($template_path);
 $smarty->setCompileDir(ROOT_PATH . '/cache/templates_c');
 
-if(file_exists(ROOT_PATH . '/custom/templates/' . TEMPLATE . '/template.php'))
-	require(ROOT_PATH . '/custom/templates/' . TEMPLATE . '/template.php');
-else
-	require(ROOT_PATH . '/custom/templates/DefaultRevamp/template.php');
+if (file_exists(ROOT_PATH . '/custom/templates/' . TEMPLATE . '/template.php'))
+    require (ROOT_PATH . '/custom/templates/' . TEMPLATE . '/template.php');
+else require (ROOT_PATH . '/custom/templates/DefaultRevamp/template.php');
 
 // User related actions
-if($user->isLoggedIn()){
-	// Warnings
-	$warnings = $queries->getWhere('infractions', array('punished', '=', $user->data()->id));
-	if(count($warnings)){
-		foreach($warnings as $warning){
-			if($warning->revoked == 0 && $warning->acknowledged == 0){
-				$smarty->assign(array(
-					'GLOBAL_WARNING_TITLE' => $language->get('user', 'you_have_received_a_warning'),
-					'GLOBAL_WARNING_REASON' => Output::getClean($warning->reason),
-					'GLOBAL_WARNING_ACKNOWLEDGE' => $language->get('user', 'acknowledge'),
-					'GLOBAL_WARNING_ACKNOWLEDGE_LINK' => URL::build('/user/acknowledge/' . $warning->id)
-				));
-				break;
-			}
-		}
-	}
-
-	// Does the account need verifying?
-	// Get default group ID
-	$cache->setCache('default_group');
-	if($cache->isCached('default_group')) {
-		$default_group = $cache->retrieve('default_group');
-	} else {
-		try {
-			$default_group = $queries->getWhere('groups', array('default_group', '=', 1));
-			$default_group = $default_group[0]->id;
-		} catch(Exception $e){
-			$default_group = 1;
-		}
-
-		$cache->store('default_group', $default_group);
-	}
-	if(in_array($default_group, $user->getAllGroupIds()) && ($user->data()->reset_code)) {
-		// User needs to validate account
-		$smarty->assign('MUST_VALIDATE_ACCOUNT', str_replace('{x}', Output::getClean($user->data()->reset_code), $language->get('user', 'validate_account_command')));
-	}
+if ($user->isLoggedIn()){
+    // Warnings
+    $warnings = $queries->getWhere('infractions', ['punished', '=', $user->data()->id]);
+
+    if (count($warnings)){
+        foreach ($warnings as $warning){
+            if ($warning->revoked == 0 && $warning->acknowledged == 0){
+                $smarty->assign([
+                    'GLOBAL_WARNING_TITLE' => $language->get('user', 'you_have_received_a_warning'),
+                    'GLOBAL_WARNING_REASON' => Output::getClean($warning->reason),
+                    'GLOBAL_WARNING_ACKNOWLEDGE' => $language->get('user', 'acknowledge'),
+                    'GLOBAL_WARNING_ACKNOWLEDGE_LINK' => URL::build('/user/acknowledge/' . $warning->id)
+                ]);
+
+                break;
+            }
+        }
+    }
+
+    // Does the account need verifying?
+    // Get default group ID
+    $cache->setCache('default_group');
+
+    if ($cache->isCached('default_group')) {
+        $default_group = $cache->retrieve('default_group');
+    } else {
+        try {
+            $default_group = $queries->getWhere('groups', ['default_group', '=', 1]);
+            $default_group = $default_group[0]->id;
+        } catch (Exception $e){
+            $default_group = 1;
+        }
+
+        $cache->store('default_group', $default_group);
+    }
+
+    if (in_array($default_group, $user->getAllGroupIds()) && ($user->data()->reset_code)) {
+        // User needs to validate account
+        $smarty->assign('MUST_VALIDATE_ACCOUNT', str_replace('{x}', Output::getClean($user->data()->reset_code), $language->get('user', 'validate_account_command')));
+    }
 }
 
 // Page metadata
-if(isset($_GET['route']) && $_GET['route'] != '/'){
-	$route = rtrim($_GET['route'], '/');
+if (isset($_GET['route']) && $_GET['route'] != '/'){
+    $route = rtrim($_GET['route'], '/');
 } else {
-	$route = '/';
+    $route = '/';
 }
 
-if(!defined('PAGE_DESCRIPTION')){
-	$page_metadata = $queries->getWhere('page_descriptions', array('page', '=', $route));
-	if(count($page_metadata)){
-		$smarty->assign(array(
-			'PAGE_DESCRIPTION' => str_replace('{site}', SITE_NAME, $page_metadata[0]->description),
-			'PAGE_KEYWORDS' => $page_metadata[0]->tags
-		));
-	}
+if (! defined('PAGE_DESCRIPTION')){
+    $page_metadata = $queries->getWhere('page_descriptions', ['page', '=', $route]);
+
+    if (count($page_metadata)){
+        $smarty->assign([
+            'PAGE_DESCRIPTION' => str_replace('{site}', SITE_NAME, $page_metadata[0]->description),
+            'PAGE_KEYWORDS' => $page_metadata[0]->tags
+        ]);
+    }
 } else {
-	$smarty->assign(array(
-		'PAGE_DESCRIPTION' => str_replace('{site}', SITE_NAME, PAGE_DESCRIPTION),
-		'PAGE_KEYWORDS' => (defined('PAGE_KEYWORDS') ? PAGE_KEYWORDS : '')
-	));
+    $smarty->assign([
+        'PAGE_DESCRIPTION' => str_replace('{site}', SITE_NAME, PAGE_DESCRIPTION),
+        'PAGE_KEYWORDS' => (defined('PAGE_KEYWORDS') ? PAGE_KEYWORDS : '')
+    ]);
 }
 
 $smarty->assign('TITLE', $page_title);
@@ -105,8 +105,8 @@ $smarty->assign('TITLE', $page_title);
 $cache->setCache('backgroundcache');
 $background_image = $cache->retrieve('background_image');
 
-if(!empty($background_image)){
-	$template->addCSSStyle('
+if (! empty($background_image)){
+    $template->addCSSStyle('
 			body {
 				background-image: url(\'' . Output::getClean($background_image) . '\');
 				background-repeat: no-repeat;
@@ -118,19 +118,20 @@ if(!empty($background_image)){
 
 $banner_image = $cache->retrieve('banner_image');
 
-if(!empty($banner_image))
-	$smarty->assign('BANNER_IMAGE', Output::getClean($banner_image));
+if (! empty($banner_image))
+    $smarty->assign('BANNER_IMAGE', Output::getClean($banner_image));
 
 $logo_image = $cache->retrieve('logo_image');
 
-if(!empty($logo_image))
+if (! empty($logo_image))
     $smarty->assign('LOGO_IMAGE', Output::getClean($logo_image));
 
 $favicon_image = $cache->retrieve('favicon_image');
 
-if(!empty($favicon_image))
+if (! empty($favicon_image))
     $smarty->assign('FAVICON', Output::getClean($favicon_image));
 
 $analytics_id = $configuration->get('Core', 'ga_script');
-if($analytics_id != null && !empty($analytics_id))
+
+if ($analytics_id != null && ! empty($analytics_id))
     $smarty->assign('ANALYTICS_ID', $analytics_id);
diff --git a/core/templates/navbar.php b/core/templates/navbar.php
index 35531036bfc4bd9d6ba42bbc6a32e8e92a7674f1..edac9174826eb7721da6149022475c667a348101 100644
--- a/core/templates/navbar.php
+++ b/core/templates/navbar.php
@@ -10,184 +10,181 @@
  */
 
 // User area - DEPRECATED, will be removed at some point
-$user_area = array();
-$user_area_left = array();
+$user_area = [];
+$user_area_left = [];
 
 if ($user->isLoggedIn()) {
-    /*
-	 *  Start deprecated variable generation
-	 */
-    $user_area['usercp'] = array(
+    // Start deprecated variable generation
+    $user_area['usercp'] = [
         'target' => '',
         'link' => URL::build('/user'),
         'title' => $language->get('user', 'user_cp_icon')
-    );
+    ];
+
     if (defined('PAGE') && PAGE == 'usercp') {
         $user_area['usercp']['active'] = true;
     }
 
-    $user_area_left['account'] = array(
+    $user_area_left['account'] = [
         'target' => '',
         'link' => '',
         'title' => $user->getDisplayname(),
-        'items' => array(
-            'profile' => array(
+        'items' => [
+            'profile' => [
                 'link' => $user->getProfileURL(),
                 'target' => '',
                 'title' => $language->get('user', 'profile')
-            ),
-            'separator1' => array(
+            ],
+            'separator1' => [
                 'separator' => true
-            ),
-            'user' => array(
+            ],
+            'user' => [
                 'link' => URL::build('/user'),
                 'target' => '',
                 'title' => $language->get('user', 'user_cp')
-            )
-        )
-    );
+            ]
+        ]
+    ];
 
     if ($user->canViewACP()) {
-        $user_area_left['account']['items']['panel'] = array(
+        $user_area_left['account']['items']['panel'] = [
             'link' => URL::build('/panel'),
             'target' => '',
             'title' => $language->get('moderator', 'staff_cp')
-        );
+        ];
     }
 
-    $user_area_left['account']['items']['separator2'] = array(
+    $user_area_left['account']['items']['separator2'] = [
         'separator' => true
-    );
+    ];
 
-    $user_area_left['account']['items']['logout'] = array(
+    $user_area_left['account']['items']['logout'] = [
         'link' => URL::build('/logout'),
         'target' => '',
         'title' => $language->get('general', 'log_out')
-    );
+    ];
 
-    /*
-	 *  End deprecated variable generation
-	 */
+    // End deprecated variable generation
 
-    $user_section = array(
-        'pms' => array(
+    $user_section = [
+        'pms' => [
             'title' => $language->get('user', 'messages'),
             'icon' => '<i class="fas fa-envelope icon"></i>',
-            'link' =>  URL::build('/user/messaging'),
+            'link' => URL::build('/user/messaging'),
             'meta' => $language->get('user', 'view_messages'),
             'target' => '',
-            'items' => array(
-                'loading' => array(
+            'items' => [
+                'loading' => [
                     'title' => $language->get('general', 'loading'),
                     'link' => '',
                     'target' => '',
-                ),
-            ),
-        ),
-        'alerts' => array(
+                ],
+            ],
+        ],
+        'alerts' => [
             'title' => $language->get('user', 'alerts'),
             'icon' => '<i class="fas fa-flag icon"></i>',
-            'link' =>  URL::build('/user/alerts'),
+            'link' => URL::build('/user/alerts'),
             'meta' => $language->get('user', 'view_alerts'),
             'target' => '',
-            'items' => array(
-                'loading' => array(
+            'items' => [
+                'loading' => [
                     'title' => $language->get('general', 'loading'),
                     'link' => '',
                     'target' => '',
-                ),
-            ),
-        ),
-    );
+                ],
+            ],
+        ],
+    ];
 
     if ($user->canViewACP()) {
-        $user_section['panel'] = array(
+        $user_section['panel'] = [
             'title' => $language->get('moderator', 'staff_cp'),
             'icon' => '<i class="fas fa-cogs icon"></i>',
             'link' => URL::build('/panel'),
             'meta' => '',
             'target' => '',
-        );
+        ];
     }
 
-    $user_section['account'] = array(
+    $user_section['account'] = [
         'title' => $user->getDisplayname(),
         'icon' => '<img src="' . $user->getAvatar() . '">',
         'link' => '',
         'meta' => '',
         'target' => '',
-        'items' => array(
-            'profile' => array(
+        'items' => [
+            'profile' => [
                 'title' => $language->get('user', 'profile'),
                 'link' => $user->getProfileURL(),
                 'target' => '',
-            ),
-            'user' => array(
+            ],
+            'user' => [
                 'title' => $language->get('user', 'user_cp'),
                 'link' => URL::build('/user'),
                 'target' => '',
-            ),
-            'separator_1' => array(
+            ],
+            'separator_1' => [
                 'separator' => true
-            ),
-            'logout' => array(
+            ],
+            'logout' => [
                 'title' => $language->get('general', 'log_out'),
                 'link' => URL::build('/logout'),
                 'target' => '',
-            ),
-        ),
-    );
+            ],
+        ],
+    ];
 } else {
-    $user_area_left['account'] = array(
+    $user_area_left['account'] = [
         'target' => '',
         'link' => '',
         'title' => $language->get('user', 'guest'),
-        'items' => array(
-            'login' => array(
+        'items' => [
+            'login' => [
                 'link' => URL::build('/login'),
                 'target' => '',
                 'title' => $language->get('general', 'sign_in')
-            ),
-            'register' => array(
+            ],
+            'register' => [
                 'link' => URL::build('/register'),
                 'target' => '',
                 'title' => $language->get('general', 'register')
-            )
-        )
-    );
+            ]
+        ]
+    ];
 
-    $user_section = array(
-        'login' => array(
+    $user_section = [
+        'login' => [
             'title' => $language->get('general', 'sign_in'),
             'icon' => '<i class="fas fa-key icon"></i>',
             'link' => URL::build('/login'),
             'meta' => '',
             'target' => '',
-        ),
-        'register' => array(
+        ],
+        'register' => [
             'title' => $language->get('general', 'register'),
             'icon' => '<i class="fas fa-clipboard icon"></i>',
             'link' => URL::build('/register'),
             'meta' => '',
             'target' => '',
-        )
-    );
+        ]
+    ];
 }
 
 // Assign to Smarty variables
-$smarty->assign(array(
+$smarty->assign([
     'NAVBAR_INVERSE' => '',
     'SITE_NAME' => SITE_NAME,
     'NAV_LINKS' => $navigation->returnNav('top'),
     'USER_AREA' => $user_area,
     'USER_DROPDOWN' => $user_area_left,
     'USER_SECTION' => $user_section,
-    'ANNOUNCEMENTS' => Announcements::getAvailable(PAGE, defined('CUSTOM_PAGE') ? CUSTOM_PAGE : null, !$user->isLoggedIn() ? array(0) : $user->getAllGroupIds())
-));
+    'ANNOUNCEMENTS' => Announcements::getAvailable(PAGE, defined('CUSTOM_PAGE') ? CUSTOM_PAGE : null, ! $user->isLoggedIn() ? [0] : $user->getAllGroupIds())
+]);
 
 if ($user->isLoggedIn()) {
     // Get unread alerts and messages
-    $smarty->assign(array(
+    $smarty->assign([
         'ALERTS_LINK' => URL::build('/user/alerts'),
         'VIEW_ALERTS' => $language->get('user', 'view_alerts'),
         'MESSAGING_LINK' => URL::build('/user/messaging'),
@@ -195,5 +192,5 @@ if ($user->isLoggedIn()) {
         'LOADING' => $language->get('general', 'loading'),
         'MESSAGING' => $language->get('user', 'messaging'),
         'ALERTS' => $language->get('user', 'alerts'),
-    ));
-}
\ No newline at end of file
+    ]);
+}
diff --git a/core/templates/panel_navbar.php b/core/templates/panel_navbar.php
index 089050a00596614e4f9ced85383eb11601aacde7..fbf76f43981c943e6857040f639c4aa985407ea6 100644
--- a/core/templates/panel_navbar.php
+++ b/core/templates/panel_navbar.php
@@ -10,15 +10,15 @@
  */
 
 // Assign to Smarty variables
-$smarty->assign(array(
-	'SITE_NAME' => SITE_NAME,
-	'PANEL_INDEX' => URL::build('/panel'),
-	'NAV_LINKS' => $mod_nav->returnNav('top'),
-	'VIEW_SITE' => $language->get('admin', 'view_site'),
-	'PAGE_LOAD_TIME' => PAGE_LOAD_TIME,
-	'SUPPORT' => $language->get('admin', 'support'),
-	'SOURCE' => $language->get('admin', 'source'),
-	'NOTICES' => Core_Module::getNotices(),
+$smarty->assign([
+    'SITE_NAME' => SITE_NAME,
+    'PANEL_INDEX' => URL::build('/panel'),
+    'NAV_LINKS' => $mod_nav->returnNav('top'),
+    'VIEW_SITE' => $language->get('admin', 'view_site'),
+    'PAGE_LOAD_TIME' => PAGE_LOAD_TIME,
+    'SUPPORT' => $language->get('admin', 'support'),
+    'SOURCE' => $language->get('admin', 'source'),
+    'NOTICES' => Core_Module::getNotices(),
     'NO_NOTICES' => $language->get('admin', 'no_notices'),
     'MODE_TOGGLE' => $language->get('admin', 'mode_toggle')
-));
\ No newline at end of file
+]);
diff --git a/custom/languages/Chinese(Simplified)/admin.php b/custom/languages/Chinese(Simplified)/admin.php
index 2c6f68164b3a6416edd72ed77bc01511ee1753ed..d47991bb8ad224e020aebbfd848b5ba925e46747 100644
--- a/custom/languages/Chinese(Simplified)/admin.php
+++ b/custom/languages/Chinese(Simplified)/admin.php
@@ -11,10 +11,8 @@
  *  Translation progress(v2-pr8) : 100%
  */
 
-$language = array(
-    /*
-     *  Admin Control Panel
-     */
+$language = [
+    // Admin Control Panel
     // Login
     're-authenticate' => '请重新验证您的账户所有权',
 
@@ -750,5 +748,4 @@ $language = array(
     'discord_bot_error_unauthorized' => 'Website API key is invalid',
     'discord_bot_error_invrole' => 'Provided Role ID is invalid.',
     'discord_bot_error_hierarchy' => 'The bot cannot edit this user\'s roles.'
-
-);
+];
diff --git a/custom/languages/Chinese(Simplified)/api.php b/custom/languages/Chinese(Simplified)/api.php
index a0d86db412de91b663727186e8488ba239d4302b..6549084bb9f27a631af089790beb9f1df1e0e0c0 100644
--- a/custom/languages/Chinese(Simplified)/api.php
+++ b/custom/languages/Chinese(Simplified)/api.php
@@ -11,8 +11,7 @@
  *  Translation progress(v2-pr8) : 100%
  */
 
-$language = array(
-
+$language = [
     // Errors
     'api_disabled' => 'API is disabled',
     'unknown_error' => '未知错误',
@@ -65,4 +64,4 @@ $language = array(
     'discord_id_set' => 'Discord ID 更新成功',
     'discord_settings_updated' => 'Discord settings updated successfully',
     'discord_usernames_updated' => 'Discord usernames updated successfully'
-);
+];
diff --git a/custom/languages/Chinese(Simplified)/emails.php b/custom/languages/Chinese(Simplified)/emails.php
index f037cfb33e4694457d372858c3e86568b63cf29e..92fd5fd1d78c2ca4112ed7ecb332004c061ea98d 100644
--- a/custom/languages/Chinese(Simplified)/emails.php
+++ b/custom/languages/Chinese(Simplified)/emails.php
@@ -9,8 +9,7 @@
  *  Chinese (Simplified) Language - Emails
  */
 
-$language = array(
-
+$language = [
     // General Options
     'greeting' => '您好,',
     'thanks' => '致以敬意,',
@@ -26,4 +25,4 @@ $language = array(
     // Forum Topic Replies
     'forum_topic_reply_subject' => '{x} 回复了 {y}', // Don't remove {x} or {y}
     'forum_topic_reply_message' => '{x} 回复了你关注的帖子。 内容: {z}' // Don't remove {x} or {z}
-);
+];
diff --git a/custom/languages/Chinese(Simplified)/errors.php b/custom/languages/Chinese(Simplified)/errors.php
index 1dce0905f0fa275fadef7b1545168f6849c72f02..5cddc97f900bda748d6737fbb1b973905ae5273d 100644
--- a/custom/languages/Chinese(Simplified)/errors.php
+++ b/custom/languages/Chinese(Simplified)/errors.php
@@ -11,10 +11,8 @@
  *  Translation progress(v2-pr8) : 100%
  */
 
-$language = array(
-    /*
-     *  Errors
-     */
+$language = [
+    // Errors
     '404_title' => '非常抱歉!',
     '404_content' => '您找的页面并不存在喔。',
     '404_back' => '返回',
@@ -33,4 +31,4 @@ $language = array(
     'fatal_error_message_admin' => '抱歉，加载页面时出了点问题。错误详情:',
     'in_file' => '在文件 <strong>{x}</strong> 的', // Don't replace {x}
     'on_line' => '第 <strong>{x}</strong> 行' // Don't replace {x}
-);
+];
diff --git a/custom/languages/Chinese(Simplified)/general.php b/custom/languages/Chinese(Simplified)/general.php
index 29e77e0bb6aabae97889fdc88c43ba70d2f0f541..84974f04ef4e9acfda2f4ad9e7ee5dfc8febbda8 100644
--- a/custom/languages/Chinese(Simplified)/general.php
+++ b/custom/languages/Chinese(Simplified)/general.php
@@ -11,10 +11,8 @@
  *  Translation progress(v2-pr8) : 100%
  */
 
-$language = array(
-    /*
-     *  General terms
-     */
+$language = [
+    // General terms
     'help' => '帮助',
     'submit' => '提交',
     'register' => '注册',
@@ -72,9 +70,7 @@ $language = array(
     'link' => 'Link',
     'unlink' => 'Unlink',
     
-    /*
-     *  Contact form
-     */
+    // Contact form
     'contact' => '联系我们',
     'message' => '消息',
     'email_address' => '请输入您的电子邮箱地址',
@@ -84,28 +80,18 @@ $language = array(
     'contact_message_sent' => '消息发送成功。',
     'contact_message_limit' => '您每小时只能发送一条消息。距您可再次发送还有 {x} 分钟。', // Don't replace {x}
 
-
-    /*
-     *  Navbar
-     */
+    // Navbar
     'home' => '主页',
     'more' => '更多',
     'status' => '服务器状态',
 
-    /*
-     *  Homepage
-     */
+    // Homepage
     'social' => '社区',
 
-
-    /*
-     *  Help dialogues
-     */
+    // Help dialogues
     'markdown_help' => '您可以使用 Markdown 设置帖子的格式。有关更多信息，请参见 <a href=\'https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet\' target=\'_blank\'>这里</a>.',
 
-    /*
-     *  Server query
-     */
+    // Server query
     'online' => '在线',
     'offline' => '离线',
     'player_count' => '{x}/{y}', // Don't replace {x} or {y}
@@ -123,15 +109,11 @@ $language = array(
     'no_players_online' => '目前没有任何玩家在线',
     'and_x_more' => '还有 {x} 更多', // Don't replace {x}
 
-    /*
-     *  Cookie notice
-     */
+    // Cookie notice
     'cookie_notice' => '本网站使用 Cookie 来增强您的浏览体验。通过在我们的网站上进行注册或关闭此通知，代表您同意它们的使用。',
     'cookie_agree' => '同意',
 
-    /*
-     *  Widgets
-     */
+    // Widgets
     'statistics' => '统计',
     'users_registered' => '已注册用户数',
     'latest_member' => '最近的成员',
@@ -150,13 +132,9 @@ $language = array(
     'no_default_server' => '未设置默认服务器，请前往管理面板 - 集成 - Minecraft 来设置',
     'server_status' => '服务器状态',
 
-    /*
-     *  Privacy policy
-     */
+    // Privacy policy
     'privacy_policy' => '隐私政策',
 
-    /*
-     *  Custom page redirect
-     */
+    // Custom page redirect
     'redirecting_message' => '重定向中...<br />如果您的页面没有自动跳转，请点击 <a href="{x}" rel="nofollow noopener">这里</a>.' // Don't replace {x} which is the redirect URL
-);
+];
diff --git a/custom/languages/Chinese(Simplified)/installer.php b/custom/languages/Chinese(Simplified)/installer.php
index c77c04a77c0f3c337e5df9ca8a3e66f24818fef6..5a24dc31723f5711e327662f33f3c2d146967fa8 100644
--- a/custom/languages/Chinese(Simplified)/installer.php
+++ b/custom/languages/Chinese(Simplified)/installer.php
@@ -11,10 +11,8 @@
  *  Translation progress(v2-pr8) : 100%
  */
 
-$language = array(
-    /*
-     *  Installation
-     */
+$language = [
+    // Installation
     'install' => '安装',
     'pre-release' => '预览版本',
     'installer_welcome' => '欢迎使用 NamelessMC 版本 2.0 预览版。',
@@ -105,4 +103,4 @@ $language = array(
     'config_not_writable' => '配置文件无法写入',
 
     'session_doesnt_exist' => '无法检测会话。若想使用 Nameless，您必须启用会话。请您再试一次，若此问题始终存在，请咨询您的网页提供商。'
-);
+];
diff --git a/custom/languages/Chinese(Simplified)/log.php b/custom/languages/Chinese(Simplified)/log.php
index 5ab53c40d6a530db34ed305094f137f03c98823d..e38e3aedf83f5ce320dd06b1c2e4fe33f5ef9e5e 100644
--- a/custom/languages/Chinese(Simplified)/log.php
+++ b/custom/languages/Chinese(Simplified)/log.php
@@ -1,6 +1,7 @@
 <?php
-$language = array(
+
+$language = [
     //forums
     'info_forums_lock' => 'Locked',
     'info_forums_unlock' => 'Unlocked',
-);
\ No newline at end of file
+];
diff --git a/custom/languages/Chinese(Simplified)/moderator.php b/custom/languages/Chinese(Simplified)/moderator.php
index f65a4fd3db35a2915da545aaa96cfdc69f770092..36944220fe2365a891569aaf566fb88e19fea48b 100644
--- a/custom/languages/Chinese(Simplified)/moderator.php
+++ b/custom/languages/Chinese(Simplified)/moderator.php
@@ -11,7 +11,7 @@
  *  Translation progress(v2-pr8) : 100%
  */
 
-$language = array(
+$language = [
     'mod_cp' => '社区工作人员面板',
     'staff_cp' => '管理人员面板',
     'overview' => '总览',
@@ -106,5 +106,4 @@ $language = array(
     // Users
     'recent_registrations' => '最近的注册',
     'reset_profile_banner' => '重置个人资料背景'
-
-);
+];
diff --git a/custom/languages/Chinese(Simplified)/table.php b/custom/languages/Chinese(Simplified)/table.php
index 436ce7129d470d2a22f5ab6327051bc70b31f4c0..344fccd26507df4955e8ab3dcee712d8ac94fce2 100644
--- a/custom/languages/Chinese(Simplified)/table.php
+++ b/custom/languages/Chinese(Simplified)/table.php
@@ -11,13 +11,11 @@
  *  Translation progress(v2-pr8) : 100%
  */
 
-$language = array(
-    /*
-     *  Tables
-     */
+$language = [
+    // Tables
     'display_records_per_page' => '每页显示 _MENU_ 条记录', // Don't replace "_MENU_"
     'nothing_found' => '没有相匹的结果',
     'page_x_of_y' => '显示页 _PAGE_ / _PAGES_', // Don't replace "_PAGE_" or "_PAGES_"
     'no_records' => '无可用记录',
     'filtered' => '(从 _MAX_ 个总记录中过滤)' // Don't replace "_MAX_"
-);
+];
diff --git a/custom/languages/Chinese(Simplified)/time.php b/custom/languages/Chinese(Simplified)/time.php
index c79be57409360c640f17f80e260e5957b33ee033..56b65113c8730b3e22d004315a8783c26d0986e7 100644
--- a/custom/languages/Chinese(Simplified)/time.php
+++ b/custom/languages/Chinese(Simplified)/time.php
@@ -11,10 +11,8 @@
  *  Translation progress(v2-pr8) : 100%
  */
 
-$language = array(
-    /*
-     *  Time
-     */
+$language = [
+    // Time
     'time' => 'time', // Placeholder, 无需翻译
     'seconds_short' => '秒', // 单词 "seconds" 的缩写, 就像 "s"
     'less_than_a_minute' => '1 分钟内',
@@ -28,4 +26,4 @@ $language = array(
     '_months' => '{x} 月前',
     'about_1_year' => '大约 1 年前',
     'over_x_years' => '{x} 年之外'
-);
+];
diff --git a/custom/languages/Chinese(Simplified)/user.php b/custom/languages/Chinese(Simplified)/user.php
index 9abfa225234e897bcac9c4cef2f0420d5c874da2..cda128ab4cab692a17caddc040466c2502ce5002 100644
--- a/custom/languages/Chinese(Simplified)/user.php
+++ b/custom/languages/Chinese(Simplified)/user.php
@@ -11,15 +11,11 @@
  *  Translation progress(v2-pr8) : 100%
  */
 
-$language = array(
-    /*
-     *  Change this for the account validation message
-     */
+$language = [
+    // Change this for the account validation message
     'validate_account_command' => '要完成注册，请在游戏中执行命令<strong> / validate {x} </ strong>。', // Don't replace {x}
 
-    /*
-     *  User Related
-     */
+    // User Related
     'guest' => '访客',
     'guests' => '访客',
 
@@ -226,16 +222,12 @@ $language = array(
     'latest_profile_posts' => '最近的留言',
     'no_profile_posts' => '目前没有人给您留言喔。',
 
-    /*
-     *  Infractions area
-     */
+    // Infractions area
     'you_have_been_banned' => '你已被封禁!',
     'you_have_received_a_warning' => '你收到了一条警告!',
     'acknowledge' => '承认错误',
 
-    /*
-     *  Hooks
-     */
+    // Hooks
     'user_x_has_registered' => '{x} 加入了 ' . SITE_NAME . '!',
     'user_x_has_validated' => '{x} has validated their account!',
 
@@ -254,4 +246,4 @@ $language = array(
     'discord_communication_error' => '无法与 Discord 机器人交流。请您确保机器人正在运行并且您的机器人链接是正确的。',
     'discord_unknown_error' => '在同步 Discord 身份组时出现了错误。请联系管理员。',
     'discord_id_help' => '您可阅读 <a href="https://support.discord.com/hc/en-us/articles/206346498-Where-can-I-find-my-User-Server-Message-ID-" target="_blank">此文章</a> 来了解如何获得您的用户 ID。'
-);
+];
diff --git a/custom/languages/Chinese/admin.php b/custom/languages/Chinese/admin.php
index 7b3db9716a0fdb584714f57fac19579505bfa69d..bcc135631d2392ed24462658909489184d0271e5 100644
--- a/custom/languages/Chinese/admin.php
+++ b/custom/languages/Chinese/admin.php
@@ -13,10 +13,8 @@
  *  https://github.com/haer0248/NamelessMC-v2-Traditional-Chinese/issues
  */
 
-$language = array(
-    /*
-     *  Admin Control Panel
-     */
+$language = [
+    // Admin Control Panel
     // Login
     're-authenticate' => '請重新驗證',
 
@@ -750,5 +748,4 @@ $language = array(
     'discord_bot_error_unauthorized' => 'Website API key is invalid',
     'discord_bot_error_invrole' => 'Provided Role ID is invalid.',
     'discord_bot_error_hierarchy' => 'The bot cannot edit this user\'s roles.'
-
-);
+];
diff --git a/custom/languages/Chinese/api.php b/custom/languages/Chinese/api.php
index 382fca3ba151f1f90e91744ee299cf34ca65a866..ada2b2a9cad21a55b638b6997852d5880534d48d 100644
--- a/custom/languages/Chinese/api.php
+++ b/custom/languages/Chinese/api.php
@@ -9,8 +9,7 @@
  *  Chinese Language - API
  */
 
-$language = array(
-
+$language = [
     // Errors
     'api_disabled' => 'API is disabled',
     'unknown_error' => 'Unknown error',
@@ -63,4 +62,4 @@ $language = array(
     'discord_id_set' => 'Discord ID set successfully',
     'discord_settings_updated' => 'Discord settings updated successfully',
     'discord_usernames_updated' => 'Discord usernames updated successfully'
-);
+];
diff --git a/custom/languages/Chinese/emails.php b/custom/languages/Chinese/emails.php
index a76045f22a400c43b6deb0d956559f89aeceb600..97b0ed554b8fc5e4517dd99f84b64eadd2465f99 100644
--- a/custom/languages/Chinese/emails.php
+++ b/custom/languages/Chinese/emails.php
@@ -9,8 +9,7 @@
  *  Chinese Language - Emails
  */
 
-$language = array(
-
+$language = [
     // General Options
     'greeting' => '嗨,',
     'thanks' => '謝謝,',
@@ -26,4 +25,4 @@ $language = array(
     // Forum Topic Replies
     'forum_topic_reply_subject' => '{x} has replied to {y}', // Don't remove {x} or {y}
     'forum_topic_reply_message' => '{x} has replied to a topic you follow. Content: {z}' // Don't remove {x} or {z}
-);
+];
diff --git a/custom/languages/Chinese/errors.php b/custom/languages/Chinese/errors.php
index ea69f701b81df09fb0f2a337e34a63a19532b3f1..596596970a88d375a393886257d8b7ba365bb734 100644
--- a/custom/languages/Chinese/errors.php
+++ b/custom/languages/Chinese/errors.php
@@ -13,10 +13,8 @@
  *  https://github.com/haer0248/NamelessMC-v2-Traditional-Chinese/issues
  */
 
-$language = array(
-    /*
-     *  Errors
-     */
+$language = [
+    // Errors
     '404_title' => '抱歉!',
     '404_content' => '我們無法找到此網頁.',
     '404_back' => '返回',
@@ -35,4 +33,4 @@ $language = array(
     'fatal_error_message_admin' => 'Sorry, but something went wrong while loading the page. Error details:',
     'in_file' => 'in file <strong>{x}</strong>', // Don't replace {x}
     'on_line' => 'on line <strong>{x}</strong>' // Don't replace {x}
-);
+];
diff --git a/custom/languages/Chinese/general.php b/custom/languages/Chinese/general.php
index f35f30d7225d1dfb91b7cd0901c9b05395408154..9b057f7afccdf026a649af7a669b0d08b7d10902 100644
--- a/custom/languages/Chinese/general.php
+++ b/custom/languages/Chinese/general.php
@@ -13,10 +13,8 @@
  *  https://github.com/haer0248/NamelessMC-v2-Traditional-Chinese/issues
  */
 
-$language = array(
-    /*
-     *  General terms
-     */
+$language = [
+    // General terms
     'help' => 'Help',
     'submit' => '送出',
     'register' => '註冊',
@@ -74,9 +72,7 @@ $language = array(
     'link' => 'Link',
     'unlink' => 'Unlink',
     
-    /*
-     *  Contact form
-     */
+    // Contact form
     'contact' => '聯絡',
     'message' => '訊息',
     'email_address' => '電子郵件位置',
@@ -86,26 +82,18 @@ $language = array(
     'contact_message_email' => 'The provided email is invalid.',
     'contact_message_limit' => '你一小時可以提交一次. 請在 {x} 分鐘後重試.', // Don't replace {x}
 
-    /*
-     *  Navbar
-     */
+    // Navbar
     'home' => '首頁',
     'more' => '更多',
     'status' => 'Status',
 
-    /*
-     *  Homepage
-     */
+    // Homepage
     'social' => '社交',
 
-    /*
-     *  Help dialogues
-     */
+    // Help dialogues
     'markdown_help' => '你可以使用Markdown模式編輯文章. 查看更多資訊請參考 <a href=\'https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet\' target=\'_blank\'>此處資料</a>.',
 
-    /*
-     *  Server query
-     */
+    // Server query
     'online' => '線上',
     'offline' => '離線',
     'player_count' => '{x}/{y}', // Don't replace {x} or {y}
@@ -123,15 +111,11 @@ $language = array(
     'no_players_online' => 'There are no players online.',
     'and_x_more' => 'and {x} more', // Don't replace {x}
 
-    /*
-     *  Cookie notice
-     */
+    // Cookie notice
     'cookie_notice' => 'This website uses cookies to enhance your browsing experience. By registering on our website or closing this notice you agree with their use.',
     'cookie_agree' => 'Agree',
 
-    /*
-     *  Widgets
-     */
+    // Widgets
     'statistics' => 'Statistics',
     'users_registered' => 'Users Registered',
     'latest_member' => 'Latest Member',
@@ -150,13 +134,9 @@ $language = array(
     'no_default_server' => 'There is no default server, please select one in StaffCP - Integrations - Minecraft.',
     'server_status' => 'Server Status',
 
-    /*
-     *  Privacy policy
-     */
+    // Privacy policy
     'privacy_policy' => 'Privacy Policy',
 
-    /*
-     *  Custom page redirect
-     */
+    // Custom page redirect
     'redirecting_message' => 'Redirecting...<br />If you are not redirected automatically, please click <a href="{x}" rel="nofollow noopener">here</a>.' // Don't replace {x} which is the redirect URL
-);
+];
diff --git a/custom/languages/Chinese/installer.php b/custom/languages/Chinese/installer.php
index f675f12d11ba25db683c4d42dd4b1a3d8aa21179..eba3dd254b16e878ec0ee60d13968d4607031d1e 100644
--- a/custom/languages/Chinese/installer.php
+++ b/custom/languages/Chinese/installer.php
@@ -13,10 +13,8 @@
  *  https://github.com/haer0248/NamelessMC-v2-Traditional-Chinese/issues
  */
 
-$language = array(
-    /*
-     *  Installation
-     */
+$language = [
+    // Installation
     'install' => '安裝嚮導',
     'pre-release' => '先行測試版',
     'installer_welcome' => '歡迎使用 NamelessMC version 2.0 先行測試版.',
@@ -107,4 +105,4 @@ $language = array(
     'config_not_writable' => 'The config file is not writable.',
 
     'session_doesnt_exist' => 'Unable to detect session. Sessions saving are a requirement to use Nameless. Please try again, and if the issue persists, please contact your web host for support.'
-);
+];
diff --git a/custom/languages/Chinese/log.php b/custom/languages/Chinese/log.php
index 5ab53c40d6a530db34ed305094f137f03c98823d..e38e3aedf83f5ce320dd06b1c2e4fe33f5ef9e5e 100644
--- a/custom/languages/Chinese/log.php
+++ b/custom/languages/Chinese/log.php
@@ -1,6 +1,7 @@
 <?php
-$language = array(
+
+$language = [
     //forums
     'info_forums_lock' => 'Locked',
     'info_forums_unlock' => 'Unlocked',
-);
\ No newline at end of file
+];
diff --git a/custom/languages/Chinese/moderator.php b/custom/languages/Chinese/moderator.php
index 4b204119495a32482f6da4b9abbcf0f69b8276ea..07a7bf0235318d2daac1b5e27d66f1e95f33e436 100644
--- a/custom/languages/Chinese/moderator.php
+++ b/custom/languages/Chinese/moderator.php
@@ -1,4 +1,5 @@
 <?php
+
  /*
  *  Made by Samerton
  *  Translation  by Hi_Michael
@@ -13,7 +14,7 @@
  *  https://github.com/haer0248/NamelessMC-v2-Traditional-Chinese/issues
  */
 
-$language = array(
+$language = [
     'mod_cp' => '控制者後台',
     'staff_cp' => 'StaffCP',
     'overview' => '總覽',
@@ -108,5 +109,4 @@ $language = array(
     // Users
     'recent_registrations' => 'Recent Registrations',
     'reset_profile_banner' => 'Reset Profile Banner'
-
-);
+];
diff --git a/custom/languages/Chinese/table.php b/custom/languages/Chinese/table.php
index adc6d1adc214095362bd9983c2a059014326ae67..1b86fa9f9ad6983a1117b54c369197c3a2274227 100644
--- a/custom/languages/Chinese/table.php
+++ b/custom/languages/Chinese/table.php
@@ -1,4 +1,5 @@
 <?php
+
  /*
  *  Made by Samerton
  *  Translation  by Hi_Michael
@@ -13,13 +14,11 @@
  *  https://github.com/haer0248/NamelessMC-v2-Traditional-Chinese/issues
  */
 
-$language = array(
-    /*
-     *  Tables
-     */
+$language = [
+    // Tables
     'display_records_per_page' => '顯示 _MENU_ 每頁紀錄', // Don't replace "_MENU_"
     'nothing_found' => '沒有紀錄',
     'page_x_of_y' => '頁數 _PAGE_/_PAGES_', // Don't replace "_PAGE_" or "_PAGES_"
     'no_records' => '沒有已知紀錄',
     'filtered' => '(從 _MAX_ 中紀錄過濾)' // Don't replace "_MAX_"
-);
+];
diff --git a/custom/languages/Chinese/time.php b/custom/languages/Chinese/time.php
index 050ed4bcf3099e5fac130794102d5f23761be00c..ecfd1bdc65bdbe4a0aa6c4bdc626b1ebf60d781d 100644
--- a/custom/languages/Chinese/time.php
+++ b/custom/languages/Chinese/time.php
@@ -1,4 +1,5 @@
 <?php
+
  /*
  *  Made by Samerton
  *  Translation  by Hi_Michael
@@ -13,10 +14,8 @@
  *  https://github.com/haer0248/NamelessMC-v2-Traditional-Chinese/issues
  */
 
-$language = array(
-    /*
-     *  Time
-     */
+$language = [
+    // Time
     'time' => '時間', // Placeholder, no need to translate
     'seconds_short' => '秒', // Shortened "seconds", eg "s"
     'less_than_a_minute' => '分鐘以前',
@@ -30,4 +29,4 @@ $language = array(
     '_months' => '{x} 個月以前',
     'about_1_year' => '大約 1 年以前',
     'over_x_years' => '超過 {x} 年'
-);
+];
diff --git a/custom/languages/Chinese/user.php b/custom/languages/Chinese/user.php
index 44800f7953f7efb13a74e2899909f87251c10634..9ea8596c28779784f25efbabf34e994bd434fc09 100644
--- a/custom/languages/Chinese/user.php
+++ b/custom/languages/Chinese/user.php
@@ -14,15 +14,11 @@
  *  https://github.com/haer0248/NamelessMC-v2-Traditional-Chinese/issues
  */
 
-$language = array(
-    /*
-     *  Change this for the account validation message
-     */
+$language = [
+    // Change this for the account validation message
     'validate_account_command' => 'To complete registration, please execute the command <strong>/validate {x}</strong> ingame.', // Don't replace {x}
 
-    /*
-     *  User Related
-     */
+    // User Related
     'guest' => '遊客',
     'guests' => '遊客',
 
@@ -229,16 +225,12 @@ $language = array(
     'latest_profile_posts' => 'Latest Profile Posts',
     'no_profile_posts' => 'No profile posts.',
 
-    /*
-     *  Infractions area
-     */
+    // Infractions area
     'you_have_been_banned' => '你已被封禁!',
     'you_have_received_a_warning' => '你已收到警告!',
     'acknowledge' => '確認',
 
-    /*
-     *  Hooks
-     */
+    // Hooks
     'user_x_has_registered' => '{x} has joined ' . SITE_NAME . '!',
     'user_x_has_validated' => '{x} has validated their account!',
 
@@ -257,4 +249,4 @@ $language = array(
     'discord_communication_error' => 'There was an error while communicating with the Discord Bot. Please ensure the bot is running and your Bot URL is correct.',
     'discord_unknown_error' => 'There was an unknown error while syncing Discord roles. Please contact an administrator.',
     'discord_id_help' => 'For information on where to find Discord ID\'s, please read <a href="https://support.discord.com/hc/en-us/articles/206346498-Where-can-I-find-my-User-Server-Message-ID-" target="_blank">this.</a>'
-);
+];
diff --git a/custom/languages/Czech/admin.php b/custom/languages/Czech/admin.php
index a992860af9cc93e8426740eb8d7b964eb2f42a6e..6d0fef739197407840622c2e4afe929678215c55 100755
--- a/custom/languages/Czech/admin.php
+++ b/custom/languages/Czech/admin.php
@@ -10,10 +10,8 @@
  *  Czech Language - Admin
  */
 
-$language = array (
-    /*
-     *  Admin Control Panel
-     */
+$language = [
+    // Admin Control Panel
     // Login
     're-authenticate' => 'Znovu se přihlaste',
 
@@ -513,7 +511,7 @@ $language = array (
     'show_nickname_instead_of_username' => 'Zobrazit přezdívku uživatele namísto jeho uživatelského jména?',
 
     // Custom Pages
-	'pages' => 'Stránky',
+    'pages' => 'Stránky',
     'custom_pages' => 'Vlastní stránky',
     'new_page' => '<i class="fa fa-plus-circle"></i> Nová stránka',
     'no_custom_pages' => 'Nebyly vytvořeny žádné stránky.',
@@ -720,4 +718,4 @@ $language = array (
     'discord_bot_error_unauthorized' => 'API klíč webu je neplatný',
     'discord_bot_error_invrole' => 'Zadané ID role je neplatné.',
     'discord_bot_error_hierarchy' => 'Bot nemůže upravit role tohoto uživatele.'
-);
+];
diff --git a/custom/languages/Czech/api.php b/custom/languages/Czech/api.php
index db8e308d92c0450e923452e62240e8ce0470edd3..9a98a69fa2d370d9a2b55749ed12378867680a7d 100755
--- a/custom/languages/Czech/api.php
+++ b/custom/languages/Czech/api.php
@@ -10,8 +10,7 @@
  *  Czech Language - API
  */
 
-$language = array (
-
+$language = [
     // Errors
     'api_disabled' => 'API je zakázáno',
     'unknown_error' => 'Neznámá chyba',
@@ -62,4 +61,4 @@ $language = array (
     'discord_id_set' => 'ID Discordu úspěšně nastaveno',
     'discord_settings_updated' => 'Nastavení Discordu úspěšně aktualizována',
     'discord_usernames_updated' => 'Uživatelská jména na Discordu úspěšně aktualizována'
-);
+];
diff --git a/custom/languages/Czech/emails.php b/custom/languages/Czech/emails.php
index d9fd7cb5f18c85e613bb3bfcbcb6c6c6050573c5..2eb4145d5b1efa93e2df60ad21d87d52c577c265 100644
--- a/custom/languages/Czech/emails.php
+++ b/custom/languages/Czech/emails.php
@@ -10,8 +10,7 @@
  *  Czech Language - Emails
  */
 
-$language = array (
-
+$language = [
     // General Options
     'greeting' => 'Zdravíme,',
     'thanks' => 'Děkujeme,',
@@ -27,4 +26,4 @@ $language = array (
     // Forum Topic Replies
     'forum_topic_reply_subject' => '{x} odpověděl uživateli {y}', // Don't remove {x} or {y}
     'forum_topic_reply_message' => '{x} odpověděl na téma, které sledujete. Obsah: {z}' // Don't remove {x} or {z}
-);
\ No newline at end of file
+];
diff --git a/custom/languages/Czech/errors.php b/custom/languages/Czech/errors.php
index a9991ab68751447f7daae7df2fe055f30cd38dd3..406f5015df4e8290935a3aadc7fc139364923e4d 100755
--- a/custom/languages/Czech/errors.php
+++ b/custom/languages/Czech/errors.php
@@ -10,10 +10,8 @@
  *  Czech Language - Errors
  */
 
-$language = array (
-    /*
-     *  Errors
-     */
+$language = [
+    // Errors
     '404_title' => 'Omlouváme se!',
     '404_content' => 'Tuto stránku jsme nenašli.',
     '404_back' => 'Vrátit se zpět',
@@ -32,4 +30,4 @@ $language = array (
     'fatal_error_message_admin' => 'Omlouváme se, ale při načítání stránky se něco pokazilo. Podrobnosti chyby:',
     'in_file' => 'v souboru <strong>{x}</strong>', // Don't replace {x}
     'on_line' => 'na řádku <strong>{x}</strong>' // Don't replace {x}
-);
\ No newline at end of file
+];
diff --git a/custom/languages/Czech/general.php b/custom/languages/Czech/general.php
index 60f1635257b9b53aa05966f840d344521a559df5..ac13a8dd331030b055787afb105b3bde1efa79cf 100755
--- a/custom/languages/Czech/general.php
+++ b/custom/languages/Czech/general.php
@@ -10,10 +10,8 @@
  *  Czech Language - General terms
  */
 
-$language = array (
-    /*
-     *  General terms
-     */
+$language = [
+    // General terms
     'help' => 'Podpora',
     'submit' => 'Potvrdit',
     'register' => 'Zaregistrovat se',
@@ -71,9 +69,7 @@ $language = array (
     'link' => 'Propojit',
     'unlink' => 'Odpojit',
 
-    /*
-     *  Contact form
-     */
+    // Contact form
     'contact' => 'Kontakt',
     'message' => 'Zpráva',
     'email_address' => 'E-mailová adresa',
@@ -83,27 +79,19 @@ $language = array (
     'contact_message_email' => 'Zadaný e-mail je neplatný.',
     'contact_message_limit' => 'Můžete odeslat pouze jednu zprávu za hodinu. Další zprávu budete moct odeslat za {x} minut.', // Don't replace {x}
 
-    /*
-     *  Navbar
-     */
+    // Navbar
     'home' => 'Domů',
     'more' => 'Více',
     'status' => 'Stav',
 
-    /*
-     *  Homepage
-     */
+    // Homepage
     'social' => 'Sociální',
 
-    /*
-     *  Help dialogues
-     */
+    // Help dialogues
     'markdown_help' => 'Váš příspěvek můžete naformátovat pomocí stylu Markdown. Pro více informací klikněte <a href=\'https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet\' target=\'_blank\'>sem</a>.',
     'online' => 'Online',
 
-    /*
-     *  Server query
-     */
+    // Server query
     'offline' => 'Offline',
     'player_count' => '{x}/{y}', // Don't replace {x} or {y}
     'ping' => 'Ping: {x}', // Don't replace {x}
@@ -120,15 +108,11 @@ $language = array (
     'no_players_online' => 'Na serveru nehrají žádní hráči.',
     'and_x_more' => 'a {x} dalších', // Don't replace {x}
 
-    /*
-     *  Cookie notice
-     */
+    // Cookie notice
     'cookie_notice' => 'Tento web používá cookies pro zlepšení uživatelského zážitku. Registrací nebo zavřením tohoto oznámení souhlasíte s jejich použitím.',
     'cookie_agree' => 'Souhlasím',
 
-    /*
-     *  Widgets
-     */
+    // Widgets
     'statistics' => 'Statistiky',
     'users_registered' => 'Zaregistrovaní uživatelé',
     'latest_member' => 'Poslední člen',
@@ -147,13 +131,9 @@ $language = array (
     'no_default_server' => 'Není nastaven žádný výchozí server, vyberte jej v Panel - Integrace - Minecraft',
     'server_status' => 'Stav serveru',
 
-    /*
-     *  Privacy policy
-     */
+    // Privacy policy
     'privacy_policy' => 'Zásady ochrany osobních údajů',
 
-    /*
-     *  Custom page redirect
-     */
+    // Custom page redirect
     'redirecting_message' => 'Přesměrování...<br />Pokud nebudete přesměrováni automaticky, klikněte prosím  <a href="{x}" rel="nofollow noopener">sem</a>.' // Don't replace {x} which is the redirect URL
-);
\ No newline at end of file
+];
diff --git a/custom/languages/Czech/installer.php b/custom/languages/Czech/installer.php
index 9217d893b1575de8e1f0afa9c0fb32d8a49e3c40..9b458abd57654993adf51b2ca36f1028307500cd 100755
--- a/custom/languages/Czech/installer.php
+++ b/custom/languages/Czech/installer.php
@@ -10,10 +10,8 @@
  *  Czech Language - Installation
  */
 
-$language = array (
-    /*
-     *  Installation
-     */
+$language = [
+    // Installation
     'install' => 'Instalace',
     'pre-release' => 'předběžné vydání',
     'installer_welcome' => 'Vítejte v předběžném vydání NamelessMC verze 2.0.',
@@ -104,4 +102,4 @@ $language = array (
     'config_not_writable' => 'Konfigurační soubor není zapisovatelný.',
 
     'session_doesnt_exist' => 'Nepodařilo se detekovat relaci. Pro správnou funkci Nameless je potřeba funkce ukládání relací. Zkuste to prosím znovu. Pokud chyba přetrvává, kontaktujte podporu vašeho webhostingu.'
-);
\ No newline at end of file
+];
diff --git a/custom/languages/Czech/log.php b/custom/languages/Czech/log.php
index 8a58e806001226af38687412311f86bdf4014b30..3163dfef37139160f5eb3058d580290a8d0a8e55 100644
--- a/custom/languages/Czech/log.php
+++ b/custom/languages/Czech/log.php
@@ -1,6 +1,7 @@
 <?php
-$language = array (
+
+$language = [
     //forums
     'info_forums_lock' => 'Uzamčeno',
     'info_forums_unlock' => 'Odemčeno'
-);
\ No newline at end of file
+];
diff --git a/custom/languages/Czech/moderator.php b/custom/languages/Czech/moderator.php
index 5cf898f625ccf9a47ba26a571672cd72f8a08ba3..d31eb7ee6aae456081e9a88e53121fb01e4bab66 100755
--- a/custom/languages/Czech/moderator.php
+++ b/custom/languages/Czech/moderator.php
@@ -10,7 +10,7 @@
  *  Czech Language - Moderator terms
  */
 
-$language = array (
+$language = [
     'staff_cp' => 'Panel',
     'overview' => 'Nástěnka',
 
@@ -105,5 +105,4 @@ $language = array (
     // Users
     'recent_registrations' => 'Poslední registrace',
     'reset_profile_banner' => 'Obnovit profilový obrázek'
-
-);
\ No newline at end of file
+];
diff --git a/custom/languages/Czech/table.php b/custom/languages/Czech/table.php
index 1a2e56b8d78a388eb6852afdc1437d005fd2faa3..65bd2bd77b7001176defd4b017bb3b7cd70845c8 100755
--- a/custom/languages/Czech/table.php
+++ b/custom/languages/Czech/table.php
@@ -10,13 +10,11 @@
  *  Czech Language - Table
  */
 
-$language = array (
-    /*
-     *  Tables
-     */
+$language = [
+    // Tables
     'display_records_per_page' => 'Zobrazit _MENU_ výsledků na stránce', // Don't replace "_MENU_"
     'nothing_found' => 'Nebyly nalezeny žádné výsledky',
     'page_x_of_y' => 'Strana _PAGE_ z _PAGES_', // Don't replace "_PAGE_" or "_PAGES_"
     'no_records' => 'Nejsou dostupné žádné záznamy',
     'filtered' => '(odfiltrováno z celkem _MAX_ záznamů)' // Don't replace "_MAX_"
-);
\ No newline at end of file
+];
diff --git a/custom/languages/Czech/time.php b/custom/languages/Czech/time.php
index 768d470d9098713f36843744b56c867ca3135895..a17e4eccbd6bff9472c6967a5ec65c62c5ef3ce6 100755
--- a/custom/languages/Czech/time.php
+++ b/custom/languages/Czech/time.php
@@ -10,10 +10,8 @@
  *  Czech Language - Time
  */
 
-$language = array (
-    /*
-     *  Time
-     */
+$language = [
+    // Time
     'time' => 'čas', // Placeholder, no need to translate
     'less_than_a_minute' => 'před méně než minutou',
     '1_minute' => 'před 1 minutou',
@@ -26,4 +24,4 @@ $language = array (
     '_months' => 'před {x} měsíci',
     'about_1_year' => 'před rokem',
     'over_x_years' => 'před {x} lety'
-);
\ No newline at end of file
+];
diff --git a/custom/languages/Czech/user.php b/custom/languages/Czech/user.php
index 62917d10222d42f0297d04faad03e2aca9a1eb35..50d30c44471641d3b8240c8abdd4d93e011067f2 100755
--- a/custom/languages/Czech/user.php
+++ b/custom/languages/Czech/user.php
@@ -1,4 +1,5 @@
-<?php 
+<?php
+
 /*
  *  Made by Samerton
  *  Translated by Fjuro
@@ -10,15 +11,11 @@
  *  Czech Language - Users
  */
 
-$language = array(
-    /*
-     *  Change this for the account validation message
-     */
+$language = [
+    // Change this for the account validation message
     'validate_account_command' => 'Pro dokončení registrace zadejte ve hře příkaz <strong>/validate {x}</strong>.', // Don't replace {x}
 
-    /*
-     *  User Related
-     */
+    // User Related
     'guest' => 'Host',
     'guests' => 'Hosté',
     
@@ -223,16 +220,12 @@ $language = array(
     'latest_profile_posts' => 'Nejnovější profilové příspěvky',
     'no_profile_posts' => 'Žádné profilové příspěvky.',
 
-    /*
-     *  Infractions area
-     */
+    // Infractions area
     'you_have_been_banned' => 'Byli jste zabanováni!',
     'you_have_received_a_warning' => 'Obdrželi jste varování!',
     'acknowledge' => 'Zjistit více',
 
-    /*
-     *  Hooks
-     */
+    // Hooks
     'user_x_has_registered' => '{x} se připojil na ' . SITE_NAME . '!',
     'user_x_has_validated' => '{x} ověřil svůj účet!',
     
@@ -251,4 +244,4 @@ $language = array(
     'discord_communication_error' => 'Při komunikaci s Discord botem se vyskytla chyba. Ujistěte se, že bot běží a že URL bota je správná.',
     'discord_unknown_error' => 'Při synchronizaci Discord rolí se vyskytla neznámá chyba. Kontaktujte prosím správce.',
     'discord_id_help' => 'Pro informace, kde nalézt Discord ID, si přečtěte <a href="https://support.discord.com/hc/en-us/articles/206346498-Where-can-I-find-my-User-Server-Message-ID-" target="_blank">toto.</a>'
-);
+];
diff --git a/custom/languages/Dutch/admin.php b/custom/languages/Dutch/admin.php
index c6c7120257fc36d3c602590befa8708724c2e204..7f41e21d670fc26e13196f33b13094a355125efa 100644
--- a/custom/languages/Dutch/admin.php
+++ b/custom/languages/Dutch/admin.php
@@ -11,10 +11,8 @@
  *  Nederlandse taal - Admin
  */
 
-$language = array(
-    /*
-     *  Admin controle paneel
-     */
+$language = [
+    // Admin controle paneel
     // Login
     're-authenticate' => 'Gelieve opnieuw te verifiëren',
 
@@ -743,5 +741,4 @@ $language = array(
     'discord_bot_error_unauthorized' => 'Website API-sleutel is ongeldig',
     'discord_bot_error_invrole' => 'Opgegeven rol-ID is ongeldig.',
     'discord_bot_error_hierarchy' => 'De bot kan de rollen van deze gebruiker niet bewerken.'
-
-);
+];
diff --git a/custom/languages/Dutch/api.php b/custom/languages/Dutch/api.php
index 959e439d6f0d2f5c164dc8ae99ad91fa9ac5abcf..51f8e29464ed18f96ed4001d8fc9ccd70eb532dd 100644
--- a/custom/languages/Dutch/api.php
+++ b/custom/languages/Dutch/api.php
@@ -9,8 +9,7 @@
  *  Dutch Language - API
  */
 
-$language = array(
-
+$language = [
     // Errors
     'api_disabled' => 'API is disabled',
     'unknown_error' => 'Onbekende error',
@@ -63,4 +62,4 @@ $language = array(
     'discord_id_set' => 'Discord ID met succes ingesteld',
     'discord_settings_updated' => 'Discord settings updated successfully',
     'discord_usernames_updated' => 'Discord usernames updated successfully'
-);
+];
diff --git a/custom/languages/Dutch/emails.php b/custom/languages/Dutch/emails.php
index 7f3a39757436077c0e2d832bdb2fc393dae2f71b..5b95d348e5b544036009fc9c1f68e9de3231c7f9 100644
--- a/custom/languages/Dutch/emails.php
+++ b/custom/languages/Dutch/emails.php
@@ -9,8 +9,7 @@
  *  Dutch Language - Emails
  */
 
-$language = array(
-
+$language = [
     // General Options
     'greeting' => 'Hoi,',
     'thanks' => 'Nogmaals bedankt,',
@@ -26,4 +25,4 @@ $language = array(
     // Forum Topic Replies
     'forum_topic_reply_subject' => '{x} heeft gereageerd op {y}', // Don't remove {x} or {y}
     'forum_topic_reply_message' => '{x} heeft gereageerd op een topic die jij volgt. Inhoud: {z}' // Don't remove {x} or {z}
-);
+];
diff --git a/custom/languages/Dutch/errors.php b/custom/languages/Dutch/errors.php
index c2702ad0f9e78239e3ddf5d03236010df7027ef5..b76c3489d9d692f7df9ea1b9e2595a7cf2809257 100644
--- a/custom/languages/Dutch/errors.php
+++ b/custom/languages/Dutch/errors.php
@@ -11,10 +11,8 @@
  *  Nederlandse taal - Problemen
  */
 
-$language = array(
-    /*
-     *  Problemen
-     */
+$language = [
+    // Problemen
     '404_title' => 'Het spijt ons!',
     '404_content' => 'We konden de pagina die je zocht niet vinden.',
     '404_back' => 'Terug?',
@@ -33,4 +31,4 @@ $language = array(
     'fatal_error_message_admin' => 'Sorry, maar er is iets misgegaan tijdens het laden van de pagina. Error gegevens:',
     'in_file' => 'in bestand <strong>{x}</strong>', // Don't replace {x}
     'on_line' => 'op regel <strong>{x}</strong>' // Don't replace {x}
-);
+];
diff --git a/custom/languages/Dutch/general.php b/custom/languages/Dutch/general.php
index eefe28be786ce6b500b11c00da009dbc00fb067b..ac8506ebd045e4dabd20008af4003332799f6322 100644
--- a/custom/languages/Dutch/general.php
+++ b/custom/languages/Dutch/general.php
@@ -11,10 +11,8 @@
  *  Nederlandse taal - Algemene termen
  */
 
-$language = array(
-    /*
-     *  Algemene termen
-     */
+$language = [
+    // Algemene termen
     'help' => 'Help',
     'submit' => 'Verstuur',
     'register' => 'Registreren',
@@ -72,9 +70,7 @@ $language = array(
     'link' => 'Link',
     'unlink' => 'Unlink',
     
-    /*
-     *  Contact formulier
-     */
+    // Contact formulier
     'contact' => 'Contact',
     'message' => 'Bericht',
     'email_address' => 'E-mailadres',
@@ -84,27 +80,18 @@ $language = array(
     'contact_message_sent' => 'Bericht succesvol verzonden.',
     'contact_message_limit' => 'Je kan maar 1 bericht per uur versturen. Je kan pas weer over {x} minuten een nieuw bericht versturen.', // Vervang {x} niet
 
-    /*
-     *  Navigatiebalk
-     */
+    // Navigatiebalk
     'home' => 'Start',
     'more' => 'Meer',
     'status' => 'Status',
 
-    /*
-     *  Homepagina
-     */
+    // Homepagina
     'social' => 'Sociaal',
 
-
-    /*
-     *  Hulp dialogen
-     */
+    // Hulp dialogen
     'markdown_help' => 'Je kan gebruik maken van Markdown bij je berichten en forum. Voor meer informatie, klik <a href=\'https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet\' target=\'_blank\'>hier</a>.',
 
-    /*
-     *  Server query
-     */
+    // Server query
     'online' => 'Online',
     'offline' => 'Offline',
     'player_count' => '{x}/{y}', // Verander "{x}" of "{y}" niet
@@ -122,15 +109,11 @@ $language = array(
     'no_players_online' => 'Er zijn geen spelers online.',
     'and_x_more' => 'en {x} meer', // Don't replace {x}
 
-    /*
-     *  Cookie notice
-     */
+    // Cookie notice
     'cookie_notice' => 'Deze website maakt gebruik van cookies om uw surfervaring te verbeteren. Door u te registreren op onze website of door deze mededeling te sluiten gaat u akkoord met het gebruik ervan.',
     'cookie_agree' => 'Akkoord',
 
-    /*
-     *  Widgets
-     */
+    // Widgets
     'statistics' => 'Statistieken',
     'users_registered' => 'Geregistreerde Gebruikers',
     'latest_member' => 'Nieuwste lid',
@@ -149,13 +132,9 @@ $language = array(
     'no_default_server' => 'Er is geen standaard server, kies er een in StaffCP - Integraties - Minecraft.',
     'server_status' => 'Server Status',
 
-    /*
-     *  Privacy policy
-     */
+    // Privacy policy
     'privacy_policy' => 'Privacyverklaring',
 
-    /*
-     *  Custom page redirect
-     */
+    // Custom page redirect
     'redirecting_message' => 'Doorsturen...<br />Als u niet automatisch wordt doorgestuurd, klik dan <a href="{x}" rel="nofollow noopener">hier</a>.' // Don't replace {x} which is the redirect URL
-);
+];
diff --git a/custom/languages/Dutch/installer.php b/custom/languages/Dutch/installer.php
index 0035c35eeef82c2f3b3789bf13afc57fac3ae436..0fce41ff855e3aab2462b7ccb8156a35836508f2 100644
--- a/custom/languages/Dutch/installer.php
+++ b/custom/languages/Dutch/installer.php
@@ -11,7 +11,7 @@
  *  Nederlandse taal - Installatie
  */
 
-$language = array(
+$language = [
     'install' => 'Installatie',
     'pre-release' => 'pre-release',
     'installer_welcome' => 'Welkom bij NamelessMC versie 2.0 pre-release.',
@@ -102,4 +102,4 @@ $language = array(
     'config_not_writable' => 'Het configuratiebestand is niet beschrijfbaar.',
 
     'session_doesnt_exist' => 'Niet in staat om de sessie te detecteren. Sessies opslaan is een vereiste om Nameless te gebruiken. Probeer het opnieuw, en als het probleem blijft bestaan, neem dan contact op met uw webhost voor ondersteuning.'
-);
+];
diff --git a/custom/languages/Dutch/log.php b/custom/languages/Dutch/log.php
index 5ab53c40d6a530db34ed305094f137f03c98823d..e38e3aedf83f5ce320dd06b1c2e4fe33f5ef9e5e 100644
--- a/custom/languages/Dutch/log.php
+++ b/custom/languages/Dutch/log.php
@@ -1,6 +1,7 @@
 <?php
-$language = array(
+
+$language = [
     //forums
     'info_forums_lock' => 'Locked',
     'info_forums_unlock' => 'Unlocked',
-);
\ No newline at end of file
+];
diff --git a/custom/languages/Dutch/moderator.php b/custom/languages/Dutch/moderator.php
index 4ca9bd7e0d40a0cf3e85114a91b72c7c972bc8f7..1fdf77e9a18b7ac01357a835c59e005ca74ecd29 100644
--- a/custom/languages/Dutch/moderator.php
+++ b/custom/languages/Dutch/moderator.php
@@ -11,7 +11,7 @@
  *  Nederlandse taal - Beheers termen
  */
 
-$language = array(
+$language = [
     'mod_cp' => 'Beheerders Paneel',
     'staff_cp' => 'StaffCP',
     'overview' => 'Overzicht',
@@ -106,5 +106,4 @@ $language = array(
     // Users
     'recent_registrations' => 'Recente Registraties',
     'reset_profile_banner' => 'Reset Profiel Banner'
-
-);
+];
diff --git a/custom/languages/Dutch/table.php b/custom/languages/Dutch/table.php
index cbb787b7200401a3b22bd616b0334e3377505aae..3da1852f34bd1dde042bd18ee86392ba23ec07d3 100644
--- a/custom/languages/Dutch/table.php
+++ b/custom/languages/Dutch/table.php
@@ -11,13 +11,11 @@
  *  Nederlandse taal - Lijst
  */
 
-$language = array(
-    /*
-     *  Lijsten
-     */
+$language = [
+    // Lijsten
     'display_records_per_page' => 'laat _MENU_ gegevens zien per pagina', // Verander "_MENU_" niet
     'nothing_found' => 'Geen resultaten gevonden',
     'page_x_of_y' => 'Pagina _PAGE_ van de _PAGES_', // Verander "_PAGE_" of "_PAGES_ niet"
     'no_records' => 'Geen gegevens beschikbaar',
     'filtered' => '(gefilterd van de _MAX_ totale gegevens)' // Verander "_MAX_ niet"
-);
+];
diff --git a/custom/languages/Dutch/time.php b/custom/languages/Dutch/time.php
index a939ad32a1f955c1585b6dfbbe54beab3a13ea7a..11cb9243836f978cc9d6f2537311fb11a9b4b687 100644
--- a/custom/languages/Dutch/time.php
+++ b/custom/languages/Dutch/time.php
@@ -11,10 +11,8 @@
  *  Nederlandse taal - Tijd
  */
 
-$language = array(
-    /*
-     *  Tijd
-     */
+$language = [
+    // Tijd
     'time' => 'tijd', // Placeholder, geen behoefte om te vertalen
     'seconds_short' => 's', // Verkort "seconden", bv "sec"
     'less_than_a_minute' => 'Minder dan een minuut geleden',
@@ -28,4 +26,4 @@ $language = array(
     '_months' => '{x} maanden geleden',
     'about_1_year' => 'ongeveer 1 jaar geleden',
     'over_x_years' => 'meer dan {x} jaar geleden'
-);
+];
diff --git a/custom/languages/Dutch/user.php b/custom/languages/Dutch/user.php
index dad2a44066da462a6b519dde2c7a9bef908a6b6b..eba1b3cd1f72f22594756a425f969dcd1d77e0f6 100644
--- a/custom/languages/Dutch/user.php
+++ b/custom/languages/Dutch/user.php
@@ -11,15 +11,11 @@
  *  Nederlandse taal - Gebruikers
  */
 
-$language = array(
-    /*
-     *  Change this for the account validation message
-     */
+$language = [
+    // Change this for the account validation message
     'validate_account_command' => 'Om de registratie te voltooien, run alstublieft het commando <strong>/validate {x}</strong> ingame.', // Don't replace {x}
 
-    /*
-     *  Gebruiker gerelateerd
-     */
+    // Gebruiker gerelateerd
     'guest' => 'Gast',
     'guests' => 'Gasten',
 
@@ -226,16 +222,12 @@ $language = array(
     'latest_profile_posts' => 'Laatste Profielberichten',
     'no_profile_posts' => 'Geen Profielberichten',
 
-    /*
-     *  Overtredingen gebied
-     */
+    // Overtredingen gebied
     'you_have_been_banned' => 'Je bent verbannen!',
     'you_have_received_a_warning' => 'Je hebt een waarschuwing gekregen!',
     'acknowledge' => 'Begrepen',
 
-    /*
-     *  Hooks
-     */
+    // Hooks
     'user_x_has_registered' => '{x} is lid geworden van ' . SITE_NAME . '!',
     'user_x_has_validated' => '{x} has validated their account!',
 
@@ -254,4 +246,4 @@ $language = array(
     'discord_communication_error' => 'Er was een fout in de communicatie met de Discord Bot. Zorg ervoor dat de bot werkt en dat uw Bot-URL correct is.',
     'discord_unknown_error' => 'Er was een onbekende fout bij het synchroniseren van de rollen van Discord. Neem contact op met een beheerder.',
     'discord_id_help' => 'Voor informatie over waar je de Discord ID\'s kunt vinden, lees alsjeblieft <a href="https://support.discord.com/hc/en-us/articles/206346498-Where-can-I-find-my-User-Server-Message-ID-" target="_blank">dit.</a>'
-);
+];
diff --git a/custom/languages/EnglishUK/admin.php b/custom/languages/EnglishUK/admin.php
index 5b73a0fa50f90ce3167103c64b78222b0c2d4006..7815507d76375f7e74651af554257edffabeee49 100644
--- a/custom/languages/EnglishUK/admin.php
+++ b/custom/languages/EnglishUK/admin.php
@@ -9,10 +9,8 @@
  *  EnglishUK Language - Admin
  */
 
-$language = array(
-    /*
-     *  Admin Control Panel
-     */
+$language = [
+    // Admin Control Panel
     // Login
     're-authenticate' => 'Please re-authenticate',
 
@@ -719,4 +717,4 @@ $language = array(
     'discord_bot_error_unauthorized' => 'Website API key is invalid',
     'discord_bot_error_invrole' => 'Provided Role ID is invalid.',
     'discord_bot_error_hierarchy' => 'The bot cannot edit this user\'s roles.'
-);
+];
diff --git a/custom/languages/EnglishUK/api.php b/custom/languages/EnglishUK/api.php
index e224df4b1f995d738efd1209e52c64db29c738ff..4e5cf012688afe372bf6b1eaf32996444a3e83f1 100644
--- a/custom/languages/EnglishUK/api.php
+++ b/custom/languages/EnglishUK/api.php
@@ -9,8 +9,7 @@
  *  EnglishUK Language - API
  */
 
-$language = array(
-
+$language = [
     // Errors
     'api_disabled' => 'API is disabled',
     'unknown_error' => 'Unknown error',
@@ -61,4 +60,4 @@ $language = array(
     'discord_id_set' => 'Discord ID set successfully',
     'discord_settings_updated' => 'Discord settings updated successfully',
     'discord_usernames_updated' => 'Discord usernames updated successfully'
-);
+];
diff --git a/custom/languages/EnglishUK/emails.php b/custom/languages/EnglishUK/emails.php
index 0ab3f76e91bd17f6ca22f10f10204eb3b9a40f9c..2efbf60d41fa24357282307313fffa59613350db 100644
--- a/custom/languages/EnglishUK/emails.php
+++ b/custom/languages/EnglishUK/emails.php
@@ -9,8 +9,7 @@
  *  EnglishUK Language - Emails
  */
 
-$language = array(
-
+$language = [
     // General Options
     'greeting' => 'Hi,',
     'thanks' => 'Thanks,',
@@ -26,4 +25,4 @@ $language = array(
     // Forum Topic Replies
     'forum_topic_reply_subject' => '{x} has replied to {y}', // Don't remove {x} or {y}
     'forum_topic_reply_message' => '{x} has replied to a topic you follow. Content: {z}' // Don't remove {x} or {z}
-);
+];
diff --git a/custom/languages/EnglishUK/errors.php b/custom/languages/EnglishUK/errors.php
index 5ed9f92e4ef3a89697e101066904b28342b71e61..dc0b6a9577a89f1c6c57d7f4b5d246e29c634989 100644
--- a/custom/languages/EnglishUK/errors.php
+++ b/custom/languages/EnglishUK/errors.php
@@ -9,10 +9,8 @@
  *  EnglishUK Language - Errors
  */
 
-$language = array(
-    /*
-     *  Errors
-     */
+$language = [
+    // Errors
     '404_title' => 'Sorry!',
     '404_content' => 'We couldn\'t find that page.',
     '404_back' => 'Go back',
@@ -31,4 +29,4 @@ $language = array(
     'fatal_error_message_admin' => 'Sorry, but something went wrong while loading the page. Error details:',
     'in_file' => 'in file <strong>{x}</strong>', // Don't replace {x}
     'on_line' => 'on line <strong>{x}</strong>' // Don't replace {x}
-);
+];
diff --git a/custom/languages/EnglishUK/general.php b/custom/languages/EnglishUK/general.php
index 2b4a97ebee60d20763d83bcd69da2ff6c504c94e..52d6077f5cc9fa50697f1646508d43bd645d3a11 100644
--- a/custom/languages/EnglishUK/general.php
+++ b/custom/languages/EnglishUK/general.php
@@ -9,10 +9,8 @@
  *  EnglishUK Language - General terms
  */
 
-$language = array(
-    /*
-     *  General terms
-     */
+$language = [
+    // General terms
     'help' => 'Help',
     'submit' => 'Submit',
     'register' => 'Register',
@@ -70,9 +68,7 @@ $language = array(
     'link' => 'Link',
     'unlink' => 'Unlink',
 
-    /*
-     *  Contact form
-     */
+    // Contact form
     'contact' => 'Contact',
     'message' => 'Message',
     'email_address' => 'Email Address',
@@ -82,26 +78,18 @@ $language = array(
     'contact_message_email' => 'The provided email is invalid.',
     'contact_message_limit' => 'You can only send one message per hour. You can next send a message in {x} minutes.', // Don't replace {x}
 
-    /*
-     *  Navbar
-     */
+    // Navbar
     'home' => 'Home',
     'more' => 'More',
     'status' => 'Status',
 
-    /*
-     *  Homepage
-     */
+    // Homepage
     'social' => 'Social',
 
-    /*
-     *  Help dialogues
-     */
+    // Help dialogues
     'markdown_help' => 'You can format your post using Markdown. For more information, see <a href=\'https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet\' target=\'_blank\'>here</a>.',
 
-    /*
-     *  Server query
-     */
+    // Server query
     'online' => 'Online',
     'offline' => 'Offline',
     'player_count' => '{x}/{y}', // Don't replace {x} or {y}
@@ -119,15 +107,11 @@ $language = array(
     'no_players_online' => 'There are no players online.',
     'and_x_more' => 'and {x} more', // Don't replace {x}
 
-    /*
-     *  Cookie notice
-     */
+    // Cookie notice
     'cookie_notice' => 'This website uses cookies to enhance your browsing experience. By registering on our website or closing this notice you agree with their use.',
     'cookie_agree' => 'Agree',
 
-    /*
-     *  Widgets
-     */
+    // Widgets
     'statistics' => 'Statistics',
     'users_registered' => 'Users Registered',
     'latest_member' => 'Latest Member',
@@ -146,13 +130,9 @@ $language = array(
     'no_default_server' => 'There is no default server, please select one in StaffCP - Integrations - Minecraft.',
     'server_status' => 'Server Status',
 
-    /*
-     *  Privacy policy
-     */
+    // Privacy policy
     'privacy_policy' => 'Privacy Policy',
 
-    /*
-     *  Custom page redirect
-     */
+    // Custom page redirect
     'redirecting_message' => 'Redirecting...<br />If you are not redirected automatically, please click <a href="{x}" rel="nofollow noopener">here</a>.' // Don't replace {x} which is the redirect URL
-);
+];
diff --git a/custom/languages/EnglishUK/installer.php b/custom/languages/EnglishUK/installer.php
index 7933d6e46c668471d8b1b693c080c2efddf62526..b0684631a59a01a50948a96102139808182a74af 100644
--- a/custom/languages/EnglishUK/installer.php
+++ b/custom/languages/EnglishUK/installer.php
@@ -9,10 +9,8 @@
  *  EnglishUK Language - Installation
  */
 
-$language = array(
-    /*
-     *  Installation
-     */
+$language = [
+    // Installation
     'install' => 'Install',
     'pre-release' => 'pre-release',
     'installer_welcome' => 'Welcome to NamelessMC version 2.0 pre-release.',
@@ -103,4 +101,4 @@ $language = array(
     'config_not_writable' => 'The config file is not writable.',
 
     'session_doesnt_exist' => 'Unable to detect session. Sessions saving are a requirement to use Nameless. Please try again, and if the issue persists, please contact your web host for support.'
-);
+];
diff --git a/custom/languages/EnglishUK/log.php b/custom/languages/EnglishUK/log.php
index 5ab53c40d6a530db34ed305094f137f03c98823d..e38e3aedf83f5ce320dd06b1c2e4fe33f5ef9e5e 100644
--- a/custom/languages/EnglishUK/log.php
+++ b/custom/languages/EnglishUK/log.php
@@ -1,6 +1,7 @@
 <?php
-$language = array(
+
+$language = [
     //forums
     'info_forums_lock' => 'Locked',
     'info_forums_unlock' => 'Unlocked',
-);
\ No newline at end of file
+];
diff --git a/custom/languages/EnglishUK/moderator.php b/custom/languages/EnglishUK/moderator.php
index 257bb7e79804ff891e79d2dbeaf7c4d2d56c5c8a..1cf8001da226d394faa551f0f55a14df58a1609e 100644
--- a/custom/languages/EnglishUK/moderator.php
+++ b/custom/languages/EnglishUK/moderator.php
@@ -1,4 +1,5 @@
-<?php 
+<?php
+
 /*
  *  Made by Samerton
  *  https://github.com/NamelessMC/Nameless/
@@ -9,7 +10,7 @@
  *  EnglishUK Language - Moderator terms
  */
 
-$language = array(
+$language = [
     'staff_cp' => 'StaffCP',
     'overview' => 'Overview',
     
@@ -104,5 +105,4 @@ $language = array(
     // Users
     'recent_registrations' => 'Recent Registrations',
     'reset_profile_banner' => 'Reset Profile Banner'
-
-);
\ No newline at end of file
+];
diff --git a/custom/languages/EnglishUK/table.php b/custom/languages/EnglishUK/table.php
index 4fedf59a381425274c24b100dbaa4659c0bca22d..c7b4bd32a020438c5e8b533b1a22636d1db50523 100644
--- a/custom/languages/EnglishUK/table.php
+++ b/custom/languages/EnglishUK/table.php
@@ -1,4 +1,5 @@
-<?php 
+<?php
+
 /*
  *  Made by Samerton
  *  https://github.com/NamelessMC/Nameless/
@@ -9,13 +10,11 @@
  *  EnglishUK Language - Table
  */
 
-$language = array(
-    /*
-     *  Tables
-     */
+$language = [
+    // Tables
     'display_records_per_page' => 'Display _MENU_ records per page', // Don't replace "_MENU_"
     'nothing_found' => 'No results found',
     'page_x_of_y' => 'Showing page _PAGE_ of _PAGES_', // Don't replace "_PAGE_" or "_PAGES_"
     'no_records' => 'No records available',
     'filtered' => '(filtered from _MAX_ total records)' // Don't replace "_MAX_"
-);
\ No newline at end of file
+];
diff --git a/custom/languages/EnglishUK/time.php b/custom/languages/EnglishUK/time.php
index 537ae99d339fb16cc209df2d41b438301ce484d4..8caaa8cc52312404fa2c9ca92028ffb50637587e 100644
--- a/custom/languages/EnglishUK/time.php
+++ b/custom/languages/EnglishUK/time.php
@@ -1,4 +1,5 @@
-<?php 
+<?php
+
 /*
  *  Made by Samerton
  *  https://github.com/NamelessMC/Nameless/
@@ -9,10 +10,8 @@
  *  EnglishUK Language - Time
  */
 
-$language = array(
-    /*
-     *  Time
-     */
+$language = [
+    // Time
     'time' => 'time', // Placeholder, no need to translate
     'less_than_a_minute' => 'less than a minute ago',
     '1_minute' => '1 minute ago',
@@ -25,4 +24,4 @@ $language = array(
     '_months' => '{x} months ago',
     'about_1_year' => 'about 1 year ago',
     'over_x_years' => 'over {x} years ago'
-);
\ No newline at end of file
+];
diff --git a/custom/languages/EnglishUK/user.php b/custom/languages/EnglishUK/user.php
index 6d7aeb07800477539ca9dc14042ca0015b9a9fec..6c40cf78a5bd9843fe8ba8c2a6f3d84ed53ddf26 100644
--- a/custom/languages/EnglishUK/user.php
+++ b/custom/languages/EnglishUK/user.php
@@ -1,4 +1,5 @@
-<?php 
+<?php
+
 /*
  *  Made by Samerton
  *  https://github.com/NamelessMC/Nameless/
@@ -9,15 +10,11 @@
  *  EnglishUK Language - Users
  */
 
-$language = array(
-    /*
-     *  Change this for the account validation message
-     */
+$language = [
+    // Change this for the account validation message
     'validate_account_command' => 'To complete registration, please execute the command <strong>/validate {x}</strong> ingame.', // Don't replace {x}
 
-    /*
-     *  User Related
-     */
+    // User Related
     'guest' => 'Guest',
     'guests' => 'Guests',
     
@@ -222,16 +219,12 @@ $language = array(
     'latest_profile_posts' => 'Latest Profile Posts',
     'no_profile_posts' => 'No profile posts.',
 
-    /*
-     *  Infractions area
-     */
+    // Infractions area
     'you_have_been_banned' => 'You have been banned!',
     'you_have_received_a_warning' => 'You have received a warning!',
     'acknowledge' => 'Acknowledge',
 
-    /*
-     *  Hooks
-     */
+    // Hooks
     'user_x_has_registered' => '{x} has joined ' . SITE_NAME . '!',
     'user_x_has_validated' => '{x} has validated their account!',
     
@@ -250,4 +243,4 @@ $language = array(
     'discord_communication_error' => 'There was an error while communicating with the Discord Bot. Please ensure the bot is running and your Bot URL is correct.',
     'discord_unknown_error' => 'There was an unknown error while syncing Discord roles. Please contact an administrator.',
     'discord_id_help' => 'For information on where to find Discord ID\'s, please read <a href="https://support.discord.com/hc/en-us/articles/206346498-Where-can-I-find-my-User-Server-Message-ID-" target="_blank">this.</a>'
-);
+];
diff --git a/custom/languages/EnglishUK/version.php b/custom/languages/EnglishUK/version.php
index f223ac8b5b61c87b6f96d2cfc911da53b532808b..c33c4b9b9b22e9b5e8bf6c102a0b39e033c4cb18 100644
--- a/custom/languages/EnglishUK/version.php
+++ b/custom/languages/EnglishUK/version.php
@@ -1,4 +1,5 @@
-<?php 
+<?php
+
 /*
  *  Made by Samerton
  *  https://github.com/NamelessMC/Nameless/
@@ -11,4 +12,4 @@
 
 // Which version of NamelessMC is this language file updated to?
 $language_version = '2.0.0-pr8';
-$language_html = 'en';
\ No newline at end of file
+$language_html = 'en';
diff --git a/custom/languages/EnglishUS/admin.php b/custom/languages/EnglishUS/admin.php
index 6ed9b5504584917e777d4c40ee5ea1870de0b75f..4ce2eef937418e970420cd3209ce022725b4648b 100644
--- a/custom/languages/EnglishUS/admin.php
+++ b/custom/languages/EnglishUS/admin.php
@@ -9,10 +9,8 @@
  *  EnglishUS Language - Admin
  */
 
-$language = array(
-    /*
-     *  Admin Control Panel
-     */
+$language = [
+    // Admin Control Panel
     // Login
     're-authenticate' => 'Please re-authenticate',
 
@@ -746,5 +744,4 @@ $language = array(
     'discord_bot_error_unauthorized' => 'Website API key is invalid',
     'discord_bot_error_invrole' => 'Provided Role ID is invalid.',
     'discord_bot_error_hierarchy' => 'The bot cannot edit this user\'s roles.'
-
-);
+];
diff --git a/custom/languages/EnglishUS/api.php b/custom/languages/EnglishUS/api.php
index be21aa24d78cfb72d94e9414020fa908aa40c841..fd9fa54e106fb2764fdc46434b2488cda4183727 100644
--- a/custom/languages/EnglishUS/api.php
+++ b/custom/languages/EnglishUS/api.php
@@ -9,8 +9,7 @@
  *  EnglishUS Language - API
  */
 
-$language = array(
-
+$language = [
     // Errors
     'api_disabled' => 'API is disabled',
     'unknown_error' => 'Unknown error',
@@ -63,4 +62,4 @@ $language = array(
     'discord_id_set' => 'Discord ID set successfully',
     'discord_settings_updated' => 'Discord settings updated successfully',
     'discord_usernames_updated' => 'Discord usernames updated successfully'
-);
+];
diff --git a/custom/languages/EnglishUS/emails.php b/custom/languages/EnglishUS/emails.php
index fcfe21cb778c3fd7bc62a9c7263425d5c126563e..01f69225e32b2a96294bd5ec69b9517cdff6ecc8 100644
--- a/custom/languages/EnglishUS/emails.php
+++ b/custom/languages/EnglishUS/emails.php
@@ -9,8 +9,7 @@
  *  EnglishUS Language - Emails
  */
 
-$language = array(
-
+$language = [
     // General Options
     'greeting' => 'Hi,',
     'thanks' => 'Thanks,',
@@ -26,4 +25,4 @@ $language = array(
     // Forum Topic Replies
     'forum_topic_reply_subject' => '{x} has replied to {y}', // Don't remove {x} or {y}
     'forum_topic_reply_message' => '{x} has replied to a topic you follow. Content: {z}' // Don't remove {x} or {z}
-);
+];
diff --git a/custom/languages/EnglishUS/errors.php b/custom/languages/EnglishUS/errors.php
index d3d90a3d0810d9e38d1779bd99cb3109007692cb..0041dc1aceef6b79f18a88c731f85e87b43ce78c 100644
--- a/custom/languages/EnglishUS/errors.php
+++ b/custom/languages/EnglishUS/errors.php
@@ -9,10 +9,8 @@
  *  EnglishUS Language - Errors
  */
 
-$language = array(
-    /*
-     *  Errors
-     */
+$language = [
+    // Errors
     '404_title' => 'Sorry!',
     '404_content' => 'We couldn\'t find that page.',
     '404_back' => 'Go back',
@@ -31,4 +29,4 @@ $language = array(
     'fatal_error_message_admin' => 'Sorry, but something went wrong while loading the page. Error details:',
     'in_file' => 'in file <strong>{x}</strong>', // Don't replace {x}
     'on_line' => 'on line <strong>{x}</strong>' // Don't replace {x}
-);
+];
diff --git a/custom/languages/EnglishUS/general.php b/custom/languages/EnglishUS/general.php
index a402b4cb5b8d9ad7ca50a573f698fa05f70d2d15..14dff90f8e43c47ef931c140168be8740d9583d3 100644
--- a/custom/languages/EnglishUS/general.php
+++ b/custom/languages/EnglishUS/general.php
@@ -9,10 +9,8 @@
  *  EnglishUS Language - General terms
  */
 
-$language = array(
-    /*
-     *  General terms
-     */
+$language = [
+    // General terms
     'help' => 'Help',
     'submit' => 'Submit',
     'register' => 'Register',
@@ -70,9 +68,7 @@ $language = array(
     'link' => 'Link',
     'unlink' => 'Unlink',
     
-    /*
-     *  Contact form
-     */
+    // Contact form
     'contact' => 'Contact',
     'message' => 'Message',
     'email_address' => 'Email Address',
@@ -82,28 +78,18 @@ $language = array(
     'contact_message_sent' => 'Message sent successfully.',
     'contact_message_limit' => 'You can only send one message per hour. You can next send a message in {x} minutes.', // Don't replace {x}
 
-
-    /*
-     *  Navbar
-     */
+    // Navbar
     'home' => 'Home',
     'more' => 'More',
     'status' => 'Status',
 
-    /*
-     *  Homepage
-     */
+    // Homepage
     'social' => 'Social',
 
-
-    /*
-     *  Help dialogues
-     */
+    // Help dialogues
     'markdown_help' => 'You can format your post using Markdown. For more information, see <a href=\'https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet\' target=\'_blank\'>here</a>.',
 
-    /*
-     *  Server query
-     */
+    // Server query
     'online' => 'Online',
     'offline' => 'Offline',
     'player_count' => '{x}/{y}', // Don't replace {x} or {y}
@@ -121,15 +107,11 @@ $language = array(
     'no_players_online' => 'There are no players online.',
     'and_x_more' => 'and {x} more', // Don't replace {x}
 
-    /*
-     *  Cookie notice
-     */
+    // Cookie notice
     'cookie_notice' => 'This website uses cookies to enhance your browsing experience. By registering on our website or closing this notice you agree with their use.',
     'cookie_agree' => 'Agree',
 
-    /*
-     *  Widgets
-     */
+    // Widgets
     'statistics' => 'Statistics',
     'users_registered' => 'Users Registered',
     'latest_member' => 'Latest Member',
@@ -148,13 +130,9 @@ $language = array(
     'no_default_server' => 'There is no default server, please select one in StaffCP - Integrations - Minecraft.',
     'server_status' => 'Server Status',
 
-    /*
-     *  Privacy policy
-     */
+    // Privacy policy
     'privacy_policy' => 'Privacy Policy',
 
-    /*
-     *  Custom page redirect
-     */
+    // Custom page redirect
     'redirecting_message' => 'Redirecting...<br />If you are not redirected automatically, please click <a href="{x}" rel="nofollow noopener">here</a>.' // Don't replace {x} which is the redirect URL
-);
+];
diff --git a/custom/languages/EnglishUS/installer.php b/custom/languages/EnglishUS/installer.php
index c23387ac4fd1ca44d7cd36a221612e1b9c1627cd..f0bdfd4989c292aca1544c6d4aa94e19123c8de0 100644
--- a/custom/languages/EnglishUS/installer.php
+++ b/custom/languages/EnglishUS/installer.php
@@ -9,10 +9,8 @@
  *  EnglishUS Language - Installation
  */
 
-$language = array(
-    /*
-     *  Installation
-     */
+$language = [
+    // Installation
     'install' => 'Install',
     'pre-release' => 'pre-release',
     'installer_welcome' => 'Welcome to NamelessMC version 2.0 pre-release.',
@@ -103,4 +101,4 @@ $language = array(
     'config_not_writable' => 'The config file is not writable.',
 
     'session_doesnt_exist' => 'Unable to detect session. Sessions saving are a requirement to use Nameless. Please try again, and if the issue persists, please contact your web host for support.'
-);
+];
diff --git a/custom/languages/EnglishUS/log.php b/custom/languages/EnglishUS/log.php
index 5ab53c40d6a530db34ed305094f137f03c98823d..e38e3aedf83f5ce320dd06b1c2e4fe33f5ef9e5e 100644
--- a/custom/languages/EnglishUS/log.php
+++ b/custom/languages/EnglishUS/log.php
@@ -1,6 +1,7 @@
 <?php
-$language = array(
+
+$language = [
     //forums
     'info_forums_lock' => 'Locked',
     'info_forums_unlock' => 'Unlocked',
-);
\ No newline at end of file
+];
diff --git a/custom/languages/EnglishUS/moderator.php b/custom/languages/EnglishUS/moderator.php
index ba918809976b7752f76a2ebfe484ca84727414cd..b34cdc6d55a0b104d7a54697458ce48f0d406a49 100644
--- a/custom/languages/EnglishUS/moderator.php
+++ b/custom/languages/EnglishUS/moderator.php
@@ -9,7 +9,7 @@
  *  EnglishUS Language - Moderator terms
  */
 
-$language = array(
+$language = [
     'mod_cp' => 'ModCP',
     'staff_cp' => 'StaffCP',
     'overview' => 'Overview',
@@ -104,5 +104,4 @@ $language = array(
     // Users
     'recent_registrations' => 'Recent Registrations',
     'reset_profile_banner' => 'Reset Profile Banner'
-
-);
+];
diff --git a/custom/languages/EnglishUS/table.php b/custom/languages/EnglishUS/table.php
index 4cd51c55f5a6e727bbb71965bde51951af12059d..f4013c6bec08926ea4e6b7a41c3d476750ef8ef7 100644
--- a/custom/languages/EnglishUS/table.php
+++ b/custom/languages/EnglishUS/table.php
@@ -9,13 +9,11 @@
  *  EnglishUS Language - Table
  */
 
-$language = array(
-    /*
-     *  Tables
-     */
+$language = [
+    // Tables
     'display_records_per_page' => 'Display _MENU_ records per page', // Don't replace "_MENU_"
     'nothing_found' => 'No results found',
     'page_x_of_y' => 'Showing page _PAGE_ of _PAGES_', // Don't replace "_PAGE_" or "_PAGES_"
     'no_records' => 'No records available',
     'filtered' => '(filtered from _MAX_ total records)' // Don't replace "_MAX_"
-);
+];
diff --git a/custom/languages/EnglishUS/time.php b/custom/languages/EnglishUS/time.php
index 64a3cd6cc44746ee2edcb63399282aff34c0e506..6fd1db76f3829cd9cf952403681ae671fbaaf4eb 100644
--- a/custom/languages/EnglishUS/time.php
+++ b/custom/languages/EnglishUS/time.php
@@ -9,10 +9,8 @@
  *  EnglishUS Language - Time
  */
 
-$language = array(
-    /*
-     *  Time
-     */
+$language = [
+    // Time
     'time' => 'time', // Placeholder, no need to translate
     'seconds_short' => 's', // Shortened "seconds", eg "s"
     'less_than_a_minute' => 'less than a minute ago',
@@ -26,4 +24,4 @@ $language = array(
     '_months' => '{x} months ago',
     'about_1_year' => 'about 1 year ago',
     'over_x_years' => 'over {x} years ago'
-);
+];
diff --git a/custom/languages/EnglishUS/user.php b/custom/languages/EnglishUS/user.php
index 9885ba7df4b5d87c1183c481875103b756c2d6dc..f42383d4a65ae6c5645f7bccde83c0bbe17e8ea8 100644
--- a/custom/languages/EnglishUS/user.php
+++ b/custom/languages/EnglishUS/user.php
@@ -9,15 +9,11 @@
  *  EnglishUS Language - Users
  */
 
-$language = array(
-    /*
-     *  Change this for the account validation message
-     */
+$language = [
+    // Change this for the account validation message
     'validate_account_command' => 'To complete registration, please execute the command <strong>/validate {x}</strong> ingame.', // Don't replace {x}
 
-    /*
-     *  User Related
-     */
+    // User Related
     'guest' => 'Guest',
     'guests' => 'Guests',
 
@@ -224,16 +220,12 @@ $language = array(
     'latest_profile_posts' => 'Latest Profile Posts',
     'no_profile_posts' => 'No profile posts.',
 
-    /*
-     *  Infractions area
-     */
+    // Infractions area
     'you_have_been_banned' => 'You have been banned!',
     'you_have_received_a_warning' => 'You have received a warning!',
     'acknowledge' => 'Acknowledge',
 
-    /*
-     *  Hooks
-     */
+    // Hooks
     'user_x_has_registered' => '{x} has joined ' . SITE_NAME . '!',
     'user_x_has_validated' => '{x} has validated their account!',
 
@@ -252,4 +244,4 @@ $language = array(
     'discord_communication_error' => 'There was an error while communicating with the Discord Bot. Please ensure the bot is running and your Bot URL is correct.',
     'discord_unknown_error' => 'There was an unknown error while syncing Discord roles. Please contact an administrator.',
     'discord_id_help' => 'For information on where to find Discord ID\'s, please read <a href="https://support.discord.com/hc/en-us/articles/206346498-Where-can-I-find-my-User-Server-Message-ID-" target="_blank">this.</a>'
-);
+];
diff --git a/custom/languages/French/admin.php b/custom/languages/French/admin.php
index ae3bef8cb8aa13cd8a70a95b8a30d7cb54dcd302..5b42daa4c85a9d03e3fd6b83fb55b11227da999e 100644
--- a/custom/languages/French/admin.php
+++ b/custom/languages/French/admin.php
@@ -9,10 +9,8 @@
  *  French Language - Users
  */
 
-$language = array(
-    /*
-     *  Admin Control Panel
-     */
+$language = [
+    // Admin Control Panel
     // Login
     're-authenticate' => 'Veuillez vous ré-authentifier',
 
@@ -685,4 +683,4 @@ Vous devriez configurer votre groupe par défaut pour avoir des autorisations li
     'discord_bot_error_unauthorized' => 'Website API key is invalid',
     'discord_bot_error_invrole' => 'Provided Role ID is invalid.',
     'discord_bot_error_hierarchy' => 'The bot cannot edit this user\'s roles.'
-);
+];
diff --git a/custom/languages/French/api.php b/custom/languages/French/api.php
index 4e02afe78d1d5a276d9a137cebdced93e7b9b403..67bcb62e777498a1cc55c0c81c4ed943e3a4464b 100644
--- a/custom/languages/French/api.php
+++ b/custom/languages/French/api.php
@@ -9,8 +9,7 @@
  *  French Language - Users
  */
 
-$language = array(
-
+$language = [
     // Errors
     'api_disabled' => 'API is disabled',
     'unknown_error' => 'Unknown error',
@@ -56,4 +55,4 @@ $language = array(
     'server_info_updated' => 'Server info updated successfully',
     'discord_settings_updated' => 'Discord settings updated successfully',
     'discord_usernames_updated' => 'Discord usernames updated successfully'
-);
+];
diff --git a/custom/languages/French/emails.php b/custom/languages/French/emails.php
index 0ab3f76e91bd17f6ca22f10f10204eb3b9a40f9c..2efbf60d41fa24357282307313fffa59613350db 100644
--- a/custom/languages/French/emails.php
+++ b/custom/languages/French/emails.php
@@ -9,8 +9,7 @@
  *  EnglishUK Language - Emails
  */
 
-$language = array(
-
+$language = [
     // General Options
     'greeting' => 'Hi,',
     'thanks' => 'Thanks,',
@@ -26,4 +25,4 @@ $language = array(
     // Forum Topic Replies
     'forum_topic_reply_subject' => '{x} has replied to {y}', // Don't remove {x} or {y}
     'forum_topic_reply_message' => '{x} has replied to a topic you follow. Content: {z}' // Don't remove {x} or {z}
-);
+];
diff --git a/custom/languages/French/errors.php b/custom/languages/French/errors.php
index feec03135b94465430fef789cedd0470dc6b7446..4338bffee4e56ce9549cecdd4d063581bf3e1727 100644
--- a/custom/languages/French/errors.php
+++ b/custom/languages/French/errors.php
@@ -9,10 +9,8 @@
  *  French Language - Users
  */
 
-$language = array(
-    /*
-     *  Errors
-     */
+$language = [
+    // Errors
     '404_title' => 'Sorry!',
     '404_content' => 'We couldn\'t find that page.',
     '404_back' => 'Go back',
@@ -31,4 +29,4 @@ $language = array(
     'fatal_error_message_admin' => 'Sorry, but something went wrong while loading the page. Error details:',
     'in_file' => 'in file <strong>{x}</strong>', // Don't replace {x}
     'on_line' => 'on line <strong>{x}</strong>' // Don't replace {x}
-);
+];
diff --git a/custom/languages/French/general.php b/custom/languages/French/general.php
index b2c3cac2f4373f23e4bfd34914562cac4c71b32d..1f06fea0fd5e7bebf78bbfe022a46bb457e71caa 100644
--- a/custom/languages/French/general.php
+++ b/custom/languages/French/general.php
@@ -9,10 +9,8 @@
  *  French Language - Users
  */
 
-$language = array(
-    /*
-     *  General terms
-     */
+$language = [
+    // General terms
     'submit' => 'Soumettre',
     'register' => 'Enregistrer',
     'already_registered' => 'Déjà enregistré?',
@@ -67,9 +65,7 @@ $language = array(
     'link' => 'Link',
     'unlink' => 'Unlink',
     
-    /*
-     *  Contact form
-     */
+    // Contact form
     'contact' => 'Contact',
     'message' => 'Message',
     'email_address' => 'Adresse mail',
@@ -79,28 +75,18 @@ $language = array(
     'contact_message_sent' => 'Message envoyé avec succès.',
     'contact_message_limit' => 'Vous ne pouvez envoyer qu’un message par heure. Vous pourrez ensuite envoyer un message dans {x} minutes.', // Don't replace {x}
 
-
-    /*
-     *  Navbar
-     */
+    // Navbar
     'home' => 'Accueil',
     'more' => 'Plus',
     'status' => 'Statut',
 
-    /*
-     *  Homepage
-     */
+    // Homepage
     'social' => 'Social',
 
-
-    /*
-     *  Help dialogues
-     */
+    // Help dialogues
     'markdown_help' => 'Vous pouvez formater votre message à l\'aide de Markdown. Pour plus d\'informations, voir <a href=\'https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet\' target=\'_blank\'>ici</a>.',
 
-    /*
-     *  Server query
-     */
+    // Server query
     'online' => 'En ligne',
     'offline' => 'Hors ligne',
     'player_count' => '{x}/{y}', // Don't replace {x} or {y}
@@ -118,15 +104,11 @@ $language = array(
     'no_players_online' => 'Il n’y a pas de joueurs en ligne.',
     'and_x_more' => 'et {x} plus', // Don't replace {x}
 
-    /*
-     *  Cookie notice
-     */
+    // Cookie notice
     'cookie_notice' => 'Ce site web utilise des cookies pour améliorer votre expérience de navigation. En vous inscrivant sur notre site web ou en fermant le présent avis, vous acceptez leur utilisation.',
     'cookie_agree' => 'Accepter',
 
-    /*
-     *  Widgets
-     */
+    // Widgets
     'statistics' => 'Statistiques',
     'users_registered' => 'Utilisateurs enregistrés',
     'latest_member' => 'Dernier membre',
@@ -143,13 +125,9 @@ $language = array(
     'online_guests' => 'Invités en ligne',
     'total_online' => 'Total en ligne', // this is Online Users + Online Guests
 
-    /*
-     *  Privacy policy
-     */
+    // Privacy policy
     'privacy_policy' => 'Politique de confidentialité',
 
-    /*
-     *  Custom page redirect
-     */
+    // Custom page redirect
     'redirecting_message' => 'Redirection... Si vous n\'êtes pas redirigé automatiquement, veuillez cliquer sur <a href="{x}" rel="nofollow noopener">ici</a>' // Don't replace {x} which is the redirect URL
-);
+];
diff --git a/custom/languages/French/installer.php b/custom/languages/French/installer.php
index c89c78f096fce1fa90440a5fb7ea07b2896692ab..835bdc88ef8c1b3e07d1f69b10ca9ca69c4b310c 100644
--- a/custom/languages/French/installer.php
+++ b/custom/languages/French/installer.php
@@ -9,10 +9,8 @@
  *  French Language - Users
  */
 
-$language = array(
-    /*
-     *  Installation
-     */
+$language = [
+    // Installation
     'install' => 'Installer',
     'pre-release' => 'pre-release',
     'installer_welcome' => 'Bienvenue sur NamelessMC sous la version 2.0 pre-release.',
@@ -84,4 +82,4 @@ $language = array(
     'support_message' => 'Si vous avez besoin d’aide, consultez notre site Web <a href="https://namelessmc.com" target="_blank">ici</a>, ou vous pouvez également consulter notre serveur <a href="https://discord.gg/9vk93VR" target="_blank">Discord</a> ou notre dépôt <a href="https://github.com/NamelessMC/Nameless/" target="_blank">GitHub</a>.',
     'credits' => 'Crédits',
     'credits_message' => 'Un grand merci à tous les contributeurs <a href="https://github.com/NamelessMC/Nameless/graphs/contributors" target="_blank">NamelessMC</a> depuis 2014'
-);
+];
diff --git a/custom/languages/French/log.php b/custom/languages/French/log.php
index 5ab53c40d6a530db34ed305094f137f03c98823d..e38e3aedf83f5ce320dd06b1c2e4fe33f5ef9e5e 100644
--- a/custom/languages/French/log.php
+++ b/custom/languages/French/log.php
@@ -1,6 +1,7 @@
 <?php
-$language = array(
+
+$language = [
     //forums
     'info_forums_lock' => 'Locked',
     'info_forums_unlock' => 'Unlocked',
-);
\ No newline at end of file
+];
diff --git a/custom/languages/French/moderator.php b/custom/languages/French/moderator.php
index 032af9f1b1851aab029407db2c1a24003ee2cafd..60418133400b4c2b77a840ec47ed9172620a78b0 100644
--- a/custom/languages/French/moderator.php
+++ b/custom/languages/French/moderator.php
@@ -9,7 +9,7 @@
  *  French Language - Users
  */
 
-$language = array(
+$language = [
     'mod_cp' => 'Mod Panel',
     'staff_cp' => 'Admin Panel',
     'overview' => 'Vue d\'ensemble',
@@ -104,5 +104,4 @@ $language = array(
     // Users
     'recent_registrations' => 'Enregistrements récents',
     'reset_profile_banner' => 'Réinitialiser la bannière du profil'
-
-);
+];
diff --git a/custom/languages/French/table.php b/custom/languages/French/table.php
index 0deea217d5c34db0c2c9439bb528f614939c4f7f..97c92d5c43e8f8dc64494bd8413d3be7a726ccef 100644
--- a/custom/languages/French/table.php
+++ b/custom/languages/French/table.php
@@ -9,13 +9,11 @@
  *  French Language - Users
  */
 
-$language = array(
-    /*
-     *  Tables
-     */
+$language = [
+    // Tables
     'display_records_per_page' => 'Afficher _MENU_ enregistrements par page', // Don't replace "_MENU_"
     'nothing_found' => 'Aucun résultat trouvé',
     'page_x_of_y' => 'Afficher la page _PAGE_ sur _PAGES_', // Don't replace "_PAGE_" or "_PAGES_"
     'no_records' => 'Pas d\'enregistrements disponible',
     'filtered' => '(fFlitré sur _MAX_ enregistrements au total)' // Don't replace "_MAX_"
-);
+];
diff --git a/custom/languages/French/time.php b/custom/languages/French/time.php
index 7e18ec72277a96ca5f3c148e9191de771d61b07d..4f3f7e2ac514685be70474a84ab4363ae5030912 100644
--- a/custom/languages/French/time.php
+++ b/custom/languages/French/time.php
@@ -9,10 +9,8 @@
  *  French Language - Users
  */
 
-$language = array(
-    /*
-     *  Time
-     */
+$language = [
+    // Time
     'time' => 'time', // Placeholder, no need to translate
     'seconds_short' => 's', // Shortened "seconds", eg "s"
     'less_than_a_minute' => 'il y a moins d\'une minute',
@@ -26,4 +24,4 @@ $language = array(
     '_months' => 'il y a {x} mois',
     'about_1_year' => 'il y a 1 ans',
     'over_x_years' => 'il y a {x} ans'
-);
+];
diff --git a/custom/languages/French/user.php b/custom/languages/French/user.php
index 4fbedc03d556be5372c93db80ace9c6004058935..fc4754870727b1ac0289495bcc68414de1f0f209 100644
--- a/custom/languages/French/user.php
+++ b/custom/languages/French/user.php
@@ -9,15 +9,11 @@
  *  French Language - Users
  */
 
-$language = array(
-    /*
-     *  Change this for the account validation message
-     */
+$language = [
+    // Change this for the account validation message
     'validate_account_command' => 'Pour compléter l\'enregistrement, veuillez exécuter cette command <strong>/validate {x}</strong> en-jeux.', // Don't replace {x}
 
-    /*
-     *  User Related
-     */
+    // User Related
     'guest' => 'Invité',
     'guests' => 'Invités',
 
@@ -221,25 +217,18 @@ $language = array(
     'one_or_more_users_blocked' => 'Vous ne pouvez pas envoyer de messages privés à au moins un membre de la conversation.',
     'messages' => 'Messages',
 
-    /*
-     *  Infractions area
-     */
+    // Infractions area
     'you_have_been_banned' => 'Vous avez été banni!',
     'you_have_received_a_warning' => 'Vous avez reçu un avertissement!',
     'acknowledge' => 'Accusé de réception',
 
-
-    /*
-     *  Emails
-     */
+    // Emails
     'email_greeting' => 'Hey,',
     'email_message' => 'Merci de vous être inscrit! Pour compléter votre inscription, veuillez cliquer sur le lien suivant:',
     'forgot_password_email_message' => 'Pour réinitialiser votre mot de passe, cliquez sur le lien suivant. Si vous ne l’avez pas demandé vous-même, vous pouvez supprimer cet e-mail en toute sécurité.',
     'email_thanks' => 'Merci,',
 
-    /*
-     *  Hooks
-     */
+    // Hooks
     'user_x_has_registered' => '{x} a rejoint ' . SITE_NAME . '!',
     'user_x_has_validated' => '{x} has validated their account!',
 
@@ -258,4 +247,4 @@ $language = array(
     'discord_communication_error' => 'There was an error while communicating with the Discord Bot. Please ensure the bot is running and your Bot URL is correct.',
     'discord_unknown_error' => 'There was an unknown error while syncing Discord roles. Please contact an administrator.',
     'discord_id_help' => 'For information on where to find Discord ID\'s, please read <a href="https://support.discord.com/hc/en-us/articles/206346498-Where-can-I-find-my-User-Server-Message-ID-" target="_blank">this.</a>'
-);
+];
diff --git a/custom/languages/German/admin.php b/custom/languages/German/admin.php
index ff49f70f3607595bffd4e548747b2ac7c1267ffc..45cfbb6c7a8a1cabc079e7fce7390ad9c47959ef 100644
--- a/custom/languages/German/admin.php
+++ b/custom/languages/German/admin.php
@@ -10,10 +10,8 @@
  *  German Language - Admin
  */
 
-$language = array(
-    /*
-     *  Admin Control Panel
-     */
+$language = [
+    // Admin Control Panel
     // Login
     're-authenticate' => 'Bitte melde dich erneut an!',
 
@@ -743,5 +741,4 @@ $language = array(
     'discord_bot_error_unauthorized' => 'Der Website-API-Schlüssel ist ungültig',
     'discord_bot_error_invrole' => 'Die angegebene Rollen-ID ist ungültig.',
     'discord_bot_error_hierarchy' => 'Der Bot kann die Rolle dieses Benutzers nicht bearbeiten.'
-
-);
+];
diff --git a/custom/languages/German/api.php b/custom/languages/German/api.php
index 50cb05e01017bdd9bc48c1e18b6a7837e5f058c4..7c3305e307bd78cc9b383742ac2e203511f3028c 100644
--- a/custom/languages/German/api.php
+++ b/custom/languages/German/api.php
@@ -10,8 +10,7 @@
  *  German Language - API
  */
 
-$language = array(
-
+$language = [
     // Errors
     'api_disabled' => 'API ist deaktiviert',
     'unknown_error' => 'Unbekannter Fehler',
@@ -65,4 +64,4 @@ $language = array(
     'discord_id_set' => 'Discord ID erfolgreich eingestellt',
     'discord_settings_updated' => 'Discord Einstellungen erfolgreich aktualisiert',
     'discord_usernames_updated' => 'Discord-Benutzernamen wurden erfolgreich aktualisiert'
-);
+];
diff --git a/custom/languages/German/emails.php b/custom/languages/German/emails.php
index 0f41bd94403b67d1e47c93534317aa635bf4931e..b55a4a49bfcb109a97a952cc725ad37b5a081f7d 100644
--- a/custom/languages/German/emails.php
+++ b/custom/languages/German/emails.php
@@ -10,8 +10,7 @@
  *  German Language - Emails
  */
 
-$language = array(
-
+$language = [
     // General Options
     'greeting' => 'Hey,',
     'thanks' => 'Liebe Grüße,',
@@ -27,4 +26,4 @@ $language = array(
     // Forum Topic Replies
     'forum_topic_reply_subject' => '{x} hat geantwortet {y}', // Don't remove {x} or {y}
     'forum_topic_reply_message' => '{x} hat auf ein Thema geantwortet, dem Sie folgen. Content: {z}' // Don't remove {x} or {z}
-);
+];
diff --git a/custom/languages/German/errors.php b/custom/languages/German/errors.php
index fcca6213b8215bd7126c0c5706411df102157d9c..eace8135865e57a54c07e51806503d398382e94e 100644
--- a/custom/languages/German/errors.php
+++ b/custom/languages/German/errors.php
@@ -10,10 +10,8 @@
  *  German Language - Errors
  */
 
-$language = array(
-    /*
-     *  Errors
-     */
+$language = [
+    // Errors
     '404_title' => 'Entschuldige!',
     '404_content' => 'Wir konnten diese Seite nicht finden.</br>Vielleicht wurde sie aufgegessen :0',
     '404_back' => 'Zurück',
@@ -32,4 +30,4 @@ $language = array(
     'fatal_error_message_admin' => 'Entschuldigung, aber beim Laden der Seite ist etwas schief gelaufen. Fehlerdetails:',
     'in_file' => 'In File <strong>{x}</strong>', // Don't replace {x}
     'on_line' => 'In Zeile <strong>{x}</strong>' // Don't replace {x}
-);
+];
diff --git a/custom/languages/German/general.php b/custom/languages/German/general.php
index 79c87f1bd64d934a9a57b7036cbc63fe435a6e1e..5121f0683b3584815ee30af09402b2f3e2bca926 100644
--- a/custom/languages/German/general.php
+++ b/custom/languages/German/general.php
@@ -10,10 +10,8 @@
  *  German Language - General terms
  */
 
-$language = array(
-    /*
-     *  General terms
-     */
+$language = [
+    // General terms
     'help' => 'Hilfe',
     'submit' => 'Senden',
     'register' => 'Registrieren',
@@ -71,9 +69,7 @@ $language = array(
     'link' => 'Link',
     'unlink' => 'Verknüpfung aufheben',
 
-    /*
-     *  Contact form
-     */
+    // Contact form
     'contact' => 'Kontakt',
     'message' => 'Nachricht',
     'email_address' => 'Email Address',
@@ -83,27 +79,18 @@ $language = array(
     'contact_message_sent' => 'Nachricht erfolgreich gesendet.',
     'contact_message_limit' => 'Sie können nur eine Nachricht pro Stunde senden. Sie können als nächstes eine Nachricht in {x} Minuten senden.', // Don't replace {x}
 
-    /*
-     *  Navbar
-     */
+    // Navbar
     'home' => 'Startseite',
     'more' => 'Mehr',
     'status' => 'Status',
 
-    /*
-     *  Homepage
-     */
+    // Homepage
     'social' => 'Soziale Medien',
 
-
-    /*
-     *  Help dialogues
-     */
+    // Help dialogues
     'markdown_help' => 'Du kannst deine Beiträge formatieren. <a href=\'https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet\' target=\'_blank\'>Mehr Informationen</a>.',
 
-    /*
-     *  Server query
-     */
+    // Server query
     'online' => 'Online',
     'offline' => 'Offline',
     'player_count' => '{x}/{y}', // Don't replace {x} or {y}
@@ -121,15 +108,11 @@ $language = array(
     'no_players_online' => 'Es sind keine Spieler Online.',
     'and_x_more' => 'and {x} more', // Don't replace {x}
 
-    /*
-     *  Cookie notice
-     */
+    // Cookie notice
     'cookie_notice' => 'Diese Website verwendet Cookies, um Ihre Browser-Erfahrung zu verbessern. Mit der Registrierung auf unserer Website oder dem Schließen dieses Hinweises stimmen Sie der Verwendung zu.',
     'cookie_agree' => 'Akzeptieren',
 
-    /*
-     *  Widgets
-     */
+    // Widgets
     'statistics' => 'Statistiken',
     'users_registered' => 'Benutzer registriert',
     'latest_member' => 'Letztes Mitglied',
@@ -148,13 +131,9 @@ $language = array(
     'no_default_server' => 'Es gibt keinen Standardserver, bitte wählen Sie einen aus StaffCP - Integrations - Minecraft.',
     'server_status' => 'Server Status',
 
-    /*
-     *  Privacy policy
-     */
+    // Privacy policy
     'privacy_policy' => 'Datenschutzerklärung',
 
-    /*
-     *  Custom page redirect
-     */
+    // Custom page redirect
     'redirecting_message' => 'Umleiten...<br />Wenn Sie nicht automatisch umgeleitet werden, klicken Sie bitte auf <a href="{x}" rel="nofollow noopener">Hier</a>.' // Don't replace {x} which is the redirect URL
-);
+];
diff --git a/custom/languages/German/installer.php b/custom/languages/German/installer.php
index e6468209ee393838371e9704048f5ea9f4592f8f..54b0eae0b138a9818040eff670a305e9cdf7a718 100644
--- a/custom/languages/German/installer.php
+++ b/custom/languages/German/installer.php
@@ -10,10 +10,8 @@
  *  German Language - Installation
  */
 
-$language = array(
-    /*
-     *  Installation
-     */
+$language = [
+    // Installation
     'install' => 'Installieren',
     'pre-release' => 'Vorab Version (Pre-Release)',
     'installer_welcome' => 'Willkommen bei NamelessMC Version 2.0 Vorab Version (Pre-Release).',
@@ -104,4 +102,4 @@ $language = array(
     'config_not_writable' => 'Die Konfigurationsdatei ist nicht beschreibbar.',
 
     'session_doesnt_exist' => 'Sitzung kann nicht erkannt werden. Das Speichern von Sitzungen ist eine Voraussetzung für die Verwendung von Nameless. Bitte versuchen Sie es erneut. Wenn das Problem weiterhin besteht, wenden Sie sich an Ihren Webhost, um Unterstützung zu erhalten.'
-);
+];
diff --git a/custom/languages/German/log.php b/custom/languages/German/log.php
index 965a8f6c0d7d0ed694f3a6618a7aa8e61a0c95d1..9d7a43c1688640778dc779f56b2309dc1036ae63 100644
--- a/custom/languages/German/log.php
+++ b/custom/languages/German/log.php
@@ -9,8 +9,8 @@
  *
  *  German Language - Forum
  */
-$language = array(
+$language = [
     //forums
     'info_forums_lock' => 'Gesperrt',
     'info_forums_unlock' => 'Entsperrt',
-);
+];
diff --git a/custom/languages/German/moderator.php b/custom/languages/German/moderator.php
index d4b66ac16172de38fbbe55dbd1a0b2c2e27179c7..f8e640ef754f13958c81c31acfe2ffcca91b0733 100644
--- a/custom/languages/German/moderator.php
+++ b/custom/languages/German/moderator.php
@@ -10,7 +10,7 @@
  *  German Language - Moderator terms
  */
 
-$language = array(
+$language = [
     'mod_cp' => 'ModCP',
     'staff_cp' => 'StaffCP',
     'overview' => 'Überblick',
@@ -105,5 +105,4 @@ $language = array(
     // Users
     'recent_registrations' => 'Aktuelle Registrierungen',
     'reset_profile_banner' => 'Profilbanner zurücksetzen'
-
-);
+];
diff --git a/custom/languages/German/table.php b/custom/languages/German/table.php
index 895eff297eed5972706c2a6f36072e431ec07042..67470eb0d26db6e165c422308732f009bf85a632 100644
--- a/custom/languages/German/table.php
+++ b/custom/languages/German/table.php
@@ -10,13 +10,11 @@
  *  German Language - Table
  */
 
-$language = array(
-    /*
-     *  Tables
-     */
+$language = [
+    // Tables
     'display_records_per_page' => 'Zeige _MENU_ Einträge pro Seite', // Don't replace "_MENU_"
     'nothing_found' => 'Keine Einträge gefunden',
     'page_x_of_y' => 'Zeige Seite _PAGE_ von _PAGES_', // Don't replace "_PAGE_" or "_PAGES_"
     'no_records' => 'Keine Aufzeichnungen verfügbar.',
     'filtered' => '(gefiltert aus _MAX_ Einträgen)' // Don't replace "_MAX_"
-);
+];
diff --git a/custom/languages/German/time.php b/custom/languages/German/time.php
index a45181a4cb6a06b45cd44ef37e009b9fadf76361..7340ca458b4179e0aedc887f792e66f75892da84 100644
--- a/custom/languages/German/time.php
+++ b/custom/languages/German/time.php
@@ -10,10 +10,8 @@
  *  German Language - Time
  */
 
-$language = array(
-    /*
-     *  Time
-     */
+$language = [
+    // Time
     'time' => 'time', // Placeholder, no need to translate
     'seconds_short' => 's', // Shortened "seconds", eg "s"
     'less_than_a_minute' => 'weniger als eine Minute her',
@@ -27,4 +25,4 @@ $language = array(
     '_months' => '{x} Monate her',
     'about_1_year' => 'über 1 Jahr her',
     'over_x_years' => 'über {x} Jahre her'
-);
+];
diff --git a/custom/languages/German/user.php b/custom/languages/German/user.php
index 12e10cfe4d929a5d0af61ea8b493e05f3c798b28..80f0d822327019bef5d0a860628b2d42655a0b74 100644
--- a/custom/languages/German/user.php
+++ b/custom/languages/German/user.php
@@ -10,15 +10,11 @@
  *  German Language - Users
  */
 
-$language = array(
-    /*
-     *  Change this for the account validation message
-     */
+$language = [
+    // Change this for the account validation message
     'validate_account_command' => 'Um die Registrierung abzuschließen, führe bitte den Befehl <strong>/validate {x}</strong> ingame aus.', // Don't replace {x}
 
-    /*
-     *  User Related
-     */
+    // User Related
     'guest' => 'Gast',
     'guests' => 'Gäste',
 
@@ -225,16 +221,12 @@ $language = array(
     'latest_profile_posts' => 'Neueste Profilbeiträge',
     'no_profile_posts' => 'Keine Profilbeiträge.',
 
-    /*
-     *  Infractions area
-     */
+    // Infractions area
     'you_have_been_banned' => 'Du wurdest Gebannt!',
     'you_have_received_a_warning' => 'Du hast eine Verwarnung erhalten!',
     'acknowledge' => 'Bestätigen',
 
-    /*
-     *  Hooks
-     */
+    // Hooks
     'user_x_has_registered' => '{x} ist beigetreten ' . SITE_NAME . '!',
     'user_x_has_validated' => '{x} hat das Konto validiert!',
 
@@ -253,4 +245,4 @@ $language = array(
     'discord_communication_error' => 'Bei der Kommunikation mit dem Discord Bot ist ein Fehler aufgetreten. Bitte stellen Sie sicher, dass der Bot ausgeführt wird und Ihre Bot-URL korrekt ist.',
     'discord_unknown_error' => 'Beim Synchronisieren der Discord-Rollen ist ein unbekannter Fehler aufgetreten. Bitte wenden Sie sich an einen Administrator.',
     'discord_id_help' => 'Informationen dazu, wo Discord IDs zu finden sind, finden Sie unter <a href="https://support.discord.com/hc/en-us/articles/206346498-Where-can-I-find-my-User-Server-Message-ID-" target="_blank">this.</a>'
-);
+];
diff --git a/custom/languages/Greek/admin.php b/custom/languages/Greek/admin.php
index db92b6ea0512031d4979cf95882e36328378b69e..b2bdefa2258538df975ac2899aaecb9026cd51a9 100644
--- a/custom/languages/Greek/admin.php
+++ b/custom/languages/Greek/admin.php
@@ -11,10 +11,8 @@
  *  Greek Language - Admin
  */
 
-$language = array(
-    /*
-     *  Admin Control Panel
-     */
+$language = [
+    // Admin Control Panel
     // Login
     're-authenticate' => 'Παρακαλώ Πιστοποιήστε την αυθεντικότητα',
 
@@ -748,5 +746,4 @@ $language = array(
     'discord_bot_error_unauthorized' => 'Website API key is invalid',
     'discord_bot_error_invrole' => 'Provided Role ID is invalid.',
     'discord_bot_error_hierarchy' => 'The bot cannot edit this user\'s roles.'
-
-);
+];
diff --git a/custom/languages/Greek/api.php b/custom/languages/Greek/api.php
index b26cf0a9e67cde4fd4aef59121663fe9cd7d8277..d3b700bee1321d13356999e2efc90df298c6c36a 100644
--- a/custom/languages/Greek/api.php
+++ b/custom/languages/Greek/api.php
@@ -9,8 +9,7 @@
  *  Greek Language - API
  */
 
-$language = array(
-
+$language = [
     // Errors
     'api_disabled' => 'API is disabled',
     'unknown_error' => 'Unknown error',
@@ -63,4 +62,4 @@ $language = array(
     'discord_id_set' => 'Discord ID set successfully',
     'discord_settings_updated' => 'Discord settings updated successfully',
     'discord_usernames_updated' => 'Discord usernames updated successfully'
-);
+];
diff --git a/custom/languages/Greek/emails.php b/custom/languages/Greek/emails.php
index 124b23a82615e1092939ec9018299f308930c56f..94720f49180afb04652c3bccb8c5189358ede892 100644
--- a/custom/languages/Greek/emails.php
+++ b/custom/languages/Greek/emails.php
@@ -9,8 +9,7 @@
  *  Greek Language - Emails
  */
 
-$language = array(
-
+$language = [
     // General Options
     'greeting' => 'Hi,',
     'thanks' => 'Thanks,',
@@ -26,4 +25,4 @@ $language = array(
     // Forum Topic Replies
     'forum_topic_reply_subject' => '{x} has replied to {y}', // Don't remove {x} or {y}
     'forum_topic_reply_message' => '{x} has replied to a topic you follow. Content: {z}' // Don't remove {x} or {z}
-);
+];
diff --git a/custom/languages/Greek/errors.php b/custom/languages/Greek/errors.php
index a18f8e8335a234711c601a6fe6b502d0b1bf97e2..1daba892223707d23f85082cfb79b09cf35c298a 100644
--- a/custom/languages/Greek/errors.php
+++ b/custom/languages/Greek/errors.php
@@ -11,10 +11,8 @@
  *  Greek Language - Errors
  */
 
-$language = array(
-    /*
-     *  Errors
-     */
+$language = [
+    // Errors
     '404_title' => 'Σύγνωμη!',
     '404_content' => 'Δεν μπορέσαμε να βρούμε αυτή τη σελίδα.',
     '404_back' => 'Πήγαινε πίσω',
@@ -33,4 +31,4 @@ $language = array(
     'fatal_error_message_admin' => 'Sorry, but something went wrong while loading the page. Error details:',
     'in_file' => 'in file <strong>{x}</strong>', // Don't replace {x}
     'on_line' => 'on line <strong>{x}</strong>' // Don't replace {x}
-);
+];
diff --git a/custom/languages/Greek/general.php b/custom/languages/Greek/general.php
index 1265a7aacb7a614578059624c7b38a20106773e5..1bfc5d117b405262dcb68df1d565579decfdca77 100644
--- a/custom/languages/Greek/general.php
+++ b/custom/languages/Greek/general.php
@@ -11,10 +11,8 @@
  *  Greek Language - General terms
  */
 
-$language = array(
-    /*
-     *  General terms
-     */
+$language = [
+    // General terms
     'help' => 'Help',
     'submit' => 'Υποβολή',
     'register' => 'Εγγραφή',
@@ -72,9 +70,7 @@ $language = array(
     'link' => 'Link',
     'unlink' => 'Unlink',
     
-    /*
-     *  Contact form
-     */
+    // Contact form
     'contact' => 'Contact',
     'message' => 'Message',
     'email_address' => 'Email Address',
@@ -84,27 +80,18 @@ $language = array(
     'contact_message_sent' => 'Message sent successfully.',
     'contact_message_limit' => 'You can only send one message per hour. You can next send a message in {x} minutes.', // Don't replace {x}
 
-    /*
-     *  Navbar
-     */
+    // Navbar
     'home' => 'Αρχική',
     'more' => 'More',
     'status' => 'Status',
 
-    /*
-     *  Homepage
-     */
+    // Homepage
     'social' => 'Social',
 
-
-    /*
-     *  Help dialogues
-     */
+    // Help dialogues
     'markdown_help' => 'Μπορείτε να διαμορφώσετε τα posts σας με τη χρήση Markdown. Για περισσότερες πληροφορίες, δές <a href=\'https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet\' target=\'_blank\'>εδώ</a>.',
 
-    /*
-     *  Server query
-     */
+    // Server query
     'online' => 'Online',
     'offline' => 'Offline',
     'player_count' => '{x}/{y}', // Don't replace {x} or {y}
@@ -122,15 +109,11 @@ $language = array(
     'no_players_online' => 'There are no players online.',
     'and_x_more' => 'and {x} more', // Don't replace {x}
 
-    /*
-     *  Cookie notice
-     */
+    // Cookie notice
     'cookie_notice' => 'This website uses cookies to enhance your browsing experience. By registering on our website or closing this notice you agree with their use.',
     'cookie_agree' => 'Agree',
 
-    /*
-     *  Widgets
-     */
+    // Widgets
     'statistics' => 'Statistics',
     'users_registered' => 'Users Registered',
     'latest_member' => 'Latest Member',
@@ -149,13 +132,9 @@ $language = array(
     'no_default_server' => 'There is no default server, please select one in StaffCP - Integrations - Minecraft.',
     'server_status' => 'Server Status',
 
-    /*
-     *  Privacy policy
-     */
+    // Privacy policy
     'privacy_policy' => 'Privacy Policy',
 
-    /*
-     *  Custom page redirect
-     */
+    // Custom page redirect
     'redirecting_message' => 'Redirecting...<br />If you are not redirected automatically, please click <a href="{x}" rel="nofollow noopener">here</a>.' // Don't replace {x} which is the redirect URL
-);
+];
diff --git a/custom/languages/Greek/installer.php b/custom/languages/Greek/installer.php
index 0d0cbe4ba204d47ed87837aef8bdb66b0804582a..4693561c73d7f713a7cf4018c52bdc65a528ace0 100644
--- a/custom/languages/Greek/installer.php
+++ b/custom/languages/Greek/installer.php
@@ -11,10 +11,8 @@
  *  EnglishUS Language - Installation
  */
 
-$language = array(
-    /*
-     *  Installation
-     */
+$language = [
+    // Installation
     'install' => 'Εγκατάσταση',
     'pre-release' => 'προδηµοσιεύσει',
     'installer_welcome' => 'Καλωσήρθες στο NamelessMC έκδοση 2.0 προδηµοσιεύσει.',
@@ -105,4 +103,4 @@ $language = array(
     'config_not_writable' => 'The config file is not writable.',
 
     'session_doesnt_exist' => 'Unable to detect session. Sessions saving are a requirement to use Nameless. Please try again, and if the issue persists, please contact your web host for support.'
-);
+];
diff --git a/custom/languages/Greek/log.php b/custom/languages/Greek/log.php
index 5ab53c40d6a530db34ed305094f137f03c98823d..e38e3aedf83f5ce320dd06b1c2e4fe33f5ef9e5e 100644
--- a/custom/languages/Greek/log.php
+++ b/custom/languages/Greek/log.php
@@ -1,6 +1,7 @@
 <?php
-$language = array(
+
+$language = [
     //forums
     'info_forums_lock' => 'Locked',
     'info_forums_unlock' => 'Unlocked',
-);
\ No newline at end of file
+];
diff --git a/custom/languages/Greek/moderator.php b/custom/languages/Greek/moderator.php
index aae1f80dab97a10634aeda9acd1c0bee4c0c55ac..3a3a6a2ea240b3911ae1357fdd81f5d817af7f75 100644
--- a/custom/languages/Greek/moderator.php
+++ b/custom/languages/Greek/moderator.php
@@ -9,7 +9,7 @@
  *  EnglishUK Language - Moderator terms
  */
 
-$language = array(
+$language = [
     'mod_cp' => 'ModCP',
     'staff_cp' => 'StaffCP',
     'overview' => 'Overview',
@@ -104,5 +104,4 @@ $language = array(
     // Users
     'recent_registrations' => 'Recent Registrations',
     'reset_profile_banner' => 'Reset Profile Banner'
-
-);
+];
diff --git a/custom/languages/Greek/table.php b/custom/languages/Greek/table.php
index 3fe386a23a950a900b82d26b8e1a4b0cf905b4c1..0a41ea6ca3828d188d622bc7297f5a3834ec3b91 100644
--- a/custom/languages/Greek/table.php
+++ b/custom/languages/Greek/table.php
@@ -11,13 +11,11 @@
  *  Greek Language - Table
  */
 
-$language = array(
-    /*
-     *  Tables
-     */
+$language = [
+    // Tables
     'display_records_per_page' => 'Απεικόνισε _MENU_ καταγραφές ανά σελίδα', // Don't replace "_MENU_"
     'nothing_found' => 'Δεν βρέθηκαν αποτελέσματα',
     'page_x_of_y' => 'Εμφάνιση σελίδας _PAGE_ of _PAGES_', // Don't replace "_PAGE_" or "_PAGES_"
     'no_records' => 'Δεν ύπαρχουν διαθέσιμες καταγραφές',
     'filtered' => '(filtered from _MAX_ total records)' // Don't replace "_MAX_"
-);
+];
diff --git a/custom/languages/Greek/time.php b/custom/languages/Greek/time.php
index 211c909f4d5e90cdb831e9cccf5cdf08e46d4a85..c8e8cd4bc638f634777f278ac82b2dbd1d523e4f 100644
--- a/custom/languages/Greek/time.php
+++ b/custom/languages/Greek/time.php
@@ -11,10 +11,8 @@
  *  Greek Language - Time
  */
 
-$language = array(
-    /*
-     *  Time
-     */
+$language = [
+    // Time
     'time' => 'χρόνος', // Placeholder, no need to translate
     'seconds_short' => 's', // Shortened "seconds", eg "s"
     'less_than_a_minute' => 'λιγότερο από ένα λεπτό πριν',
@@ -28,4 +26,4 @@ $language = array(
     '_months' => '{x} μήνες πριν',
     'about_1_year' => 'Πριν από περίπου 1 χρόνο',
     'over_x_years' => 'πάνω από {x} χρόνια πριν'
-);
+];
diff --git a/custom/languages/Greek/user.php b/custom/languages/Greek/user.php
index b72e4f6d652e629aff3aa1bfaa249396c7cae27e..3061f1f229cd256b19cbc40360bba8f4a20fe96c 100644
--- a/custom/languages/Greek/user.php
+++ b/custom/languages/Greek/user.php
@@ -9,15 +9,11 @@
  *  EnglishUK Language - Users
  */
 
-$language = array(
-    /*
-     *  Change this for the account validation message
-     */
+$language = [
+    // Change this for the account validation message
     'validate_account_command' => 'To complete registration, please execute the command <strong>/validate {x}</strong> ingame.', // Don't replace {x}
 
-    /*
-     *  User Related
-     */
+    // User Related
     'guest' => 'Guest',
     'guests' => 'Guests',
 
@@ -224,16 +220,12 @@ $language = array(
     'latest_profile_posts' => 'Latest Profile Posts',
     'no_profile_posts' => 'No profile posts.',
 
-    /*
-     *  Infractions area
-     */
+    // Infractions area
     'you_have_been_banned' => 'You have been banned!',
     'you_have_received_a_warning' => 'You have received a warning!',
     'acknowledge' => 'Acknowledge',
 
-    /*
-     *  Hooks
-     */
+    // Hooks
     'user_x_has_registered' => '{x} has joined ' . SITE_NAME . '!',
     'user_x_has_validated' => '{x} has validated their account!',
 
@@ -252,4 +244,4 @@ $language = array(
     'discord_communication_error' => 'There was an error while communicating with the Discord Bot. Please ensure the bot is running and your Bot URL is correct.',
     'discord_unknown_error' => 'There was an unknown error while syncing Discord roles. Please contact an administrator.',
     'discord_id_help' => 'For information on where to find Discord ID\'s, please read <a href="https://support.discord.com/hc/en-us/articles/206346498-Where-can-I-find-my-User-Server-Message-ID-" target="_blank">this.</a>'
-);
+];
diff --git a/custom/languages/Italian/admin.php b/custom/languages/Italian/admin.php
index 3f425da41c30bc125a4365ba7d840a9b93613990..05106c5d37460f8f1342f77341b1d383c5bf628e 100644
--- a/custom/languages/Italian/admin.php
+++ b/custom/languages/Italian/admin.php
@@ -9,10 +9,8 @@
  *  Italian Language - Admin
  */
 
-$language = array(
-    /*
-     *  Admin Control Panel
-     */
+$language = [
+    // Admin Control Panel
     // Login
     're-authenticate' => 'Per favore, ri-autenticati',
 
@@ -293,7 +291,7 @@ $language = array(
     'server_deleted' => 'Server eliminato con successo',
     'unable_to_delete_server' => 'Impossibile eliminare il server.',
     'leave_port_empty_for_srv' => 'Puoi lasciare la porta vuota se è 25565 o se il tuo dominio utilizza un record SRV',
-    'viewing_query_error' => "Visualizzazione degli errori della query",
+    'viewing_query_error' => 'Visualizzazione degli errori della query',
     'confirm_query_error_deletion' => 'Sei sicuro di voler eliminare questo errore query?',
     'no_query_errors' => 'Nessun errore query registrato.',
     'new_banner' => '<i class="fa fa-plus-circle"></i> Nuovo Banner',
@@ -419,7 +417,7 @@ $language = array(
     'confirm_user_deletion' => "Sei sicuro di voler eliminare l'utente <strong>{x}</strong>?", // Don't replace {x}
     'validate_user' => "Convalidare l'utente",
     'update_uuid' => 'Aggiorna UUID',
-    'update_mc_name' => "Aggiorna il nome utente di Minecraft",
+    'update_mc_name' => 'Aggiorna il nome utente di Minecraft',
     'reset_password' => 'Reimposta la password',
     'punish_user' => 'Punisci utente',
     'delete_user' => 'Elimina utente',
@@ -699,8 +697,8 @@ $language = array(
     'announcements' => 'Annunci',
     'new_announcement' => 'Nuovo annuncio',
     'announcement_info' => 'Crea annunci per mostrare un messaggio a gruppi specifici su pagine specifiche del tuo sito web.',
-    'creating_announcement' => "Crea annuncio",
-    'editing_announcement' => "Modifica annuncio",
+    'creating_announcement' => 'Crea annuncio',
+    'editing_announcement' => 'Modifica annuncio',
     'creating_announcement_success' => 'Annuncio creato con successo.',
     'editing_announcement_success' => 'Annuncio aggiornato con successo.',
     'creating_announcement_failure' => "Creazione dell'annuncio non riuscita.",
@@ -746,5 +744,4 @@ $language = array(
     'discord_bot_error_unauthorized' => 'Website API key is invalid',
     'discord_bot_error_invrole' => 'Provided Role ID is invalid.',
     'discord_bot_error_hierarchy' => 'The bot cannot edit this user\'s roles.'
-
-);
+];
diff --git a/custom/languages/Italian/api.php b/custom/languages/Italian/api.php
index 17d55728768a5b14ffd71ec2c307f13df4ba5015..ca0b41562005fd12378208904045396d5f8c57f5 100644
--- a/custom/languages/Italian/api.php
+++ b/custom/languages/Italian/api.php
@@ -9,8 +9,7 @@
  *  Italian Language - API
  */
 
-$language = array(
-
+$language = [
     // Errors
     'api_disabled' => 'API is disabled',
     'unknown_error' => 'Errore sconosciuto',
@@ -30,14 +29,14 @@ $language = array(
     'unable_to_create_account' => "Impossibile creare l'account",
     'unable_to_send_registration_email' => "Impossibile inviare la mail di registrazione, per favore contatta un'admin per attivare il tuo account",
     'unable_to_find_user' => "Impossibile trovare l'utente",
-    'unable_to_find_group' => "Impossibile trovare il gruppo",
+    'unable_to_find_group' => 'Impossibile trovare il gruppo',
     'unable_to_update_group' => "Impossibile aggiornare il gruppo dell'utente",
     'report_content_too_long' => 'Il contenuto della segnalazione deve essere di 255 caratteri o meno',
     'cannot_report_yourself' => 'Non puoi segnalare te stesso.',
     'you_have_been_banned_from_website' => 'Sei stato bannato dal sito',
     'you_have_open_report_already' => 'Hai già una segnalazione aperta su questo giocatore',
     'unable_to_create_report' => 'Impossibile creare la segnalazione',
-    'unable_to_update_username' => "Impossibile aggiornare il nome utente",
+    'unable_to_update_username' => 'Impossibile aggiornare il nome utente',
     'unable_to_update_server_info' => 'Impossibile aggiornare le info del server',
     'invalid_server_id' => 'ID del server non valido',
     'invalid_code' => 'Il codice fornito non è valido',
@@ -63,4 +62,4 @@ $language = array(
     'discord_id_set' => 'ID Discord impostato correttamente',
     'discord_settings_updated' => 'Impostazioni di Discord aggiornate con successo',
     'discord_usernames_updated' => 'Discord usernames updated successfully'
-);
+];
diff --git a/custom/languages/Italian/emails.php b/custom/languages/Italian/emails.php
index 034e0becdb5db9cae8ef56232f3b45c2e3eff2e9..b609f1867f46fcb33807547ad1a5410762f6b8cd 100644
--- a/custom/languages/Italian/emails.php
+++ b/custom/languages/Italian/emails.php
@@ -9,8 +9,7 @@
  *  Italian Language - Emails
  */
 
-$language = array(
-
+$language = [
     // General Options
     'greeting' => 'Ciao,',
     'thanks' => 'Grazie,',
@@ -26,4 +25,4 @@ $language = array(
     // Forum Topic Replies
     'forum_topic_reply_subject' => '{x} ha risposto a {y}', // Don't remove {x} or {y}
     'forum_topic_reply_message' => '{x} ha risposto a un argomento che segui. Contenuto: {z}' // Don't remove {x} or {z}
-);
+];
diff --git a/custom/languages/Italian/errors.php b/custom/languages/Italian/errors.php
index 7b160b170d6f2ecdc8a531dee131a04bb55f28bc..ec1fc7f7cdefc81b1b015692aee54f123c5c6f00 100644
--- a/custom/languages/Italian/errors.php
+++ b/custom/languages/Italian/errors.php
@@ -9,15 +9,13 @@
  *  Italian Language - Errors
  */
 
-$language = array(
-    /*
-     *  Errors
-     */
+$language = [
+    // Errors
     '404_title' => 'Spiacenti!',
     '404_content' => 'Non riusciamo a trovare quella pagina.',
     '404_back' => 'Torna indietro',
     '404_home' => 'Home',
-    '404_error' => "Se credi che questo sia un errore, {x}per favore contatta un ammministratore{y}", // Don't replace {x} or {y}
+    '404_error' => 'Se credi che questo sia un errore, {x}per favore contatta un ammministratore{y}', // Don't replace {x} or {y}
     '403_title' => 'Spiacenti!',
     '403_content' => 'Non sei autorizzato a visualizzare questa pagina.',
     '403_login' => 'Accedi per continuare.',
@@ -31,4 +29,4 @@ $language = array(
     'fatal_error_message_admin' => "Spiacenti, ma qualcosa è andato storto durante il caricamento della pagina. Dettagli dell'errore:",
     'in_file' => 'nel file <strong>{x}</strong>', // Don't replace {x}
     'on_line' => 'alla linea <strong>{x}</strong>' // Don't replace {x}
-);
+];
diff --git a/custom/languages/Italian/general.php b/custom/languages/Italian/general.php
index 3a58e17a81e34b501700816982ee0426465a837c..940a3a52ad4682b9ef47f4beb0d72087633f4f9f 100644
--- a/custom/languages/Italian/general.php
+++ b/custom/languages/Italian/general.php
@@ -9,10 +9,8 @@
  *  Italian Language - General terms
  */
 
-$language = array(
-    /*
-     *  General terms
-     */
+$language = [
+    // General terms
     'help' => 'Aiuto',
     'submit' => 'Invia',
     'register' => 'Registrazione',
@@ -70,9 +68,7 @@ $language = array(
     'link' => 'Link',
     'unlink' => 'Unlink',
     
-    /*
-     *  Contact form
-     */
+    // Contact form
     'contact' => 'Contattaci',
     'message' => 'Messaggio',
     'email_address' => 'Indirizzo Email',
@@ -82,28 +78,18 @@ $language = array(
     'contact_message_sent' => 'Messaggio inviato con successo.',
     'contact_message_limit' => "È possibile inviare solo un messaggio all'ora. Puoi inviare un messaggio tra {x} minuti.", // Don't replace {x}
 
-
-    /*
-     *  Navbar
-     */
+    // Navbar
     'home' => 'Home',
     'more' => 'Altro',
     'status' => 'Stato',
 
-    /*
-     *  Homepage
-     */
+    // Homepage
     'social' => 'Social',
 
-
-    /*
-     *  Help dialogues
-     */
+    // Help dialogues
     'markdown_help' => 'Puoi formattare il tuo post utilizzando Markdown. Per ulteriori informazioni, consulta <a href="https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet" target="_blank">qui</a>.',
 
-    /*
-     *  Server query
-     */
+    // Server query
     'online' => 'Online',
     'offline' => 'Offline',
     'player_count' => '{x}/{y}', // Don't replace {x} or {y}
@@ -121,15 +107,11 @@ $language = array(
     'no_players_online' => 'Non ci sono giocatori online.',
     'and_x_more' => 'e {x} altri', // Don't replace {x}
 
-    /*
-     *  Cookie notice
-     */
+    // Cookie notice
     'cookie_notice' => 'Questo sito web utilizza i cookie per migliorare la tua esperienza di navigazione. Registrandoti sul nostro sito web o chiudendo questo avviso accetti il ​​loro utilizzo.',
     'cookie_agree' => 'Accetto',
 
-    /*
-     *  Widgets
-     */
+    // Widgets
     'statistics' => 'Statistiche',
     'users_registered' => 'Utenti Registrati',
     'latest_member' => 'Ultimo Membro',
@@ -148,13 +130,9 @@ $language = array(
     'no_default_server' => "Non c'è alcun server predefinito, selezionane uno in Pannello Staff - Integrazioni - Minecraft.",
     'server_status' => 'Stato del server',
 
-    /*
-     *  Privacy policy
-     */
+    // Privacy policy
     'privacy_policy' => 'Politica della privacy',
 
-    /*
-     *  Custom page redirect
-     */
+    // Custom page redirect
     'redirecting_message' => 'Reindirizzamento in corso...<br />Se non vieni reindirizzato automaticamente, clicca <a href="{x}" rel="nofollow noopener">qui</a>.' // Don't replace {x} which is the redirect URL
-);
+];
diff --git a/custom/languages/Italian/installer.php b/custom/languages/Italian/installer.php
index 02dd7a4a27a186bbf6cdde716374a0d09fa90aa0..17a2ff4f4f8291d33601c08d05da67234d169797 100644
--- a/custom/languages/Italian/installer.php
+++ b/custom/languages/Italian/installer.php
@@ -9,10 +9,8 @@
  *  Italian Language - Installation
  */
 
-$language = array(
-    /*
-     *  Installation
-     */
+$language = [
+    // Installation
     'install' => 'Installa',
     'pre-release' => 'Pre-Rilascio',
     'installer_welcome' => 'Benvenuti nel pre-rilascio di NamelessMC versione 2.0.',
@@ -103,4 +101,4 @@ $language = array(
     'config_not_writable' => 'Il file di configurazione non è scrivibile.',
 
     'session_doesnt_exist' => 'Impossibile rilevare la sessione. Il salvataggio delle sessioni è un requisito per utilizzare Nameless. Prova di nuovo, e se il problema persiste, contatta il tuo host web per assistenza.'
-);
+];
diff --git a/custom/languages/Italian/log.php b/custom/languages/Italian/log.php
index 5ab53c40d6a530db34ed305094f137f03c98823d..e38e3aedf83f5ce320dd06b1c2e4fe33f5ef9e5e 100644
--- a/custom/languages/Italian/log.php
+++ b/custom/languages/Italian/log.php
@@ -1,6 +1,7 @@
 <?php
-$language = array(
+
+$language = [
     //forums
     'info_forums_lock' => 'Locked',
     'info_forums_unlock' => 'Unlocked',
-);
\ No newline at end of file
+];
diff --git a/custom/languages/Italian/moderator.php b/custom/languages/Italian/moderator.php
index 3bb0a4df2a8a1b0ed452e1b063576865e73e8473..079a0638c1dfced1410dc068ab2f0e79b3f70a21 100644
--- a/custom/languages/Italian/moderator.php
+++ b/custom/languages/Italian/moderator.php
@@ -9,7 +9,7 @@
  *  Italian Language - Moderator terms
  */
 
-$language = array(
+$language = [
     'mod_cp' => 'Pannello Moderatori',
     'staff_cp' => 'Pannello Staff',
     'overview' => 'Panoramica',
@@ -73,7 +73,7 @@ $language = array(
     'ban_ip' => 'Banna IP',
     'viewing_user_x' => "Visualizzazione dell'utente {x}", // Don't replace {x}
     'previous_punishments' => 'Punizioni precedenti',
-    'no_previous_punishments' => "Nessuna punizione precedente",
+    'no_previous_punishments' => 'Nessuna punizione precedente',
     'warning' => 'Avvertimenti',
     'ip_ban' => 'IP Bannato',
     'reason' => 'Motivo',
@@ -104,5 +104,4 @@ $language = array(
     // Users
     'recent_registrations' => 'Registrazioni recenti',
     'reset_profile_banner' => 'Reimposta banner profilo'
-
-);
+];
diff --git a/custom/languages/Italian/table.php b/custom/languages/Italian/table.php
index b27d483f4825ac3aa8fb8728a2d40339d3feb301..cde34a43e9f9980b165d1d7e5f5ff625630a245f 100644
--- a/custom/languages/Italian/table.php
+++ b/custom/languages/Italian/table.php
@@ -9,13 +9,11 @@
  *  Italian Language - Table
  */
 
-$language = array(
-    /*
-     *  Tables
-     */
+$language = [
+    // Tables
     'display_records_per_page' => 'Mostra _MENU_ record per pagina', // Don't replace "_MENU_"
     'nothing_found' => 'Nessun risultato trovato',
     'page_x_of_y' => 'Visualizzazione della pagina _PAGE_ di _PAGES_', // Don't replace "_PAGE_" or "_PAGES_"
     'no_records' => 'Nessun record disponibile',
     'filtered' => '(filtrato da _MAX_ record totali)' // Don't replace "_MAX_"
-);
+];
diff --git a/custom/languages/Italian/time.php b/custom/languages/Italian/time.php
index 13e6fae2d3ccb58c42a28b1c249da1750b8e52bd..138cfdf86f7bf92faede1579774889b7f239058a 100644
--- a/custom/languages/Italian/time.php
+++ b/custom/languages/Italian/time.php
@@ -9,10 +9,8 @@
  *  Italian Language - Time
  */
 
-$language = array(
-    /*
-     *  Time
-     */
+$language = [
+    // Time
     'time' => 'tempo', // Placeholder, no need to translate
     'seconds_short' => 's', // Shortened "seconds", eg "s"
     'less_than_a_minute' => 'meno di un minuto fa',
@@ -26,4 +24,4 @@ $language = array(
     '_months' => '{x} mesi fa',
     'about_1_year' => 'circa 1 anno fa',
     'over_x_years' => 'oltre {x} anni fa'
-);
+];
diff --git a/custom/languages/Italian/user.php b/custom/languages/Italian/user.php
index bf5782471ff8173e81f1d634571fb4cab685b839..f357c8abc8380a008bcbcf345d37b6aa01c8617f 100644
--- a/custom/languages/Italian/user.php
+++ b/custom/languages/Italian/user.php
@@ -9,15 +9,11 @@
  *  Italian Language - Users
  */
 
-$language = array(
-    /*
-     *  Change this for the account validation message
-     */
+$language = [
+    // Change this for the account validation message
     'validate_account_command' => 'Per completare la registrazione, per favore esegui in gioco il comando <strong>/validate {x}</strong>.', // Don't replace {x}
 
-    /*
-     *  User Related
-     */
+    // User Related
     'guest' => 'Ospite',
     'guests' => 'Ospiti',
 
@@ -134,7 +130,7 @@ $language = array(
     // Login
     'successful_login' => 'Hai effettuato il log in con successo.',
     'incorrect_details' => 'Hai inserito dati errati.',
-    'inactive_account' => "Il tuo account è inattivo. Si prega di controllare le e-mail per un link di convalida, controlla anche la tua cartella di posta indesiderata.",
+    'inactive_account' => 'Il tuo account è inattivo. Si prega di controllare le e-mail per un link di convalida, controlla anche la tua cartella di posta indesiderata.',
     'account_banned' => "Quell'account è bannato.",
     'forgot_password' => 'Ha dimenticato la password?',
     'remember_me' => 'Ricordati di me',
@@ -224,16 +220,12 @@ $language = array(
     'latest_profile_posts' => 'Ultimi post del profilo',
     'no_profile_posts' => 'Nessun post del profilo.',
 
-    /*
-     *  Infractions area
-     */
+    // Infractions area
     'you_have_been_banned' => 'Sei stato bannato!',
     'you_have_received_a_warning' => 'Hai ricevuto un avvertimento!',
     'acknowledge' => 'Acknowledge',
 
-    /*
-     *  Hooks
-     */
+    // Hooks
     'user_x_has_registered' => '{x} si è unito ' . SITE_NAME . '!',
     'user_x_has_validated' => '{x} has validated their account!',
 
@@ -252,4 +244,4 @@ $language = array(
     'discord_communication_error' => "Si è verificato un errore durante la comunicazione con il Bot di Discord. Assicurati che il bot sia in esecuzione e che l'URL del tuo Bot sia corretto.",
     'discord_unknown_error' => 'Si è verificato un errore sconosciuto durante la sincronizzazione dei ruoli di Discord. Contatta un amministratore.',
     'discord_id_help' => 'Per informazioni su dove trovare gli ID Discord, leggi <a href="https://support.discord.com/hc/en-us/articles/206346498-Where-can-I-find-my-User-Server-Message-ID-" target="_blank">questo.</a>'
-);
+];
diff --git a/custom/languages/Japanese/admin.php b/custom/languages/Japanese/admin.php
index 8439b77f3d8f8b41a4843cb4fa3d4c9699d04eb4..cfffb73d74fc8035104bb4b94a9f76a2f94430cf 100644
--- a/custom/languages/Japanese/admin.php
+++ b/custom/languages/Japanese/admin.php
@@ -14,10 +14,8 @@
  *  Japanese Language - Admin
  */
 
-$language = array(
-    /*
-     *  Admin Control Panel
-     */
+$language = [
+    // Admin Control Panel
     // Login
     're-authenticate' => 'StaffCP ログイン',
 
@@ -751,5 +749,4 @@ $language = array(
     'discord_bot_error_unauthorized' => 'Website API key is invalid',
     'discord_bot_error_invrole' => 'Provided Role ID is invalid.',
     'discord_bot_error_hierarchy' => 'The bot cannot edit this user\'s roles.'
-
-);
+];
diff --git a/custom/languages/Japanese/api.php b/custom/languages/Japanese/api.php
index e3e46037b7135e19ccb89c70a99f71f86ae2c016..08b06902b3246ff671742eb68006da3b0334fb0a 100644
--- a/custom/languages/Japanese/api.php
+++ b/custom/languages/Japanese/api.php
@@ -14,8 +14,7 @@
  *  Japanese Language - API
  */
 
-$language = array(
-
+$language = [
     // Errors
     'api_disabled' => 'API is disabled',
     'unknown_error' => '不明なエラー',
@@ -68,4 +67,4 @@ $language = array(
     'discord_id_set' => 'Discord IDの設定に成功しました。',
     'discord_bot_url_updated' => 'Discord botのURLが更新されました。',
     'discord_usernames_updated' => 'Discord usernames updated successfully'
-);
+];
diff --git a/custom/languages/Japanese/emails.php b/custom/languages/Japanese/emails.php
index 6428e172149006788fb48541ae87905eb476e2d3..5196d4ae101a6657c48d573076ff6e792be8e530 100644
--- a/custom/languages/Japanese/emails.php
+++ b/custom/languages/Japanese/emails.php
@@ -14,8 +14,7 @@
  *  Japanese Language - Emails
  */
 
-$language = array(
-
+$language = [
     // General Options
     'greeting' => 'こんにちは！',
     'thanks' => 'ありがとうございます。',
@@ -31,4 +30,4 @@ $language = array(
     // Forum Topic Replies
     'forum_topic_reply_subject' => '{x} は {y} に返信しました', // Don't remove {x} or {y}
     'forum_topic_reply_message' => '{x} がフォローしているトピックに返信しました。内容: {z}' // Don't remove {x} or {z}
-);
+];
diff --git a/custom/languages/Japanese/errors.php b/custom/languages/Japanese/errors.php
index 8f080204dd55fd42f36fb46a9d669e29c9486f8d..5ac814159baf5350bd159e276199cbdfc1e4ed31 100644
--- a/custom/languages/Japanese/errors.php
+++ b/custom/languages/Japanese/errors.php
@@ -14,10 +14,8 @@
  *  Japanese Language - Errors
  */
 
-$language = array(
-    /*
-     *  Errors
-     */
+$language = [
+    // Errors
     '404_title' => '<i class="fa fa-exclamation-triangle" aria-hidden="true"></i>',
     '404_content' => '=指定したページは存在しません=',
     '404_back' => '戻る',
@@ -36,4 +34,4 @@ $language = array(
     'fatal_error_message_admin' => 'ページ読み込み中に内部エラーが発生しました。エラーの詳細:',
     'in_file' => 'ファイル: <strong>{x}</strong>', // Don't replace {x}
     'on_line' => 'ライン(行): <strong>{x}</strong>' // Don't replace {x}
-);
+];
diff --git a/custom/languages/Japanese/general.php b/custom/languages/Japanese/general.php
index 38088a1a864e740fe4650dcfc3d3a706199c7cfb..69270997a9ec99f978e0886a080f1d8941107e64 100644
--- a/custom/languages/Japanese/general.php
+++ b/custom/languages/Japanese/general.php
@@ -14,10 +14,8 @@
  *  Japanese Language - General terms
  */
 
-$language = array(
-    /*
-     *  General terms
-     */
+$language = [
+    // General terms
     'help' => 'ヘルプ',
     'submit' => '送信',
     'register' => '登録',
@@ -75,9 +73,7 @@ $language = array(
     'link' => 'Link',
     'unlink' => 'Unlink',
     
-    /*
-     *  Contact form
-     */
+    // Contact form
     'contact' => '問い合わせ',
     'message' => 'メッセージ',
     'email_address' => 'Email アドレス',
@@ -87,27 +83,18 @@ $language = array(
     'contact_message_sent' => '正常に送信されました。',
     'contact_message_limit' => '1 時間に 1 つのメッセージのみ送信できます。 {x} 分後に再試行してください。', // Don't replace {x}
 
-    /*
-     *  Navbar
-     */
+    // Navbar
     'home' => 'ホーム',
     'more' => 'さらに',
     'status' => 'ステータス',
 
-    /*
-     *  Homepage
-     */
+    // Homepage
     'social' => 'ソーシャル',
 
-
-    /*
-     *  Help dialogues
-     */
+    // Help dialogues
     'markdown_help' => 'Markdownを使用して投稿できます。 詳しくは <a href=\'https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet\' target=\'_blank\'>ここ</a> を参照してください。',
 
-    /*
-     *  Server query
-     */
+    // Server query
     'online' => 'オンライン',
     'offline' => 'オフライン',
     'player_count' => '{x}/{y}', // Don't replace {x} or {y}
@@ -125,15 +112,11 @@ $language = array(
     'no_players_online' => '現在オンラインのプレイヤーはいません。',
     'and_x_more' => '{x} 以上', // Don't replace {x}
 
-    /*
-     *  Cookie notice
-     */
+    // Cookie notice
     'cookie_notice' => '当ウェブサイトは、ユーザーのエクスペリエンス向上のためにクッキーを使用しています。 当ウェブサイトに登録するか、この通知を閉じることにより、使用に同意するものとします。',
     'cookie_agree' => '同意',
 
-    /*
-     *  Widgets
-     */
+    // Widgets
     'statistics' => '統計',
     'users_registered' => '登録ユーザー',
     'latest_member' => '最新メンバー',
@@ -152,13 +135,9 @@ $language = array(
     'no_default_server' => 'デフォルトのサーバーがありません、StaffCP - Integrations - Minecraftで選択してください。',
     'server_status' => 'サーバーステータス',
 
-    /*
-     *  Privacy policy
-     */
+    // Privacy policy
     'privacy_policy' => 'プライバシーポリシー(個人情報保護方針)',
 
-    /*
-     *  Custom page redirect
-     */
+    // Custom page redirect
     'redirecting_message' => 'リダイレクト...<br />自動的にリダイレクトされない場合は、<a href="{x}" rel="nofollow noopener">こちら</a>をクリックしてください。' // Don't replace {x} which is the redirect URL
-);
+];
diff --git a/custom/languages/Japanese/installer.php b/custom/languages/Japanese/installer.php
index 3eaac2fc0c80be6212b53cb9e6efcea297d4c213..ac16646d085a342f75c506e260f5e73966d736a8 100644
--- a/custom/languages/Japanese/installer.php
+++ b/custom/languages/Japanese/installer.php
@@ -14,10 +14,8 @@
  *  Japanese Language - Installation
  */
 
-$language = array(
-    /*
-     *  Installation
-     */
+$language = [
+    // Installation
     'install' => 'インストール',
     'pre-release' => 'プレリリース版',
     'installer_welcome' => 'NamelessMC v2 プレリリース版インストーラへようこそ。',
@@ -108,4 +106,4 @@ $language = array(
     'config_not_writable' => '設定ファイルは書き込み可能ではありません。',
 
     'session_doesnt_exist' => 'セッションを検出できません。セッションの保存はNamelessを使用するための要件です。再度試してみて、問題が解決しない場合は、ウェブホストに連絡してください。'
-);
+];
diff --git a/custom/languages/Japanese/log.php b/custom/languages/Japanese/log.php
index 5ab53c40d6a530db34ed305094f137f03c98823d..e38e3aedf83f5ce320dd06b1c2e4fe33f5ef9e5e 100644
--- a/custom/languages/Japanese/log.php
+++ b/custom/languages/Japanese/log.php
@@ -1,6 +1,7 @@
 <?php
-$language = array(
+
+$language = [
     //forums
     'info_forums_lock' => 'Locked',
     'info_forums_unlock' => 'Unlocked',
-);
\ No newline at end of file
+];
diff --git a/custom/languages/Japanese/moderator.php b/custom/languages/Japanese/moderator.php
index 417f9f22bdc765534d7cac429dc42af6790ee6b3..118b7e7fd091c68dc6bcaf9e1f7a82f9c4183e3e 100644
--- a/custom/languages/Japanese/moderator.php
+++ b/custom/languages/Japanese/moderator.php
@@ -14,7 +14,7 @@
  *  Japanese Language - Moderator terms
  */
 
-$language = array(
+$language = [
     'mod_cp' => 'ModCP',
     'staff_cp' => 'StaffCP',
     'overview' => '概要',
@@ -109,5 +109,4 @@ $language = array(
     //ユーザー
     'recent_registrations' => '最近の登録',
     'reset_profile_banner' => 'プロフィールバナーをリセット'
-
-);
+];
diff --git a/custom/languages/Japanese/table.php b/custom/languages/Japanese/table.php
index cdbbb6360832cc0579795c1bbe007df2876478b5..4048e9bb8e9a233ca767d96cd87d42601ad3cd4d 100644
--- a/custom/languages/Japanese/table.php
+++ b/custom/languages/Japanese/table.php
@@ -14,13 +14,11 @@
  *  Japanese Language - Table
  */
 
-$language = array(
-    /*
-     *  Tables
-     */
+$language = [
+    // Tables
     'display_records_per_page' => '1ページに _MENU_ 件のレコードを表示しています。', // Don't replace "_MENU_"
     'nothing_found' => '結果が見つかりません',
     'page_x_of_y' => '_PAGES_ページ 中 _PAGE_ ページを表示しています', // Don't replace "_PAGE_" or "_PAGES_"
     'no_records' => 'レコードがありません',
     'filtered' => '(_MAX_合計レコードからフィルタリングされました)' // Don't replace "_MAX_"
-);
+];
diff --git a/custom/languages/Japanese/time.php b/custom/languages/Japanese/time.php
index 3bc298c07f61d79984efc5d9ff36f6dfb0de2e6e..9642e7a719545d6cdbd956a08480e55337b3a3e3 100644
--- a/custom/languages/Japanese/time.php
+++ b/custom/languages/Japanese/time.php
@@ -14,10 +14,8 @@
  *  Japanese Language - Time
  */
 
-$language = array(
-    /*
-     *  Time
-     */
+$language = [
+    // Time
     'time' => '時間', // Placeholder, no need to translate
     'seconds_short' => '秒', // Shortened "seconds", eg "s"
     'less_than_a_minute' => '1分前',
@@ -31,4 +29,4 @@ $language = array(
     '_months' => '{x}ヶ月前',
     'about_1_year' => '約1年前',
     'over_x_years' => '約{x}年前'
-);
+];
diff --git a/custom/languages/Japanese/user.php b/custom/languages/Japanese/user.php
index 8177fb15a95eb58ce9e28214ffad1f1192866ed4..9e5ba5c3822f1c842a575dd0a264046b6161eade 100644
--- a/custom/languages/Japanese/user.php
+++ b/custom/languages/Japanese/user.php
@@ -14,15 +14,11 @@
  *  Japanese Language - Users
  */
 
-$language = array(
-    /*
-     *  Change this for the account validation message
-     */
+$language = [
+    // Change this for the account validation message
     'validate_account_command' => '登録を完了するには、ゲーム内で <strong>/validate {x}</strong> コマンドを送信してください。', // Don't replace {x}
 
-    /*
-     *  User Related
-     */
+    // User Related
     'guest' => 'ゲスト',
     'guests' => 'ゲスト',
 
@@ -229,16 +225,12 @@ $language = array(
     'latest_profile_posts' => '最新のプロフィール投稿',
     'no_profile_posts' => 'プロフィール投稿はありません。',
 
-    /*
-     *  Infractions area
-     */
+    // Infractions area
     'you_have_been_banned' => '指定されたアカウントは使用が禁止されています。',
     'you_have_received_a_warning' => '指定されたアカウントは警告を受信しています。',
     'acknowledge' => '承認する',
 
-    /*
-     *  Hooks
-     */
+    // Hooks
     'user_x_has_registered' => '{x} が ' . SITE_NAME . ' に登録しました。',
     'user_x_has_validated' => '{x} has validated their account!',
 
@@ -257,4 +249,4 @@ $language = array(
     'discord_communication_error' => 'Discordボットとの通信中にエラーが発生しました。ボットが動作しているかどうか、ボットのURLが正しいかどうかを確認してください。',
     'discord_unknown_error' => 'Discordロールの同期中に不明なエラーが発生しました。管理者に連絡してください。',
     'discord_id_help' => 'DiscordのIDがどこにあるかについては、<a href="https://support.discord.com/hc/en-us/articles/206346498-Where-can-I-find-my-User-Server-Message-ID-" target="_blank">こちら</a>をご確認ください。'
-);
+];
diff --git a/custom/languages/Lithuanian/admin.php b/custom/languages/Lithuanian/admin.php
index 7bbb30aca8a8c3147a419d115772d52d18474fb8..bdf40ff72748bde1f77881b8f0e40cb80d793280 100644
--- a/custom/languages/Lithuanian/admin.php
+++ b/custom/languages/Lithuanian/admin.php
@@ -10,7 +10,7 @@
  *  Lithuanian Language - Admin
  */
 
-$language = array(
+$language = [
     // Login
     're-authenticate' => 'Prašome patvirtinkite dar kartą',
 
@@ -744,5 +744,4 @@ $language = array(
     'discord_bot_error_unauthorized' => 'Website API key is invalid',
     'discord_bot_error_invrole' => 'Provided Role ID is invalid.',
     'discord_bot_error_hierarchy' => 'The bot cannot edit this user\'s roles.'
-
-);
+];
diff --git a/custom/languages/Lithuanian/api.php b/custom/languages/Lithuanian/api.php
index 5b051ff98f8b0825a523d86b112f24e55969970f..48b82985aca90323598853a30ae25d0051e1f18b 100644
--- a/custom/languages/Lithuanian/api.php
+++ b/custom/languages/Lithuanian/api.php
@@ -10,8 +10,7 @@
  *  Lithuanian Language - API
  */
 
-$language = array(
-
+$language = [
   // Errors
   'api_disabled' => 'API is disabled',
   'unknown_error' => 'Nežinoma klaida',
@@ -64,4 +63,4 @@ $language = array(
   'discord_id_set' => 'Discord ID set successfully',
   'discord_settings_updated' => 'Discord settings updated successfully',
     'discord_usernames_updated' => 'Discord usernames updated successfully'
-);
+];
diff --git a/custom/languages/Lithuanian/emails.php b/custom/languages/Lithuanian/emails.php
index 0971d84fdea668aa12660fe9f526a33dbe2187e8..cc17d498fc86727252d9f28a7b40ce63db67c02d 100644
--- a/custom/languages/Lithuanian/emails.php
+++ b/custom/languages/Lithuanian/emails.php
@@ -9,8 +9,7 @@
  *  Lithuanian Language - Emails
  */
 
-$language = array(
-
+$language = [
     // General Options
     'greeting' => 'Labas,',
     'thanks' => 'Ačiū,',
@@ -26,4 +25,4 @@ $language = array(
     // Forum Topic Replies
     'forum_topic_reply_subject' => '{x} has replied to {y}', // Don't remove {x} or {y}
     'forum_topic_reply_message' => '{x} has replied to a topic you follow. Content: {z}' // Don't remove {x} or {z}
-);
+];
diff --git a/custom/languages/Lithuanian/errors.php b/custom/languages/Lithuanian/errors.php
index 87cbab41f00e9c1749b1f84d2b6b45b705e6af95..4963f8bf329a852f216bc6af686927fb955f324b 100644
--- a/custom/languages/Lithuanian/errors.php
+++ b/custom/languages/Lithuanian/errors.php
@@ -10,7 +10,7 @@
  *  Lithuanian Language - Errors
  */
 
-$language = array(
+$language = [
   // Errors
     '404_title' => 'Atsiprašome!',
     '404_content' => 'Nepavyko rasti šio puslapio.',
@@ -30,4 +30,4 @@ $language = array(
     'fatal_error_message_admin' => 'Atsiprašome, pakrovimo metu įvyko klaida. Klaidos detalės:',
     'in_file' => 'faile <strong>{x}</strong>', // Don't replace {x}
     'on_line' => 'linijoi <strong>{x}</strong>' // Don't replace {x}
-);
+];
diff --git a/custom/languages/Lithuanian/general.php b/custom/languages/Lithuanian/general.php
index e07b550b0f108fd08ac5a9b5828b4e3ab9500384..d0966d4d05abc4d6da40677c03ec9a6c20b5c53d 100644
--- a/custom/languages/Lithuanian/general.php
+++ b/custom/languages/Lithuanian/general.php
@@ -10,7 +10,7 @@
  *  Lithuanian Language - General terms
  */
 
-$language = array(
+$language = [
     // General terms
     'help' => 'Help',
     'submit' => 'Pateikti',
@@ -134,8 +134,6 @@ $language = array(
     // Privacy policy
     'privacy_policy' => 'Privatumo Politika',
 
-    /*
-     *  Custom page redirect
-     */
+    // Custom page redirect
     'redirecting_message' => 'Redirecting...<br />If you are not redirected automatically, please click <a href="{x}" rel="nofollow noopener">here</a>.' // Don't replace {x} which is the redirect URL
-);
+];
diff --git a/custom/languages/Lithuanian/installer.php b/custom/languages/Lithuanian/installer.php
index 7087e9afd9d1c4d8333523ad1767a42f57636186..c5fa0bc4a2687754711a97ea293c921648ae03b2 100644
--- a/custom/languages/Lithuanian/installer.php
+++ b/custom/languages/Lithuanian/installer.php
@@ -10,7 +10,7 @@
  *  Lithuanian Language - Installation
  */
 
-$language = array(
+$language = [
   // Installation
   'install' => 'Diegti',
   'pre-release' => 'Išankstinis išleidimas',
@@ -102,4 +102,4 @@ $language = array(
   'config_not_writable' => 'The config file is not writable.',
 
   'session_doesnt_exist' => 'Unable to detect session. Sessions saving are a requirement to use Nameless. Please try again, and if the issue persists, please contact your web host for support.'
-);
+];
diff --git a/custom/languages/Lithuanian/log.php b/custom/languages/Lithuanian/log.php
index 5ab53c40d6a530db34ed305094f137f03c98823d..e38e3aedf83f5ce320dd06b1c2e4fe33f5ef9e5e 100644
--- a/custom/languages/Lithuanian/log.php
+++ b/custom/languages/Lithuanian/log.php
@@ -1,6 +1,7 @@
 <?php
-$language = array(
+
+$language = [
     //forums
     'info_forums_lock' => 'Locked',
     'info_forums_unlock' => 'Unlocked',
-);
\ No newline at end of file
+];
diff --git a/custom/languages/Lithuanian/moderator.php b/custom/languages/Lithuanian/moderator.php
index a7981a1e2f75242cb6aa2c95819a449c933cc76f..c489f1436a420782c15350a5a8154d3ca1d28188 100644
--- a/custom/languages/Lithuanian/moderator.php
+++ b/custom/languages/Lithuanian/moderator.php
@@ -10,7 +10,7 @@
  *  Lithuanian Language - Moderator terms
  */
 
-$language = array(
+$language = [
     // General
     'mod_cp' => 'ModCP',
     'staff_cp' => 'StaffCP',
@@ -106,4 +106,4 @@ $language = array(
   // Users
   'recent_registrations' => 'Naujausios Registracijos',
   'reset_profile_banner' => 'Reset Profile Banner'
-);
+];
diff --git a/custom/languages/Lithuanian/table.php b/custom/languages/Lithuanian/table.php
index 4c14c0bc67d4ad24b1c31a10c596cb0307bba532..2d0fe9660f4847d8cd7257152dade32bb28578f8 100644
--- a/custom/languages/Lithuanian/table.php
+++ b/custom/languages/Lithuanian/table.php
@@ -10,11 +10,11 @@
  *  Lithuanian Language - Table
  */
 
-$language = array(
+$language = [
     // Tables
     'display_records_per_page' => 'Parodyti _MENU_ įrašus per puslapį', // Don't replace "_MENU_"
     'nothing_found' => 'Nieko nerasta',
     'page_x_of_y' => 'Rodomas puslapis _PAGE_ iš _PAGES_', // Don't replace "_PAGE_" or "_PAGES_"
     'no_records' => 'Nėra įrašų',
     'filtered' => '(filtruotas iš _MAX_ viso įrašų)' // Don't replace "_MAX_"
-);
+];
diff --git a/custom/languages/Lithuanian/time.php b/custom/languages/Lithuanian/time.php
index be932ed64e5847aaec369d6a8b6f1e9936ae62c4..190a814ecba482e375381c5be593228a90e66c82 100644
--- a/custom/languages/Lithuanian/time.php
+++ b/custom/languages/Lithuanian/time.php
@@ -10,7 +10,7 @@
  *  Lithuanian Language - Time
  */
 
-$language = array(
+$language = [
     // Time
     'time' => 'time', // Placeholder, no need to translate
     'seconds_short' => 's', // Shortened "seconds", eg "s"
@@ -25,4 +25,4 @@ $language = array(
     '_months' => 'Prieš {x} mėnesius',
     'about_1_year' => 'Maždaug prieš 1 metus',
     'over_x_years' => 'Prieš {x} metus'
-);
+];
diff --git a/custom/languages/Lithuanian/user.php b/custom/languages/Lithuanian/user.php
index abd3081e5486822f4f82527711c3c10c0d4649a0..6f920e12844ee7448d48979ddb868d0e0bee03fa 100644
--- a/custom/languages/Lithuanian/user.php
+++ b/custom/languages/Lithuanian/user.php
@@ -10,7 +10,7 @@
  *  Lithuanian Language - Users
  */
 
-$language = array(
+$language = [
     // Change this for the account validation message
     'validate_account_command' => 'Norėdami užbaigti registraciją, rašykite komandą <strong>/validate {x}</strong> žaidime.', // Don't replace {x}
 
@@ -245,4 +245,4 @@ $language = array(
     'discord_communication_error' => 'There was an error while communicating with the Discord Bot. Please ensure the bot is running and your Bot URL is correct.',
     'discord_unknown_error' => 'There was an unknown error while syncing Discord roles. Please contact an administrator.',
     'discord_id_help' => 'For information on where to find Discord ID\'s, please read <a href="https://support.discord.com/hc/en-us/articles/206346498-Where-can-I-find-my-User-Server-Message-ID-" target="_blank">this.</a>'
-);
+];
diff --git a/custom/languages/Norwegian/admin.php b/custom/languages/Norwegian/admin.php
index 586dac1b497be376476021a17fdab93922cc9926..e06b19d5d428cb29a03639d971978d860a06effb 100644
--- a/custom/languages/Norwegian/admin.php
+++ b/custom/languages/Norwegian/admin.php
@@ -9,10 +9,8 @@
  *  Norwegian translation (norsk bokmål) - Admin
  */
 
-$language = array(
-    /*
-     *  Admin Control Panel
-     */
+$language = [
+    // Admin Control Panel
     // Login
     're-authenticate' => 'Vennligst logg inn på nytt.',
 
@@ -720,21 +718,21 @@ $language = array(
     'text_colour_required' => 'En tekstfarge er påkrevd',
     'no_announcements' => 'Ingen kunngjøringer har blitt opprettet enda.',
 
-	// Discord
-	'discord' => 'Discord',
-	'enable_discord_integration' => 'Aktiver Discord-integrering?',
-	'discord_role_id' => 'Discord rolle-ID',
-	'discord_role_id_numeric' => 'Discord rolle-ID må være numerisk',
-	'discord_role_id_length' => 'Discord rolle-ID må inneholde 18 tegn.',
-	'discord_settings_updated' => 'Discord-innstillingene dine har blitt oppdatert.',
-	'discord_guild_id_required' => 'Vennligst oppgi Discord-serveren din sin ID, slik at Discord-integreringen fungerer.',
-	'discord_bot_url' => 'Discord Bot-URL',
-	'discord_bot_url_info' => 'Plasseringen til din egne instance av Nameless Link Bot. Endre kun hvis du vet hva du gjør!',
-	'discord_bot_url_required' => 'Vennligst oppgi Bot-URL-en for at Discord-integreringen skal fungere.',
-	'discord_invalid_api_url' => 'Ser ut som API-URL-en har blitt endret. Vennligst få servereieren til å oppdatere URLen med Nameless Link Bot.',
-	'test_bot_url' => 'Testbot-URL',
-	'discord_bot_url_valid' => 'Din Bot-URL er gyldig.',
-	'discord_cannot_interact' => 'Nameless Link-boten kan ikke samhandle med denne brukeren på Discord. Er rollen deres høyere enn Nameless Link-boten sin?',
+    // Discord
+    'discord' => 'Discord',
+    'enable_discord_integration' => 'Aktiver Discord-integrering?',
+    'discord_role_id' => 'Discord rolle-ID',
+    'discord_role_id_numeric' => 'Discord rolle-ID må være numerisk',
+    'discord_role_id_length' => 'Discord rolle-ID må inneholde 18 tegn.',
+    'discord_settings_updated' => 'Discord-innstillingene dine har blitt oppdatert.',
+    'discord_guild_id_required' => 'Vennligst oppgi Discord-serveren din sin ID, slik at Discord-integreringen fungerer.',
+    'discord_bot_url' => 'Discord Bot-URL',
+    'discord_bot_url_info' => 'Plasseringen til din egne instance av Nameless Link Bot. Endre kun hvis du vet hva du gjør!',
+    'discord_bot_url_required' => 'Vennligst oppgi Bot-URL-en for at Discord-integreringen skal fungere.',
+    'discord_invalid_api_url' => 'Ser ut som API-URL-en har blitt endret. Vennligst få servereieren til å oppdatere URLen med Nameless Link Bot.',
+    'test_bot_url' => 'Testbot-URL',
+    'discord_bot_url_valid' => 'Din Bot-URL er gyldig.',
+    'discord_cannot_interact' => 'Nameless Link-boten kan ikke samhandle med denne brukeren på Discord. Er rollen deres høyere enn Nameless Link-boten sin?',
 
     // Discord bot Errors
     'discord_bot_error_badparameter' => 'Ugyldig forespørseltekst',
@@ -745,5 +743,4 @@ $language = array(
     'discord_bot_error_unauthorized' => 'Nettside-API-nøkkel er ugyldig.',
     'discord_bot_error_invrole' => 'Oppgitte rolle-id er ugyldig.',
     'discord_bot_error_hierarchy' => 'Boten kan ikke endre denne brukerens roller.'
-
-);
+];
diff --git a/custom/languages/Norwegian/api.php b/custom/languages/Norwegian/api.php
index c6b91d51360276668c902b047211ec7d9520be8d..4e4714bcd7a99ce4f3417699e35f62cb8ddba9b6 100644
--- a/custom/languages/Norwegian/api.php
+++ b/custom/languages/Norwegian/api.php
@@ -9,8 +9,7 @@
  *  Norwegian translation (norsk bokmål) - API
  */
 
-$language = array(
-
+$language = [
     // Errors
     'api_disabled' => 'API er deaktivert',
     'unknown_error' => 'Ukjent feil',
@@ -63,4 +62,4 @@ $language = array(
     'discord_id_set' => 'Discord-ID-en har blitt endret.',
     'discord_settings_updated' => 'Discord-innstillinger har blitt oppdatert',
     'discord_usernames_updated' => 'Discord-brukernavn har blitt oppdatert'
-);
+];
diff --git a/custom/languages/Norwegian/emails.php b/custom/languages/Norwegian/emails.php
index 014ccccd73519247a2a9e77e1c457109656169c2..ea81bff47fe512fd5fcf10ba82d8b9a7312dcd75 100644
--- a/custom/languages/Norwegian/emails.php
+++ b/custom/languages/Norwegian/emails.php
@@ -10,8 +10,7 @@
  *  Norwegian translation (norsk bokmål) - Emails
  */
 
-$language = array(
-
+$language = [
     // General Options
     'greeting' => 'Hei!',
     'thanks' => 'Takk,',
@@ -27,4 +26,4 @@ $language = array(
     // Forum Topic Replies
     'forum_topic_reply_subject' => '{x} har svart {y}', // Don't remove {x} or {y}
     'forum_topic_reply_message' => '{x} har svart i en tråd du følger. Innhold: {z}' // Don't remove {x} or {z}
-);
+];
diff --git a/custom/languages/Norwegian/errors.php b/custom/languages/Norwegian/errors.php
index 13e4634beacab4b1e9005a6bb85eb3072981e2f1..15ea502814125f410eea96a79c48f7fbaf1a7223 100644
--- a/custom/languages/Norwegian/errors.php
+++ b/custom/languages/Norwegian/errors.php
@@ -9,10 +9,8 @@
  *  Norwegian translation (norsk bokmål) - Error
  */
 
-$language = array(
-    /*
-     *  Errors
-     */
+$language = [
+    // Errors
     '404_title' => 'Beklager!',
     '404_content' => 'Vi kunne ikke finne denne siden!',
     '404_back' => 'Tilbake',
@@ -31,4 +29,4 @@ $language = array(
     'fatal_error_message_admin' => 'Beklager, men det oppstod en feil. Feilmelding:',
     'in_file' => 'i filen <strong>{x}</strong>', // Don't replace {x}
     'on_line' => 'på linje <strong>{x}</strong>' // Don't replace {x}
-);
+];
diff --git a/custom/languages/Norwegian/general.php b/custom/languages/Norwegian/general.php
index 8d9bce6215dcea2beb105a9231c9dc47e274e04b..3e244d077fe0f760094806429f1dee6cd791af44 100644
--- a/custom/languages/Norwegian/general.php
+++ b/custom/languages/Norwegian/general.php
@@ -9,10 +9,8 @@
  *  Norwegian translation (norsk bokmål) - General
  */
 
-$language = array(
-    /*
-     *  General terms
-     */
+$language = [
+    // General terms
     'help' => 'Help',
     'submit' => 'Utfør',
     'register' => 'Registrer',
@@ -70,9 +68,7 @@ $language = array(
     'link' => 'Koble til',
     'unlink' => 'Koble fra',
     
-    /*
-     *  Contact form
-     */
+    // Contact form
     'contact' => 'Kontakt',
     'message' => 'Melding',
     'email_address' => 'E-postadresse',
@@ -82,27 +78,18 @@ $language = array(
     'contact_message_sent' => 'Meldingen har blitt sendt!',
     'contact_message_limit' => 'Du kan kun sende èn melding hver time. Du kan sende en ny melding om {x} minutter.', // Don't replace {x}
 
-    /*
-     *  Navbar
-     */
+    // Navbar
     'home' => 'Hjem',
     'more' => 'Mer',
     'status' => 'Status',
 
-    /*
-     *  Homepage
-     */
+    // Homepage
     'social' => 'Sosiale medier',
 
-
-    /*
-     *  Help dialogues
-     */
+    // Help dialogues
     'markdown_help' => 'Du kan formatere ditt innlegg med Markdown. For mer informasjon, sjekk <a href=\'https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet\' target=\'_blank\'>her</a>.',
 
-    /*
-     *  Server query
-     */
+    // Server query
     'online' => 'Pålogget',
     'offline' => 'Frakoblet',
     'player_count' => '{x}/{y}', // Don't replace {x} or {y}
@@ -120,15 +107,11 @@ $language = array(
     'no_players_online' => 'Det er ingen spillere pålogget',
     'and_x_more' => 'og {x} flere', // Don't replace {x}
 
-    /*
-     *  Cookie notice
-     */
+    // Cookie notice
     'cookie_notice' => 'Denne nettsiden benytter seg av cookies for å forbedre din brukeropplevelse. Ved å registrere deg på vår nettside eller ved å lukke denne meldingen, aksepterer du dette.',
     'cookie_agree' => 'Enig',
 
-    /*
-     *  Widgets
-     */
+    // Widgets
     'statistics' => 'Statistikk',
     'users_registered' => 'Brukere registrert',
     'latest_member' => 'Siste bruker registrert',
@@ -147,13 +130,9 @@ $language = array(
     'no_default_server' => 'Det finnes ingen standardserver, vennligst velg en i StaffCP - Integreringer - Minecraft.',
     'server_status' => 'Serverstatus',
 
-    /*
-     *  Privacy policy
-     */
+    // Privacy policy
     'privacy_policy' => 'Personvernerklæring',
 
-    /*
-     *  Custom page redirect
-     */
+    // Custom page redirect
     'redirecting_message' => 'Omdirigerer...<br />Hvis du ikke blir omdirigert automatisk, vennligst trykk <a href="{x}" rel="nofollow noopener">her</a>.' // Don't replace {x} which is the redirect URL
-);
+];
diff --git a/custom/languages/Norwegian/installer.php b/custom/languages/Norwegian/installer.php
index 3b22b2e94790affaa6ea9917fe592c33acb709fe..af32b798a826d5ca0441704a3d17756e3a0b999c 100644
--- a/custom/languages/Norwegian/installer.php
+++ b/custom/languages/Norwegian/installer.php
@@ -9,10 +9,8 @@
  *  Norwegian translation (norsk bokmål) - Installation
  */
 
-$language = array(
-    /*
-     *  Installation
-     */
+$language = [
+    // Installation
     'install' => 'Installer',
     'pre-release' => 'beta-utgivelse',
     'installer_welcome' => 'Velkommen til NamelessMC 2.0 beta-utgivelse',
@@ -103,4 +101,4 @@ $language = array(
     'config_not_writable' => 'Konfigurasjonsfilen er ikke skrivbar.',
 
     'session_doesnt_exist' => 'Kunne ikke finne økt. Økt-lagring (Sessions Saving) er et krav for å kunne bruke Nameless. Vennligst prøv igjen, og hvis denne feilen fortsetter, ta kontakt med din webhost for hjelp.'
-);
+];
diff --git a/custom/languages/Norwegian/log.php b/custom/languages/Norwegian/log.php
index a13c3cc158123db1009533b6cf48b9c2bac16d8b..fb761b86a0db9693b66b7e321ac91e263a2d98fe 100644
--- a/custom/languages/Norwegian/log.php
+++ b/custom/languages/Norwegian/log.php
@@ -1,6 +1,7 @@
 <?php
-$language = array(
+
+$language = [
     //forums
     'info_forums_lock' => 'Låst',
     'info_forums_unlock' => 'Opplåst',
-);
+];
diff --git a/custom/languages/Norwegian/moderator.php b/custom/languages/Norwegian/moderator.php
index c5fa0e4a1634567fd69c18981fd3bee7f4d8aa27..238a7688ef7e4c39a55c0f87852b91500cbdb381 100644
--- a/custom/languages/Norwegian/moderator.php
+++ b/custom/languages/Norwegian/moderator.php
@@ -9,7 +9,7 @@
  *  Norwegian translation (norsk bokmål) - Moderator
  */
 
-$language = array(
+$language = [
     'mod_cp' => 'ModCP',
     'staff_cp' => 'StaffCP',
     'overview' => 'Oppsummering',
@@ -104,5 +104,4 @@ $language = array(
     // Users
     'recent_registrations' => 'Nylige registreringer',
     'reset_profile_banner' => 'Tilbakestill profilbanner'
-
-);
+];
diff --git a/custom/languages/Norwegian/table.php b/custom/languages/Norwegian/table.php
index 17c2403ea4b068b7c0ee0ea29e1e616b950e5bf1..8b4518667385dac6415f962bb2de34204f39d006 100644
--- a/custom/languages/Norwegian/table.php
+++ b/custom/languages/Norwegian/table.php
@@ -9,13 +9,11 @@
  *  Norwegian translation (norsk bokmål) - Table
  */
 
-$language = array(
-    /*
-     *  Tables
-     */
+$language = [
+    // Tables
     'display_records_per_page' => 'Vis _MENU_ rekorder', // Don't replace "_MENU_"
     'nothing_found' => 'Ingen resultater funnet',
     'page_x_of_y' => 'Viser side _PAGE_ av _PAGES_', // Don't replace "_PAGE_" or "_PAGES_"
     'no_records' => 'Ingen rekorder er tilgjengelige',
     'filtered' => '(filtrert fra _MAX_ totale rekorder)' // Don't replace "_MAX_"
-);
+];
diff --git a/custom/languages/Norwegian/time.php b/custom/languages/Norwegian/time.php
index 2beea675b4b0ccd103a6c1a4baa2393586a027b9..d35db2aca2105bf040215ba3247db071bca3361f 100644
--- a/custom/languages/Norwegian/time.php
+++ b/custom/languages/Norwegian/time.php
@@ -9,10 +9,8 @@
  *  Norwegian translation (norsk bokmål) - Time
  */
 
-$language = array(
-    /*
-     *  Time
-     */
+$language = [
+    // Time
     'time' => 'tid', // Placeholder, no need to translate
     'seconds_short' => 's', // Shortened "seconds", eg "s"
     'less_than_a_minute' => 'mindre enn ett minutt siden.',
@@ -26,4 +24,4 @@ $language = array(
     '_months' => '{x} måneder siden',
     'about_1_year' => 'omtrent 1 år siden',
     'over_x_years' => 'over {x} år siden'
-);
+];
diff --git a/custom/languages/Norwegian/user.php b/custom/languages/Norwegian/user.php
index 7a08b3d074ac3eaee622961bdbddf7cd29e4c0ce..dc6f1764980eb33830646d08395bba139db44a34 100644
--- a/custom/languages/Norwegian/user.php
+++ b/custom/languages/Norwegian/user.php
@@ -9,15 +9,11 @@
  *  Norwegian translation (norsk bokmål) - User
  */
 
-$language = array(
-    /*
-     *  Change this for the account validation message
-     */
+$language = [
+    // Change this for the account validation message
     'validate_account_command' => 'For å fullføre registeringen, skriv inn kommandoen <strong>/validate {x}</strong> ingame.', // Don't replace {x}
 
-    /*
-     *  User Related
-     */
+    // User Related
     'guest' => 'Gjest',
     'guests' => 'Gjester',
 
@@ -223,16 +219,12 @@ $language = array(
     'latest_profile_posts' => 'Siste profilmeldinger',
     'no_profile_posts' => 'Ingen profilmeldinger.',
 
-    /*
-     *  Infractions area
-     */
+    // Infractions area
     'you_have_been_banned' => 'Du har blitt utestengt!',
     'you_have_received_a_warning' => 'Du har mottatt en advarsel!',
     'acknowledge' => 'Anerkjennelse',
 
-    /*
-     *  Hooks
-     */
+    // Hooks
     'user_x_has_registered' => '{x} har registert seg hos ' . SITE_NAME . '!',
     'user_x_has_validated' => '{x} har validert kontoen deres!',
 
@@ -251,4 +243,4 @@ $language = array(
     'discord_communication_error' => 'Det oppstod en feil under kommuniseringen med Discord-boten. Sjekk om boten er oppe, og at bot-URL-en er korrekt.',
     'discord_unknown_error' => 'Det oppstod en ukjent feil under synkroniseringen av Discord-rollene. Vennligst kontakt en administrator.',
     'discord_id_help' => 'For mer informasjon om hvordan man finner Discord-bruker-ID, vennligst les <a href="https://support.discord.com/hc/en-us/articles/206346498-Where-can-I-find-my-User-Server-Message-ID-" target="_blank">denne artikkelen.</a>'
-);
+];
diff --git a/custom/languages/Polish/admin.php b/custom/languages/Polish/admin.php
index 2e9c4c471644cfb0e3184f59b7eaa71ca6efdf92..4513f12cc8115fec53fe6b0916bf5a87494308bd 100755
--- a/custom/languages/Polish/admin.php
+++ b/custom/languages/Polish/admin.php
@@ -9,10 +9,8 @@
  *  Polish Language - Admin
  */
 
-$language = array(
-    /*
-     *  Admin Control Panel
-     */
+$language = [
+    // Admin Control Panel
     // Login
     're-authenticate' => 'Zaloguj się ponownie',
 
@@ -745,5 +743,4 @@ $language = array(
     'discord_bot_error_unauthorized' => 'Website API key is invalid',
     'discord_bot_error_invrole' => 'Provided Role ID is invalid.',
     'discord_bot_error_hierarchy' => 'The bot cannot edit this user\'s roles.'
-
-);
+];
diff --git a/custom/languages/Polish/api.php b/custom/languages/Polish/api.php
index 9fbd3b0a451331fc1be894f3e89013ed3e6cd89d..af5f17bcd0471e348f65c84acb06506dabd5683f 100755
--- a/custom/languages/Polish/api.php
+++ b/custom/languages/Polish/api.php
@@ -9,8 +9,7 @@
  *  Polish Language - API
  */
 
-$language = array(
-
+$language = [
     // Errors
     'api_disabled' => 'API is disabled',
     'unknown_error' => 'Nieznany błąd',
@@ -63,4 +62,4 @@ $language = array(
     'discord_id_set' => 'ID Discord ustawione pomyślnie',
     'discord_settings_updated' => 'Discord settings updated successfully',
     'discord_usernames_updated' => 'Discord usernames updated successfully'
-);
+];
diff --git a/custom/languages/Polish/emails.php b/custom/languages/Polish/emails.php
index 36db17254818a85946a9b9ee0a075611df0c03f0..69786b4a518b1c1a56f7221b4923cb667194171a 100644
--- a/custom/languages/Polish/emails.php
+++ b/custom/languages/Polish/emails.php
@@ -9,8 +9,7 @@
  *  Polish Language - Emails
  */
 
-$language = array(
-
+$language = [
     // General Options
     'greeting' => 'Hej,',
     'thanks' => 'Dziękujemy',
@@ -26,4 +25,4 @@ $language = array(
     // Forum Topic Replies
     'forum_topic_reply_subject' => '{x} has replied to {y}', // Don't remove {x} or {y}
     'forum_topic_reply_message' => '{x} has replied to a topic you follow. Content: {z}' // Don't remove {x} or {z}
-);
+];
diff --git a/custom/languages/Polish/errors.php b/custom/languages/Polish/errors.php
index 0d90ea89168341f903de6a77c26f584498cd7e30..a9f1c6b7420705d6fc1d078d43561c72b070dc35 100755
--- a/custom/languages/Polish/errors.php
+++ b/custom/languages/Polish/errors.php
@@ -9,10 +9,8 @@
  *  Polish Language - Errors
  */
 
-$language = array(
-    /*
-     *  Errors
-     */
+$language = [
+    // Errors
     '404_title' => 'Przepraszamy!',
     '404_content' => 'Ta strona nie istnieje!',
     '404_back' => 'Powrót',
@@ -31,4 +29,4 @@ $language = array(
     'fatal_error_message_admin' => 'Przepraszamy, ale podczas ładowania strony coś poszło nie tak. Szczegóły błędu:',
     'in_file' => 'w pliku <strong>{x}</strong>', // Don't replace {x}
     'on_line' => 'w linijce <strong>{x}</strong>', // Don't replace {x}
-);
+];
diff --git a/custom/languages/Polish/general.php b/custom/languages/Polish/general.php
index 44a412cfc0d2a15e6b1c53af764d690a15801bf9..4d4602fe73cc34026c2f180fa7b543be04ca6996 100755
--- a/custom/languages/Polish/general.php
+++ b/custom/languages/Polish/general.php
@@ -9,10 +9,8 @@
  *  Polish Language - General terms
  */
 
-$language = array(
-    /*
-     *  General terms
-     */
+$language = [
+    // General terms
     'help' => 'Pomoc',
     'submit' => 'Zatwierdź',
     'register' => 'Zarejestruj',
@@ -70,9 +68,7 @@ $language = array(
     'link' => 'Link',
     'unlink' => 'Unlink',
     
-    /*
-     *  Contact form
-     */
+    // Contact form
   'contact' => 'Kontakt',
   'message' => 'Wiadomość',
     'email_address' => 'Adres email',
@@ -82,26 +78,18 @@ $language = array(
     'contact_message_sent' => 'Wiadomość została wysłana.',
     'contact_message_limit' => 'Możesz wysłać tylko jedną wiadomość na godzinę. Następną wiadomość możesz wysłać za {x} minut.', // Don't replace {x}
 
-    /*
-     *  Navbar
-     */
+    // Navbar
     'home' => 'Strona główna',
     'more' => 'Więcej',
     'status' => 'Status',
 
-    /*
-     *  Homepage
-     */
+    // Homepage
     'social' => 'Media',
 
-    /*
-     *  Help dialogues
-     */
+    // Help dialogues
     'markdown_help' => 'Możesz formatować swój post za pomocą Markdown. Jeśli chcesz dowiedzieć się więcej o tej funkcji kliknij <a href=\'https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet\' target=\'_blank\'>tutaj</a>.',
 
-    /*
-     *  Server query
-     */
+    // Server query
     'online' => 'Online',
     'offline' => 'Offline',
     'player_count' => '{x}/{y}', // Don't replace {x} or {y}
@@ -119,15 +107,11 @@ $language = array(
     'no_players_online' => 'Na serwerze nie ma graczy online.',
     'and_x_more' => 'i {x} więcej', // Don't replace {x}
 
-    /*
-     *  Cookie notice
-     */
+    // Cookie notice
     'cookie_notice' => 'Ta strona używa plików cookie. Zakładając tu konto lub zamykając to powiadomienie zgadzasz się na ich wykorzystanie.',
     'cookie_agree' => 'Zgadzam się',
 
-    /*
-     *  Widgets
-     */
+    // Widgets
     'statistics' => 'Statystyki',
     'users_registered' => 'Zarejestrowani użytkownicy',
     'latest_member' => 'Ostatni użytkownik',
@@ -146,13 +130,9 @@ $language = array(
     'no_default_server' => 'Brak domyślnego serwera, wybierz go w Integracje > Minecraft.',
     'server_status' => 'Status Serwera',
 
-    /*
-     *  Privacy policy
-     */
+    // Privacy policy
     'privacy_policy' => 'Polityka Prywatności',
 
-    /*
-     *  Custom page redirect
-     */
+    // Custom page redirect
     'redirecting_message' => 'Przekierowywanie...<br />Jeżeli nie przenieśliśmy cię automatycznie kliknij <a href="{x}" rel="nofollow noopener">tutaj</a>.' // Don't replace {x} which is the redirect URL
-);
+];
diff --git a/custom/languages/Polish/installer.php b/custom/languages/Polish/installer.php
index 70e8f86cff197723694f8e5f4a6f03d1980e13d5..995fbc3f3d15820994bbcb36b45457f67860710f 100755
--- a/custom/languages/Polish/installer.php
+++ b/custom/languages/Polish/installer.php
@@ -9,10 +9,8 @@
  *  Polish Language - Installation
  */
 
-$language = array(
-    /*
-     *  Installation
-     */
+$language = [
+    // Installation
     'install' => 'Zainstaluj',
     'pre-release' => 'pre-release',
     'installer_welcome' => 'Witamy w wersji NamelessMc 2.0 pre-release.',
@@ -103,4 +101,4 @@ $language = array(
     'config_not_writable' => 'Plik konfiguracyjny jest zablokowany.',
 
     'session_doesnt_exist' => 'Nie można zapisać sesji. Jest to wymagane to korzystania z NamelessMC. Spróbuj ponownie, jeśli problem się powtarza skontaktuj się ze swoim hostingiem.'
-);
+];
diff --git a/custom/languages/Polish/log.php b/custom/languages/Polish/log.php
index 5b6225c92d0224c311f11b1b2fce046ed0f47c57..a4e394c31aea6c88a83ef2bdca6e8a9ccd4f1348 100755
--- a/custom/languages/Polish/log.php
+++ b/custom/languages/Polish/log.php
@@ -1,5 +1,6 @@
 <?php
-$language = array(
+
+$language = [
     //info
     'info_report' => 'Zgłoszony',
     'info_login' => 'Użytkownik się zalogował!',
@@ -24,5 +25,4 @@ $language = array(
     'info_forum_move' => 'Przeniesiony',
     'info_forum_merge' => 'Połączony',
     'info_forum_react' => 'Zareagował',
-);
-?>
+];
diff --git a/custom/languages/Polish/moderator.php b/custom/languages/Polish/moderator.php
index 862fd652c1faa48f53f2d70dc69c5323bfe4f267..4686a7eee26816393dc413c9a7eee861dedf73a0 100755
--- a/custom/languages/Polish/moderator.php
+++ b/custom/languages/Polish/moderator.php
@@ -9,7 +9,7 @@
  *  Polish Language - Moderator terms
  */
 
-$language = array(
+$language = [
     'mod_cp' => 'Panel Moderatora',
     'staff_cp' => 'Panel Admina',
     'overview' => 'Przegląd',
@@ -104,5 +104,4 @@ $language = array(
         // Users
        'recent_registrations' => 'Ostatnie rejestracje',
          'reset_profile_banner' => 'Zresetuj banner profilowy'
-
-);
+];
diff --git a/custom/languages/Polish/table.php b/custom/languages/Polish/table.php
index c7852d6454c3755a85e3f671c90a6e13e109f35c..3516010ac39352a7bf289d723697b37e994322bc 100755
--- a/custom/languages/Polish/table.php
+++ b/custom/languages/Polish/table.php
@@ -9,13 +9,11 @@
  *  Polish Language - Table
  */
 
-$language = array(
-    /*
-     *  Tables
-     */
+$language = [
+    // Tables
     'display_records_per_page' => 'Pokaż _MENU_ wyników na stronie', // Don't replace "_MENU_"
     'nothing_found' => 'Brak wyników wyszukiwania',
     'page_x_of_y' => 'Strona _PAGE_ z _PAGES_', // Don't replace "_PAGE_" or "_PAGES_"
     'no_records' => 'Brak dostępnych danych',
     'filtered' => '(filtrowane z _MAX_ wszystkich wyników)' // Don't replace "_MAX_"
-);
+];
diff --git a/custom/languages/Polish/time.php b/custom/languages/Polish/time.php
index 540927a67c454bd4899ca3595687d3afb9a8ab11..656c07dce0b30c5469ef6f03a43522d1b0e2c94d 100755
--- a/custom/languages/Polish/time.php
+++ b/custom/languages/Polish/time.php
@@ -9,10 +9,8 @@
  *  Polish Language - Time
  */
 
-$language = array(
-    /*
-     *  Time
-     */
+$language = [
+    // Time
     'time' => 'time', // Placeholder, no need to translate
     'seconds_short' => 's', // Shortened "seconds", eg "s"
     'less_than_a_minute' => 'mniej niż minutę temu',
@@ -26,4 +24,4 @@ $language = array(
     '_months' => '{x} miesięcy temu',
     'about_1_year' => 'około rok temu',
     'over_x_years' => 'ponad {x} lat temu',
-);
+];
diff --git a/custom/languages/Polish/user.php b/custom/languages/Polish/user.php
index c28f937aaf5372dfdf1c9bc1bb52e1ca5f49d895..d7523269e0563871f960bffd6f33702df70d5283 100755
--- a/custom/languages/Polish/user.php
+++ b/custom/languages/Polish/user.php
@@ -9,15 +9,11 @@
  *  Polish Language - Users
  */
 
-$language = array(
-    /*
-     *  Change this for the account validation message
-     */
+$language = [
+    // Change this for the account validation message
     'validate_account_command' => 'Aby zakończyć rejestrację wpisz komendę <strong>/validate {x}</strong> na serwerze.', // Don't replace {x}
 
-    /*
-     *  User Related
-     */
+    // User Related
     'guest' => 'Gość',
     'guests' => 'Goście',
 
@@ -224,16 +220,12 @@ $language = array(
     'latest_profile_posts' => 'Latest Profile Posts',
     'no_profile_posts' => 'No profile posts.',
 
-    /*
-     *  Infractions area
-     */
+    // Infractions area
     'you_have_been_banned' => 'Zostałeś zbanowany!',
     'you_have_received_a_warning' => 'Dostałeś ostrzeżenie!',
     'acknowledge' => 'Uznaj winę',
 
-    /*
-     *  Hooks
-     */
+    // Hooks
     'user_x_has_registered' => '{x} dołączył do ' . SITE_NAME . '!',
     'user_x_has_validated' => '{x} has validated their account!',
 
@@ -252,4 +244,4 @@ $language = array(
     'discord_communication_error' => 'There was an error while communicating with the Discord Bot. Please ensure the bot is running and your Bot URL is correct.',
     'discord_unknown_error' => 'There was an unknown error while syncing Discord roles. Please contact an administrator.',
     'discord_id_help' => 'For information on where to find Discord ID\'s, please read <a href="https://support.discord.com/hc/en-us/articles/206346498-Where-can-I-find-my-User-Server-Message-ID-" target="_blank">this.</a>'
-);
+];
diff --git a/custom/languages/Portuguese/admin.php b/custom/languages/Portuguese/admin.php
index c6986c31154b935ca30005df0183937533f09002..87f7d6e8fd7d247057aa5ff13ecc8f8e0e0a335e 100644
--- a/custom/languages/Portuguese/admin.php
+++ b/custom/languages/Portuguese/admin.php
@@ -10,10 +10,8 @@
  *  Translation By Douglas Teles & dasilvaj4
  *  Last Update: 24/04/2019
  */
-$language = array(
-    /*
-     *  Admin Control Panel
-     */
+$language = [
+    // Admin Control Panel
 
     // Login
     're-authenticate' => 'Por favor, logue-se novamente',
@@ -748,5 +746,4 @@ $language = array(
     'discord_bot_error_unauthorized' => 'A chave da API do site é inválida',
     'discord_bot_error_invrole' => 'A Role ID fornecida é inválida.',
     'discord_bot_error_hierarchy' => 'O bot não pode editar as funções deste usuário.'
-
-);
+];
diff --git a/custom/languages/Portuguese/api.php b/custom/languages/Portuguese/api.php
index aeb1913fea568ed0a9d97f2dab05913271511407..dfc00232b441cd52ba15bc950cf9de55f78995e1 100644
--- a/custom/languages/Portuguese/api.php
+++ b/custom/languages/Portuguese/api.php
@@ -11,8 +11,7 @@
  *  Last Update: 01/03/2021
  */
 
-$language = array(
-
+$language = [
     // Errors
     'api_disabled' => 'A API está desativada',
     'unknown_error' => 'Erro desconhecido',
@@ -65,4 +64,4 @@ $language = array(
     'discord_id_set' => 'Discord ID definido com sucesso',
     'discord_settings_updated' => 'Configurações do Discord atualizadas com sucesso',
     'discord_usernames_updated' => 'Nomes de usuário do Discord atualizados com sucesso'
-);
+];
diff --git a/custom/languages/Portuguese/emails.php b/custom/languages/Portuguese/emails.php
index 4c97b53580ee74e44db2d73984b62735c225ad12..3774fb41609c3bdd6f829262b638f8fe2519165d 100644
--- a/custom/languages/Portuguese/emails.php
+++ b/custom/languages/Portuguese/emails.php
@@ -11,8 +11,7 @@
  *  Last Update: 01/03/2021
  */
 
-$language = array(
-
+$language = [
     // General Options
     'greeting' => 'Olá,',
     'thanks' => 'Obrigado,',
@@ -28,4 +27,4 @@ $language = array(
     // Forum Topic Replies
     'forum_topic_reply_subject' => '{x} respondeu a {y}', // Don't remove {x} or {y}
     'forum_topic_reply_message' => '{x} respondeu a um tópico que você segue. Conteúdo: {z}' // Don't remove {x} or {z}
-);
+];
diff --git a/custom/languages/Portuguese/errors.php b/custom/languages/Portuguese/errors.php
index a223fde4a81faad18c7ac63e757e23a445b7b60a..22d6468363cd4639c366cf933f53817c522fabc7 100644
--- a/custom/languages/Portuguese/errors.php
+++ b/custom/languages/Portuguese/errors.php
@@ -10,10 +10,8 @@
  *  Translation By Douglas Teles, dasilvaj4 and Mansffer
  *  Last Update: 01/03/2021
  */
-$language = array(
-    /*
-     *  Errors
-     */
+$language = [
+    // Errors
     '404_title' => 'Desculpe!',
     '404_content' => 'Nós não encontramos essa página.',
     '404_back' => 'Voltar',
@@ -32,4 +30,4 @@ $language = array(
     'fatal_error_message_admin' => 'Desculpe, mas algo deu errado ao carregar a página. Detalhes do erro:',
     'in_file' => 'no arquivo <strong>{x}</strong>', // Don't replace {x}
     'on_line' => 'na linha <strong>{x}</strong>' // Don't replace {x}
-);
+];
diff --git a/custom/languages/Portuguese/general.php b/custom/languages/Portuguese/general.php
index fddebbee6bb28603b1e62dad317aa0bc21c146d9..ac61f8c2865f99588f9d2b235a0e748897af792a 100644
--- a/custom/languages/Portuguese/general.php
+++ b/custom/languages/Portuguese/general.php
@@ -10,10 +10,8 @@
  *  Translation by Douglas Teles & Mansffer
  *  Last Update: 01/03/2021
  */
-$language = array(
-    /*
-     *  General terms
-     */
+$language = [
+    // General terms
     'help' => 'Ajuda',
     'submit' => 'Enviar',
     'register' => 'Registrar',
@@ -71,9 +69,7 @@ $language = array(
     'link' => 'Link',
     'unlink' => 'Desvincular',
     
-    /*
-    *  Contact form
-    */
+    // Contact form
     'contact' => 'Contato',
     'message' => 'Mensagem',
     'email_address' => 'Endereço de email',
@@ -83,27 +79,18 @@ $language = array(
     'contact_message_sent' => 'Mensagem enviada com sucesso.',
     'contact_message_limit' => 'Você só pode enviar uma mensagem por hora. Você pode enviar uma mensagem em {x} minutos.', // Don't replace {x}
 
-    /*
-     *  Navbar
-     */
+    // Navbar
     'home' => 'Início',
     'more' => 'Mais',
     'status' => 'Status',
 
-    /*
-     *  Homepage
-     */
+    // Homepage
     'social' => 'Social',
 
-
-    /*
-     *  Help dialogues
-     */
+    // Help dialogues
     'markdown_help' => 'Você pode formatar sua postagem usando o Markdown. Para mais informações, veja <a href=\'https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet\' target=\'_blank\'>aqui</a>.',
 
-    /*
-    *  Server query
-    */
+    // Server query
     'online' => 'Online',
     'offline' => 'Offline',
     'player_count' => '{x}/{y}', // Don't replace {x} or {y}
@@ -121,15 +108,11 @@ $language = array(
     'no_players_online' => 'Não há jogadores online.',
     'and_x_more' => 'e {x} mais', // Don't replace {x}
 
-    /*
-     *  Cookie notice
-     */
+    // Cookie notice
     'cookie_notice' => 'Este site usa cookies para melhorar a sua experiência de navegação. Ao registar-se no nosso site ou fechar este aviso você concorda com a sua utilização.',
     'cookie_agree' => 'Concordo',
 
-    /*
-     *  Widgets
-     */
+    // Widgets
     'statistics' => 'Estatisticas',
     'users_registered' => 'Usuários Registrados',
     'latest_member' => 'Membro mais Recente',
@@ -148,13 +131,9 @@ $language = array(
     'no_default_server' => 'Não há servidor padrão, selecione um em StaffCP - Integrações - Minecraft.',
     'server_status' => 'Status do servidor',
 
-    /*
-     *  Privacy policy
-     */
+    // Privacy policy
     'privacy_policy' => 'Política de Privacidade',
 
-    /*
-     *  Custom page redirect
-     */
+    // Custom page redirect
     'redirecting_message' => 'Redirecionando...<br />Se você não for redirecionado automaticamente, clique <a href="{x}" rel="nofollow noopener">aqui</a>.' // Don't replace {x} which is the redirect URL
-);
+];
diff --git a/custom/languages/Portuguese/installer.php b/custom/languages/Portuguese/installer.php
index 1bebf04e6f03b2b9e30a5af346f097776c09f44d..2b97b01b53e66786c7631a03be1aad9903424803 100644
--- a/custom/languages/Portuguese/installer.php
+++ b/custom/languages/Portuguese/installer.php
@@ -11,10 +11,8 @@
  *  Last Update: 01/03/2021
  */
 
-$language = array(
-    /*
-     *  Installation
-     */
+$language = [
+    // Installation
     'install' => 'Instalar',
     'pre-release' => 'pre-release',
     'installer_welcome' => 'Bem-vindo ao NamelessMC versão 2.0.',
@@ -105,4 +103,4 @@ $language = array(
     'config_not_writable' => 'O arquivo de configuração não é gravável.',
 
     'session_doesnt_exist' => 'Não foi possível detectar a sessão. Salvar sessões é um requisito para usar o Nameless. Tente novamente e, se o problema persistir, entre em contato com sua hospedagem para obter suporte.'
-);
+];
diff --git a/custom/languages/Portuguese/log.php b/custom/languages/Portuguese/log.php
index 4be64b1db3b8b88e68cde9ee0eb0a746415aa847..58a4379d54e5b728901a427216b37cfc28f56ca7 100644
--- a/custom/languages/Portuguese/log.php
+++ b/custom/languages/Portuguese/log.php
@@ -1,6 +1,7 @@
 <?php
-$language = array(
+
+$language = [
     //forums
     'info_forums_lock' => 'Bloqueado',
     'info_forums_unlock' => 'Desbloqueado',
-);
\ No newline at end of file
+];
diff --git a/custom/languages/Portuguese/moderator.php b/custom/languages/Portuguese/moderator.php
index 8769fdd5d088dbc59a8b3e74162d5583adfd2851..37293a2f30b2d8c60ecf9eebe27df5088fb55bf9 100644
--- a/custom/languages/Portuguese/moderator.php
+++ b/custom/languages/Portuguese/moderator.php
@@ -9,7 +9,7 @@
  *  Portuguese Language - Moderator terms
  *  Translation By Douglas Teles & dasilvaj4
  */
-$language = array(
+$language = [
     'mod_cp' => 'ModCP',
     'staff_cp' => 'StaffCP',
     'overview' => 'Visão Geral',
@@ -103,4 +103,4 @@ $language = array(
     // Users
     'recent_registrations' => 'Cadastros Recentes',
     'reset_profile_banner' => 'Redefinir Banner do Perfil'
-);
+];
diff --git a/custom/languages/Portuguese/table.php b/custom/languages/Portuguese/table.php
index d83d0756e9c49c813c5d6761af51f0ecaa29e12a..2fac653941a94c20e483d3873b6f07f5da128a1f 100644
--- a/custom/languages/Portuguese/table.php
+++ b/custom/languages/Portuguese/table.php
@@ -10,13 +10,11 @@
  *  Translation By Douglas Teles & dasilvaj4
  *  Last Update: 11/04/2018
  */
-$language = array(
-    /*
-     *  Tables
-     */
+$language = [
+    // Tables
     'display_records_per_page' => 'Exibir _MENU_ registros por página', // Don't replace "_MENU_"
     'nothing_found' => 'Nenhum resultado encontrado',
     'page_x_of_y' => 'Exibindo página _PAGE_ de _PAGES_', // Don't replace "_PAGE_" or "_PAGES_"
     'no_records' => 'Nenhum registro disponível',
     'filtered' => '(filtrado de _MAX_ registros totais)' // Don't replace "_MAX_"
-);
+];
diff --git a/custom/languages/Portuguese/time.php b/custom/languages/Portuguese/time.php
index 318182a0ecce840c76d2b4af4ec949214ad321c1..606cdd7d7bdb5e3a56a5e7bf7d5275f25efa8a31 100644
--- a/custom/languages/Portuguese/time.php
+++ b/custom/languages/Portuguese/time.php
@@ -10,10 +10,8 @@
  *  Translation By Douglas Teles & dasilvaj4
  *  Last Update: 11/04/2018
  */
-$language = array(
-    /*
-     *  Time
-     */
+$language = [
+    // Time
     'time' => 'tempo', // Placeholder, no need to translate
     'seconds_short' => 's', // Shortened "seconds", eg "s"
     'less_than_a_minute' => 'a menos de um minuto atrás',
@@ -27,4 +25,4 @@ $language = array(
     '_months' => '{x} meses atrás',
     'about_1_year' => 'cerca de 1 ano atrás',
     'over_x_years' => 'mais de {x} anos atrás'
-);
+];
diff --git a/custom/languages/Portuguese/user.php b/custom/languages/Portuguese/user.php
index fbbee7634762c5ede60fcbdcee2d14dcf925474e..541d04f7c4e9970d2f2765265ecda785bbebf091 100644
--- a/custom/languages/Portuguese/user.php
+++ b/custom/languages/Portuguese/user.php
@@ -10,14 +10,10 @@
  *  Translation By Douglas Teles, dasilvaj4 and Mansffer
  *  Last Update: 01/03/2021
  */
-$language = array(
-    /*
-     *  Change this for the account validation message
-     */
+$language = [
+    // Change this for the account validation message
     'validate_account_command' => 'Para completar o registo, por favor execute o comando <strong>/validate {x}</strong> no servidor.', // Don't replace {x}
-    /*
-     *  User Related
-     */
+    // User Related
     'guest' => 'Visitante',
     'guests' => 'Visitantes',
 
@@ -221,16 +217,12 @@ $language = array(
     'latest_profile_posts' => 'Últimas postagens de perfil',
     'no_profile_posts' => 'Sem postagens de perfil.',
 
-    /*
-     *  Infractions area
-     */
+    // Infractions area
     'you_have_been_banned' => 'Você foi banido!',
     'you_have_received_a_warning' => 'Você recebeu uma advertencia!',
     'acknowledge' => 'Reconhecimento',
 
-    /*
-     *  Hooks
-     */
+    // Hooks
     'user_x_has_registered' => '{x} juntou-se ' . SITE_NAME . '!',
     'user_x_has_validated' => '{x} validou sua conta!',
 
@@ -249,4 +241,4 @@ $language = array(
     'discord_communication_error' => 'Ocorreu um erro ao se comunicar com o Bot do Discord. Certifique-se de que o bot está funcionando e que o URL do bot está correto.',
     'discord_unknown_error' => 'Ocorreu um erro desconhecido ao sincronizar as funções do Discord. Entre em contato com um administrador.',
     'discord_id_help' => 'Para obter informações sobre onde encontrar as IDs do Discord, leia <a href="https://support.discord.com/hc/en-us/articles/206346498-Where-can-I-find-my-User-Server-Message-ID-" target="_blank">isso.</a>'
-);
+];
diff --git a/custom/languages/Romanian/admin.php b/custom/languages/Romanian/admin.php
index 5c5eb21da877d5d1add27526a370188ca733960b..f078ce1c4b285cb7f843396ab50659c737fe490c 100644
--- a/custom/languages/Romanian/admin.php
+++ b/custom/languages/Romanian/admin.php
@@ -11,10 +11,8 @@
  *  Last Update: 26/06/2019
  */
 
-$language = array(
-    /*
-     *  Admin Control Panel
-     */
+$language = [
+    // Admin Control Panel
     // Login
     're-authenticate' => 'Vă rugăm să vă re-autentificati',
 
@@ -748,5 +746,4 @@ $language = array(
     'discord_bot_error_unauthorized' => 'Website API key is invalid',
     'discord_bot_error_invrole' => 'Provided Role ID is invalid.',
     'discord_bot_error_hierarchy' => 'The bot cannot edit this user\'s roles.'
-
-);
+];
diff --git a/custom/languages/Romanian/api.php b/custom/languages/Romanian/api.php
index 092950f82108be0fe396643aa66c08510e88497e..867f93d368fcb704734fdb99777215519e1e0d1d 100644
--- a/custom/languages/Romanian/api.php
+++ b/custom/languages/Romanian/api.php
@@ -11,8 +11,7 @@
  *  Last Update: 16/06/2018
  */
 
-$language = array(
-
+$language = [
     // Errors
     'api_disabled' => 'API is disabled',
     'unknown_error' => 'Eroare necunoscută',
@@ -65,4 +64,4 @@ $language = array(
     'discord_id_set' => 'Discord ID set successfully',
     'discord_settings_updated' => 'Discord settings updated successfully',
     'discord_usernames_updated' => 'Discord usernames updated successfully'
-);
+];
diff --git a/custom/languages/Romanian/emails.php b/custom/languages/Romanian/emails.php
index aa84eec7702e500bc339cbb8581d51a33e288b2a..ecc3e9fd20c528940de21d33e781f402b9cef459 100644
--- a/custom/languages/Romanian/emails.php
+++ b/custom/languages/Romanian/emails.php
@@ -9,8 +9,7 @@
  *  Romainian Language - Emails
  */
 
-$language = array(
-
+$language = [
     // General Options
     'greeting' => 'Salut,',
     'thanks' => 'Cu stimă,',
@@ -26,4 +25,4 @@ $language = array(
     // Forum Topic Replies
     'forum_topic_reply_subject' => '{x} has replied to {y}', // Don't remove {x} or {y}
     'forum_topic_reply_message' => '{x} has replied to a topic you follow. Content: {z}' // Don't remove {x} or {z}
-);
+];
diff --git a/custom/languages/Romanian/errors.php b/custom/languages/Romanian/errors.php
index 496bdd4883148d14e942a1f751a3799c0347b00f..22ee9166c080cf55c9ddc609ae9d7906c7d3536e 100644
--- a/custom/languages/Romanian/errors.php
+++ b/custom/languages/Romanian/errors.php
@@ -11,20 +11,18 @@
  *  Last Update: 16/06/2018
  */
 
-$language = array(
-    /*
-     *  Errors
-     */
+$language = [
+    // Errors
     '404_title' => ' Îmi pare rău!',
     '404_content' => ' Nu am putut găsi pagina cerută.',
     '404_back' => 'Mergi înapoi',
     '404_home' => ' Acasă',
     '404_error' => 'Dacă considerați că aceasta ar putea să fie o eroare , {x} va rugan să contactați un administrator{y}.', // Don't replace {x} or {y}
-	'403_title' => 'Îmi pare rău!!',
-	'403_content' => 'You do not have permission to view this page.',
-	'403_login' => 'Please log in to continue.',
-	'403_back' => 'Mergi înapoi',
-	'403_home' => 'Acasă',
+    '403_title' => 'Îmi pare rău!!',
+    '403_content' => 'You do not have permission to view this page.',
+    '403_login' => 'Please log in to continue.',
+    '403_back' => 'Mergi înapoi',
+    '403_home' => 'Acasă',
     'maintenance_title' => 'Modul de întreținere.',
     'maintenance_retry' => 'Reîncercați',
     'fatal_error' => 'Eroare fatală',
@@ -33,4 +31,4 @@ $language = array(
     'fatal_error_message_admin' => 'Ne pare rău, dar în timpul încărcării paginii s-a întâmplat ceva. Detalii eroare:',
     'in_file' => 'în fișierul <strong>{x}</strong>', // Don't replace {x}
     'on_line' => 'linia <strong>{x}</strong>' // Don't replace {x}
-);
+];
diff --git a/custom/languages/Romanian/general.php b/custom/languages/Romanian/general.php
index dbe015362aedc87c141ece5424c4c48941cbd18e..8c4274d83066d2ba1eb2b22d34569af5493c4b1d 100644
--- a/custom/languages/Romanian/general.php
+++ b/custom/languages/Romanian/general.php
@@ -11,10 +11,8 @@
  *  Last Update: 26/06/2019
  */
 
-$language = array(
-    /*
-     *  General terms
-     */
+$language = [
+    // General terms
     'help' => 'Help',
     'submit' => 'Trimite',
     'register' => 'Înregistrează-te ',
@@ -72,9 +70,7 @@ $language = array(
     'link' => 'Link',
     'unlink' => 'Unlink',
     
-    /*
-     *  Contact form
-     */
+    // Contact form
     'contact' => 'Contact',
     'message' => 'Mesaj',
     'email_address' => 'Adresa de e-mail',
@@ -84,27 +80,18 @@ $language = array(
     'contact_message_sent' => 'Mesaj trimis cu succes.',
     'contact_message_limit' => 'Puteți trimite doar un mesaj pe oră. Aveți posibilitatea să trimiteți un nou mesaj în {x} minute.', // Don't replace {x}
 
-    /*
-     *  Navbar
-     */
+    // Navbar
     'home' => 'Acasă',
     'more' => 'Mai mult',
     'status' => 'Statistici',
 
-    /*
-     *  Homepage
-     */
+    // Homepage
     'social' => 'Social',
 
-
-    /*
-     *  Help dialogues
-     */
+    // Help dialogues
     'markdown_help' => 'Puteți să vă formatați postarea folosind Markdown. Pentru mai multe informații, vedeți <a href=\'https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet\' target=\'_blank\'>aici</a>.',
 
-    /*
-     *  Server query
-     */
+    // Server query
     'online' => 'Online',
     'offline' => 'Offline',
     'player_count' => '{x}/{y}', // Don't replace {x} or {y}
@@ -122,15 +109,11 @@ $language = array(
     'no_players_online' => 'Momentan nu sunt jucători online.',
     'and_x_more' => 'şi alţii {x}', // Don't replace {x}
 
-    /*
-     *  Cookie notice
-     */
+    // Cookie notice
     'cookie_notice' => 'Acest site utilizează cookie-uri pentru a îmbunătăți experiența dvs. de navigare. Prin înregistrarea pe site-ul nostru sau închiderea acestei notificări sunteți de acord cu utilizarea lor.',
     'cookie_agree' => 'De acord',
 
-    /*
-     *  Widgets
-     */
+    // Widgets
     'statistics' => 'Statistici',
     'users_registered' => 'Utilizatori înregistrați',
     'latest_member' => 'Cel mai nou membru',
@@ -149,13 +132,9 @@ $language = array(
     'no_default_server' => 'There is no default server, please select one in StaffCP - Integrations - Minecraft.',
     'server_status' => 'Server Status',
 
-    /*
-     *  Privacy policy
-     */
+    // Privacy policy
     'privacy_policy' => 'Politica de confidentialitate',
 
-    /*
-     *  Custom page redirect
-     */
+    // Custom page redirect
     'redirecting_message' => 'În curs de redirecționare...<br />Dacă nu ești redirecționat automat, te rog <a href="{x}" rel="nofollow noopener">apasă aici</a>.' // Don't replace {x} which is the redirect URL
-);
+];
diff --git a/custom/languages/Romanian/installer.php b/custom/languages/Romanian/installer.php
index ece6882cb72c85ab4364034eefc80858958db568..031992ceee8b7db247361af41a7a7965ce5b01dd 100644
--- a/custom/languages/Romanian/installer.php
+++ b/custom/languages/Romanian/installer.php
@@ -11,10 +11,8 @@
  *  Last Update: 17/11/2018
  */
 
-$language = array(
-    /*
-     *  Installation
-     */
+$language = [
+    // Installation
     'install' => 'Instalare',
     'pre-release' => 'pre-lansare',
     'installer_welcome' => 'Bine ați venit la versiunea 2.0-pre-release a programului NamelessMC.',
@@ -105,4 +103,4 @@ $language = array(
     'config_not_writable' => 'The config file is not writable.',
 
     'session_doesnt_exist' => 'Unable to detect session. Sessions saving are a requirement to use Nameless. Please try again, and if the issue persists, please contact your web host for support.'
-);
+];
diff --git a/custom/languages/Romanian/log.php b/custom/languages/Romanian/log.php
index 5ab53c40d6a530db34ed305094f137f03c98823d..e38e3aedf83f5ce320dd06b1c2e4fe33f5ef9e5e 100644
--- a/custom/languages/Romanian/log.php
+++ b/custom/languages/Romanian/log.php
@@ -1,6 +1,7 @@
 <?php
-$language = array(
+
+$language = [
     //forums
     'info_forums_lock' => 'Locked',
     'info_forums_unlock' => 'Unlocked',
-);
\ No newline at end of file
+];
diff --git a/custom/languages/Romanian/moderator.php b/custom/languages/Romanian/moderator.php
index 4e07e6a3e6da93234294f11b925e435f64c20b61..774438e70e9c289f9eb93b46015ccbe71679372e 100644
--- a/custom/languages/Romanian/moderator.php
+++ b/custom/languages/Romanian/moderator.php
@@ -11,7 +11,7 @@
  *  Last Update: 23/11/2018
  */
 
-$language = array(
+$language = [
     'mod_cp' => 'Panou Moderator',
     'staff_cp' => 'Panoul de Control',
     'overview' => 'Prezentare generală',
@@ -106,5 +106,4 @@ $language = array(
     // Users
     'recent_registrations' => 'Înregistrări recente',
     'reset_profile_banner' => 'Resetaţi bannerul profilului'
-
-);
+];
diff --git a/custom/languages/Romanian/table.php b/custom/languages/Romanian/table.php
index 208a10c526b7dc63dde1aaf08d02be7c695a5be8..3818ea8de973c027c103b6ee238a555fbc908ca9 100644
--- a/custom/languages/Romanian/table.php
+++ b/custom/languages/Romanian/table.php
@@ -11,13 +11,11 @@
  *  Last Update: 16/06/2018
  */
 
-$language = array(
-    /*
-     *  Tables
-     */
+$language = [
+    // Tables
     'display_records_per_page' => ' Afiseaza _MENU_ rezultate per pagină ', // Don't replace "_MENU_"
     'nothing_found' => 'Nu a fost gasit nici un rezultat',
     'page_x_of_y' => 'Afişare pagina _PAGE_ din _PAGES_', // Don't replace "_PAGE_" or "_PAGES_"
     'no_records' => 'Nu există înregistrări disponibile',
     'filtered' => '(filtrat din _MAX_ înregistrări totale)' // Don't replace "_MAX_"
-);
+];
diff --git a/custom/languages/Romanian/time.php b/custom/languages/Romanian/time.php
index 0d6d30d99119b8b693fdd878217b352b8f7808fc..af11f371c1b2c66efff803ed3aff07d50cc5082f 100644
--- a/custom/languages/Romanian/time.php
+++ b/custom/languages/Romanian/time.php
@@ -11,10 +11,8 @@
  *  Last Update: 29/06/2018
  */
 
-$language = array(
-    /*
-     *  Time
-     */
+$language = [
+    // Time
     'time' => 'time', // Placeholder, no need to translate
     'seconds_short' => 's', // Shortened "seconds", eg "s"
     'less_than_a_minute' => 'În urmă cu mai puțin de un minut',
@@ -28,4 +26,4 @@ $language = array(
     '_months' => 'Acum {x} luni',
     'about_1_year' => 'Acum un an',
     'over_x_years' => 'Acum {x} ani'
-);
+];
diff --git a/custom/languages/Romanian/user.php b/custom/languages/Romanian/user.php
index cb38e4598fd72f5e6eb96e030de20bb05031aa5d..0e409c74215db8db13cc7dd07c231b0d8da3bbf5 100644
--- a/custom/languages/Romanian/user.php
+++ b/custom/languages/Romanian/user.php
@@ -11,15 +11,11 @@
  *  Last Update: 10/09/2019
  */
 
-$language = array(
-    /*
-     *  Change this for the account validation message
-     */
+$language = [
+    // Change this for the account validation message
     'validate_account_command' => 'Pentru a finaliza înregistrarea, vă rugăm să executați comanda <strong>/validate {x}</strong> in joc.', // Don't replace {x}
 
-    /*
-     *  User Related
-     */
+    // User Related
     'guest' => 'Vizitator',
     'guests' => 'Vizitatori',
 
@@ -226,16 +222,12 @@ $language = array(
     'latest_profile_posts' => 'Latest Profile Posts',
     'no_profile_posts' => 'No profile posts.',
 
-    /*
-     *  Infractions area
-     */
+    // Infractions area
     'you_have_been_banned' => 'Ați fost banat!',
     'you_have_received_a_warning' => 'Ați primit un avertisment!',
     'acknowledge' => 'Am înțeles',
 
-    /*
-     *  Hooks
-     */
+    // Hooks
     'user_x_has_registered' => '{x} s-a alaturat comunităţii!',
     'user_x_has_validated' => '{x} has validated their account!',
 
@@ -254,4 +246,4 @@ $language = array(
     'discord_communication_error' => 'There was an error while communicating with the Discord Bot. Please ensure the bot is running and your Bot URL is correct.',
     'discord_unknown_error' => 'There was an unknown error while syncing Discord roles. Please contact an administrator.',
     'discord_id_help' => 'For information on where to find Discord ID\'s, please read <a href="https://support.discord.com/hc/en-us/articles/206346498-Where-can-I-find-my-User-Server-Message-ID-" target="_blank">this.</a>'
-);
+];
diff --git a/custom/languages/Russian/admin.php b/custom/languages/Russian/admin.php
index 87c8e942d1314729a867b818cd6c622755f887fa..4ea9981385a8a66e656fef4d16f5b76e24d3d916 100644
--- a/custom/languages/Russian/admin.php
+++ b/custom/languages/Russian/admin.php
@@ -10,10 +10,8 @@
  *  Russian Language - Admin
  */
 
-$language = array(
-    /*
-     *  Admin Control Panel
-     */
+$language = [
+    // Admin Control Panel
     // Login
     're-authenticate' => 'Пожалуйста, повторите аутентификацию',
 
@@ -746,5 +744,4 @@ $language = array(
     'discord_bot_error_unauthorized' => 'API ключ сайта некорректный',
     'discord_bot_error_invrole' => 'ID роли некорректный.',
     'discord_bot_error_hierarchy' => 'The bot cannot edit this user\'s roles.'
-
-);
+];
diff --git a/custom/languages/Russian/api.php b/custom/languages/Russian/api.php
index 62df0e2863afbf79c6c102f3856b31bb32b24545..cd311cc8bf71695fedd945ebafbbe4082e0d75cd 100644
--- a/custom/languages/Russian/api.php
+++ b/custom/languages/Russian/api.php
@@ -10,8 +10,7 @@
  *  Russian Language - API
  */
 
-$language = array(
-
+$language = [
     // Errors
     'api_disabled' => 'Возможности API отключены',
     'unknown_error' => 'Неизвестная ошибка',
@@ -64,4 +63,4 @@ $language = array(
     'discord_id_set' => 'Discord ID установлен',
     'discord_settings_updated' => 'Настройки в Discord обновлены',
     'discord_usernames_updated' => 'Никнеймы в Discord обновлены'
-);
+];
diff --git a/custom/languages/Russian/emails.php b/custom/languages/Russian/emails.php
index d57ae38175efcba27aa77d89b23838c80a31d25a..f50333f2850be3a66f2d9ec7cbcedeef62f52fa0 100644
--- a/custom/languages/Russian/emails.php
+++ b/custom/languages/Russian/emails.php
@@ -10,8 +10,7 @@
  *  Russian Language - Emails
  */
 
-$language = array(
-
+$language = [
     // General Options
     'greeting' => 'Привет,',
     'thanks' => 'Спасибо,',
@@ -27,4 +26,4 @@ $language = array(
     // Forum Topic Replies
     'forum_topic_reply_subject' => '{x} ответил {y}', // Don't remove {x} or {y}
     'forum_topic_reply_message' => '{x} ответил вам в теме. Content: {z}' // Don't remove {x} or {z}
-);
+];
diff --git a/custom/languages/Russian/errors.php b/custom/languages/Russian/errors.php
index 149c76b06d78c1131848663efd9dcbe2f4fbc5ae..a077284ce39d6b9ad35f312eb5eb71d47a69bac5 100644
--- a/custom/languages/Russian/errors.php
+++ b/custom/languages/Russian/errors.php
@@ -10,10 +10,8 @@
  *  Russian Language - Errors
  */
 
-$language = array(
-    /*
-     *  Errors
-     */
+$language = [
+    // Errors
     '404_title' => 'Простите!',
     '404_content' => 'Мы не смогли найти эту страницу.',
     '404_back' => 'Назад',
@@ -32,4 +30,4 @@ $language = array(
     'fatal_error_message_admin' => 'Простите, но что-то пошло не так при загрузке страницы. Сведения об ошибке:',
     'in_file' => 'в файле <strong>{x}</strong>', // Don't replace {x}
     'on_line' => 'на строке <strong>{x}</strong>' // Don't replace {x}
-);
+];
diff --git a/custom/languages/Russian/general.php b/custom/languages/Russian/general.php
index f67fca42497925755d3558d16587912f9c342a75..d3a78a1803bc9943f77b3aff1ef3d1e9b148d622 100644
--- a/custom/languages/Russian/general.php
+++ b/custom/languages/Russian/general.php
@@ -10,10 +10,8 @@
  *  Russian Language - General terms
  */
 
-$language = array(
-    /*
-     *  General terms
-     */
+$language = [
+    // General terms
     'help' => 'Помощь',
     'submit' => 'Подтвердить',
     'register' => 'Регистрация',
@@ -71,9 +69,7 @@ $language = array(
     'link' => 'Связать',
     'unlink' => 'Отвязать',
 
-    /*
-     *  Contact form
-     */
+    // Contact form
     'contact' => 'Обратная связь',
     'message' => 'Сообщение',
     'email_address' => 'Email-адрес',
@@ -83,28 +79,18 @@ $language = array(
     'contact_message_sent' => 'Сообщение успешно отправлено.',
     'contact_message_limit' => 'Вы можете отправлять только одно сообщение в час. Отправьте следующее сообщение через {x} минут.', // Don't replace {x}
 
-
-    /*
-     *  Navbar
-     */
+    // Navbar
     'home' => 'Главная',
     'more' => 'Больше',
     'status' => 'Серверы',
 
-    /*
-     *  Homepage
-     */
+    // Homepage
     'social' => 'Мы в социальных сетях',
 
-
-    /*
-     *  Help dialogues
-     */
+    // Help dialogues
     'markdown_help' => 'Вы можете отформатировать своё сообщение с помощью Markdown. Для получения дополнительной информации см. <a href=\'https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet\' target=\'_blank\'>здесь</a>.',
 
-    /*
-     *  Server query
-     */
+    // Server query
     'online' => 'Онлайн',
     'offline' => 'Оффлайн',
     'player_count' => '{x}/{y}', // Don't replace {x} or {y}
@@ -122,15 +108,11 @@ $language = array(
     'no_players_online' => 'Сейчас нет игроков онлайн.',
     'and_x_more' => 'and {x} more', // Don't replace {x}
 
-    /*
-     *  Cookie notice
-     */
+    // Cookie notice
     'cookie_notice' => 'Этот веб-сайт использует файлы cookie для улучшения вашего опыта просмотра. Регистрируясь на нашем сайте или закрывая данное уведомление, вы соглашаетесь с их использованием.',
     'cookie_agree' => 'Подтвердить',
 
-    /*
-     *  Widgets
-     */
+    // Widgets
     'statistics' => 'Статистика',
     'users_registered' => 'Всего игроков',
     'latest_member' => 'Посл. регистр.',
@@ -149,13 +131,9 @@ $language = array(
     'no_default_server' => 'Нету сервера по умолчанию, сделать это можно в админ панели - Интеграции - Minecraft.',
     'server_status' => 'Статус сервера',
 
-    /*
-     *  Privacy policy
-     */
+    // Privacy policy
     'privacy_policy' => 'Политика конфиденциальности',
 
-    /*
-     *  Custom page redirect
-     */
+    // Custom page redirect
     'redirecting_message' => 'Перенаправление...<br />Если вы не перенаправлены автоматически, пожалуйста, нажмите на <a href="{x}" rel="nofollow noopener">эту кнопку</a>.' // Don't replace {x} which is the redirect URL
-);
+];
diff --git a/custom/languages/Russian/installer.php b/custom/languages/Russian/installer.php
index e1fa1364f1c702a1adda9a63b0f23925edafa971..eff2804d1ed65b9b2bcda1a8eb4cf6b136d850ba 100644
--- a/custom/languages/Russian/installer.php
+++ b/custom/languages/Russian/installer.php
@@ -10,10 +10,8 @@
  *  Russian Language - Installation
  */
 
-$language = array(
-    /*
-     *  Installation
-     */
+$language = [
+    // Installation
     'install' => 'Установка',
     'pre-release' => 'пред-релиз',
     'installer_welcome' => 'Добро пожаловать в NamelessMC пред-релизной версии 2.0.',
@@ -104,4 +102,4 @@ $language = array(
     'config_not_writable' => 'Файл конфигурации недоступен для записи.',
 
     'session_doesnt_exist' => 'Не определенасессия. Сессии используются при работе с NamelessMC. Свяжитесь с тех. поддержкой вашего провайдера.'
-);
+];
diff --git a/custom/languages/Russian/log.php b/custom/languages/Russian/log.php
index 5ab53c40d6a530db34ed305094f137f03c98823d..e38e3aedf83f5ce320dd06b1c2e4fe33f5ef9e5e 100644
--- a/custom/languages/Russian/log.php
+++ b/custom/languages/Russian/log.php
@@ -1,6 +1,7 @@
 <?php
-$language = array(
+
+$language = [
     //forums
     'info_forums_lock' => 'Locked',
     'info_forums_unlock' => 'Unlocked',
-);
\ No newline at end of file
+];
diff --git a/custom/languages/Russian/moderator.php b/custom/languages/Russian/moderator.php
index 772728e224a01230cff61a73cb4d7c85ebc02679..10eae44c8e1bbea213bd8c88d56448e91a4984ba 100644
--- a/custom/languages/Russian/moderator.php
+++ b/custom/languages/Russian/moderator.php
@@ -10,7 +10,7 @@
  *  Russian Language - Moderator terms
  */
 
-$language = array(
+$language = [
     'mod_cp' => 'Панель модератора',
     'staff_cp' => 'Админ панель',
     'overview' => 'Обзор',
@@ -105,5 +105,4 @@ $language = array(
     // Users
     'recent_registrations' => 'Последние регистрации',
     'reset_profile_banner' => 'Сбросить баннер профиля'
-
-);
+];
diff --git a/custom/languages/Russian/table.php b/custom/languages/Russian/table.php
index 9ac611fce9392055646c5ace5bb09aa1aa8de473..a62c95a9204324e96e59eedb216c8cd04e9c3571 100644
--- a/custom/languages/Russian/table.php
+++ b/custom/languages/Russian/table.php
@@ -10,13 +10,11 @@
  *  Russian Language - Table
  */
 
-$language = array(
-    /*
-     *  Tables
-     */
+$language = [
+    // Tables
     'display_records_per_page' => 'Отображать _MENU_ записей на страницу', // Don't replace "_MENU_"
     'nothing_found' => 'Результаты не найдены.',
     'page_x_of_y' => 'Отображена страница _PAGE_ из _PAGES_', // Don't replace "_PAGE_" or "_PAGES_"
     'no_records' => 'Нет доступных записей',
     'filtered' => '(filtered from _MAX_ total records)' // Don't replace "_MAX_"
-);
+];
diff --git a/custom/languages/Russian/time.php b/custom/languages/Russian/time.php
index 85db81a69215d8db1f9ddf336bf2f461cb9c813e..73eb81ca00ef173c98346db5559aae2e43717700 100644
--- a/custom/languages/Russian/time.php
+++ b/custom/languages/Russian/time.php
@@ -10,21 +10,19 @@
  *  Russian Language - Time
  */
 
-$language = array(
-    /*
-     *  Time
-     */
+$language = [
+    // Time
     'time' => 'time', // Placeholder, no need to translate
     'seconds_short' => 'сек.', // Shortened "seconds", eg "s"
     'less_than_a_minute' => 'меньше минуты назад',
     '1_minute' => '1 минуту назад',
-    '_minutes' => array('{x} минуту назад','{x} минуты назад','{x} минут назад'),
+    '_minutes' => ['{x} минуту назад','{x} минуты назад','{x} минут назад'],
     'about_1_hour' => 'около часа назад',
-    '_hours' => array('{x} час назад','{x} часа назад','{x} часов назад'),
+    '_hours' => ['{x} час назад','{x} часа назад','{x} часов назад'],
     '1_day' => '1 день назад',
-    '_days' => array('{x} день назад', '{x} дня назад', '{x} дней назад'),
+    '_days' => ['{x} день назад', '{x} дня назад', '{x} дней назад'],
     'about_1_month' => 'около месяца назад',
-    '_months' => array('{x} месяц назад', '{x} месяца назад', '{x} месяцев назад'),
+    '_months' => ['{x} месяц назад', '{x} месяца назад', '{x} месяцев назад'],
     'about_1_year' => 'около года назад',
-    'over_x_years' => array('более {x} года назад', 'более {x} лет назад', 'более {x} лет назад')
-);
+    'over_x_years' => ['более {x} года назад', 'более {x} лет назад', 'более {x} лет назад']
+];
diff --git a/custom/languages/Russian/user.php b/custom/languages/Russian/user.php
index 2dcdb384a14d51db9475b6ccb7e6a22aeac206ba..1d03b1fc4091305861a2d66e3e4bb5f0a5b9a134 100644
--- a/custom/languages/Russian/user.php
+++ b/custom/languages/Russian/user.php
@@ -10,15 +10,11 @@
  *  Russian Language - Users
  */
 
-$language = array(
-    /*
-     *  Change this for the account validation message
-     */
+$language = [
+    // Change this for the account validation message
     'validate_account_command' => 'Для завершения регистрации, пожалуйста, введите команду <strong>/validate {x}</strong> на сервере.', // Don't replace {x}
 
-    /*
-     *  User Related
-     */
+    // User Related
     'guest' => 'Гость',
     'guests' => 'Гости',
 
@@ -225,16 +221,12 @@ $language = array(
     'latest_profile_posts' => 'Последние записи в профиле',
     'no_profile_posts' => 'Нету записей в профиле.',
 
-    /*
-     *  Infractions area
-     */
+    // Infractions area
     'you_have_been_banned' => 'Вы были забанены!',
     'you_have_received_a_warning' => 'Вы получили предупреждение!',
     'acknowledge' => 'База знаний',
 
-    /*
-     *  Hooks
-     */
+    // Hooks
     'user_x_has_registered' => '{x} присоединился к ' . SITE_NAME . '!',
     'user_x_has_validated' => '{x} has validated their account!',
 
@@ -253,4 +245,4 @@ $language = array(
     'discord_communication_error' => 'There was an error while communicating with the Discord Bot. Please ensure the bot is running and your Bot URL is correct.',
     'discord_unknown_error' => 'There was an unknown error while syncing Discord roles. Please contact an administrator.',
     'discord_id_help' => 'For information on where to find Discord ID\'s, please read <a href="https://support.discord.com/hc/en-us/articles/206346498-Where-can-I-find-my-User-Server-Message-ID-" target="_blank">this.</a>'
-);
+];
diff --git a/custom/languages/Russian/version.php b/custom/languages/Russian/version.php
index d42c6ae1ad484e74f4dae8b575919295d9977344..ae61b497dd447edd33d8bde6eccb76400a4140cb 100644
--- a/custom/languages/Russian/version.php
+++ b/custom/languages/Russian/version.php
@@ -19,7 +19,7 @@ $language_version = '2.0.0-pr9';
 $language_html = 'ru';
 
 // Plural function
-if (!function_exists('pluralForm')) {
+if (! function_exists('pluralForm')) {
     function pluralForm($n, $forms) {
         return $n % 10 == 1 && $n % 100 != 11 ? $forms[0] : ($n % 10 >= 2 && $n % 10 <= 4 && ($n % 100 < 10 || $n % 100 >= 20) ? $forms[1] : $forms[2]);
     }
diff --git a/custom/languages/Slovak/admin.php b/custom/languages/Slovak/admin.php
index 2148d38545c16667de168f53f357addb7c79ca51..b01a55658ac024ac8054864ac3c8ecf5371b65f4 100644
--- a/custom/languages/Slovak/admin.php
+++ b/custom/languages/Slovak/admin.php
@@ -9,10 +9,8 @@
  *  Slovak Language - Admin
  */
 
-$language = array(
-    /*
-     *  Admin Control Panel
-     */
+$language = [
+    // Admin Control Panel
     // Login
     're-authenticate' => 'Prosím overte prihlásenie',
 
@@ -745,5 +743,4 @@ $language = array(
     'discord_bot_error_unauthorized' => 'Website API key is invalid',
     'discord_bot_error_invrole' => 'Provided Role ID is invalid.',
     'discord_bot_error_hierarchy' => 'The bot cannot edit this user\'s roles.'
-
-);
+];
diff --git a/custom/languages/Slovak/api.php b/custom/languages/Slovak/api.php
index 1c2267fee159ff365f82ed7b2e56a7d9af5a2d52..e0c029854b96b5279bd8dc9c523d7ae7402e6a9f 100644
--- a/custom/languages/Slovak/api.php
+++ b/custom/languages/Slovak/api.php
@@ -9,8 +9,7 @@
  *  Slovak Language - API
  */
 
-$language = array(
-
+$language = [
     // Errors
     'api_disabled' => 'API is disabled',
     'unknown_error' => 'Unknown error',
@@ -63,4 +62,4 @@ $language = array(
     'discord_id_set' => 'Discord ID set successfully',
     'discord_settings_updated' => 'Discord settings updated successfully',
     'discord_usernames_updated' => 'Discord usernames updated successfully'
-);
+];
diff --git a/custom/languages/Slovak/emails.php b/custom/languages/Slovak/emails.php
index 5b56850209a918b34171047389521d26292c1516..f8fd109bb13ef54e4c7e914290f886ff981524d7 100644
--- a/custom/languages/Slovak/emails.php
+++ b/custom/languages/Slovak/emails.php
@@ -9,8 +9,7 @@
  *  Slovak Language - Emails
  */
 
-$language = array(
-
+$language = [
     // General Options
     'greeting' => 'Hi,',
     'thanks' => 'Thanks,',
@@ -26,4 +25,4 @@ $language = array(
     // Forum Topic Replies
     'forum_topic_reply_subject' => '{x} has replied to {y}', // Don't remove {x} or {y}
     'forum_topic_reply_message' => '{x} has replied to a topic you follow. Content: {z}' // Don't remove {x} or {z}
-);
+];
diff --git a/custom/languages/Slovak/errors.php b/custom/languages/Slovak/errors.php
index 50139753627b07fe1c32c954f785e0da8be0f09e..721febee98333e6ea78119dbf94eca6d846da8fb 100644
--- a/custom/languages/Slovak/errors.php
+++ b/custom/languages/Slovak/errors.php
@@ -9,10 +9,8 @@
  *  Slovak Language - Errors
  */
 
-$language = array(
-    /*
-     *  Errors
-     */
+$language = [
+    // Errors
     '404_title' => 'Ospravedlňujeme sa!',
     '404_content' => 'Ale túto stránku nemôžeme nájsť :(',
     '404_back' => 'Vrátiť späť',
@@ -31,4 +29,4 @@ $language = array(
     'fatal_error_message_admin' => 'Sorry, but something went wrong while loading the page. Error details:',
     'in_file' => 'in file <strong>{x}</strong>', // Don't replace {x}
     'on_line' => 'on line <strong>{x}</strong>' // Don't replace {x}
-);
+];
diff --git a/custom/languages/Slovak/general.php b/custom/languages/Slovak/general.php
index f8fa8bd91491d209b081b89a28cb84f6c62953a1..2e5e1e0062d0eab19fdcedfaa69d25b9483d0c5b 100644
--- a/custom/languages/Slovak/general.php
+++ b/custom/languages/Slovak/general.php
@@ -9,10 +9,8 @@
  *  Czech Language - General terms
  */
 
-$language = array(
-    /*
-     *  General terms
-     */
+$language = [
+    // General terms
     'help' => 'Help',
     'submit' => 'Potvrdiť',
     'register' => 'Registrovať sa',
@@ -70,9 +68,7 @@ $language = array(
     'link' => 'Link',
     'unlink' => 'Unlink',
     
-    /*
-     *  Contact form
-     */
+    // Contact form
     'contact' => 'Kontakt',
     'message' => 'Správa',
     'email_address' => 'Email Address',
@@ -82,27 +78,18 @@ $language = array(
     'contact_message_sent' => 'Správa bola úspešne odoslaná.',
     'contact_message_limit' => 'Můžete odeslat pouze jednu zprávu za hodinu. Další můžete odeslat za {x} minut.', // Don't replace {x}
 
-    /*
-     *  Navbar
-     */
+    // Navbar
     'home' => 'Domov',
     'more' => 'Viac',
     'status' => 'Status',
 
-    /*
-     *  Homepage
-     */
+    // Homepage
     'social' => 'Sociálné siete',
 
-
-    /*
-     *  Help dialogues
-     */
+    // Help dialogues
     'markdown_help' => 'Formát môžete naformátovať pomocou značky Markdown. Dalšie informácie nájdete v časti <a href=\'https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet\' target=\'_blank\'>Tu</a>.',
 
-    /*
-     *  Server query
-     */
+    // Server query
     'online' => 'Online',
     'offline' => 'Offline',
     'player_count' => '{x}/{y}', // Don't replace {x} or {y}
@@ -120,15 +107,11 @@ $language = array(
     'no_players_online' => 'There are no players online.',
     'and_x_more' => 'and {x} more', // Don't replace {x}
 
-    /*
-     *  Cookie notice
-     */
+    // Cookie notice
     'cookie_notice' => 'This website uses cookies to enhance your browsing experience. By registering on our website or closing this notice you agree with their use.',
     'cookie_agree' => 'Agree',
 
-    /*
-     *  Widgets
-     */
+    // Widgets
     'statistics' => 'Statistics',
     'users_registered' => 'Users Registered',
     'latest_member' => 'Latest Member',
@@ -147,14 +130,9 @@ $language = array(
     'no_default_server' => 'There is no default server, please select one in StaffCP - Integrations - Minecraft.',
     'server_status' => 'Server Status',
 
-    /*
-     *  Privacy policy
-     */
+    // Privacy policy
     'privacy_policy' => 'Privacy Policy',
 
-    /*
-     *  Custom page redirect
-     */
+    // Custom page redirect
     'redirecting_message' => 'Redirecting...<br />If you are not redirected automatically, please click <a href="{x}" rel="nofollow noopener">here</a>.' // Don't replace {x} which is the redirect URL
-);
-
+];
diff --git a/custom/languages/Slovak/installer.php b/custom/languages/Slovak/installer.php
index 8a20ab3bba2dc3201de04e554d1f111093af7d63..57df05dcaf5c1f4678c76c2e9d96ad88335e8406 100644
--- a/custom/languages/Slovak/installer.php
+++ b/custom/languages/Slovak/installer.php
@@ -9,10 +9,8 @@
  *  Slovak Language - Installation
  */
 
-$language = array(
-    /*
-     *  Installation
-     */
+$language = [
+    // Installation
     'install' => 'Install',
     'pre-release' => 'pre-release',
     'installer_welcome' => 'Welcome to NamelessMC version 2.0 pre-release.',
@@ -103,4 +101,4 @@ $language = array(
     'config_not_writable' => 'The config file is not writable.',
 
     'session_doesnt_exist' => 'Unable to detect session. Sessions saving are a requirement to use Nameless. Please try again, and if the issue persists, please contact your web host for support.'
-);
+];
diff --git a/custom/languages/Slovak/log.php b/custom/languages/Slovak/log.php
index 5ab53c40d6a530db34ed305094f137f03c98823d..e38e3aedf83f5ce320dd06b1c2e4fe33f5ef9e5e 100644
--- a/custom/languages/Slovak/log.php
+++ b/custom/languages/Slovak/log.php
@@ -1,6 +1,7 @@
 <?php
-$language = array(
+
+$language = [
     //forums
     'info_forums_lock' => 'Locked',
     'info_forums_unlock' => 'Unlocked',
-);
\ No newline at end of file
+];
diff --git a/custom/languages/Slovak/moderator.php b/custom/languages/Slovak/moderator.php
index aae1f80dab97a10634aeda9acd1c0bee4c0c55ac..3a3a6a2ea240b3911ae1357fdd81f5d817af7f75 100644
--- a/custom/languages/Slovak/moderator.php
+++ b/custom/languages/Slovak/moderator.php
@@ -9,7 +9,7 @@
  *  EnglishUK Language - Moderator terms
  */
 
-$language = array(
+$language = [
     'mod_cp' => 'ModCP',
     'staff_cp' => 'StaffCP',
     'overview' => 'Overview',
@@ -104,5 +104,4 @@ $language = array(
     // Users
     'recent_registrations' => 'Recent Registrations',
     'reset_profile_banner' => 'Reset Profile Banner'
-
-);
+];
diff --git a/custom/languages/Slovak/table.php b/custom/languages/Slovak/table.php
index 930594344883a98d8c8d71c86442d978d50fc7ac..a651c0d5ebb1ffdcd548a02223163dfd9714b688 100644
--- a/custom/languages/Slovak/table.php
+++ b/custom/languages/Slovak/table.php
@@ -9,13 +9,11 @@
  *  EnglishUK Language - Table
  */
 
-$language = array(
-    /*
-     *  Tables
-     */
+$language = [
+    // Tables
     'display_records_per_page' => 'Display _MENU_ records per page', // Don't replace "_MENU_"
     'nothing_found' => 'No results found',
     'page_x_of_y' => 'Showing page _PAGE_ of _PAGES_', // Don't replace "_PAGE_" or "_PAGES_"
     'no_records' => 'No records available',
     'filtered' => '(filtered from _MAX_ total records)' // Don't replace "_MAX_"
-);
+];
diff --git a/custom/languages/Slovak/time.php b/custom/languages/Slovak/time.php
index e1bcb406d851e4ac49604a5e6810ed2c98ad51c1..20bcce0268c186c65e28b32fd0cdab5854f56bcc 100644
--- a/custom/languages/Slovak/time.php
+++ b/custom/languages/Slovak/time.php
@@ -9,10 +9,8 @@
  *  EnglishUK Language - Time
  */
 
-$language = array(
-    /*
-     *  Time
-     */
+$language = [
+    // Time
     'time' => 'time', // Placeholder, no need to translate
     'seconds_short' => 's', // Shortened "seconds", eg "s"
     'less_than_a_minute' => 'less than a minute ago',
@@ -26,4 +24,4 @@ $language = array(
     '_months' => '{x} months ago',
     'about_1_year' => 'about 1 year ago',
     'over_x_years' => 'over {x} years ago'
-);
+];
diff --git a/custom/languages/Slovak/user.php b/custom/languages/Slovak/user.php
index 8735ec9dddc3c280da1de7a40693f8eed1285a8d..8951d8cbe868d74efaf0937cc3e88623a0eb54c9 100644
--- a/custom/languages/Slovak/user.php
+++ b/custom/languages/Slovak/user.php
@@ -9,15 +9,11 @@
  *  Slovak Language - Users
  */
 
-$language = array(
-    /*
-     *  Change this for the account validation message
-     */
+$language = [
+    // Change this for the account validation message
     'validate_account_command' => 'To complete registration, please execute the command <strong>/validate {x}</strong> ingame.', // Don't replace {x}
 
-    /*
-     *  User Related
-     */
+    // User Related
     'guest' => 'Návštevník',
     'guests' => 'Návštevníci',
 
@@ -224,16 +220,12 @@ $language = array(
     'latest_profile_posts' => 'Latest Profile Posts',
     'no_profile_posts' => 'No profile posts.',
 
-    /*
-     *  Infractions area
-     */
+    // Infractions area
     'you_have_been_banned' => 'You have been banned!',
     'you_have_received_a_warning' => 'You have received a warning!',
     'acknowledge' => 'Acknowledge',
 
-    /*
-     *  Hooks
-     */
+    // Hooks
     'user_x_has_registered' => '{x} has joined ' . SITE_NAME . '!',
     'user_x_has_validated' => '{x} has validated their account!',
 
@@ -252,4 +244,4 @@ $language = array(
     'discord_communication_error' => 'There was an error while communicating with the Discord Bot. Please ensure the bot is running and your Bot URL is correct.',
     'discord_unknown_error' => 'There was an unknown error while syncing Discord roles. Please contact an administrator.',
     'discord_id_help' => 'For information on where to find Discord ID\'s, please read <a href="https://support.discord.com/hc/en-us/articles/206346498-Where-can-I-find-my-User-Server-Message-ID-" target="_blank">this.</a>'
-);
+];
diff --git a/custom/languages/Spanish/admin.php b/custom/languages/Spanish/admin.php
index 3ad461557b82bc49a6e5d6920b025c26c7eebe36..e80bb07ffce8e1c388eb641dd0ed7aef9698e38e 100755
--- a/custom/languages/Spanish/admin.php
+++ b/custom/languages/Spanish/admin.php
@@ -9,10 +9,8 @@
  *  Spanish Language - Admin
  */
 
-$language = array(
-    /*
-     *  Admin Control Panel
-     */
+$language = [
+    // Admin Control Panel
     // Login
     're-authenticate' => 'Inicie sesión para ingresar',
 
@@ -743,5 +741,4 @@ $language = array(
     'discord_bot_error_unauthorized' => 'La clave de API del sitio web no es válida',
     'discord_bot_error_invrole' => 'El ID del role proporcionado no es válido.',
     'discord_bot_error_hierarchy' => 'El bot no puede editar los roles de este usuario.'
-
-);
+];
diff --git a/custom/languages/Spanish/api.php b/custom/languages/Spanish/api.php
index 82cf359ad15fde77fb34ed280143ef4c1d3dcab2..4e9e6d0b78418cbb9ef2430f32e0247e6fd1a4f5 100755
--- a/custom/languages/Spanish/api.php
+++ b/custom/languages/Spanish/api.php
@@ -9,8 +9,7 @@
  *  Spanish Language - API
  */
 
-$language = array(
-
+$language = [
     // Errors
     'api_disabled' => 'API is disabled',
     'unknown_error' => 'Error desconocido',
@@ -63,4 +62,4 @@ $language = array(
     'discord_id_set' => 'ID de discord establecida correctamente.',
     'discord_settings_updated' => 'Discord settings updated successfully',
     'discord_usernames_updated' => 'Discord usernames updated successfully'
-);
+];
diff --git a/custom/languages/Spanish/emails.php b/custom/languages/Spanish/emails.php
index b69d207eb538c81a2c89119cf2211f8f7d980896..bacf31ea83a8b64952c234aebc3fa8ca4ce2db8f 100644
--- a/custom/languages/Spanish/emails.php
+++ b/custom/languages/Spanish/emails.php
@@ -9,8 +9,7 @@
  *  Spanish Language - Emails
  */
 
-$language = array(
-
+$language = [
     // General Options
     'greeting' => 'Hola,',
     'thanks' => 'Gracias,',
@@ -26,4 +25,4 @@ $language = array(
     // Forum Topic Replies
     'forum_topic_reply_subject' => '{x} ha respondido a {y}', // Don't remove {x} or {y}
     'forum_topic_reply_message' => '{x} ha respondido a un tema que sigues. Contenido: {z}' // Don't remove {x} or {z}
-);
+];
diff --git a/custom/languages/Spanish/errors.php b/custom/languages/Spanish/errors.php
index d143968c70b335c853fe3dc45edbdb1789c2f42d..45ca05a9c0fc2d7692fc0a95edf6aae0685a1619 100755
--- a/custom/languages/Spanish/errors.php
+++ b/custom/languages/Spanish/errors.php
@@ -9,10 +9,8 @@
  *  Spanish Language - Errors
  */
 
-$language = array(
-    /*
-     *  Errors
-     */
+$language = [
+    // Errors
     '404_title' => '¡Lo sentimos!',
     '404_content' => 'No pudimos encontrar esa página.',
     '404_back' => 'Regresar',
@@ -31,4 +29,4 @@ $language = array(
     'fatal_error_message_admin' => 'Se ha producido un error al cargar la página. Detalles del error:',
     'in_file' => 'En el archivo <strong>{x}</strong>', // Don't replace {x}
     'on_line' => 'En la línea <strong>{x}</strong>' // Don't replace {x}
-);
+];
diff --git a/custom/languages/Spanish/general.php b/custom/languages/Spanish/general.php
index 0ae83ae2cfe2e1287049462237948699d1c084d5..514945eaf37174b522f4ef2b9e6dd94635a4e1a9 100755
--- a/custom/languages/Spanish/general.php
+++ b/custom/languages/Spanish/general.php
@@ -9,10 +9,8 @@
  *  Spanish Language - General terms
  */
 
-$language = array(
-    /*
-     *  General terms
-     */
+$language = [
+    // General terms
     'help' => 'Ayuda',
     'submit' => 'Enviar',
     'register' => 'Registro',
@@ -70,9 +68,7 @@ $language = array(
     'link' => 'Link',
     'unlink' => 'Unlink',
     
-    /*
-     *  Contact form
-     */
+    // Contact form
     'contact' => 'Contacto',
     'message' => 'Mensaje',
     'email_address' => 'Correo electrónico',
@@ -82,27 +78,18 @@ $language = array(
     'contact_message_sent' => 'Mensaje enviado con éxito.',
     'contact_message_limit' => 'Sólo puede enviar un mensaje por hora. Puede enviar un mensaje en {x} minutos.', // Don't replace {x}
 
-    /*
-     *  Navbar
-     */
+    // Navbar
     'home' => 'Inicio',
     'more' => 'Más',
     'status' => 'Estado',
 
-    /*
-     *  Homepage
-     */
+    // Homepage
     'social' => 'Social',
 
-
-    /*
-     *  Help dialogues
-     */
+    // Help dialogues
     'markdown_help' => 'Puedes redactar tu publicación usando Markdown. Para más información, mira <a href=\'https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet\' target=\'_blank\'>aquí</a>.',
 
-    /*
-     *  Server query
-     */
+    // Server query
     'online' => 'En línea',
     'offline' => 'Desconectado',
     'player_count' => '{x}/{y}', // Don't replace {x} or {y}
@@ -120,15 +107,11 @@ $language = array(
     'no_players_online' => 'No hay jugadores conectados.',
     'and_x_more' => 'y {x} más', // Don't replace {x}
 
-    /*
-     *  Cookie notice
-     */
+    // Cookie notice
     'cookie_notice' => 'Este sitio web utiliza Cookies para mejorar tu experiencia. Si sigues navegando, estás aceptando nuestros términos y condiciones.',
     'cookie_agree' => 'Acepto',
 
-    /*
-     *  Widgets
-     */
+    // Widgets
     'statistics' => 'Estadísticas',
     'users_registered' => 'Usuarios Registrados',
     'latest_member' => 'Último Miembro',
@@ -147,13 +130,9 @@ $language = array(
     'no_default_server' => 'No hemos encontrado ningun servidor por defecto, Por favor selecciona uno en StaffCP - Integraciones - Minecraft.',
     'server_status' => 'Estado del servidor',
 
-    /*
-     *  Privacy policy
-     */
+    // Privacy policy
     'privacy_policy' => 'Política de privacidad',
 
-    /*
-     *  Custom page redirect
-     */
+    // Custom page redirect
     'redirecting_message' => 'Redireccionando...<br />Si la redireccion tarda mucho, puede hacer <a href="{x}" rel="nofollow noopener">Click aqui</a> para continuar.' // Don't replace {x} which is the redirect URL
-);
+];
diff --git a/custom/languages/Spanish/installer.php b/custom/languages/Spanish/installer.php
index 1a62e90dbcf3227d61bc5389e77aa9e691e24161..926ba54432206381827250c3a401430c4f0c72c4 100755
--- a/custom/languages/Spanish/installer.php
+++ b/custom/languages/Spanish/installer.php
@@ -9,10 +9,8 @@
  *  Spanish Language - Installation
  */
 
-$language = array(
-    /*
-     *  Installation
-     */
+$language = [
+    // Installation
     'install' => 'Instalar',
     'pre-release' => 'pre-lanzamiento',
     'installer_welcome' => 'Bienvenido a NamelessMC versión 2.0 pre-lanzamiento.',
@@ -103,4 +101,4 @@ $language = array(
     'config_not_writable' => 'El archivo de configuracion no es writable',
 
     'session_doesnt_exist' => 'No se pudo detectar la sesión. El guardado de sesiones es un requisito para usar Nameless. Vuelva a intentarlo y, si el problema persiste, póngase en contacto con su proveedor de alojamiento web para obtener asistencia..'
-);
+];
diff --git a/custom/languages/Spanish/log.php b/custom/languages/Spanish/log.php
index 5ab53c40d6a530db34ed305094f137f03c98823d..e38e3aedf83f5ce320dd06b1c2e4fe33f5ef9e5e 100644
--- a/custom/languages/Spanish/log.php
+++ b/custom/languages/Spanish/log.php
@@ -1,6 +1,7 @@
 <?php
-$language = array(
+
+$language = [
     //forums
     'info_forums_lock' => 'Locked',
     'info_forums_unlock' => 'Unlocked',
-);
\ No newline at end of file
+];
diff --git a/custom/languages/Spanish/moderator.php b/custom/languages/Spanish/moderator.php
index 8a8fe28d222c585196bd8b7c8e244189daa397ca..2094949840c4ed4be6516123f73af7b53affa1b2 100755
--- a/custom/languages/Spanish/moderator.php
+++ b/custom/languages/Spanish/moderator.php
@@ -9,7 +9,7 @@
  *  Spanish Language - Moderator terms
  */
 
-$language = array(
+$language = [
     'mod_cp' => 'Panel de Moderación',
     'staff_cp' => 'Panel Administrativo',
     'overview' => 'Visión General',
@@ -104,5 +104,4 @@ $language = array(
     // Users
     'recent_registrations' => 'Registros Recientes',
     'reset_profile_banner' => 'Reiniciar Banner del Perfil'
-
-);
+];
diff --git a/custom/languages/Spanish/table.php b/custom/languages/Spanish/table.php
index 4ca2402e58ed617d0d4a83893c33c31ccdc5dfc8..0f5cee1d379b4ba8a670ee7567e383d5412f3659 100644
--- a/custom/languages/Spanish/table.php
+++ b/custom/languages/Spanish/table.php
@@ -9,13 +9,11 @@
  *  Spanish Language - Table
  */
 
-$language = array(
-    /*
-     *  Tables
-     */
+$language = [
+    // Tables
     'display_records_per_page' => 'Mostrar _MENU_ registros por página', // Don't replace "_MENU_"
     'nothing_found' => 'No se han encontrado resultados',
     'page_x_of_y' => 'Mostrando la página _PAGE_ de _PAGES_', // Don't replace "_PAGE_" or "_PAGES_"
     'no_records' => 'No hay registros disponibles',
     'filtered' => '(filtrado de _MAX_ total de registros)' // Don't replace "_MAX_"
-);
+];
diff --git a/custom/languages/Spanish/time.php b/custom/languages/Spanish/time.php
index 7ca0c4dc00203b62ddf3cc1d6c5541c145f2ecec..05ba03bbe3da4efd09ecc9f41e63b0968eff17d7 100644
--- a/custom/languages/Spanish/time.php
+++ b/custom/languages/Spanish/time.php
@@ -9,10 +9,8 @@
  *  Spanish Language - Time
  */
 
-$language = array(
-    /*
-     *  Time
-     */
+$language = [
+    // Time
     'time' => 'tiempo', // Placeholder, no need to translate
     'seconds_short' => 'segundos', // Shortened "seconds", eg "s"
     'less_than_a_minute' => 'Hace menos de 1 minuto',
@@ -26,4 +24,4 @@ $language = array(
     '_months' => 'Hace {x} mes',
     'about_1_year' => 'Hace aproximadamente 1 año',
     'over_x_years' => 'Más de {x} años atrás'
-);
+];
diff --git a/custom/languages/Spanish/user.php b/custom/languages/Spanish/user.php
index eff2eb25bf3a8a12be4e47982936bb6a51046e7d..5699ee0f65ac466e9d99282c287bccb5e51e72d0 100755
--- a/custom/languages/Spanish/user.php
+++ b/custom/languages/Spanish/user.php
@@ -9,15 +9,11 @@
  *  Spanish Language - Users
  */
 
-$language = array(
-    /*
-     *  Change this for the account validation message
-     */
+$language = [
+    // Change this for the account validation message
     'validate_account_command' => 'Para completar la validación, ejecute el comando <strong>/validate {x}</strong> en el servidor.', // Don't replace {x}
 
-    /*
-     *  User Related
-     */
+    // User Related
     'guest' => 'Invitado',
     'guests' => 'Invitados',
 
@@ -224,16 +220,12 @@ $language = array(
     'latest_profile_posts' => 'Latest Profile Posts',
     'no_profile_posts' => 'No profile posts.',
 
-    /*
-     *  Infractions area
-     */
+    // Infractions area
     'you_have_been_banned' => '¡HAS SIDO BANEADO!',
     'you_have_received_a_warning' => '¡Haz recibido una advertencia!',
     'acknowledge' => 'Reconocer',
 
-    /*
-     *  Hooks
-     */
+    // Hooks
     'user_x_has_registered' => '{x} se ha registado ' . SITE_NAME . '!',
     'user_x_has_validated' => '{x} has validated their account!',
 
@@ -252,4 +244,4 @@ $language = array(
     'discord_communication_error' => 'There was an error while communicating with the Discord Bot. Please ensure the bot is running and your Bot URL is correct.',
     'discord_unknown_error' => 'There was an unknown error while syncing Discord roles. Please contact an administrator.',
     'discord_id_help' => 'For information on where to find Discord ID\'s, please read <a href="https://support.discord.com/hc/en-us/articles/206346498-Where-can-I-find-my-User-Server-Message-ID-" target="_blank">this.</a>'
-);
+];
diff --git a/custom/languages/SpanishES/admin.php b/custom/languages/SpanishES/admin.php
index a42d1dc0a952dcfeeedcbddceb00e05727712310..ff52a36098fd399653e176078403f1c3956df8f1 100755
--- a/custom/languages/SpanishES/admin.php
+++ b/custom/languages/SpanishES/admin.php
@@ -10,10 +10,8 @@
  *  Spanish Language - Admin
  */
 
-$language = array(
-    /*
-     *  Admin Control Panel
-     */
+$language = [
+    // Admin Control Panel
     // Login
     're-authenticate' => 'Inicie sesión para ingresar',
 
@@ -745,5 +743,4 @@ $language = array(
     'discord_bot_error_unauthorized' => 'Website API key is invalid',
     'discord_bot_error_invrole' => 'Provided Role ID is invalid.',
     'discord_bot_error_hierarchy' => 'The bot cannot edit this user\'s roles.'
-
-);
+];
diff --git a/custom/languages/SpanishES/api.php b/custom/languages/SpanishES/api.php
index 0944f6e9db315ccae2c871a842ddc0612f84b221..d98fee3c8d7308336c048214fba0f3a070ed75ce 100644
--- a/custom/languages/SpanishES/api.php
+++ b/custom/languages/SpanishES/api.php
@@ -9,8 +9,7 @@
  *  Spanish_ES Language - API
  */
 
-$language = array(
-
+$language = [
     // Errors
     'api_disabled' => 'API is disabled',
     'unknown_error' => 'Error desconocido.',
@@ -63,4 +62,4 @@ $language = array(
     'discord_id_set' => 'Discord ID set successfully',
     'discord_settings_updated' => 'Discord settings updated successfully',
     'discord_usernames_updated' => 'Discord usernames updated successfully'
-);
+];
diff --git a/custom/languages/SpanishES/emails.php b/custom/languages/SpanishES/emails.php
index a6d9d3d56e991fb76c4744cfe3c89103baf4b99b..01b55d6423fc89da3ce4c712fe6e025c9f9e4a55 100644
--- a/custom/languages/SpanishES/emails.php
+++ b/custom/languages/SpanishES/emails.php
@@ -9,8 +9,7 @@
  *  SpanishES Language - Emails
  */
 
-$language = array(
-
+$language = [
     // General Options
     'greeting' => 'Hola,',
     'thanks' => 'Gracias,',
@@ -26,4 +25,4 @@ $language = array(
     // Forum Topic Replies
     'forum_topic_reply_subject' => '{x} has replied to {y}', // Don't remove {x} or {y}
     'forum_topic_reply_message' => '{x} has replied to a topic you follow. Content: {z}' // Don't remove {x} or {z}
-);
+];
diff --git a/custom/languages/SpanishES/errors.php b/custom/languages/SpanishES/errors.php
index 754e98f659150a3b629c4c9cc48453e3e84ba88d..2d9dd8d80a982cf81ddd54eace3b89bd90bb1741 100644
--- a/custom/languages/SpanishES/errors.php
+++ b/custom/languages/SpanishES/errors.php
@@ -9,10 +9,8 @@
  *  Spanish Language - Errors
  */
 
-$language = array(
-    /*
-     *  Errors
-     */
+$language = [
+    // Errors
     '404_title' => '¡Lo sentimos!',
     '404_content' => 'No pudimos encontrar esa página.',
     '404_back' => 'Regresar',
@@ -31,4 +29,4 @@ $language = array(
     'fatal_error_message_admin' => 'Se ha producido un error al cargar la página. Detalles del error:',
     'in_file' => 'En el archivo <strong>{x}</strong>', // Don't replace {x}
     'on_line' => 'En la línea <strong>{x}</strong>' // Don't replace {x}
-);
+];
diff --git a/custom/languages/SpanishES/general.php b/custom/languages/SpanishES/general.php
index ddf185bf4461d959ed43710d8f3fcc387f5477d5..83e5c65a20489253ef39a66516d6f6cff6ec1bf1 100644
--- a/custom/languages/SpanishES/general.php
+++ b/custom/languages/SpanishES/general.php
@@ -9,10 +9,8 @@
  *  Spanish/Spain Language - Language version
  */
 
-$language = array(
-    /*
-     *  General terms
-     */
+$language = [
+    // General terms
     'help' => 'Help',
     'submit' => 'Enviar',
     'register' => 'Registro',
@@ -70,9 +68,7 @@ $language = array(
     'link' => 'Link',
     'unlink' => 'Unlink',
     
-    /*
-     *  Contact form
-     */
+    // Contact form
     'contact' => 'Contacto',
     'message' => 'Mensaje',
     'email_address' => 'Correo electrónico',
@@ -82,27 +78,18 @@ $language = array(
     'contact_message_sent' => 'Mensaje enviado con éxito.',
     'contact_message_limit' => 'Sólo puede enviar un mensaje por hora. Podrá enviar otro mensaje en {x} minutos.', // Don't replace {x}
 
-    /*
-     *  Navbar
-     */
+    // Navbar
     'home' => 'Inicio',
     'more' => 'Más',
     'status' => 'Estado',
 
-    /*
-     *  Homepage
-     */
+    // Homepage
     'social' => 'Social',
 
-
-    /*
-     *  Help dialogues
-     */
+    // Help dialogues
     'markdown_help' => 'Puedes redactar tu publicación utilizando Markdown. Para más información, pinche <a href=\'https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet\' target=\'_blank\'>aquí</a>.',
 
-    /*
-     *  Server query
-     */
+    // Server query
     'online' => 'En línea',
     'offline' => 'Desconectado',
     'player_count' => '{x}/{y}', // Don't replace {x} or {y}
@@ -120,15 +107,11 @@ $language = array(
     'no_players_online' => 'No hay jugadores conectados.',
     'and_x_more' => 'y {x} más', // Don't replace {x}
 
-    /*
-     *  Cookie notice
-     */
+    // Cookie notice
     'cookie_notice' => 'Este sitio web utiliza Cookies para mejorar su experiencia. Si sigues navegando, estás aceptando nuestros términos y condiciones.',
     'cookie_agree' => 'Acepto',
 
-    /*
-     *  Widgets
-     */
+    // Widgets
     'statistics' => 'Estadísticas',
     'users_registered' => 'Usuarios registrados',
     'latest_member' => 'Último miembro',
@@ -147,13 +130,9 @@ $language = array(
     'no_default_server' => 'There is no default server, please select one in StaffCP - Integrations - Minecraft.',
     'server_status' => 'Server Status',
 
-    /*
-     *  Privacy policy
-     */
+    // Privacy policy
     'privacy_policy' => 'Política de privacidad',
 
-    /*
-     *  Custom page redirect
-     */
+    // Custom page redirect
     'redirecting_message' => 'Redirigiendo...<br />Si no es redirigido automáticamente, haga click <a href="{x}" rel="nofollow noopener">aquí</a>.' // Don't replace {x} which is the redirect URL
-);
+];
diff --git a/custom/languages/SpanishES/installer.php b/custom/languages/SpanishES/installer.php
index 117de3ff4c6c356c03f434ab6748f7467ae5f8a4..a7aa1210af2a16d924086dd57bfc8f4f3df6ce10 100755
--- a/custom/languages/SpanishES/installer.php
+++ b/custom/languages/SpanishES/installer.php
@@ -9,10 +9,8 @@
  *  Spanish Language - Installation
  */
 
-$language = array(
-    /*
-     *  Installation
-     */
+$language = [
+    // Installation
     'install' => 'Instalar',
     'pre-release' => 'pre-release',
     'installer_welcome' => 'Bienvenido a NamelessMC versión 2.0 pre-release.',
@@ -103,4 +101,4 @@ $language = array(
     'config_not_writable' => 'The config file is not writable.',
 
     'session_doesnt_exist' => 'Unable to detect session. Sessions saving are a requirement to use Nameless. Please try again, and if the issue persists, please contact your web host for support.'
-);
+];
diff --git a/custom/languages/SpanishES/log.php b/custom/languages/SpanishES/log.php
index 5ab53c40d6a530db34ed305094f137f03c98823d..e38e3aedf83f5ce320dd06b1c2e4fe33f5ef9e5e 100644
--- a/custom/languages/SpanishES/log.php
+++ b/custom/languages/SpanishES/log.php
@@ -1,6 +1,7 @@
 <?php
-$language = array(
+
+$language = [
     //forums
     'info_forums_lock' => 'Locked',
     'info_forums_unlock' => 'Unlocked',
-);
\ No newline at end of file
+];
diff --git a/custom/languages/SpanishES/moderator.php b/custom/languages/SpanishES/moderator.php
index 404e950a096213ad9abe1c18709701f0c0ec908d..eefff9e5344d521d93473deae0031bf980866897 100755
--- a/custom/languages/SpanishES/moderator.php
+++ b/custom/languages/SpanishES/moderator.php
@@ -9,7 +9,7 @@
  *  Spanish Language - Moderator terms
  */
 
-$language = array(
+$language = [
     'mod_cp' => 'Panel de Moderación',
     'staff_cp' => 'Panel Administrativo',
     'overview' => 'Visión General',
@@ -104,5 +104,4 @@ $language = array(
     // Users
     'recent_registrations' => 'Registros Recientes',
     'reset_profile_banner' => 'Reiniciar Banner del Perfil'
-
-);
+];
diff --git a/custom/languages/SpanishES/table.php b/custom/languages/SpanishES/table.php
index bbd82f35a115b4ea595322b4d6421e2f0d682144..8cf2254a4444fb1e9994efc4b8992f04c1414dab 100644
--- a/custom/languages/SpanishES/table.php
+++ b/custom/languages/SpanishES/table.php
@@ -9,13 +9,11 @@
  *  Spanish Language - Table
  */
 
-$language = array(
-    /*
-     *  Tables
-     */
+$language = [
+    // Tables
     'display_records_per_page' => 'Mostrar _MENU_ registros por página', // Don't replace "_MENU_"
     'nothing_found' => 'No se han encontrado resultados',
     'page_x_of_y' => 'Mostrando la página _PAGE_ de _PAGES_', // Don't replace "_PAGE_" or "_PAGES_"
     'no_records' => 'No hay registros disponibles',
     'filtered' => '(Filtrado de _MAX_ registros totales)' // Don't replace "_MAX_"
-);
+];
diff --git a/custom/languages/SpanishES/time.php b/custom/languages/SpanishES/time.php
index f0b1733e39718a326bc772ff8b6f6332de6511db..85991ca1c4e9aba20d3b67a44510968c8a3583c9 100644
--- a/custom/languages/SpanishES/time.php
+++ b/custom/languages/SpanishES/time.php
@@ -9,10 +9,8 @@
  *  Spanish/Spain Language - Language version
  */
 
-$language = array(
-    /*
-     *  Time
-     */
+$language = [
+    // Time
     'time' => 'tiempo', // Placeholder, no need to translate
     'seconds_short' => 'segundos', // Shortened "seconds", eg "s"
     'less_than_a_minute' => 'Hace menos de 1 minuto',
@@ -26,4 +24,4 @@ $language = array(
     '_months' => 'Hace {x} mes',
     'about_1_year' => 'Hace aproximadamente 1 año',
     'over_x_years' => 'Hace {x} años'
-);
+];
diff --git a/custom/languages/SpanishES/user.php b/custom/languages/SpanishES/user.php
index 9d415ce2620f2c02e5e33d2d303e7508f97225e7..4893f5804d52c12c123a031a065831ba9050266d 100644
--- a/custom/languages/SpanishES/user.php
+++ b/custom/languages/SpanishES/user.php
@@ -9,15 +9,11 @@
  *  Spanish/Spain Language - Language version
  */
 
-$language = array(
-    /*
-     *  Change this for the account validation message
-     */
+$language = [
+    // Change this for the account validation message
     'validate_account_command' => 'Para completar la validación, ejecute el comando <strong>/validate {x}</strong> en el servidor.', // Don't replace {x}
 
-    /*
-     *  User Related
-     */
+    // User Related
     'guest' => 'Invitado',
     'guests' => 'Invitados',
 
@@ -224,16 +220,12 @@ $language = array(
     'latest_profile_posts' => 'Latest Profile Posts',
     'no_profile_posts' => 'No profile posts.',
 
-    /*
-     *  Infractions area
-     */
+    // Infractions area
     'you_have_been_banned' => 'Ha sido baneado.',
     'you_have_received_a_warning' => 'Ha recibido una advertencia.',
     'acknowledge' => 'Reconocer',
 
-    /*
-     *  Hooks
-     */
+    // Hooks
     'user_x_has_registered' => '{x} se ha registado ' . SITE_NAME . '!',
     'user_x_has_validated' => '{x} has validated their account!',
 
@@ -252,4 +244,4 @@ $language = array(
     'discord_communication_error' => 'There was an error while communicating with the Discord Bot. Please ensure the bot is running and your Bot URL is correct.',
     'discord_unknown_error' => 'There was an unknown error while syncing Discord roles. Please contact an administrator.',
     'discord_id_help' => 'For information on where to find Discord ID\'s, please read <a href="https://support.discord.com/hc/en-us/articles/206346498-Where-can-I-find-my-User-Server-Message-ID-" target="_blank">this.</a>'
-);
+];
diff --git a/custom/languages/SwedishSE/admin.php b/custom/languages/SwedishSE/admin.php
index df968829b76f63e5c1975f6a02d8a08d5e0ad77a..06053eaad1f1bf5f901d1149c7334800e4d0c085 100644
--- a/custom/languages/SwedishSE/admin.php
+++ b/custom/languages/SwedishSE/admin.php
@@ -10,10 +10,8 @@
  *  SwedishSE Language - Admin
  */
 
-$language = array(
-    /*
-     *  Admin Control Panel
-     */
+$language = [
+    // Admin Control Panel
     // Login
     're-authenticate' => 'Vänligen åter autentisera',
 
@@ -747,5 +745,4 @@ $language = array(
     'discord_bot_error_unauthorized' => 'Website API key is invalid',
     'discord_bot_error_invrole' => 'Provided Role ID is invalid.',
     'discord_bot_error_hierarchy' => 'The bot cannot edit this user\'s roles.'
-
-);
+];
diff --git a/custom/languages/SwedishSE/api.php b/custom/languages/SwedishSE/api.php
index dbd481120da2791fe90aeacc7008f679ebf739c5..e2794b2399cdbd6110de9714845f9fc7989cc0f4 100644
--- a/custom/languages/SwedishSE/api.php
+++ b/custom/languages/SwedishSE/api.php
@@ -9,8 +9,7 @@
  *  Swedish Language - API
  */
 
-$language = array(
-
+$language = [
     // Errors
     'api_disabled' => 'API is disabled',
     'unknown_error' => 'Unknown error',
@@ -63,4 +62,4 @@ $language = array(
     'discord_id_set' => 'Discord ID set successfully',
     'discord_settings_updated' => 'Discord settings updated successfully',
     'discord_usernames_updated' => 'Discord usernames updated successfully'
-);
+];
diff --git a/custom/languages/SwedishSE/emails.php b/custom/languages/SwedishSE/emails.php
index 295cbb6ebffd94601d0e710b9663d969da64fab9..4aebd3f902ae7f9db0483b9fa2ee81dd0e6a1ea2 100644
--- a/custom/languages/SwedishSE/emails.php
+++ b/custom/languages/SwedishSE/emails.php
@@ -9,8 +9,7 @@
  *  SwedishSE Language - Emails
  */
 
-$language = array(
-
+$language = [
     // General Options
     'greeting' => 'Hej,',
     'thanks' => 'Tack,',
@@ -26,4 +25,4 @@ $language = array(
     // Forum Topic Replies
     'forum_topic_reply_subject' => '{x} has replied to {y}', // Don't remove {x} or {y}
     'forum_topic_reply_message' => '{x} has replied to a topic you follow. Content: {z}' // Don't remove {x} or {z}
-);
+];
diff --git a/custom/languages/SwedishSE/errors.php b/custom/languages/SwedishSE/errors.php
index e7ba60f7b96317a4ce40adf39361932b3fa3fe7f..97617c77423da07d227878c8892e8362b0d0ec44 100644
--- a/custom/languages/SwedishSE/errors.php
+++ b/custom/languages/SwedishSE/errors.php
@@ -10,10 +10,8 @@
  *  SwedishSE Language - Errors
  */
 
-$language = array(
-    /*
-     *  Errors
-     */
+$language = [
+    // Errors
     '404_title' => 'Förlåt!',
     '404_content' => 'Vi kunnde inte hitta det där sidan.',
     '404_back' => 'Gå tillbaka',
@@ -32,4 +30,4 @@ $language = array(
     'fatal_error_message_admin' => 'Sorry, but something went wrong while loading the page. Error details:',
     'in_file' => 'in file <strong>{x}</strong>', // Don't replace {x}
     'on_line' => 'on line <strong>{x}</strong>' // Don't replace {x}
-);
+];
diff --git a/custom/languages/SwedishSE/general.php b/custom/languages/SwedishSE/general.php
index 2b98ebb65232dd8908405c8971e969fddcfca341..96227d94a319ce771178dfb1964acef4e359bd26 100644
--- a/custom/languages/SwedishSE/general.php
+++ b/custom/languages/SwedishSE/general.php
@@ -10,10 +10,8 @@
  *  SwedishSE Language - General Terms
  */
 
-$language = array(
-    /*
-     *  General terms
-     */
+$language = [
+    // General terms
     'help' => 'Help',
     'submit' => 'Enter',
     'register' => 'Registrera',
@@ -71,9 +69,7 @@ $language = array(
     'link' => 'Link',
     'unlink' => 'Unlink',
     
-    /*
-     *  Contact form
-     */
+    // Contact form
     'contact' => 'Kontakt',
     'message' => 'Meddelande',
     'email_address' => 'Email Address',
@@ -83,26 +79,18 @@ $language = array(
     'contact_message_sent' => 'Meddelande sänt med framgång!',
     'contact_message_limit' => 'Du kan bara skicka ett meddelande per timme. Du kan sedan skicka ett meddelande om {x} minuter.', // Don't replace {x}
 
-    /*
-     *  Navbar
-     */
+    // Navbar
     'home' => 'Hem',
     'more' => 'Mer',
     'status' => 'Status',
 
-    /*
-     *  Homepage
-     */
+    // Homepage
     'social' => 'Social',
 
-    /*
-     *  Help dialogues
-     */
+    // Help dialogues
     'markdown_help' => 'Du kan formatera ditt inlägg med Markdown. För mer information, se <a href=\'https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet\' target=\'_blank\'>här</a>.',
 
-    /*
-     *  Server query
-     */
+    // Server query
     'online' => 'Online',
     'offline' => 'Offline',
     'player_count' => '{x}/{y}', // Don't replace {x} or {y}
@@ -120,15 +108,11 @@ $language = array(
     'no_players_online' => 'There are no players online.',
     'and_x_more' => 'and {x} more', // Don't replace {x}
 
-    /*
-     *  Cookie notice
-     */
+    // Cookie notice
     'cookie_notice' => 'This website uses cookies to enhance your browsing experience. By registering on our website or closing this notice you agree with their use.',
     'cookie_agree' => 'Agree',
 
-    /*
-     *  Widgets
-     */
+    // Widgets
     'statistics' => 'Statistics',
     'users_registered' => 'Users Registered',
     'latest_member' => 'Latest Member',
@@ -147,13 +131,9 @@ $language = array(
     'no_default_server' => 'There is no default server, please select one in StaffCP - Integrations - Minecraft.',
     'server_status' => 'Server Status',
 
-    /*
-     *  Privacy policy
-     */
+    // Privacy policy
     'privacy_policy' => 'Privacy Policy',
 
-    /*
-     *  Custom page redirect
-     */
+    // Custom page redirect
     'redirecting_message' => 'Redirecting...<br />If you are not redirected automatically, please click <a href="{x}" rel="nofollow noopener">here</a>.' // Don't replace {x} which is the redirect URL
-);
+];
diff --git a/custom/languages/SwedishSE/installer.php b/custom/languages/SwedishSE/installer.php
index 5681e506baaf0984601bb8caa62ff93c3f2fb7c7..517dabdc8e5b7a4d53472cf018016930f437d08c 100644
--- a/custom/languages/SwedishSE/installer.php
+++ b/custom/languages/SwedishSE/installer.php
@@ -10,10 +10,8 @@
  *  SwedishSE Language - Installer
  */
 
-$language = array(
-    /*
-     *  Installation
-     */
+$language = [
+    // Installation
     'install' => 'Installera',
     'pre-release' => 'Förhands-utgivning',
     'installer_welcome' => 'Välkommen till NamelessMC version 2.0 förhands-utgivning',
@@ -104,4 +102,4 @@ $language = array(
     'config_not_writable' => 'The config file is not writable.',
 
     'session_doesnt_exist' => 'Unable to detect session. Sessions saving are a requirement to use Nameless. Please try again, and if the issue persists, please contact your web host for support.'
-);
+];
diff --git a/custom/languages/SwedishSE/log.php b/custom/languages/SwedishSE/log.php
index 5ab53c40d6a530db34ed305094f137f03c98823d..e38e3aedf83f5ce320dd06b1c2e4fe33f5ef9e5e 100644
--- a/custom/languages/SwedishSE/log.php
+++ b/custom/languages/SwedishSE/log.php
@@ -1,6 +1,7 @@
 <?php
-$language = array(
+
+$language = [
     //forums
     'info_forums_lock' => 'Locked',
     'info_forums_unlock' => 'Unlocked',
-);
\ No newline at end of file
+];
diff --git a/custom/languages/SwedishSE/moderator.php b/custom/languages/SwedishSE/moderator.php
index 846e86f6a06d725dfb18cf6d3d87c88e3d6c68c4..e77831cd98d62f0f9f22027f5123aa58faa55c57 100644
--- a/custom/languages/SwedishSE/moderator.php
+++ b/custom/languages/SwedishSE/moderator.php
@@ -10,7 +10,7 @@
  *  SwedishSE Language - Moderator terms
  */
 
-$language = array(
+$language = [
     'mod_cp' => 'ModKP',
     'staff_cp' => 'StaffCP',
     'overview' => 'Översikt',
@@ -105,5 +105,4 @@ $language = array(
     // Users
     'recent_registrations' => 'Recent Registrations',
     'reset_profile_banner' => 'Reset Profile Banner'
-
-);
+];
diff --git a/custom/languages/SwedishSE/table.php b/custom/languages/SwedishSE/table.php
index 846c576e3ca06c43db86c326748aac6b320026ba..bd9330aa85a79e2943bd1ab0dcf9ba8f96082535 100644
--- a/custom/languages/SwedishSE/table.php
+++ b/custom/languages/SwedishSE/table.php
@@ -10,13 +10,11 @@
  *  SwedishSE Language - Table
  */
 
-$language = array(
-    /*
-     *  Tables
-     */
+$language = [
+    // Tables
     'display_records_per_page' => 'Visa _MENU_ uppgifter per sida', // Don't replace "_MENU_"
     'nothing_found' => 'Inga resultat hittat',
     'page_x_of_y' => 'Visar sida _PAGE_ av _PAGES_', // Don't replace "_PAGE_" or "_PAGES_"
     'no_records' => 'Inga uppgifter tillgängliga',
     'filtered' => '(filtreras från _MAX_ totala uppgifter)' // Don't replace "_MAX_"
-);
+];
diff --git a/custom/languages/SwedishSE/time.php b/custom/languages/SwedishSE/time.php
index fc8a6cc873cf83e34034898ed93ec84f16e70dea..88faf10e82d3eb7af32f2436c3db366d5f50867a 100644
--- a/custom/languages/SwedishSE/time.php
+++ b/custom/languages/SwedishSE/time.php
@@ -10,10 +10,8 @@
  *  SwedishSE Language - Time
  */
 
-$language = array(
-    /*
-     *  Time
-     */
+$language = [
+    // Time
     'time' => 'Tid', // Placeholder, no need to translate
     'seconds_short' => 's', // Shortened "seconds", eg "s"
     'less_than_a_minute' => 'mindre än en minut sedan',
@@ -27,4 +25,4 @@ $language = array(
     '_months' => '{x} månader sen',
     'about_1_year' => 'ungefär ett år sedan',
     'over_x_years' => 'över {x} år sen'
-);
+];
diff --git a/custom/languages/SwedishSE/user.php b/custom/languages/SwedishSE/user.php
index 90993dd5d6c4512a4443191bf29bfb67a091b82b..a9315eba83eb63a9b947e33ed3d35ca59a8a9660 100644
--- a/custom/languages/SwedishSE/user.php
+++ b/custom/languages/SwedishSE/user.php
@@ -10,15 +10,11 @@
  *  SwedishSE Language - User
  */
 
-$language = array(
-    /*
-     *  Change this for the account validation message
-     */
+$language = [
+    // Change this for the account validation message
     'validate_account_command' => 'To complete registration, please execute the command <strong>/validate {x}</strong> ingame.', // Don't replace {x}
 
-    /*
-     *  User Related
-     */
+    // User Related
     'guest' => 'Gäst',
     'guests' => 'Gäster',
 
@@ -225,16 +221,12 @@ $language = array(
     'latest_profile_posts' => 'Latest Profile Posts',
     'no_profile_posts' => 'No profile posts.',
 
-    /*
-     *  Infractions area
-     */
+    // Infractions area
     'you_have_been_banned' => 'Du är bannad!',
     'you_have_received_a_warning' => 'Du har fått en varning!',
     'acknowledge' => 'Erkänna',
 
-    /*
-     *  Hooks
-     */
+    // Hooks
     'user_x_has_registered' => '{x} has joined ' . SITE_NAME . '!',
     'user_x_has_validated' => '{x} has validated their account!',
 
@@ -253,4 +245,4 @@ $language = array(
     'discord_communication_error' => 'There was an error while communicating with the Discord Bot. Please ensure the bot is running and your Bot URL is correct.',
     'discord_unknown_error' => 'There was an unknown error while syncing Discord roles. Please contact an administrator.',
     'discord_id_help' => 'For information on where to find Discord ID\'s, please read <a href="https://support.discord.com/hc/en-us/articles/206346498-Where-can-I-find-my-User-Server-Message-ID-" target="_blank">this.</a>'
-);
+];
diff --git a/custom/languages/Turkish/admin.php b/custom/languages/Turkish/admin.php
index debffba7788c14db59c22e1f9d2c2aa7811de9bb..bcfa94ec302b2404cb67af5fa3571e46adc30799 100644
--- a/custom/languages/Turkish/admin.php
+++ b/custom/languages/Turkish/admin.php
@@ -9,10 +9,8 @@
  *  Turkish translation by xOrcun
  */
 
-$language = array(
-    /*
-     *  Admin Control Panel
-     */
+$language = [
+    // Admin Control Panel
     // Login
     're-authenticate' => 'Yönetici Paneline Giriş',
 
@@ -747,4 +745,4 @@ $language = array(
     'discord_bot_error_unauthorized' => 'Website API key is invalid',
     'discord_bot_error_invrole' => 'Provided Role ID is invalid.',
     'discord_bot_error_hierarchy' => 'The bot cannot edit this user\'s roles.'
-);
+];
diff --git a/custom/languages/Turkish/api.php b/custom/languages/Turkish/api.php
index 9227aa1d46cc677f1396f527358474fdcd8c46d9..53e101d9343dc2b1a898d09e69eecadde238301f 100644
--- a/custom/languages/Turkish/api.php
+++ b/custom/languages/Turkish/api.php
@@ -9,8 +9,7 @@
  *  Turkish translation by xOrcun
  */
 
-$language = array(
-
+$language = [
     // Errors
     'api_disabled' => 'API is disabled',
     'unknown_error' => 'Bilinmeyen hata',
@@ -63,4 +62,4 @@ $language = array(
     'discord_id_set' => 'Discord ID set successfully',
     'discord_settings_updated' => 'Discord settings updated successfully',
     'discord_usernames_updated' => 'Discord usernames updated successfully'
-);
+];
diff --git a/custom/languages/Turkish/emails.php b/custom/languages/Turkish/emails.php
index cf6b5de4d133306390c0cea463ab6aa7ab494fdd..de2bc56c52f062c57e3d11ce1b83527551aae5dc 100644
--- a/custom/languages/Turkish/emails.php
+++ b/custom/languages/Turkish/emails.php
@@ -9,8 +9,7 @@
  *  Turkish Language - Emails
  */
 
-$language = array(
-
+$language = [
     // General Options
     'greeting' => 'Merhaba,',
     'thanks' => 'Teşekkürler,',
@@ -26,4 +25,4 @@ $language = array(
     // Forum Topic Replies
     'forum_topic_reply_subject' => '{x} has replied to {y}', // Don't remove {x} or {y}
     'forum_topic_reply_message' => '{x} has replied to a topic you follow. Content: {z}' // Don't remove {x} or {z}
-);
+];
diff --git a/custom/languages/Turkish/errors.php b/custom/languages/Turkish/errors.php
index 70bba6701c4e61cad11c24955a036c10c9676f3e..80eed0405719dc77aa417d87af1600114fa0e755 100644
--- a/custom/languages/Turkish/errors.php
+++ b/custom/languages/Turkish/errors.php
@@ -9,10 +9,8 @@
  *  Turkish translation by xOrcun
  */
 
-$language = array(
-    /*
-     *  Errors
-     */
+$language = [
+    // Errors
     '404_title' => 'Üzgünüm!',
     '404_content' => 'Sayfa bulunamadı!',
     '404_back' => 'Geri Dön',
@@ -31,4 +29,4 @@ $language = array(
     'fatal_error_message_admin' => 'Maalesef, sayfa yüklenirken bir şeyler ters gitti. Hata detayları:',
     'in_file' => '<strong>{x}</strong> dosyasında', // Don't replace {x}
     'on_line' => '<strong>{x}</strong> internet üzerinde' // Don't replace {x}
-);
+];
diff --git a/custom/languages/Turkish/general.php b/custom/languages/Turkish/general.php
index ab1a771f70cc6cb52c3097d1f8540557e9df2dbf..3e46fc1c66403ae48f5eda68869a365ed78a8360 100644
--- a/custom/languages/Turkish/general.php
+++ b/custom/languages/Turkish/general.php
@@ -9,10 +9,8 @@
  *  Turkish translation by xOrcun
  */
 
-$language = array(
-    /*
-     *  General terms
-     */
+$language = [
+    // General terms
     'help' => 'Help',
     'submit' => 'Onayla',
     'register' => 'Kayıt Ol',
@@ -70,9 +68,7 @@ $language = array(
     'link' => 'Link',
     'unlink' => 'Unlink',
     
-    /*
-     *  Contact form
-     */
+    // Contact form
     'contact' => 'İletişim',
     'message' => 'Mesaj',
     'email_address' => 'E-posta adresiniz',
@@ -82,26 +78,18 @@ $language = array(
     'contact_message_email' => 'Sağlanan e-posta geçersiz.',
     'contact_message_limit' => 'Saatte yalnızca bir mesaj gönderebilirsiniz. {X} dakika içinde bir mesaj gönderebilirsiniz.', // Don't replace {x}
 
-    /*
-     *  Navbar
-     */
+    // Navbar
     'home' => 'Ana Sayfa',
     'more' => 'Daha',
     'status' => 'Durum',
 
-    /*
-     *  Homepage
-     */
+    // Homepage
     'social' => 'Sosyal',
 
-    /*
-     *  Help dialogues
-     */
+    // Help dialogues
     'markdown_help' => 'Markdown\'u kullanarak yayınınızı biçimlendirebilirsiniz. Daha fazla bilgi için <a href=\'https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet\' target=\'_blank\'>buraya</a> bakın.',
 
-    /*
-     *  Server query
-     */
+    // Server query
     'online' => 'Çevrimiçi',
     'offline' => 'Çevrimdışı',
     'player_count' => '{x}/{y}', // Don't replace {x} or {y}
@@ -119,15 +107,11 @@ $language = array(
     'no_players_online' => 'Çevrimiçi oyuncu yok',
     'and_x_more' => 've {x} tane daha', // Don't replace {x}
 
-    /*
-     *  Cookie notice
-     */
+    // Cookie notice
     'cookie_notice' => 'Bu web sitesi, tarama deneyiminizi geliştirmek için çerezleri kullanır. Web sitemize kayıt olarak veya bu bildirimi kapatarak kullanımlarını kabul etmiş olursunuz..',
     'cookie_agree' => 'Katılıyorum',
 
-    /*
-     *  Widgets
-     */
+    // Widgets
     'statistics' => 'İstatistik',
     'users_registered' => 'Kullanıcılar:',
     'latest_member' => 'Son Üye:',
@@ -146,12 +130,8 @@ $language = array(
     'no_default_server' => 'There is no default server, please select one in StaffCP - Integrations - Minecraft.',
     'server_status' => 'Server Status',
 
-    /*
-     *  Privacy policy
-     */
+    // Privacy policy
     'privacy_policy' => 'Gizlilik Politikası',
-    /*
-     *  Custom page redirect
-     */
+    // Custom page redirect
     'redirecting_message' => 'Yeniden yönlendiriliyor ... <br />Otomatik olarak yönlendirilmiyorsanız, lütfen <a href="{x}" rel="nofollow noopener">burayı</a> tıklayın.' // Don't replace {x} which is the redirect URL
-);
+];
diff --git a/custom/languages/Turkish/installer.php b/custom/languages/Turkish/installer.php
index 565c273785b99382ca277d0eb08aa7de464a9e81..50fb445409134ce788f6cdeb0a75a4f327490f02 100644
--- a/custom/languages/Turkish/installer.php
+++ b/custom/languages/Turkish/installer.php
@@ -9,10 +9,8 @@
  *  Turkish translation by xOrcun
  */
 
-$language = array(
-    /*
-     *  Installation
-     */
+$language = [
+    // Installation
     'install' => 'Kur',
     'pre-release' => 'Ön sürüm',
     'installer_welcome' => 'NamelessMC sürüm 2.0 ön sürümüne hoş geldiniz.',
@@ -103,4 +101,4 @@ $language = array(
     'config_not_writable' => 'The config file is not writable.',
 
     'session_doesnt_exist' => 'Unable to detect session. Sessions saving are a requirement to use Nameless. Please try again, and if the issue persists, please contact your web host for support.'
-);
+];
diff --git a/custom/languages/Turkish/log.php b/custom/languages/Turkish/log.php
index d6e2c7a84e7211cce49255614c3c81c6e69257f5..c9734e624a28d28ae8bfb3912a30d69b542c0409 100644
--- a/custom/languages/Turkish/log.php
+++ b/custom/languages/Turkish/log.php
@@ -1,5 +1,6 @@
 <?php
-$language = array(
+
+$language = [
     //info
     'info_report' => 'Bildirilen',
     'info_login' => 'Kullanıcı Oturum Açtı!',
@@ -12,7 +13,7 @@ $language = array(
 
     //forums
     'info_forums_delete_post' => 'Silinmiş mesaj',
-    'info_forums_delete_topic' =>'Silinmiş konu',
+    'info_forums_delete_topic' => 'Silinmiş konu',
     'info_forums_edit_post' => 'Düzenlenmiş mesaj',
     'info_forums_lock' => 'Kilitle',
     'info_forums_unlock' => 'Kiliti kaldır',
@@ -24,5 +25,4 @@ $language = array(
     'info_forum_move' => 'Taşı',
     'info_forum_merge' => 'Birleştir',
     'info_forum_react' => 'Tepki gösterdi',
-);
-?>
+];
diff --git a/custom/languages/Turkish/moderator.php b/custom/languages/Turkish/moderator.php
index f5e5026a8369e2a63a988a8b991be8c295952fda..5a979269fc4f24163332baf0a31285cf64c83d86 100644
--- a/custom/languages/Turkish/moderator.php
+++ b/custom/languages/Turkish/moderator.php
@@ -9,7 +9,7 @@
  *  Turkish translation by xOrcun
  */
 
-$language = array(
+$language = [
     'mod_cp' => 'Moderatör Panel',
     'staff_cp' => 'Yönetim Panel',
     'overview' => 'Görüntüle',
@@ -104,5 +104,4 @@ $language = array(
     // Users
     'recent_registrations' => 'Son Kayıtlar',
     'reset_profile_banner' => 'Profil banner(afiş) sıfırla'
-
-);
+];
diff --git a/custom/languages/Turkish/table.php b/custom/languages/Turkish/table.php
index 8446235c14a016ba43d62dc7467425e88e2576e3..a0aacc5efb948534755e6a70ea1791c23372bd78 100644
--- a/custom/languages/Turkish/table.php
+++ b/custom/languages/Turkish/table.php
@@ -9,13 +9,11 @@
  *  Turkish translation by xOrcun
  */
 
-$language = array(
-    /*
-     *  Tables
-     */
+$language = [
+    // Tables
     'display_records_per_page' => 'Display _MENU_ records per page', // Don't replace "_MENU_"
     'nothing_found' => 'Sonuş Bulunamadı',
     'page_x_of_y' => 'Showing page _PAGE_ of _PAGES_', // Don't replace "_PAGE_" or "_PAGES_"
     'no_records' => 'Kayıt Yok',
     'filtered' => '(filtered from _MAX_ total records)' // Don't replace "_MAX_"
-);
+];
diff --git a/custom/languages/Turkish/time.php b/custom/languages/Turkish/time.php
index 36f043c4c46ddb03b6d77072d060bffb7ed85d70..42c1d6df97b16c05cc07967710732368c75602df 100644
--- a/custom/languages/Turkish/time.php
+++ b/custom/languages/Turkish/time.php
@@ -9,10 +9,8 @@
  *  Turkish translation by xOrcun
  */
 
-$language = array(
-    /*
-     *  Time
-     */
+$language = [
+    // Time
     'time' => 'zaman', // Placeholder, no need to translate
     'seconds_short' => 'sn', // Shortened "seconds", eg "s"
     'less_than_a_minute' => '1 dakikadan az bir süre önce',
@@ -26,4 +24,4 @@ $language = array(
     '_months' => '{x} ay önce',
     'about_1_year' => 'yaklaşık 1 yıl önce',
     'over_x_years' => '{x} yıldan uzun bir süre önce'
-);
+];
diff --git a/custom/languages/Turkish/user.php b/custom/languages/Turkish/user.php
index ee78e5a578679635c975459c4c5cce81cdbdb770..3a3e42c7f9790532f48e1a92c59272cc9b5d5158 100644
--- a/custom/languages/Turkish/user.php
+++ b/custom/languages/Turkish/user.php
@@ -9,15 +9,11 @@
  *  Turkish translation by xOrcun
  */
 
-$language = array(
-    /*
-     *  Change this for the account validation message
-     */
+$language = [
+    // Change this for the account validation message
     'validate_account_command' => 'Kaydı tamamlamak için lütfen <strong>{x}</strong> oyun adı komutunu yürütün.', // Don't replace {x}
 
-    /*
-     *  User Related
-     */
+    // User Related
     'guest' => 'Ziyaretçi',
     'guests' => 'Ziyaretçiler',
 
@@ -224,16 +220,12 @@ $language = array(
     'latest_profile_posts' => 'Latest Profile Posts',
     'no_profile_posts' => 'No profile posts.',
 
-    /*
-     *  Infractions area
-     */
+    // Infractions area
     'you_have_been_banned' => 'Engellendiniz!',
     'you_have_received_a_warning' => 'Bir uyarı aldınız!',
     'acknowledge' => 'Kabul',
 
-    /*
-     *  Hooks
-     */
+    // Hooks
     'user_x_has_registered' => '{x} katıldı ' . SITE_NAME . '!',
     'user_x_has_validated' => '{x} has validated their account!',
 
@@ -252,4 +244,4 @@ $language = array(
     'discord_communication_error' => 'There was an error while communicating with the Discord Bot. Please ensure the bot is running and your Bot URL is correct.',
     'discord_unknown_error' => 'There was an unknown error while syncing Discord roles. Please contact an administrator.',
     'discord_id_help' => 'For information on where to find Discord ID\'s, please read <a href="https://support.discord.com/hc/en-us/articles/206346498-Where-can-I-find-my-User-Server-Message-ID-" target="_blank">this.</a>'
-);
+];
diff --git a/custom/panel_templates/Default/template.php b/custom/panel_templates/Default/template.php
index 2dd2fc473059a52efcece591d3c8fccf22df3562..184e5afcd3dc71dc96ffbd64df6b40ca78e4df17 100644
--- a/custom/panel_templates/Default/template.php
+++ b/custom/panel_templates/Default/template.php
@@ -13,10 +13,15 @@
  */
 
 // Always have the following if statement around your class
-if (!class_exists('Default_Panel_Template')) {
-    class Default_Panel_Template extends TemplateBase {
+if (! class_exists('Default_Panel_Template')) {
+    class Default_Panel_Template extends TemplateBase
+{
         // Private variable to store language + user
-        private $_language, $_user, $_pages;
+        private $_language,
+
+ $_user,
+
+ $_pages;
 
         // Constructor - set template name, version, Nameless version and author here
         public function __construct($cache, $smarty, $language, $user, $pages) {
@@ -31,21 +36,21 @@ if (!class_exists('Default_Panel_Template')) {
                 '<a href="https://coldfiredzn.com" target="_blank">Coldfire</a>'  // Author, you can use HTML here
             );
 
-            $this->addCSSFiles(array(
-                'https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.14.0/css/all.min.css' => array('integrity' => 'sha512-1PKOgIY59xJ8Co8+NE6FZ+LOAZKjy+KY8iq0G4B3CyeY6wYHN3yt9PW0XpSriVlkMXe40PTKnXrLnZ9+fkDaog==', 'crossorigin' => 'anonymous'),
-                (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/custom/panel_templates/Default/assets/css/sb-admin-2.min.css' => array(),
-                'https://fonts.googleapis.com/css?family=Nunito:200,200i,300,300i,400,400i,600,600i,700,700i,800,800i,900,900i' => array(),
-                (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/custom/panel_templates/Default/assets/css/custom.css?v=2' => array(),
-                (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/switchery/switchery.min.css' => array()
-            ));
-
-            $this->addJSFiles(array(
-                (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/custom/panel_templates/Default/assets/plugins/jquery/jquery.min.js' => array(),
-                (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/js/jquery.cookie.js' => array(),
-                (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/custom/panel_templates/Default/assets/plugins/bootstrap/js/bootstrap.bundle.min.js' => array(),
-                (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/custom/panel_templates/Default/assets/js/sb-admin-2.js' => array(),
-                (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/switchery/switchery.min.js' => array()
-            ));
+            $this->addCSSFiles([
+                'https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.14.0/css/all.min.css' => ['integrity' => 'sha512-1PKOgIY59xJ8Co8+NE6FZ+LOAZKjy+KY8iq0G4B3CyeY6wYHN3yt9PW0XpSriVlkMXe40PTKnXrLnZ9+fkDaog==', 'crossorigin' => 'anonymous'],
+                (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/custom/panel_templates/Default/assets/css/sb-admin-2.min.css' => [],
+                'https://fonts.googleapis.com/css?family=Nunito:200,200i,300,300i,400,400i,600,600i,700,700i,800,800i,900,900i' => [],
+                (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/custom/panel_templates/Default/assets/css/custom.css?v=2' => [],
+                (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/switchery/switchery.min.css' => []
+            ]);
+
+            $this->addJSFiles([
+                (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/custom/panel_templates/Default/assets/plugins/jquery/jquery.min.js' => [],
+                (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/js/jquery.cookie.js' => [],
+                (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/custom/panel_templates/Default/assets/plugins/bootstrap/js/bootstrap.bundle.min.js' => [],
+                (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/custom/panel_templates/Default/assets/js/sb-admin-2.js' => [],
+                (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/switchery/switchery.min.js' => []
+            ]);
 
             $this->addJSScript('
 
@@ -152,23 +157,24 @@ if (!class_exists('Default_Panel_Template')) {
             if (defined('PANEL_PAGE')) {
                 switch (PANEL_PAGE) {
                     case 'dashboard':
-                        $this->addJSFiles(array(
-                            (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/moment/moment.min.js' => array(),
-                            (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/charts/Chart.min.js' => array()
-                        ));
+                        $this->addJSFiles([
+                            (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/moment/moment.min.js' => [],
+                            (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/charts/Chart.min.js' => []
+                        ]);
                         $this->addJSScript('
 						$(".stats-card i").addClass("fa-2x text-gray-300");
 						');
+
                         break;
 
                     case 'api':
-                        $this->addCSSFiles(array(
-                            (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/toastr/toastr.min.css' => array()
-                        ));
+                        $this->addCSSFiles([
+                            (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/toastr/toastr.min.css' => []
+                        ]);
 
-                        $this->addJSFiles(array(
-                            (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/toastr/toastr.min.js' => array()
-                        ));
+                        $this->addJSFiles([
+                            (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/toastr/toastr.min.js' => []
+                        ]);
 
                         $this->addJSScript('
 						var elems = Array.prototype.slice.call(document.querySelectorAll(\'.js-switch\'));
@@ -181,15 +187,15 @@ if (!class_exists('Default_Panel_Template')) {
                         break;
 
                     case 'avatars':
-                        $this->addCSSFiles(array(
-                            (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/dropzone/dropzone.min.css' => array(),
-                            (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/image-picker/image-picker.css' => array()
-                        ));
+                        $this->addCSSFiles([
+                            (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/dropzone/dropzone.min.css' => [],
+                            (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/image-picker/image-picker.css' => []
+                        ]);
 
-                        $this->addJSFiles(array(
-                            (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/dropzone/dropzone.min.js' => array(),
-                            (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/image-picker/image-picker.min.js' => array()
-                        ));
+                        $this->addJSFiles([
+                            (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/dropzone/dropzone.min.js' => [],
+                            (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/image-picker/image-picker.min.js' => []
+                        ]);
 
                         $this->addJSScript('
 						var elems = Array.prototype.slice.call(document.querySelectorAll(\'.js-switch\'));
@@ -242,9 +248,9 @@ if (!class_exists('Default_Panel_Template')) {
 	                    }
 						');
 
-                        $this->addJSFiles(array(
-                            (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/ckeditor/ckeditor.js' => array()
-                        ));
+                        $this->addJSFiles([
+                            (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/ckeditor/ckeditor.js' => []
+                        ]);
 
                         $this->addJSScript(Input::createEditor('InputMaintenanceMessage'));
                         $this->addJSScript('
@@ -258,18 +264,19 @@ if (!class_exists('Default_Panel_Template')) {
                         break;
 
                     case 'privacy_and_terms':
-                        $this->addJSFiles(array(
-                            (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/ckeditor/ckeditor.js' => array()
-                        ));
+                        $this->addJSFiles([
+                            (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/ckeditor/ckeditor.js' => []
+                        ]);
 
                         $this->addJSScript(Input::createEditor('InputPrivacy'));
                         $this->addJSScript(Input::createEditor('InputTerms'));
+
                         break;
 
                     case 'registration':
-                        $this->addJSFiles(array(
-                            (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/ckeditor/ckeditor.js' => array()
-                        ));
+                        $this->addJSFiles([
+                            (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/ckeditor/ckeditor.js' => []
+                        ]);
 
                         $this->addJSScript(Input::createEditor('InputRegistrationDisabledMessage'));
 
@@ -294,14 +301,14 @@ if (!class_exists('Default_Panel_Template')) {
 
                     case 'announcements':
                     case 'groups':
-                        $this->addCSSFiles(array(
-                            (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/bootstrap-colorpicker/css/bootstrap-colorpicker.min.css' => array()
-                        ));
+                        $this->addCSSFiles([
+                            (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/bootstrap-colorpicker/css/bootstrap-colorpicker.min.css' => []
+                        ]);
 
-                        $this->addJSFiles(array(
-                            (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/bootstrap-colorpicker/js/bootstrap-colorpicker.min.js' => array(),
-                            (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/js/jquery-ui.min.js' => array()
-                        ));
+                        $this->addJSFiles([
+                            (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/bootstrap-colorpicker/js/bootstrap-colorpicker.min.js' => [],
+                            (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/js/jquery-ui.min.js' => []
+                        ]);
 
                         $this->addJSScript('
 						var elems = Array.prototype.slice.call(document.querySelectorAll(\'.js-switch\'));
@@ -315,21 +322,20 @@ if (!class_exists('Default_Panel_Template')) {
 
                     case 'template':
                         if (isset($_GET['file'])) {
-                            $this->addCSSFiles(array(
-                                (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/codemirror/lib/codemirror.css' => array()
-                            ));
-
-                            $this->addJSFiles(array(
-                                (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/codemirror/lib/codemirror.js' => array(),
-                                (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/codemirror/mode/smarty/smarty.js' => array(),
-                                (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/codemirror/mode/css/css.js' => array(),
-                                (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/codemirror/mode/javascript/javascript.js' => array(),
-                                (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/codemirror/mode/properties/properties.js' => array()
-                            ));
+                            $this->addCSSFiles([
+                                (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/codemirror/lib/codemirror.css' => []
+                            ]);
+
+                            $this->addJSFiles([
+                                (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/codemirror/lib/codemirror.js' => [],
+                                (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/codemirror/mode/smarty/smarty.js' => [],
+                                (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/codemirror/mode/css/css.js' => [],
+                                (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/codemirror/mode/javascript/javascript.js' => [],
+                                (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/codemirror/mode/properties/properties.js' => []
+                            ]);
                         }
 
                         if (isset($_GET['action']) && $_GET['action'] == 'permissions') {
-
                             $this->addJSScript('
 							var elems = Array.prototype.slice.call(document.querySelectorAll(\'.js-switch\'));
 
@@ -343,9 +349,9 @@ if (!class_exists('Default_Panel_Template')) {
 
                     case 'custom_pages':
                         if (isset($_GET['action'])) {
-                            $this->addJSFiles(array(
-                                (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/ckeditor/ckeditor.js' => array()
-                            ));
+                            $this->addJSFiles([
+                                (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/ckeditor/ckeditor.js' => []
+                            ]);
 
                             $this->addJSScript(Input::createEditor('inputContent', true));
                             $this->addJSScript('
@@ -356,17 +362,18 @@ if (!class_exists('Default_Panel_Template')) {
 							});
 							');
                         }
+
                         break;
 
                     case 'seo':
-                        $this->addCSSFiles(array(
-                            (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/custom/panel_templates/Default/assets/css/dataTables.bootstrap4.min.css' => array()
-                        ));
+                        $this->addCSSFiles([
+                            (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/custom/panel_templates/Default/assets/css/dataTables.bootstrap4.min.css' => []
+                        ]);
 
-                        $this->addJSFiles(array(
-                            (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/dataTables/jquery.dataTables.min.js' => array(),
-                            (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/custom/panel_templates/Default/assets/js/dataTables.bootstrap4.min.js' => array()
-                        ));
+                        $this->addJSFiles([
+                            (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/dataTables/jquery.dataTables.min.js' => [],
+                            (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/custom/panel_templates/Default/assets/js/dataTables.bootstrap4.min.js' => []
+                        ]);
 
                         $this->addJSScript('
                         $(document).ready(function() {
@@ -387,18 +394,19 @@ if (!class_exists('Default_Panel_Template')) {
                             });
                         });
                         ');
+
                         break;
 
                     case 'users':
-                        if (!defined('EDITING_USER')) {
-                            $this->addCSSFiles(array(
-                                (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/custom/panel_templates/Default/assets/css/dataTables.bootstrap4.min.css' => array()
-                            ));
+                        if (! defined('EDITING_USER')) {
+                            $this->addCSSFiles([
+                                (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/custom/panel_templates/Default/assets/css/dataTables.bootstrap4.min.css' => []
+                            ]);
 
-                            $this->addJSFiles(array(
-                                (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/dataTables/jquery.dataTables.min.js' => array(),
-                                (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/custom/panel_templates/Default/assets/js/dataTables.bootstrap4.min.js' => array()
-                            ));
+                            $this->addJSFiles([
+                                (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/dataTables/jquery.dataTables.min.js' => [],
+                                (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/custom/panel_templates/Default/assets/js/dataTables.bootstrap4.min.js' => []
+                            ]);
 
                             $this->addJSScript('
 							$(document).ready(function() {
@@ -438,13 +446,12 @@ if (!class_exists('Default_Panel_Template')) {
 								});
 							});
 							');
-
                         }
+
                         break;
 
                     case 'minecraft':
-                        if (!defined('MINECRAFT_PAGE')) {
-
+                        if (! defined('MINECRAFT_PAGE')) {
                             $this->addJSScript('
 							var elems = Array.prototype.slice.call(document.querySelectorAll(\'.js-switch\'));
 
@@ -460,9 +467,7 @@ if (!class_exists('Default_Panel_Template')) {
 						        };
 						    }
 							');
-
                         } else if (MINECRAFT_PAGE == 'authme') {
-
                             $this->addJSScript('
 							var elems = Array.prototype.slice.call(document.querySelectorAll(\'.js-switch\'));
 
@@ -478,9 +483,7 @@ if (!class_exists('Default_Panel_Template')) {
 						        };
 						    }
 							');
-
                         } else if (MINECRAFT_PAGE == 'verification') {
-
                             $this->addJSScript('
 							var elems = Array.prototype.slice.call(document.querySelectorAll(\'.js-switch\'));
 
@@ -496,11 +499,10 @@ if (!class_exists('Default_Panel_Template')) {
 						        };
 						    }
 							');
-
                         } else if (MINECRAFT_PAGE == 'servers') {
-                            $this->addJSFiles(array(
-                                (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/js/jquery-ui.min.js' => array()
-                            ));
+                            $this->addJSFiles([
+                                (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/js/jquery-ui.min.js' => []
+                            ]);
 
                             $this->addJSScript('
 							var elems = Array.prototype.slice.call(document.querySelectorAll(\'.js-switch\'));
@@ -509,7 +511,6 @@ if (!class_exists('Default_Panel_Template')) {
 							  var switchery = new Switchery(html, {color: \'#23923d\', secondaryColor: \'#e56464\'});
 							});
 							');
-
                         } else if (MINECRAFT_PAGE == 'query_errors') {
                             $this->addCSSStyle('
 							.error_log {
@@ -525,12 +526,11 @@ if (!class_exists('Default_Panel_Template')) {
 		                        background-color: #eceeef;
 		                    }
 							');
-
                         } else if (MINECRAFT_PAGE == 'server_banners') {
                             if (isset($_GET['edit'])) {
-                                $this->addCSSFiles(array(
-                                    (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/image-picker/image-picker.css' => array()
-                                ));
+                                $this->addCSSFiles([
+                                    (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/image-picker/image-picker.css' => []
+                                ]);
 
                                 $this->addCSSStyle('
 							    .thumbnails li img{
@@ -538,9 +538,9 @@ if (!class_exists('Default_Panel_Template')) {
 							    }
 								');
 
-                                $this->addJSFiles(array(
-                                    (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/image-picker/image-picker.min.js' => array()
-                                ));
+                                $this->addJSFiles([
+                                    (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/image-picker/image-picker.min.js' => []
+                                ]);
 
                                 $this->addJSScript('$(".image-picker").imagepicker();');
                             }
@@ -557,17 +557,19 @@ if (!class_exists('Default_Panel_Template')) {
 							  var switchery = new Switchery(html, {color: \'#23923d\', secondaryColor: \'#e56464\'});
 							});
 							');
+
                         break;
+
                     case 'security':
                         if (isset($_GET['view'])) {
-                            $this->addCSSFiles(array(
-                                (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/custom/panel_templates/Default/assets/css/dataTables.bootstrap4.min.css' => array()
-                            ));
+                            $this->addCSSFiles([
+                                (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/custom/panel_templates/Default/assets/css/dataTables.bootstrap4.min.css' => []
+                            ]);
 
-                            $this->addJSFiles(array(
-                                (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/dataTables/jquery.dataTables.min.js' => array(),
-                                (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/custom/panel_templates/Default/assets/js/dataTables.bootstrap4.min.js' => array()
-                            ));
+                            $this->addJSFiles([
+                                (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/dataTables/jquery.dataTables.min.js' => [],
+                                (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/custom/panel_templates/Default/assets/js/dataTables.bootstrap4.min.js' => []
+                            ]);
 
                             $this->addJSScript('
 							$(document).ready(function() {
@@ -590,18 +592,19 @@ if (!class_exists('Default_Panel_Template')) {
 							});
 							');
                         }
+
                         break;
 
                     case 'images':
-                        $this->addCSSFiles(array(
-                            (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/dropzone/dropzone.min.css' => array(),
-                            (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/image-picker/image-picker.css' => array()
-                        ));
+                        $this->addCSSFiles([
+                            (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/dropzone/dropzone.min.css' => [],
+                            (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/image-picker/image-picker.css' => []
+                        ]);
 
-                        $this->addJSFiles(array(
-                            (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/dropzone/dropzone.min.js' => array(),
-                            (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/image-picker/image-picker.min.js' => array(),
-                        ));
+                        $this->addJSFiles([
+                            (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/dropzone/dropzone.min.js' => [],
+                            (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/image-picker/image-picker.min.js' => [],
+                        ]);
 
                         $this->addJSScript('
 						// Dropzone options
@@ -641,21 +644,21 @@ if (!class_exists('Default_Panel_Template')) {
 
 						$(".image-picker").imagepicker();
 						');
+
                         break;
 
                     case 'forums':
                         if (isset($_GET['forum'])) {
-
-                            $this->addJSFiles(array(
-                                (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/ckeditor/ckeditor.js' => array()
-                            ));
+                            $this->addJSFiles([
+                                (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/ckeditor/ckeditor.js' => []
+                            ]);
 
                             $this->addJSScript(Input::createEditor('InputPlaceholder', true));
                         }
 
-                        $this->addJSFiles(array(
-                            (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/js/jquery-ui.min.js' => array()
-                        ));
+                        $this->addJSFiles([
+                            (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/js/jquery-ui.min.js' => []
+                        ]);
 
                         $this->addJSScript('
 						var elems = Array.prototype.slice.call(document.querySelectorAll(\'.js-switch\'));
diff --git a/custom/templates/DefaultRevamp/template.php b/custom/templates/DefaultRevamp/template.php
index 8b838d3eef09c8a6a731bd28942226ff05e06a7b..c4684710088954662432abf05ca21021a258438e 100755
--- a/custom/templates/DefaultRevamp/template.php
+++ b/custom/templates/DefaultRevamp/template.php
@@ -9,45 +9,51 @@
  *	DefaultRevamp Template
  */
 
-class DefaultRevamp_Template extends TemplateBase {
-	private $_language, $_user, $_pages, $_template;
-	
-	public function __construct($cache, $smarty, $language, $user, $pages) {
-		
-		$template = array(
-			'name' => 'DefaultRevamp',
-			'version' => '2.0.0-pr9',
-			'nl_version' => "2.0.0-pr9",
-			'author' => '<a href="https://xemah.com/" target="_blank">Xemah</a>',
-		);
-		
-		$template['path'] = (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/custom/templates/' . $template['name'] . '/';
-		
-		parent::__construct($template['name'], $template['version'], $template['nl_version'], $template['author']);
-
-		$this->_settings = ROOT_PATH . '/custom/templates/DefaultRevamp/template_settings/settings.php';
-
-		$this->addCSSFiles(array(
-			$template['path'] . 'css/semantic.min.css' => array(),
-			$template['path'] . 'css/toastr.min.css' => array(),
-			'https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.14.0/css/all.min.css' => array('integrity' => 'sha512-1PKOgIY59xJ8Co8+NE6FZ+LOAZKjy+KY8iq0G4B3CyeY6wYHN3yt9PW0XpSriVlkMXe40PTKnXrLnZ9+fkDaog==', 'crossorigin' => 'anonymous')
-		));
-		
-		$this->addJSFiles(array(
-			$template['path'] . 'js/jquery.min.js' => array(),
-			$template['path'] . 'js/jquery.cookie.js' => array(),
-			$template['path'] . 'js/semantic.min.js' => array(),
-			$template['path'] . 'js/toastr.min.js' => array(),
-		));
-		
-		$smarty->assign('TEMPLATE', $template);
-
-		// Other variables
-		$smarty->assign('FORUM_SPAM_WARNING_TITLE', $language->get('general', 'warning'));
-
-		$cache->setCache('template_settings');
-		$smartyDarkMode = false;
-		$smartyNavbarColour = '';
+class DefaultRevamp_Template extends TemplateBase
+{
+    private $_language,
+
+ $_user,
+
+ $_pages,
+
+ $_template;
+    
+    public function __construct($cache, $smarty, $language, $user, $pages) {
+        $template = [
+            'name' => 'DefaultRevamp',
+            'version' => '2.0.0-pr9',
+            'nl_version' => '2.0.0-pr9',
+            'author' => '<a href="https://xemah.com/" target="_blank">Xemah</a>',
+        ];
+        
+        $template['path'] = (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/custom/templates/' . $template['name'] . '/';
+        
+        parent::__construct($template['name'], $template['version'], $template['nl_version'], $template['author']);
+
+        $this->_settings = ROOT_PATH . '/custom/templates/DefaultRevamp/template_settings/settings.php';
+
+        $this->addCSSFiles([
+            $template['path'] . 'css/semantic.min.css' => [],
+            $template['path'] . 'css/toastr.min.css' => [],
+            'https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.14.0/css/all.min.css' => ['integrity' => 'sha512-1PKOgIY59xJ8Co8+NE6FZ+LOAZKjy+KY8iq0G4B3CyeY6wYHN3yt9PW0XpSriVlkMXe40PTKnXrLnZ9+fkDaog==', 'crossorigin' => 'anonymous']
+        ]);
+        
+        $this->addJSFiles([
+            $template['path'] . 'js/jquery.min.js' => [],
+            $template['path'] . 'js/jquery.cookie.js' => [],
+            $template['path'] . 'js/semantic.min.js' => [],
+            $template['path'] . 'js/toastr.min.js' => [],
+        ]);
+        
+        $smarty->assign('TEMPLATE', $template);
+
+        // Other variables
+        $smarty->assign('FORUM_SPAM_WARNING_TITLE', $language->get('general', 'warning'));
+
+        $cache->setCache('template_settings');
+        $smartyDarkMode = false;
+        $smartyNavbarColour = '';
 
         if ($cache->isCached('darkMode')) {
             $darkMode = $cache->retrieve('darkMode');
@@ -66,77 +72,77 @@ class DefaultRevamp_Template extends TemplateBase {
             }
         }
 
-        $smarty->assign(array(
+        $smarty->assign([
             'DEFAULT_REVAMP_DARK_MODE' => $smartyDarkMode,
             'DEFAULT_REVAMP_NAVBAR_EXTRA_CLASSES' => $smartyNavbarColour
-        ));
-		
-		$this->_template = $template;
-		$this->_language = $language;
-		$this->_user = $user;
-		$this->_pages = $pages;
-	}
-	
-	public function onPageLoad() {
-		
-		$this->addCSSFiles(array(
-		    $this->_template['path'] . 'css/custom.css' => array()
-		));
-	    
-	    $route = (isset($_GET['route']) ? rtrim($_GET['route'], '/') : '/');
-
-		$JSVariables = array(
-		    'siteName' => SITE_NAME,
-		    'siteURL' => URL::build('/'),
-		    'fullSiteUrl' => Util::getSelfURL() . ltrim(URL::build('/'), '/'),
-		    'page' => PAGE,
-		    'avatarSource' => Util::getAvatarSource(),
-		    'copied' => $this->_language->get('general', 'copied'),
-		    'cookieNotice' => $this->_language->get('general', 'cookie_notice'),
-		    'noMessages' => $this->_language->get('user', 'no_messages'),
-		    'newMessage1' => $this->_language->get('user', '1_new_message'),
-		    'newMessagesX' => $this->_language->get('user', 'x_new_messages'),
-		    'noAlerts' => $this->_language->get('user', 'no_alerts'),
-		    'newAlert1' => $this->_language->get('user', '1_new_alert'),
-		    'newAlertsX' => $this->_language->get('user', 'x_new_alerts'),
-		    'bungeeInstance' => $this->_language->get('general', 'bungee_instance'),
-		    'andMoreX' => $this->_language->get('general', 'and_x_more'),
-		    'noPlayersOnline' => $this->_language->get('general', 'no_players_online'),
-		    'offline' => $this->_language->get('general', 'offline'),
-		    'confirmDelete' => $this->_language->get('general', 'confirm_deletion'),
-		    'debugging' => ((defined('DEBUGGING') && DEBUGGING == 1) ? '1' : '0'),
-		    'loggedIn' => ($this->_user->isLoggedIn() ? '1' : '0'),
-		    'cookie'  => (defined('COOKIE_NOTICE') ? '1' : '0'),
-		    'loadingTime' => ((defined('PAGE_LOADING') && PAGE_LOADING == 1) ? PAGE_LOAD_TIME : ''),
-		    'route' => $route
-		);
-		
-	    if (strpos($route, '/forum/topic/') !== false || PAGE == 'profile') {
-			$this->addJSFiles(array(
-			    $this->_template['path'] . 'js/jquery-ui.min.js' => array()
-			));
-	    }
-
-	    $JSVars = '';
-	    $i = 0;
-		foreach ($JSVariables as $var => $value) {
-		    $JSVars .= ($i == 0 ? 'var ' : ', ') . $var . ' = "' . $value . '"';
-		    $i++;
-		}
-		
-		$this->addJSScript($JSVars);
-		
-		$this->addJSFiles(array(
-			$this->_template['path'] . 'js/core/core.js' => array(),
-			$this->_template['path'] . 'js/core/user.js' => array(),
-			$this->_template['path'] . 'js/core/pages.js' => array(),
-			$this->_template['path'] . 'js/scripts.js' => array(),
-		));
-		
-		foreach($this->_pages->getAjaxScripts() as $script)
-		    $this->addJSScript('$.getJSON(\'' . $script . '\', function(data) {});');
-	}
+        ]);
+        
+        $this->_template = $template;
+        $this->_language = $language;
+        $this->_user = $user;
+        $this->_pages = $pages;
+    }
+    
+    public function onPageLoad() {
+        $this->addCSSFiles([
+            $this->_template['path'] . 'css/custom.css' => []
+        ]);
+        
+        $route = (isset($_GET['route']) ? rtrim($_GET['route'], '/') : '/');
+
+        $JSVariables = [
+            'siteName' => SITE_NAME,
+            'siteURL' => URL::build('/'),
+            'fullSiteUrl' => Util::getSelfURL() . ltrim(URL::build('/'), '/'),
+            'page' => PAGE,
+            'avatarSource' => Util::getAvatarSource(),
+            'copied' => $this->_language->get('general', 'copied'),
+            'cookieNotice' => $this->_language->get('general', 'cookie_notice'),
+            'noMessages' => $this->_language->get('user', 'no_messages'),
+            'newMessage1' => $this->_language->get('user', '1_new_message'),
+            'newMessagesX' => $this->_language->get('user', 'x_new_messages'),
+            'noAlerts' => $this->_language->get('user', 'no_alerts'),
+            'newAlert1' => $this->_language->get('user', '1_new_alert'),
+            'newAlertsX' => $this->_language->get('user', 'x_new_alerts'),
+            'bungeeInstance' => $this->_language->get('general', 'bungee_instance'),
+            'andMoreX' => $this->_language->get('general', 'and_x_more'),
+            'noPlayersOnline' => $this->_language->get('general', 'no_players_online'),
+            'offline' => $this->_language->get('general', 'offline'),
+            'confirmDelete' => $this->_language->get('general', 'confirm_deletion'),
+            'debugging' => ((defined('DEBUGGING') && DEBUGGING == 1) ? '1' : '0'),
+            'loggedIn' => ($this->_user->isLoggedIn() ? '1' : '0'),
+            'cookie' => (defined('COOKIE_NOTICE') ? '1' : '0'),
+            'loadingTime' => ((defined('PAGE_LOADING') && PAGE_LOADING == 1) ? PAGE_LOAD_TIME : ''),
+            'route' => $route
+        ];
+        
+        if (strpos($route, '/forum/topic/') !== false || PAGE == 'profile') {
+            $this->addJSFiles([
+                $this->_template['path'] . 'js/jquery-ui.min.js' => []
+            ]);
+        }
+
+        $JSVars = '';
+        $i = 0;
+
+        foreach ($JSVariables as $var => $value) {
+            $JSVars .= ($i == 0 ? 'var ' : ', ') . $var . ' = "' . $value . '"';
+            $i++;
+        }
+        
+        $this->addJSScript($JSVars);
+        
+        $this->addJSFiles([
+            $this->_template['path'] . 'js/core/core.js' => [],
+            $this->_template['path'] . 'js/core/user.js' => [],
+            $this->_template['path'] . 'js/core/pages.js' => [],
+            $this->_template['path'] . 'js/scripts.js' => [],
+        ]);
+        
+        foreach ($this->_pages->getAjaxScripts() as $script)
+            $this->addJSScript('$.getJSON(\'' . $script . '\', function(data) {});');
+    }
 }
 
 $template = new DefaultRevamp_Template($cache, $smarty, $language, $user, $pages);
-$template_pagination = array('div' => 'ui mini pagination menu', 'a' => '{x}item');
+$template_pagination = ['div' => 'ui mini pagination menu', 'a' => '{x}item'];
diff --git a/custom/templates/DefaultRevamp/template_settings/settings.php b/custom/templates/DefaultRevamp/template_settings/settings.php
index caf045902184bf9a181453b61bc421fa0c19575e..b93863354a4ad435bb7fb20f52cea49bba6c0d34 100644
--- a/custom/templates/DefaultRevamp/template_settings/settings.php
+++ b/custom/templates/DefaultRevamp/template_settings/settings.php
@@ -9,115 +9,114 @@
  *  DefaultRevamp template settings
  */
 
-if(Input::exists()){
-	if(Token::check()){
-		$cache->setCache('template_settings');
+if (Input::exists()){
+    if (Token::check()){
+        $cache->setCache('template_settings');
 
-		if(isset($_POST['darkMode'])){
-			$cache->store('darkMode', $_POST['darkMode']);
-		}
+        if (isset($_POST['darkMode'])){
+            $cache->store('darkMode', $_POST['darkMode']);
+        }
 
-		if(isset($_POST['navbarColour'])){
-			$cache->store('navbarColour', $_POST['navbarColour']);
-		}
+        if (isset($_POST['navbarColour'])){
+            $cache->store('navbarColour', $_POST['navbarColour']);
+        }
 
-		Session::flash('admin_templates', $language->get('admin', 'successfully_updated'));
-
-	} else
-		$errors = array($language->get('general', 'invalid_token'));
+        Session::flash('admin_templates', $language->get('admin', 'successfully_updated'));
+    } else $errors = [$language->get('general', 'invalid_token')];
 }
 
 // Get values
 $cache->setCache('template_settings');
-if($cache->isCached('darkMode')){
+
+if ($cache->isCached('darkMode')){
     $darkMode = $cache->retrieve('darkMode');
 } else {
     $darkMode = '0';
-	$cache->store('darkMode', $darkMode);
+    $cache->store('darkMode', $darkMode);
 }
 
-if($cache->isCached('navbarColour')){
-	$navbarColour = $cache->retrieve('navbarColour');
+if ($cache->isCached('navbarColour')){
+    $navbarColour = $cache->retrieve('navbarColour');
 } else {
     $navbarColour = 'white';
-	$cache->store('navbarColour', $navbarColour);
+    $cache->store('navbarColour', $navbarColour);
 }
 
-$nav_colours = array(
-	0 => array(
-		'value' => 'white',
-		'name' => 'Default',
-		'selected' => ($navbarColour == 'white')
-	),
-	1 => array(
-		'value' => 'red',
-		'name' => 'Red',
-		'selected' => ($navbarColour == 'red')
-	),
-	2 => array(
-		'value' => 'orange',
-		'name' => 'Orange',
-		'selected' => ($navbarColour == 'orange')
-	),
-	3 => array(
-		'value' => 'yellow',
-		'name' => 'Yellow',
-		'selected' => ($navbarColour == 'yellow')
-	),
-	4 => array(
-		'value' => 'olive',
-		'name' => 'Olive',
-		'selected' => ($navbarColour == 'olive')
-	),
-	5 => array(
-		'value' => 'green',
-		'name' => 'Green',
-		'selected' => ($navbarColour == 'green')
-	),
-	6 => array(
-		'value' => 'teal',
-		'name' => 'Teal',
-		'selected' => ($navbarColour == 'teal')
-	),
-	7 => array(
-		'value' => 'blue',
-		'name' => 'Blue',
-		'selected' => ($navbarColour == 'blue')
-	),
-	8 => array(
-		'value' => 'violet',
-		'name' => 'Violet',
-		'selected' => ($navbarColour == 'violet')
-	),
-	9 => array(
-		'value' => 'purple',
-		'name' => 'Purple',
-		'selected' => ($navbarColour == 'purple')
-	),
-	10 => array(
-		'value' => 'pink',
-		'name' => 'Pink',
-		'selected' => ($navbarColour == 'pink')
-	),
-	11 => array(
-		'value' => 'brown',
-		'name' => 'Brown',
-		'selected' => ($navbarColour == 'brown')
-	),
-	12 => array(
-		'value' => 'grey',
-		'name' => 'Grey',
-		'selected' => ($navbarColour == 'grey')
-	),
-);
+$nav_colours = [
+    0 => [
+        'value' => 'white',
+        'name' => 'Default',
+        'selected' => ($navbarColour == 'white')
+    ],
+    1 => [
+        'value' => 'red',
+        'name' => 'Red',
+        'selected' => ($navbarColour == 'red')
+    ],
+    2 => [
+        'value' => 'orange',
+        'name' => 'Orange',
+        'selected' => ($navbarColour == 'orange')
+    ],
+    3 => [
+        'value' => 'yellow',
+        'name' => 'Yellow',
+        'selected' => ($navbarColour == 'yellow')
+    ],
+    4 => [
+        'value' => 'olive',
+        'name' => 'Olive',
+        'selected' => ($navbarColour == 'olive')
+    ],
+    5 => [
+        'value' => 'green',
+        'name' => 'Green',
+        'selected' => ($navbarColour == 'green')
+    ],
+    6 => [
+        'value' => 'teal',
+        'name' => 'Teal',
+        'selected' => ($navbarColour == 'teal')
+    ],
+    7 => [
+        'value' => 'blue',
+        'name' => 'Blue',
+        'selected' => ($navbarColour == 'blue')
+    ],
+    8 => [
+        'value' => 'violet',
+        'name' => 'Violet',
+        'selected' => ($navbarColour == 'violet')
+    ],
+    9 => [
+        'value' => 'purple',
+        'name' => 'Purple',
+        'selected' => ($navbarColour == 'purple')
+    ],
+    10 => [
+        'value' => 'pink',
+        'name' => 'Pink',
+        'selected' => ($navbarColour == 'pink')
+    ],
+    11 => [
+        'value' => 'brown',
+        'name' => 'Brown',
+        'selected' => ($navbarColour == 'brown')
+    ],
+    12 => [
+        'value' => 'grey',
+        'name' => 'Grey',
+        'selected' => ($navbarColour == 'grey')
+    ],
+];
 
-$smarty->assign(array(
-	'SUBMIT' => $language->get('general', 'submit'),
-	'ENABLED' => $language->get('admin', 'enabled'),
-	'DISABLED' => $language->get('admin', 'disabled'),
-	'DARK_MODE' => $language->get('admin', 'dark_mode'),
-	'DARK_MODE_VALUE' => $darkMode,
-	'NAVBAR_COLOUR' => $language->get('admin', 'navbar_colour'),
-	'NAVBAR_COLOURS' => $nav_colours,
-	'SETTINGS_TEMPLATE' => ROOT_PATH . '/custom/templates/DefaultRevamp/template_settings/settings.tpl'
-));
+$smarty->assign([
+    'SUBMIT' => $language->get('general', 'submit'),
+    'ENABLED' => $language->get('admin', 'enabled'),
+    'DISABLED' => $language->get('admin', 'disabled'),
+    'DARK_MODE' => $language->get('admin', 'dark_mode'),
+    'DARK_MODE_VALUE' => $darkMode,
+    'NAVBAR_COLOUR' => $language->get('admin', 'navbar_colour'),
+    'NAVBAR_COLOURS' => $nav_colours,
+    'SETTINGS_TEMPLATE' => ROOT_PATH . '/custom/templates/DefaultRevamp/template_settings/settings.tpl'
+]);
diff --git a/error.php b/error.php
index 1f8bd0ba1eb3104f0155ebe8272f987d0caf175a..dcc893bb6551b0480493ac1b3eb85fae79c85f8b 100644
--- a/error.php
+++ b/error.php
@@ -14,11 +14,11 @@
 // TODO: Translations in tpl
 // TODO: start_line is negative when issue LOC is less than line_buffer
 
-if (!defined('ERRORHANDLER')) {
+if (! defined('ERRORHANDLER')) {
     die();
 }
 
-if (!defined('LANGUAGE')) {
+if (! defined('LANGUAGE')) {
     define('LANGUAGE', 'EnglishUK');
 }
 
@@ -26,7 +26,7 @@ $language = new Language('core', LANGUAGE);
 $user = new User();
 
 if (defined('CONFIG_PATH')) {
-    $path = CONFIG_PATH . '/core/assets/'; 
+    $path = CONFIG_PATH . '/core/assets/';
 } else {
     $path = '/core/assets/';
 }
@@ -38,13 +38,13 @@ $jquery = $path . 'js/jquery.min.js';
 $prism_css = $path . 'css/prism.css';
 $prism_js = $path . 'js/prism.js';
 
-$current_url = "http" . (($_SERVER['SERVER_PORT'] == 443) ? "s" : "") . "://" . $_SERVER['HTTP_HOST'] . $_SERVER['REQUEST_URI'];
+$current_url = 'http' . (($_SERVER['SERVER_PORT'] == 443) ? 's' : '') . '://' . $_SERVER['HTTP_HOST'] . $_SERVER['REQUEST_URI'];
 
 $smarty = new Smarty();
 
 $smarty->setCompileDir(ROOT_PATH . '/cache/templates_c');
 
-$smarty->assign(array(
+$smarty->assign([
     'LANG' => defined('HTML_LANG') ? HTML_LANG : 'en',
     'RTL' => defined('HTML_RTL') && HTML_RTL === true ? ' dir="rtl"' : '',
     'LANG_CHARSET' => defined('LANG_CHARSET') ? LANG_CHARSET : 'utf-8',
@@ -68,6 +68,6 @@ $smarty->assign(array(
     'BACK' => $language->get('general', 'back'),
     'HOME' => $language->get('general', 'home'),
     'HOME_URL' => URL::build('/')
-));
+]);
 
 $smarty->display(ROOT_PATH . DIRECTORY_SEPARATOR . 'error.tpl');
diff --git a/index.php b/index.php
index 05d6170c32365657d5f8e41e462553d9f3828c33..95afff894a97d604399bda043fc1fad18fb8ebf8 100644
--- a/index.php
+++ b/index.php
@@ -31,42 +31,42 @@ define('PATH', '/');
 define('ROOT_PATH', dirname(__FILE__));
 $page = 'Home';
 
-if (!ini_get('upload_tmp_dir')) {
+if (! ini_get('upload_tmp_dir')) {
     $tmp_dir = sys_get_temp_dir();
 } else {
     $tmp_dir = ini_get('upload_tmp_dir');
 }
 
-ini_set('open_basedir', ROOT_PATH . PATH_SEPARATOR  . $tmp_dir . PATH_SEPARATOR . '/proc/stat');
+ini_set('open_basedir', ROOT_PATH . PATH_SEPARATOR . $tmp_dir . PATH_SEPARATOR . '/proc/stat');
 
 // Get the directory the user is trying to access
 $directory = $_SERVER['REQUEST_URI'];
-$directories = explode("/", $directory);
+$directories = explode('/', $directory);
 $lim = count($directories);
 
 if (isset($_GET['route']) && $_GET['route'] == '/rewrite_test') {
-    require_once('rewrite_test.php');
+    require_once ('rewrite_test.php');
+
     die();
 }
 
 // Start initialising the page
-require(ROOT_PATH . '/core/init.php');
+require (ROOT_PATH . '/core/init.php');
 
-if (!isset($GLOBALS['config']['core']) && is_file(ROOT_PATH . '/install.php')) {
+if (! isset($GLOBALS['config']['core']) && is_file(ROOT_PATH . '/install.php')) {
     Redirect::to('install.php');
 }
 
 // Get page to load from URL
-if (!isset($_GET['route']) || $_GET['route'] == '/') {
-
-    if (count($directories) > 1 && (!isset($_GET['route']) || (isset($_GET['route']) && $_GET['route'] != '/'))) {
-        require(ROOT_PATH . '/404.php');
+if (! isset($_GET['route']) || $_GET['route'] == '/') {
+    if (count($directories) > 1 && (! isset($_GET['route']) || (isset($_GET['route']) && $_GET['route'] != '/'))) {
+        require (ROOT_PATH . '/404.php');
     } else {
         // Homepage
         $pages->setActivePage($pages->getPageByURL('/'));
-        require(ROOT_PATH . '/modules/Core/pages/index.php');
-    }
 
+        require (ROOT_PATH . '/modules/Core/pages/index.php');
+    }
 } else {
     $route = rtrim(strtok($_GET['route'], '?'), '/');
 
@@ -76,46 +76,48 @@ if (!isset($_GET['route']) || $_GET['route'] == '/') {
     // Include the page
     if (array_key_exists($route, $modules)) {
         $pages->setActivePage($modules[$route]);
-        if (!isset($modules[$route]['custom'])) {
-            $path = join(DIRECTORY_SEPARATOR, array(ROOT_PATH, 'modules', $modules[$route]['module'], $modules[$route]['file']));
 
-            if (!file_exists($path)) {
-                require(ROOT_PATH . '/404.php');
-            } else { 
-                require($path);
+        if (! isset($modules[$route]['custom'])) {
+            $path = join(DIRECTORY_SEPARATOR, [ROOT_PATH, 'modules', $modules[$route]['module'], $modules[$route]['file']]);
+
+            if (! file_exists($path)) {
+                require (ROOT_PATH . '/404.php');
+            } else {
+                require ($path);
             }
             
-            die();
-        } else {
-            require(join(DIRECTORY_SEPARATOR, array(ROOT_PATH, 'modules', 'Core', 'pages', 'custom.php')));
             die();
         }
-    } else {
+
+            require (join(DIRECTORY_SEPARATOR, [ROOT_PATH, 'modules', 'Core', 'pages', 'custom.php']));
+
+            die();
+    }
         // Use recursion to check - might have URL parameters in path
         $path_array = explode('/', $route);
 
         for ($i = count($path_array) - 2; $i > 0; $i--) {
-
             $new_path = '/';
-            for($n = 1; $n <= $i; $n++){
+
+            for ($n = 1; $n <= $i; $n++){
                 $new_path .= $path_array[$n] . '/';
             }
 
             $new_path = rtrim($new_path, '/');
 
             if (array_key_exists($new_path, $modules)) {
-                $path = join(DIRECTORY_SEPARATOR, array(ROOT_PATH, 'modules', $modules[$new_path]['module'], $modules[$new_path]['file']));
+                $path = join(DIRECTORY_SEPARATOR, [ROOT_PATH, 'modules', $modules[$new_path]['module'], $modules[$new_path]['file']]);
 
                 if (file_exists($path)) {
                     $pages->setActivePage($modules[$new_path]);
-                    require($path);
+
+                    require ($path);
+
                     die();
                 }
             }
-
         }
 
         // 404
-        require(ROOT_PATH . '/404.php');
-    }
+        require (ROOT_PATH . '/404.php');
 }
diff --git a/install.php b/install.php
index 6b82bbc79d21b4a2bcba175b4d5d65845350af31..eec71be8176d2af908b7ff26f22859ac7363b490 100644
--- a/install.php
+++ b/install.php
@@ -10,7 +10,7 @@
  */
 
 // Definitions
-if (!defined('PATH')) {
+if (! defined('PATH')) {
     define('PATH', '/');
     define('ROOT_PATH', dirname(__FILE__));
 }
@@ -19,7 +19,7 @@ $page = 'install';
 $install_path = str_replace('\\', '/', substr(__DIR__, strlen($_SERVER['DOCUMENT_ROOT'])));
 
 // Start initialising the page
-require(ROOT_PATH . '/core/init.php');
+require (ROOT_PATH . '/core/init.php');
 
 // Disable error reporting
 error_reporting(0);
@@ -32,26 +32,30 @@ date_default_timezone_set('Europe/London');
 if (isset($_SESSION['installer_language'])
     && is_file('custom/languages/' . $_SESSION['installer_language'] . '/installer.php')
 ) {
-    require(ROOT_PATH . '/custom/languages/' . $_SESSION['installer_language'] . '/version.php');
-    require(ROOT_PATH . '/custom/languages/' . $_SESSION['installer_language'] . '/installer.php');
+    require (ROOT_PATH . '/custom/languages/' . $_SESSION['installer_language'] . '/version.php');
+
+    require (ROOT_PATH . '/custom/languages/' . $_SESSION['installer_language'] . '/installer.php');
 } else {
     // Require default language (EnglishUK)
-    require(ROOT_PATH . '/custom/languages/EnglishUK/version.php');
-    require(ROOT_PATH . '/custom/languages/EnglishUK/installer.php');
+    require (ROOT_PATH . '/custom/languages/EnglishUK/version.php');
+
+    require (ROOT_PATH . '/custom/languages/EnglishUK/installer.php');
 }
 
 // Get installation path
 $install_path = substr(str_replace('\\', '/', substr(__DIR__, strlen($_SERVER['DOCUMENT_ROOT']))), 1);
 
-if (!isset($CONFIG['installed'])) {
+if (! isset($CONFIG['installed'])) {
     if (isset($_GET['language'])) {
         // Set language
         if (is_file('custom/languages/' . $_GET['language'] . '/installer.php')) {
             $_SESSION['installer_language'] = $_GET['language'];
+
             die('OK');
         }
     }
-    require(ROOT_PATH . '/core/installation/views/installer.view.php');
+
+    require (ROOT_PATH . '/core/installation/views/installer.view.php');
 } else {
-    require(ROOT_PATH . '/core/installation/views/already_installed.view.php');
+    require (ROOT_PATH . '/core/installation/views/already_installed.view.php');
 }
diff --git a/maintenance.php b/maintenance.php
index 315fb6eaf364ee13bbd3087de1770a61fa16cdb6..f250e1c80bdf8abbd71b2914303ca60554045420 100644
--- a/maintenance.php
+++ b/maintenance.php
@@ -13,35 +13,37 @@ $pages = new Pages();
 
 define('PAGE', 'maintenance');
 $page_title = $language->get('errors', 'maintenance_title');
-require_once(ROOT_PATH . '/core/templates/frontend_init.php');
 
-if (!$user->isLoggedIn()) {
+require_once (ROOT_PATH . '/core/templates/frontend_init.php');
+
+if (! $user->isLoggedIn()) {
     $smarty->assign(
-        array(
+        [
             'LOGIN' => $language->get('general', 'sign_in'),
             'LOGIN_LINK' => URL::build('/login')
-        )
+        ]
     );
 }
 
 // Assign Smarty variables
 $smarty->assign(
-    array(
+    [
         'MAINTENANCE_TITLE' => $language->get('errors', 'maintenance_title'),
         'RETRY' => $language->get('errors', 'maintenance_retry')
-    )
+    ]
 );
 
 // Retrieve maintenance message
 $maintenance_message = $maintenance['message'];
-if (!empty($maintenance_message)) {
+
+if (! empty($maintenance_message)) {
     $smarty->assign('MAINTENANCE_MESSAGE', Output::getPurified(htmlspecialchars_decode($maintenance_message)));
 } else {
     $smarty->assign('MAINTENANCE_MESSAGE', 'Maintenance mode is enabled.');
 }
 
 // Load modules + template
-Module::loadPage($user, $pages, $cache, $smarty, array($navigation, $cc_nav, $mod_nav), $widgets);
+Module::loadPage($user, $pages, $cache, $smarty, [$navigation, $cc_nav, $mod_nav], $widgets);
 
 $page_load = microtime(true) - $start;
 define('PAGE_LOAD_TIME', str_replace('{x}', round($page_load, 3), $language->get('general', 'page_loaded_in')));
diff --git a/modules/Core/classes/Core_Sitemap.php b/modules/Core/classes/Core_Sitemap.php
index 058a815bfa840771b0352af65938fe971dca0ca6..614ac6eb5c5807ebc59f3d44e19d71ab5096a310 100644
--- a/modules/Core/classes/Core_Sitemap.php
+++ b/modules/Core/classes/Core_Sitemap.php
@@ -8,39 +8,39 @@
  *
  *  Core module Sitemap method
  */
-class Core_Sitemap {
-	public static function generateSitemap($sitemap = null){
-		if(!$sitemap)
-			return;
+class Core_Sitemap
+{
+    public static function generateSitemap($sitemap = null) {
+        if (! $sitemap)
+            return;
 
-		// Core pages
-		$sitemap->addItem(URL::build('/'), 1.0);
-		$sitemap->addItem(URL::build('/contact'), 0.6);
-		$sitemap->addItem(URL::build('/privacy'));
-		$sitemap->addItem(URL::build('/terms'));
-		$sitemap->addItem(URL::build('/login'), 0.8);
-		$sitemap->addItem(URL::build('/register'));
+        // Core pages
+        $sitemap->addItem(URL::build('/'), 1.0);
+        $sitemap->addItem(URL::build('/contact'), 0.6);
+        $sitemap->addItem(URL::build('/privacy'));
+        $sitemap->addItem(URL::build('/terms'));
+        $sitemap->addItem(URL::build('/login'), 0.8);
+        $sitemap->addItem(URL::build('/register'));
 
-		$portal = file_get_contents(ROOT_PATH . DIRECTORY_SEPARATOR . 'cache' . DIRECTORY_SEPARATOR . sha1('portal_cache') . '.cache');
-		$portal = json_decode($portal);
-		$portal = unserialize($portal->portal->data);
+        $portal = file_get_contents(ROOT_PATH . DIRECTORY_SEPARATOR . 'cache' . DIRECTORY_SEPARATOR . sha1('portal_cache') . '.cache');
+        $portal = json_decode($portal);
+        $portal = unserialize($portal->portal->data);
 
-		if($portal == 1)
-			$sitemap->addItem(URL::build('/home'), 0.9);
+        if ($portal == 1)
+            $sitemap->addItem(URL::build('/home'), 0.9);
 
-		$db = DB::getInstance();
+        $db = DB::getInstance();
 
-		$users = $db->query('SELECT username FROM nl2_users')->results();
+        $users = $db->query('SELECT username FROM nl2_users')->results();
 
-		foreach($users as $user)
-			$sitemap->addItem(URL::build('/profile/' . Output::getClean($user->username)));
+        foreach ($users as $user)
+            $sitemap->addItem(URL::build('/profile/' . Output::getClean($user->username)));
 
-		$users = null;
+        $users = null;
 
-		$pages = $db->query('SELECT id, url FROM nl2_custom_pages WHERE sitemap = 1 AND id IN (SELECT page_id FROM nl2_custom_pages_permissions WHERE group_id = 0 AND `view` = 1)')->results();
+        $pages = $db->query('SELECT id, url FROM nl2_custom_pages WHERE sitemap = 1 AND id IN (SELECT page_id FROM nl2_custom_pages_permissions WHERE group_id = 0 AND `view` = 1)')->results();
 
-		foreach($pages as $page)
-			$sitemap->addItem(URL::build(Output::getClean($page->url)));
-
-	}
-}
\ No newline at end of file
+        foreach ($pages as $page)
+            $sitemap->addItem(URL::build(Output::getClean($page->url)));
+    }
+}
diff --git a/modules/Core/collections/panel/RecentPunishments.php b/modules/Core/collections/panel/RecentPunishments.php
index 9eed82c3ccddc0593991126cb12018d38204092f..ffa447481d245a23962368751e7ea51b5a2a99fe 100644
--- a/modules/Core/collections/panel/RecentPunishments.php
+++ b/modules/Core/collections/panel/RecentPunishments.php
@@ -9,25 +9,27 @@
  *  Recent punishments dashboard collection item
  */
 
-class RecentPunishmentsItem extends CollectionItemBase {
-
-    private $_smarty, 
-            $_language, 
+class RecentPunishmentsItem extends CollectionItemBase
+{
+    private $_smarty,
+ 
+            $_language,
+ 
             $_cache;
 
     public function __construct($smarty, $language, $cache) {
         $cache->setCache('dashboard_main_items_collection');
+
         if ($cache->isCached('recent_punishments')) {
             $from_cache = $cache->retrieve('recent_punishments');
+
             if (isset($from_cache['order']))
                 $order = $from_cache['order'];
-            else
-                $order = 1;
+            else $order = 1;
 
             if (isset($from_cache['enabled']))
                 $enabled = $from_cache['enabled'];
-            else
-                $enabled = 1;
+            else $enabled = 1;
         } else {
             $order = 1;
             $enabled = 1;
@@ -51,10 +53,10 @@ class RecentPunishmentsItem extends CollectionItemBase {
         } else {
             $queries = new Queries();
             $query = $queries->orderAll('infractions', 'infraction_date', 'DESC');
-            $data = array();
+            $data = [];
 
             if (count($query)) {
-                $users = array();
+                $users = [];
                 $i = 0;
 
                 foreach ($query as $item) {
@@ -62,7 +64,8 @@ class RecentPunishmentsItem extends CollectionItemBase {
                         $punished_user = $users[$item->punished];
                     } else {
                         $punished_user = new User($item->punished);
-                        if (!$punished_user->data())
+
+                        if (! $punished_user->data())
                             continue;
                         $users[$item->punished] = $punished_user;
                     }
@@ -71,24 +74,27 @@ class RecentPunishmentsItem extends CollectionItemBase {
                         $staff_user = $users[$item->staff];
                     } else {
                         $staff_user = new User($item->staff);
-                        if (!$staff_user->data())
+
+                        if (! $staff_user->data())
                             continue;
                         $users[$item->staff] = $staff_user;
                     }
 
                     $revoked_by_user = null;
+
                     if ($item->revoked) {
                         if (array_key_exists($item->revoked_by, $users)) {
                             $revoked_by_user = $users[$item->revoked_by_user];
                         } else {
                             $revoked_by_user = new User($item->revoked_by);
-                            if (!$revoked_by_user->data())
+
+                            if (! $revoked_by_user->data())
                                 continue;
                             $users[$item->revoked_by] = $revoked_by_user;
                         }
                     }
 
-                    $data[] = array(
+                    $data[] = [
                         'url' => URL::build('/panel/users/punishments/', 'user=' . Output::getClean($punished_user->data()->id)),
                         'punished_username' => $punished_user->getDisplayname(true),
                         'punished_nickname' => $punished_user->getDisplayname(),
@@ -115,7 +121,7 @@ class RecentPunishmentsItem extends CollectionItemBase {
                         'revoked_by_uuid' => ($revoked_by_user ? Output::getClean($revoked_by_user->uuid) : ''),
                         'revoked_by_profile' => ($revoked_by_user ? URL::build('/panel/user/' . Output::getClean($revoked_by_user->data()->id) . '-' . Output::getClean($revoked_by_user->data()->username)) : ''),
                         'revoked_at' => $timeago->inWords(date('Y-m-d H:i:s', $item->revoked_at), $this->_language->getTimeLanguage())
-                    );
+                    ];
 
                     if (++$i == 5)
                         break;
@@ -125,7 +131,7 @@ class RecentPunishmentsItem extends CollectionItemBase {
             $this->_cache->store('recent_punishments_data', $data, 60);
         }
 
-        $this->_smarty->assign(array(
+        $this->_smarty->assign([
             'RECENT_PUNISHMENTS' => $this->_language->get('moderator', 'recent_punishments'),
             'PUNISHMENTS' => $data,
             'NO_PUNISHMENTS' => $this->_language->get('moderator', 'no_punishments_found'),
@@ -137,7 +143,7 @@ class RecentPunishmentsItem extends CollectionItemBase {
             'REASON' => $this->_language->get('moderator', 'reason:'),
             'REVOKED' => $this->_language->get('moderator', 'revoked'),
             'VIEW' => $this->_language->get('general', 'view')
-        ));
+        ]);
 
         return $this->_smarty->fetch('collections/dashboard_items/recent_punishments.tpl');
     }
diff --git a/modules/Core/collections/panel/RecentRegistrations.php b/modules/Core/collections/panel/RecentRegistrations.php
index 4f592200734adca0c4da8e8f9f951241091dc274..cfa9a37c4854aaaf70032da08a800d69ab0eb17b 100644
--- a/modules/Core/collections/panel/RecentRegistrations.php
+++ b/modules/Core/collections/panel/RecentRegistrations.php
@@ -9,25 +9,27 @@
  *  Recent registrations dashboard collection item
  */
 
-class RecentRegistrationsItem extends CollectionItemBase {
-
-    private $_smarty, 
-            $_language, 
+class RecentRegistrationsItem extends CollectionItemBase
+{
+    private $_smarty,
+ 
+            $_language,
+ 
             $_cache;
 
     public function __construct($smarty, $language, $cache) {
         $cache->setCache('dashboard_main_items_collection');
+
         if ($cache->isCached('recent_registrations')) {
             $from_cache = $cache->retrieve('recent_registrations');
+
             if (isset($from_cache['order']))
                 $order = $from_cache['order'];
-            else
-                $order = 2;
+            else $order = 2;
 
             if (isset($from_cache['enabled']))
                 $enabled = $from_cache['enabled'];
-            else
-                $enabled = 1;
+            else $enabled = 1;
         } else {
             $order = 2;
             $enabled = 1;
@@ -51,14 +53,14 @@ class RecentRegistrationsItem extends CollectionItemBase {
         } else {
             $queries = new Queries();
             $query = $queries->orderAll('users', 'joined', 'DESC LIMIT 5');
-            $data = array();
+            $data = [];
 
             if (count($query)) {
                 $i = 0;
 
                 foreach ($query as $item) {
                     $target_user = new User($item->id);
-                    $data[] = array(
+                    $data[] = [
                         'url' => URL::build('/panel/user/' . Output::getClean($item->id) . '-' . Output::getClean($item->username)),
                         'username' => $target_user->getDisplayname(true),
                         'nickname' => $target_user->getDisplayname(),
@@ -68,7 +70,7 @@ class RecentRegistrationsItem extends CollectionItemBase {
                         'groups' => $target_user->getAllGroups(true),
                         'time' => $timeago->inWords(date('d M Y, H:i', $item->joined), $this->_language->getTimeLanguage()),
                         'time_full' => date('d M Y, H:i', $item->joined)
-                    );
+                    ];
 
                     if (++$i == 5)
                         break;
@@ -78,12 +80,12 @@ class RecentRegistrationsItem extends CollectionItemBase {
             $this->_cache->store('recent_registrations_data', $data, 60);
         }
 
-        $this->_smarty->assign(array(
+        $this->_smarty->assign([
             'RECENT_REGISTRATIONS' => $this->_language->get('moderator', 'recent_registrations'),
             'REGISTRATIONS' => $data,
             'REGISTERED' => $this->_language->get('user', 'registered'),
             'VIEW' => $this->_language->get('general', 'view')
-        ));
+        ]);
 
         return $this->_smarty->fetch('collections/dashboard_items/recent_registrations.tpl');
     }
diff --git a/modules/Core/collections/panel/RecentReports.php b/modules/Core/collections/panel/RecentReports.php
index 0cd40b18c1eb82aab77b9e380809068031bc9c0c..5686d15138ffe8f03eee26e667deadb3fefba03e 100644
--- a/modules/Core/collections/panel/RecentReports.php
+++ b/modules/Core/collections/panel/RecentReports.php
@@ -9,25 +9,27 @@
  *  Recent reports dashboard collection item
  */
 
-class RecentReportsItem extends CollectionItemBase {
-
-    private $_smarty, 
-            $_language, 
+class RecentReportsItem extends CollectionItemBase
+{
+    private $_smarty,
+ 
+            $_language,
+ 
             $_cache;
 
     public function __construct($smarty, $language, $cache) {
         $cache->setCache('dashboard_main_items_collection');
+
         if ($cache->isCached('recent_reports')) {
             $from_cache = $cache->retrieve('recent_reports');
+
             if (isset($from_cache['order']))
                 $order = $from_cache['order'];
-            else
-                $order = 3;
+            else $order = 3;
 
             if (isset($from_cache['enabled']))
                 $enabled = $from_cache['enabled'];
-            else
-                $enabled = 1;
+            else $enabled = 1;
         } else {
             $order = 3;
             $enabled = 1;
@@ -51,10 +53,10 @@ class RecentReportsItem extends CollectionItemBase {
         } else {
             $queries = new Queries();
             $query = $queries->orderWhere('reports', 'status = 0', 'date_reported', 'DESC');
-            $data = array();
+            $data = [];
 
             if (count($query)) {
-                $users = array();
+                $users = [];
                 $i = 0;
 
                 foreach ($query as $item) {
@@ -62,7 +64,8 @@ class RecentReportsItem extends CollectionItemBase {
                         $reporter_user = $users[$item->reporter_id];
                     } else {
                         $reporter_user = new User($item->reporter_id);
-                        if (!$reporter_user->data())
+
+                        if (! $reporter_user->data())
                             continue;
                         $users[$item->reporter_id] = $reporter_user;
                     }
@@ -71,12 +74,13 @@ class RecentReportsItem extends CollectionItemBase {
                         $reported_user = $users[$item->reported_id];
                     } else {
                         $reported_user = new User($item->reported_id);
-                        if (!$reported_user->data())
+
+                        if (! $reported_user->data())
                             continue;
                         $users[$item->reported_id] = $reported_user;
                     }
 
-                    $data[] = array(
+                    $data[] = [
                         'url' => URL::build('/panel/users/reports/', 'id=' . Output::getClean($item->id)),
                         'reporter_username' => $reporter_user->getDisplayname(true),
                         'reporter_nickname' => $reporter_user->getDisplayname(),
@@ -97,7 +101,7 @@ class RecentReportsItem extends CollectionItemBase {
                         'link' => Output::getClean($item->link),
                         'ig_reported_mcname' => ($item->reported_mcname ? Output::getClean($item->reported_mcname) : ''),
                         'ig_reported_uuid' => ($item->reported_uuid ? Output::getClean($item->reported_uuid) : '')
-                    );
+                    ];
 
                     if (++$i == 5)
                         break;
@@ -107,7 +111,7 @@ class RecentReportsItem extends CollectionItemBase {
             $this->_cache->store('recent_reports_data', $data, 60);
         }
 
-        $this->_smarty->assign(array(
+        $this->_smarty->assign([
             'RECENT_REPORTS' => $this->_language->get('moderator', 'recent_reports'),
             'REPORTS' => $data,
             'NO_REPORTS' => $this->_language->get('moderator', 'no_open_reports'),
@@ -117,7 +121,7 @@ class RecentReportsItem extends CollectionItemBase {
             'WEBSITE' => $this->_language->get('moderator', 'website'),
             'INGAME' => $this->_language->get('moderator', 'ingame'),
             'VIEW' => $this->_language->get('general', 'view')
-        ));
+        ]);
 
         return $this->_smarty->fetch('collections/dashboard_items/recent_reports.tpl');
     }
diff --git a/modules/Core/collections/panel/RecentUsers.php b/modules/Core/collections/panel/RecentUsers.php
index 81d6ec069f125dc477da9c69b3786441274164dd..031495c330d9fd6568036809874fa7e81fdba3a1 100644
--- a/modules/Core/collections/panel/RecentUsers.php
+++ b/modules/Core/collections/panel/RecentUsers.php
@@ -9,24 +9,25 @@
  *  Recent users dashboard collection item
  */
 
-class RecentUsersItem extends CollectionItemBase {
-
-    private $_smarty, 
+class RecentUsersItem extends CollectionItemBase
+{
+    private $_smarty,
+ 
             $_language;
 
     public function __construct($smarty, $language, $cache) {
         $cache->setCache('dashboard_stats_collection');
+
         if ($cache->isCached('recent_users')) {
             $from_cache = $cache->retrieve('recent_users');
+
             if (isset($from_cache['order']))
                 $order = $from_cache['order'];
-            else
-                $order = 2;
+            else $order = 2;
 
             if (isset($from_cache['enabled']))
                 $enabled = $from_cache['enabled'];
-            else
-                $enabled = 1;
+            else $enabled = 1;
         } else {
             $order = 2;
             $enabled = 1;
@@ -41,13 +42,13 @@ class RecentUsersItem extends CollectionItemBase {
     public function getContent() {
         // Get the number of recent users
         $queries = new Queries();
-        $users_query = $queries->getWhere('users', array('joined', '>', strtotime('7 days ago')));
+        $users_query = $queries->getWhere('users', ['joined', '>', strtotime('7 days ago')]);
 
-        $this->_smarty->assign(array(
+        $this->_smarty->assign([
             'ICON' => $this->_language->get('admin', 'recent_users_statistic_icon'),
             'TITLE' => $this->_language->get('admin', 'recent_users'),
             'VALUE' => count($users_query)
-        ));
+        ]);
 
         return $this->_smarty->fetch('collections/dashboard_stats/recent_users.tpl');
     }
diff --git a/modules/Core/collections/panel/TotalUsers.php b/modules/Core/collections/panel/TotalUsers.php
index c18000f276af99de4ebbb88673c2a71ae60934c7..d27590152e94f1d0ba6785b4103fe557bb399f71 100644
--- a/modules/Core/collections/panel/TotalUsers.php
+++ b/modules/Core/collections/panel/TotalUsers.php
@@ -9,24 +9,25 @@
  *  Total users dashboard collection item
  */
 
-class TotalUsersItem extends CollectionItemBase {
-
-    private $_smarty, 
+class TotalUsersItem extends CollectionItemBase
+{
+    private $_smarty,
+ 
             $_language;
 
     public function __construct($smarty, $language, $cache) {
         $cache->setCache('dashboard_stats_collection');
+
         if ($cache->isCached('total_users')) {
             $from_cache = $cache->retrieve('total_users');
+
             if (isset($from_cache['order']))
                 $order = $from_cache['order'];
-            else
-                $order = 1;
+            else $order = 1;
 
             if (isset($from_cache['enabled']))
                 $enabled = $from_cache['enabled'];
-            else
-                $enabled = 1;
+            else $enabled = 1;
         } else {
             $order = 1;
             $enabled = 1;
@@ -41,13 +42,13 @@ class TotalUsersItem extends CollectionItemBase {
     public function getContent() {
         // Get the number of total users
         $queries = new Queries();
-        $users_query = $queries->getWhere('users', array('id', '<>', 0));
+        $users_query = $queries->getWhere('users', ['id', '<>', 0]);
 
-        $this->_smarty->assign(array(
+        $this->_smarty->assign([
             'ICON' => $this->_language->get('admin', 'total_users_statistic_icon'),
             'TITLE' => $this->_language->get('admin', 'total_users'),
             'VALUE' => count($users_query)
-        ));
+        ]);
 
         return $this->_smarty->fetch('collections/dashboard_stats/total_users.tpl');
     }
diff --git a/modules/Core/hooks/DeleteUserHook.php b/modules/Core/hooks/DeleteUserHook.php
index fdf61bcc68caef25b07b723c2312e33f34832f28..19b39691450b428fe910c40001c8838aa4f6fc68 100644
--- a/modules/Core/hooks/DeleteUserHook.php
+++ b/modules/Core/hooks/DeleteUserHook.php
@@ -7,67 +7,67 @@
  *  Delete user hook handler class for Core module
  */
 
-class DeleteUserHook {
-    
+class DeleteUserHook
+{
     // Execute hook
-    public static function deleteUser($params = array()) {
+    public static function deleteUser($params = []) {
         if (isset($params['user_id']) && $params['user_id'] > 1) {
             $queries = new Queries();
 
             // Delete the user
-            $queries->delete('users', array('id', '=', $params['user_id']));
+            $queries->delete('users', ['id', '=', $params['user_id']]);
 
             // Groups
-            $queries->delete('users_groups', array('user_id', '=', $params['user_id']));
+            $queries->delete('users_groups', ['user_id', '=', $params['user_id']]);
 
             // IP logs
-            $queries->delete('users_ips', array('user_id', '=', $params['user_id']));
+            $queries->delete('users_ips', ['user_id', '=', $params['user_id']]);
 
             // Logs
-            $queries->delete('logs', array('user_id', '=', $params['user_id']));
+            $queries->delete('logs', ['user_id', '=', $params['user_id']]);
 
             // Alerts
-            $queries->delete('alerts', array('user_id', '=', $params['user_id']));
+            $queries->delete('alerts', ['user_id', '=', $params['user_id']]);
 
             // Blocked users
-            $queries->delete('blocked_users', array('user_id', '=', $params['user_id']));
-            $queries->delete('blocked_users', array('user_blocked_id', '=', $params['user_id']));
+            $queries->delete('blocked_users', ['user_id', '=', $params['user_id']]);
+            $queries->delete('blocked_users', ['user_blocked_id', '=', $params['user_id']]);
 
             // Email errors
-            $queries->delete('email_errors', array('user_id', '=', $params['user_id']));
+            $queries->delete('email_errors', ['user_id', '=', $params['user_id']]);
 
             // Friends
-            $queries->delete('friends', array('user_id', '=', $params['user_id']));
-            $queries->delete('friends', array('friend_id', '=', $params['user_id']));
+            $queries->delete('friends', ['user_id', '=', $params['user_id']]);
+            $queries->delete('friends', ['friend_id', '=', $params['user_id']]);
 
             // Infractions
-            $queries->delete('infractions', array('punished', '=', $params['user_id']));
-            $queries->delete('infractions', array('staff', '=', $params['user_id']));
+            $queries->delete('infractions', ['punished', '=', $params['user_id']]);
+            $queries->delete('infractions', ['staff', '=', $params['user_id']]);
 
             // Private messages
-            $queries->delete('private_messages', array('author_id', '=', $params['user_id']));
-            $queries->delete('private_messages_replies', array('author_id', '=', $params['user_id']));
-            $queries->delete('private_messages_users', array('user_id', '=', $params['user_id']));
+            $queries->delete('private_messages', ['author_id', '=', $params['user_id']]);
+            $queries->delete('private_messages_replies', ['author_id', '=', $params['user_id']]);
+            $queries->delete('private_messages_users', ['user_id', '=', $params['user_id']]);
 
             // Reports
-            $queries->delete('reports', array('reporter_id', '=', $params['user_id']));
-            $queries->delete('reports_comments', array('commenter_id', '=', $params['user_id']));
+            $queries->delete('reports', ['reporter_id', '=', $params['user_id']]);
+            $queries->delete('reports_comments', ['commenter_id', '=', $params['user_id']]);
 
             // User sessions
-            $queries->delete('users_admin_session', array('user_id', '=', $params['user_id']));
-            $queries->delete('users_session', array('user_id', '=', $params['user_id']));
+            $queries->delete('users_admin_session', ['user_id', '=', $params['user_id']]);
+            $queries->delete('users_session', ['user_id', '=', $params['user_id']]);
 
             // Profile fields
-            $queries->delete('users_profile_fields', array('user_id', '=', $params['user_id']));
+            $queries->delete('users_profile_fields', ['user_id', '=', $params['user_id']]);
 
             // Username history
-            $queries->delete('users_username_history', array('user_id', '=', $params['user_id']));
+            $queries->delete('users_username_history', ['user_id', '=', $params['user_id']]);
 
             // Profile wall posts
-            $queries->delete('user_profile_wall_posts', array('user_id', '=', $params['user_id']));
-            $queries->delete('user_profile_wall_posts', array('author_id', '=', $params['user_id']));
-            $queries->delete('user_profile_wall_posts_reactions', array('user_id', '=', $params['user_id']));
-            $queries->delete('user_profile_wall_posts_replies', array('author_id', '=', $params['user_id']));
+            $queries->delete('user_profile_wall_posts', ['user_id', '=', $params['user_id']]);
+            $queries->delete('user_profile_wall_posts', ['author_id', '=', $params['user_id']]);
+            $queries->delete('user_profile_wall_posts_reactions', ['user_id', '=', $params['user_id']]);
+            $queries->delete('user_profile_wall_posts_replies', ['author_id', '=', $params['user_id']]);
         }
 
         return true;
diff --git a/modules/Core/hooks/DiscordHook.php b/modules/Core/hooks/DiscordHook.php
index e96df15cb676c743254f19318ebe491df84e74af..e102295a443ff3de7676b6a29f6e7fc6eb9bf96d 100644
--- a/modules/Core/hooks/DiscordHook.php
+++ b/modules/Core/hooks/DiscordHook.php
@@ -7,37 +7,39 @@
  *  Discord hook handler class
  */
 
-class DiscordHook {
-
+class DiscordHook
+{
     // Execute hook
-    public static function execute($params = array()) {
+    public static function execute($params = []) {
         // Ensure hook is compatible
-        $return = array();
+        $return = [];
+
         if ($params['event'] == 'registerUser') {
             $return['username'] = SITE_NAME;
             $return['content'] = '';
-            $return['embeds'] = array(array(
-                'author' => array(
+            $return['embeds'] = [[
+                'author' => [
                     'name' => Output::getClean($params['username']),
                     'url' => $params['url'],
                     'icon_url' => $params['avatar_url']
-                ),
+                ],
                 'description' => str_replace('{x}', Output::getClean($params['username']), $params['language']->get('user', 'user_x_has_registered'))
-            ));
+            ]];
         } else {
-            $content = html_entity_decode(str_replace(array('&nbsp;', '&bull;'), array(' ', ''), $params['content_full']));
+            $content = html_entity_decode(str_replace(['&nbsp;', '&bull;'], [' ', ''], $params['content_full']));
+
             if (mb_strlen($content) > 512) {
                 $content = mb_substr($content, 0, 512) . '...';
             }
 
             $return['username'] = $params['username'] . ' | ' . SITE_NAME;
             $return['avatar_url'] = $params['avatar_url'];
-            $return['embeds'] = array(array(
-                'description' =>  $content,
+            $return['embeds'] = [[
+                'description' => $content,
                 'title' => $params['title'],
                 'url' => $params['url'],
-                'footer' => array('text' => $params['content'])
-            ));
+                'footer' => ['text' => $params['content']]
+            ]];
         }
 
         $json = json_encode($return, JSON_UNESCAPED_SLASHES);
@@ -46,7 +48,7 @@ class DiscordHook {
 
         curl_setopt($ch, CURLOPT_URL, $params['webhook']);
         curl_setopt($ch, CURLOPT_POST, 1);
-        curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type: application/json'));
+        curl_setopt($ch, CURLOPT_HTTPHEADER, ['Content-Type: application/json']);
         curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
         curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);
         curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
diff --git a/modules/Core/hooks/ValidateHook.php b/modules/Core/hooks/ValidateHook.php
index 69e3dd10cc6aef1f181808c81424ecd77e22cb1d..37995763fb1935480e8ccd57369c94c2134dbcf4 100644
--- a/modules/Core/hooks/ValidateHook.php
+++ b/modules/Core/hooks/ValidateHook.php
@@ -7,13 +7,15 @@
  *  Validate user hook handler class
  */
 
-class ValidateHook {
-    public static function validatePromote($params = array()) {
-        if (!defined('VALIDATED_DEFAULT'))
+class ValidateHook
+{
+    public static function validatePromote($params = []) {
+        if (! defined('VALIDATED_DEFAULT'))
             define('VALIDATED_DEFAULT', 1);
 
         $validate_user = new User($params['user_id']);
-        if (!$validate_user->data()) {
+
+        if (! $validate_user->data()) {
             return false;
         }
 
diff --git a/modules/Core/includes/admin_widgets/discord.php b/modules/Core/includes/admin_widgets/discord.php
index b0733091778b22e5d2e373f010649cc1b421311d..efed96d56d3129d54fdcc2dd584c1f504de58bf3 100644
--- a/modules/Core/includes/admin_widgets/discord.php
+++ b/modules/Core/includes/admin_widgets/discord.php
@@ -17,19 +17,18 @@ if (Input::exists()) {
         if (isset($_POST['theme']))
             $cache->store('discord_widget_theme', $_POST['theme']);
 
-        $discord_id = $queries->getWhere('settings', array('name', '=', 'discord'));
+        $discord_id = $queries->getWhere('settings', ['name', '=', 'discord']);
         $discord_id = $discord_id[0]->id;
 
         if (isset($_POST['discord_guild_id'])) {
-
             $validate = new Validate();
-            $validation = $validate->check($_POST, array(
-                'discord_guild_id' => array(
+            $validation = $validate->check($_POST, [
+                'discord_guild_id' => [
                     'min' => 18,
                     'max' => 18,
                     'numeric' => true
-                )
-            ));
+                ]
+            ]);
 
             if ($validation->passed()) {
                 $guild_id = $_POST['discord_guild_id'];
@@ -46,31 +45,31 @@ if (Input::exists()) {
         } else {
             $guild_id = '';
         }
+
         if (count($errors))
             $smarty->assign('ERRORS', $errors);
         else {
-            $queries->update('settings', $discord_id, array(
+            $queries->update('settings', $discord_id, [
                 'value' => $guild_id
-            ));
+            ]);
 
             $cache->store('discord', $guild_id);
 
             $success = $language->get('admin', 'widget_updated');
         }
     } else {
-        $errors = array($language->get('general', 'invalid_token'));
+        $errors = [$language->get('general', 'invalid_token')];
     }
 }
 
-$guild_id = $queries->getWhere('settings', array('name', '=', 'discord'));
+$guild_id = $queries->getWhere('settings', ['name', '=', 'discord']);
 $guild_id = $guild_id[0]->value;
 
 if ($cache->isCached('discord_widget_theme'))
     $discord_theme = $cache->retrieve('discord_widget_theme');
-else
-    $discord_theme = 'dark';
+else $discord_theme = 'dark';
 
-$smarty->assign(array(
+$smarty->assign([
     'DISCORD_ID' => $language->get('admin', 'discord_id'),
     'DISCORD_ID_VALUE' => $guild_id,
     'INFO' => $language->get('general', 'info'),
@@ -80,4 +79,4 @@ $smarty->assign(array(
     'SETTINGS_TEMPLATE' => 'core/widgets/discord.tpl',
     'DARK' => $language->get('admin', 'dark'),
     'LIGHT' => $language->get('admin', 'light')
-));
+]);
diff --git a/modules/Core/includes/admin_widgets/online_users.php b/modules/Core/includes/admin_widgets/online_users.php
index 498dbbc15a81b067ad3a00a53dca74f1d7b9513f..a394ee8f56ea5f9a95092bf6346966e9b112cdf4 100644
--- a/modules/Core/includes/admin_widgets/online_users.php
+++ b/modules/Core/includes/admin_widgets/online_users.php
@@ -16,26 +16,25 @@ if (Input::exists()) {
     if (Token::check()) {
         if (isset($_POST['staff']) && $_POST['staff'] == 1)
             $cache->store('include_staff_in_users', 1);
-        else
-            $cache->store('include_staff_in_users', 0);
+        else $cache->store('include_staff_in_users', 0);
+
         if (isset($_POST['nickname']) && $_POST['nickname'] == 1)
             $cache->store('show_nickname_instead', 1);
-        else
-            $cache->store('show_nickname_instead', 0);
+        else $cache->store('show_nickname_instead', 0);
 
         $success = $language->get('admin', 'widget_updated');
     } else {
-        $errors = array($language->get('general', 'invalid_token'));
+        $errors = [$language->get('general', 'invalid_token')];
     }
 }
 
 $include_staff = $cache->retrieve('include_staff_in_users');
 $use_nickname_show = $cache->retrieve('show_nickname_instead');
 
-$smarty->assign(array(
+$smarty->assign([
     'INCLUDE_STAFF' => $language->get('admin', 'include_staff_in_user_widget'),
     'INCLUDE_STAFF_VALUE' => $include_staff,
     'SHOW_NICKNAME_INSTEAD' => $language->get('admin', 'show_nickname_instead_of_username'),
     'SHOW_NICKNAME_INSTEAD_VALUE' => $use_nickname_show,
     'SETTINGS_TEMPLATE' => 'core/widgets/online_users.tpl'
-));
+]);
diff --git a/modules/Core/includes/emails/register.php b/modules/Core/includes/emails/register.php
index 5c8b25f3e71f992b1d0803d23405213db37ae797..664173912a841b37a4c485de748154cf9785bb96 100644
--- a/modules/Core/includes/emails/register.php
+++ b/modules/Core/includes/emails/register.php
@@ -10,18 +10,18 @@
  */
 
 function sendRegisterEmail(Queries $queries, Language $language, $email_address, $username, $user_id, $code) {
-    $php_mailer = $queries->getWhere('settings', array('name', '=', 'phpmailer'));
+    $php_mailer = $queries->getWhere('settings', ['name', '=', 'phpmailer']);
     $php_mailer = $php_mailer[0]->value;
 
     $link = rtrim(Util::getSelfURL(), '/') . URL::build('/validate/', 'c=' . $code);
 
     if ($php_mailer == '1') {
         // PHP Mailer
-        $email = array(
-            'to' => array('email' => Output::getClean($email_address), 'name' => Output::getClean($username)),
+        $email = [
+            'to' => ['email' => Output::getClean($email_address), 'name' => Output::getClean($username)],
             'subject' => SITE_NAME . ' - ' . $language->get('emails', 'register_subject'),
             'message' => str_replace('[Link]', $link, Email::formatEmail('register', $language))
-        );
+        ];
 
         $sent = Email::send($email, 'mailer');
 
@@ -29,20 +29,19 @@ function sendRegisterEmail(Queries $queries, Language $language, $email_address,
             // Error, log it
             $queries->create(
                 'email_errors',
-                array(
+                [
                     'type' => 1, // 1 = registration
                     'content' => $sent['error'],
                     'at' => date('U'),
                     'user_id' => $user_id
-                )
+                ]
             );
 
             return false;
         }
-
     } else {
         // PHP mail function
-        $siteemail = $queries->getWhere('settings', array('name', '=', 'outgoing_email'));
+        $siteemail = $queries->getWhere('settings', ['name', '=', 'outgoing_email']);
         $siteemail = $siteemail[0]->value;
 
         $headers = 'From: ' . $siteemail . "\r\n" .
@@ -51,12 +50,12 @@ function sendRegisterEmail(Queries $queries, Language $language, $email_address,
             'MIME-Version: 1.0' . "\r\n" .
             'Content-type: text/html; charset=UTF-8' . "\r\n";
 
-        $email = array(
+        $email = [
             'to' => $email_address,
             'subject' => SITE_NAME . ' - ' . $language->get('emails', 'register_subject'),
             'message' => str_replace('[Link]', $link, Email::formatEmail('register', $language)),
             'headers' => $headers
-        );
+        ];
 
         $sent = Email::send($email, 'php');
 
@@ -64,12 +63,12 @@ function sendRegisterEmail(Queries $queries, Language $language, $email_address,
             // Error, log it
             $queries->create(
                 'email_errors',
-                array(
+                [
                     'type' => 1, // 1 = registration
                     'content' => $sent['error'],
                     'at' => date('U'),
                     'user_id' => $user_id
-                )
+                ]
             );
 
             return false;
@@ -77,4 +76,4 @@ function sendRegisterEmail(Queries $queries, Language $language, $email_address,
     }
 
     return true;
-}
\ No newline at end of file
+}
diff --git a/modules/Core/includes/endpoints/AddGroupsEndpoint.php b/modules/Core/includes/endpoints/AddGroupsEndpoint.php
index 1fcfd59fb5ebc6625956baf2b89e8d97c7ef460e..c5dd4f29e822fc7005d3219ca005cc407ae9cd05 100644
--- a/modules/Core/includes/endpoints/AddGroupsEndpoint.php
+++ b/modules/Core/includes/endpoints/AddGroupsEndpoint.php
@@ -1,13 +1,13 @@
 <?php
 
 /**
- * @param int $user NamelessMC ID of user to view
+ * @param int          $user   NamelessMC ID of user to view
  * @param string array $groups ID of group ids
  *
  * @return string JSON Array
  */
-class AddGroupsEndpoint extends EndpointBase {
-
+class AddGroupsEndpoint extends EndpointBase
+{
     public function __construct() {
         $this->_route = 'addGroups';
         $this->_module = 'Core';
@@ -22,13 +22,15 @@ class AddGroupsEndpoint extends EndpointBase {
         $user = new User($_POST['user']);
 
         $groups = $_POST['groups'];
-        if ($groups == null || !count($groups)) {
+
+        if ($groups == null || ! count($groups)) {
             $api->throwError(17, $api->getLanguage()->get('api', 'unable_to_find_group'), 'No groups provided');
         }
 
         foreach ($groups as $group) {
-            $group_query = $api->getDb()->get('groups', array('id', '=', $group));
-            if (!$group_query->count()) {
+            $group_query = $api->getDb()->get('groups', ['id', '=', $group]);
+
+            if (! $group_query->count()) {
                 continue;
             }
 
@@ -38,6 +40,6 @@ class AddGroupsEndpoint extends EndpointBase {
             Discord::addDiscordRole($user, $group, $api->getLanguage(), false);
         }
 
-        $api->returnArray(array('message' => $api->getLanguage()->get('api', 'group_updated')));
+        $api->returnArray(['message' => $api->getLanguage()->get('api', 'group_updated')]);
     }
 }
diff --git a/modules/Core/includes/endpoints/CreateReportEndpoint.php b/modules/Core/includes/endpoints/CreateReportEndpoint.php
index 63f62057fcae91baa097abd0afbe84eddf6822a7..fe141c4179931ebe67d5947484a42bec3902efe6 100644
--- a/modules/Core/includes/endpoints/CreateReportEndpoint.php
+++ b/modules/Core/includes/endpoints/CreateReportEndpoint.php
@@ -3,12 +3,12 @@
 /**
  * @param string $reporter The NamelessMC username of the user who is creating the report
  * @param string $reported The NamelessMC username of the user who is getting reported
- * @param string $content The content of the report
+ * @param string $content  The content of the report
  *
  * @return string JSON Array
  */
-class CreateReportEndpoint extends EndpointBase {
-
+class CreateReportEndpoint extends EndpointBase
+{
     public function __construct() {
         $this->_route = 'createReport';
         $this->_module = 'Core';
@@ -25,19 +25,22 @@ class CreateReportEndpoint extends EndpointBase {
         }
 
         // Ensure user reporting has website account, and has not been banned
-        $user_reporting = $api->getDb()->get('users', array('id', '=', Output::getClean($_POST['reporter'])));
-        if (!$user_reporting->count()) {
+        $user_reporting = $api->getDb()->get('users', ['id', '=', Output::getClean($_POST['reporter'])]);
+
+        if (! $user_reporting->count()) {
             $api->throwError(16, $api->getLanguage()->get('api', 'unable_to_find_user'));
         }
 
         $user_reporting = $user_reporting->first();
+
         if ($user_reporting->isbanned) {
             $api->throwError(21, $api->getLanguage()->get('api', 'you_have_been_banned_from_website'));
         }
 
         // See if reported user exists
-        $user_reported_id = $api->getDb()->get('users', array('id', '=', Output::getClean($_POST['reported'])));
-        if (!$user_reported_id->count()) {
+        $user_reported_id = $api->getDb()->get('users', ['id', '=', Output::getClean($_POST['reported'])]);
+
+        if (! $user_reported_id->count()) {
             $user_reported_id = 0;
         } else {
             $user_reported_id = $user_reported_id->first()->id;
@@ -48,7 +51,8 @@ class CreateReportEndpoint extends EndpointBase {
         }
 
         // Ensure user has not already reported the same player, and the report is open
-        $user_reports = $api->getDb()->get('reports', array('reporter_id', '=', $user_reporting->id))->results();
+        $user_reports = $api->getDb()->get('reports', ['reporter_id', '=', $user_reporting->id])->results();
+
         if (count($user_reports)) {
             foreach ($user_reports as $report) {
                 if ($report->reported_id == $user_reported_id && $report->status == 0) {
@@ -61,7 +65,7 @@ class CreateReportEndpoint extends EndpointBase {
         try {
             $report = new Report();
             $report->create(
-                array(
+                [
                     'type' => 0,
                     'reporter_id' => $user_reporting->id,
                     'reported_id' => $user_reported_id,
@@ -71,10 +75,10 @@ class CreateReportEndpoint extends EndpointBase {
                     'updated_by' => $user_reporting->id,
                     'reported' => date('U'),
                     'updated' => date('U')
-                )
+                ]
             );
 
-            $api->returnArray(array('message' => $api->getLanguage()->get('api', 'report_created')));
+            $api->returnArray(['message' => $api->getLanguage()->get('api', 'report_created')]);
         } catch (Exception $e) {
             $api->throwError(23, $api->getLanguage()->get('api', 'unable_to_create_report'), $e->getMessage());
         }
diff --git a/modules/Core/includes/endpoints/GetAnnouncementsEndpoint.php b/modules/Core/includes/endpoints/GetAnnouncementsEndpoint.php
index 8ddb259c3487396b37525ef00a1a3026ae14b40b..e4ac5e56337a91cbe40577333ee82e0c888c2649 100644
--- a/modules/Core/includes/endpoints/GetAnnouncementsEndpoint.php
+++ b/modules/Core/includes/endpoints/GetAnnouncementsEndpoint.php
@@ -1,13 +1,13 @@
 <?php
 
 /**
- * @param int $id NamelessMC ID of the user whose announcements to view
+ * @param int    $id       NamelessMC ID of the user whose announcements to view
  * @param string $username NamelessMC sername of the user whose announcements to view
  *
  * @return string JSON Array of latest announcements
  */
-class GetAnnouncementsEndpoint extends EndpointBase {
-
+class GetAnnouncementsEndpoint extends EndpointBase
+{
     public function __construct() {
         $this->_route = 'getAnnouncements';
         $this->_module = 'Core';
@@ -24,7 +24,7 @@ class GetAnnouncementsEndpoint extends EndpointBase {
             $tempUser = null;
         }
 
-        $announcements = array();
+        $announcements = [];
 
         foreach (Announcements::getAvailable('api', null, $tempUser != null ? $tempUser->data()->group_id : 0, $tempUser != null ? $tempUser->data()->secondary_groups : null) as $announcement) {
             $announcements[$announcement->id]['pages'] = json_decode($announcement->pages);
@@ -33,6 +33,6 @@ class GetAnnouncementsEndpoint extends EndpointBase {
             $announcements[$announcement->id]['message'] = Output::getPurified($announcement->message);
         }
 
-        $api->returnArray(array('announcements' => $announcements));
+        $api->returnArray(['announcements' => $announcements]);
     }
 }
diff --git a/modules/Core/includes/endpoints/GetNotificationsEndpoint.php b/modules/Core/includes/endpoints/GetNotificationsEndpoint.php
index 044befd726080ff2844073aa9490edd12f01c008..aff41be97e5b9523632d6cde8f86dcea4ae6dbd0 100644
--- a/modules/Core/includes/endpoints/GetNotificationsEndpoint.php
+++ b/modules/Core/includes/endpoints/GetNotificationsEndpoint.php
@@ -3,13 +3,13 @@
 /**
  * @see Alert
  *
- * @param int $id The NamelessMC ID of the user to get notifications for
+ * @param int    $id       The NamelessMC ID of the user to get notifications for
  * @param string $username NamelessMC sername of the user to get notifications for
  *
  * @return string JSON Array
  */
-class GetNotificationsEndpoint extends EndpointBase {
-
+class GetNotificationsEndpoint extends EndpointBase
+{
     public function __construct() {
         $this->_route = 'getNotifications';
         $this->_module = 'Core';
@@ -25,31 +25,33 @@ class GetNotificationsEndpoint extends EndpointBase {
             $api->throwError(6, $api->getLanguage()->get('api', 'invalid_get_contents'));
         }
 
-        $return = array('notifications' => array());
+        $return = ['notifications' => []];
 
         // Get unread alerts
-        $alerts = $api->getDb()->query('SELECT id, type, url, content_short FROM nl2_alerts WHERE user_id = ? AND `read` = 0', array($user));
+        $alerts = $api->getDb()->query('SELECT id, type, url, content_short FROM nl2_alerts WHERE user_id = ? AND `read` = 0', [$user]);
+
         if ($alerts->count()) {
             foreach ($alerts->results() as $result) {
-                $return['notifications'][] = array(
+                $return['notifications'][] = [
                     'type' => $result->type,
                     'message_short' => $result->content_short,
                     'message' => ($result->content) ? strip_tags($result->content) : $result->content_short,
                     'url' => rtrim(Util::getSelfURL(), '/') . URL::build('/user/alerts/', 'view=' . $result->id)
-                );
+                ];
             }
         }
 
         // Get unread messages
-        $messages = $api->getDb()->query('SELECT nl2_private_messages.id, nl2_private_messages.title FROM nl2_private_messages WHERE nl2_private_messages.id IN (SELECT nl2_private_messages_users.pm_id as id FROM nl2_private_messages_users WHERE user_id = ? AND `read` = 0)', array($user));
+        $messages = $api->getDb()->query('SELECT nl2_private_messages.id, nl2_private_messages.title FROM nl2_private_messages WHERE nl2_private_messages.id IN (SELECT nl2_private_messages_users.pm_id as id FROM nl2_private_messages_users WHERE user_id = ? AND `read` = 0)', [$user]);
+
         if ($messages->count()) {
             foreach ($messages->results() as $result) {
-                $return['notifications'][] = array(
+                $return['notifications'][] = [
                     'type' => 'message',
                     'url' => Util::getSelfURL() . ltrim(URL::build('/user/messaging/', 'action=view&message=' . $result->id), '/'),
                     'message_short' => $result->title,
                     'message' => $result->title
-                );
+                ];
             }
         }
 
diff --git a/modules/Core/includes/endpoints/GroupInfoEndpoint.php b/modules/Core/includes/endpoints/GroupInfoEndpoint.php
index 01d47f98ead92cc5695f4452437e965899d23cac..5f2a11acef65f5afdb981843f23e66250106bc65 100644
--- a/modules/Core/includes/endpoints/GroupInfoEndpoint.php
+++ b/modules/Core/includes/endpoints/GroupInfoEndpoint.php
@@ -1,13 +1,13 @@
 <?php
 
 /**
- * @param int $id NamelessMC ID of group to view
+ * @param int    $id   NamelessMC ID of group to view
  * @param string $name The NamelessMC NAME of the group to view
  *
  * @return string JSON Array
  */
-class GroupInfoEndpoint extends EndpointBase {
-
+class GroupInfoEndpoint extends EndpointBase
+{
     public function __construct() {
         $this->_route = 'groupInfo';
         $this->_module = 'Core';
@@ -19,10 +19,11 @@ class GroupInfoEndpoint extends EndpointBase {
         $query = 'SELECT id, name, staff, `order` FROM nl2_groups';
         $where = '';
         $order = ' ORDER BY `order`';
-        $params = array();
+        $params = [];
 
         if (isset($_GET['id'])) {
             $where .= ' WHERE id = 0 ';
+
             if (is_array($_GET['id'])) {
                 foreach ($_GET['id'] as $value) {
                     $where .= 'OR id = ? ';
@@ -30,10 +31,11 @@ class GroupInfoEndpoint extends EndpointBase {
                 }
             } else {
                 $where .= 'OR id = ?';
-                $params = array($_GET['id']);
+                $params = [$_GET['id']];
             }
         } else if (isset($_GET['name'])) {
             $where .= ' WHERE name = null ';
+
             if (is_array($_GET['name'])) {
                 foreach ($_GET['name'] as $value) {
                     $where .= 'OR name = ? ';
@@ -41,24 +43,25 @@ class GroupInfoEndpoint extends EndpointBase {
                 }
             } else {
                 $where .= 'OR name = ?';
-                $params = array($_GET['name']);
+                $params = [$_GET['name']];
             }
         }
 
         $groups = $api->getDb()->query($query . $where . $order, $params)->results();
 
-        $groups_array = array();
+        $groups_array = [];
+
         foreach ($groups as $group) {
-            $groups_array[] = array(
+            $groups_array[] = [
                 'id' => intval($group->id),
                 'name' => $group->name,
                 'staff' => (bool) $group->staff,
                 'order' => intval($group->order),
                 'ingame_rank_name' => Util::getIngameRankName($group->id),
                 'discord_role_id' => intval(Discord::getDiscordRoleId($api->getDb(), $group->id))
-            );
+            ];
         }
 
-        $api->returnArray(array('groups' => $groups_array));
+        $api->returnArray(['groups' => $groups_array]);
     }
 }
diff --git a/modules/Core/includes/endpoints/InfoEndpoint.php b/modules/Core/includes/endpoints/InfoEndpoint.php
index 56924d83e823e6856e9807b647afe23fb51a9909..6825ffd7335a3a8bda25267b5964b2f6eb4b6e2b 100644
--- a/modules/Core/includes/endpoints/InfoEndpoint.php
+++ b/modules/Core/includes/endpoints/InfoEndpoint.php
@@ -5,8 +5,8 @@
  *
  * @return string JSON Array of NamelessMC information
  */
-class InfoEndpoint extends EndpointBase {
-
+class InfoEndpoint extends EndpointBase
+{
     public function __construct() {
         $this->_route = 'info';
         $this->_module = 'Core';
@@ -16,17 +16,20 @@ class InfoEndpoint extends EndpointBase {
 
     public function execute(Nameless2API $api) {
         // Get version, update info and modules from database
-        $version_query = $api->getDb()->query('SELECT `name`, `value` FROM nl2_settings WHERE `name` = ? OR `name` = ? OR `name` = ? OR `name` = ?', array('nameless_version', 'version_checked', 'version_update', 'new_version'));
+        $version_query = $api->getDb()->query('SELECT `name`, `value` FROM nl2_settings WHERE `name` = ? OR `name` = ? OR `name` = ? OR `name` = ?', ['nameless_version', 'version_checked', 'version_update', 'new_version']);
+
         if ($version_query->count()) {
             $version_query = $version_query->results();
         }
 
         $site_id = Util::getSetting($api->getDb(), 'unique_id');
+
         if ($site_id == null) {
             $api->throwError(4, $api->getLanguage()->get('api', 'no_unique_site_id'));
         }
 
-        $ret = array();
+        $ret = [];
+
         foreach ($version_query as $item) {
             if ($item->name == 'nameless_version') {
                 $ret[$item->name] = $item->value;
@@ -43,7 +46,7 @@ class InfoEndpoint extends EndpointBase {
         // Return default language
         $ret['language'] = LANGUAGE;
 
-        if (isset($version_checked) && isset($version_update) && isset($current_version)) {
+        if (isset($version_checked, $version_update, $current_version)) {
             if ($version_update == 'false') {
                 if ($version_checked < strtotime('-1 hour')) {
                     // Check for update now
@@ -65,7 +68,7 @@ class InfoEndpoint extends EndpointBase {
                     curl_close($ch);
 
                     if ($update_check == 'None') {
-                        $ret['version_update'] = array('update' => false);
+                        $ret['version_update'] = ['update' => false];
                     } else {
                         $update_check = json_decode($update_check);
 
@@ -76,21 +79,23 @@ class InfoEndpoint extends EndpointBase {
                         }
 
                         // Update database values to say we need a version update
-                        $api->getDb()->createQuery('UPDATE nl2_settings SET `value`=\'' . $update_needed . '\' WHERE `name` = \'version_update\'', array());
-                        $api->getDb()->createQuery('UPDATE nl2_settings SET `value`= ' . date('U') . ' WHERE `name` = \'version_checked\'', array());
-                        $api->getDb()->createQuery('UPDATE nl2_settings SET `value`= ? WHERE `name` = \'new_version\'', array($update_check->new_version));
+                        $api->getDb()->createQuery('UPDATE nl2_settings SET `value`=\'' . $update_needed . '\' WHERE `name` = \'version_update\'', []);
+                        $api->getDb()->createQuery('UPDATE nl2_settings SET `value`= ' . date('U') . ' WHERE `name` = \'version_checked\'', []);
+                        $api->getDb()->createQuery('UPDATE nl2_settings SET `value`= ? WHERE `name` = \'new_version\'', [$update_check->new_version]);
 
-                        $ret['version_update'] = array('update' => true, 'version' => $update_check->new_version, 'urgent' => ($update_needed == 'urgent'));
+                        $ret['version_update'] = ['update' => true, 'version' => $update_check->new_version, 'urgent' => ($update_needed == 'urgent')];
                     }
                 }
             } else {
-                $ret['version_update'] = array('update' => true, 'version' => (isset($new_version) ? Output::getClean($new_version) : 'unknown'), 'urgent' => ($version_update == 'urgent'));
+                $ret['version_update'] = ['update' => true, 'version' => (isset($new_version) ? Output::getClean($new_version) : 'unknown'), 'urgent' => ($version_update == 'urgent')];
             }
         }
-        $modules_query = $api->getDb()->get('modules', array('enabled', '=', 1));
-        $ret_modules = array();
+        $modules_query = $api->getDb()->get('modules', ['enabled', '=', 1]);
+        $ret_modules = [];
+
         if ($modules_query->count()) {
             $modules_query = $modules_query->results();
+
             foreach ($modules_query as $module) {
                 $ret_modules[] = $module->name;
             }
diff --git a/modules/Core/includes/endpoints/ListUsersEndpoint.php b/modules/Core/includes/endpoints/ListUsersEndpoint.php
index 40bcdfc0fbca14e590464a78b208f7578f4307a3..54bd371a3408f0deeb1bb69687e44c1866aa1960 100644
--- a/modules/Core/includes/endpoints/ListUsersEndpoint.php
+++ b/modules/Core/includes/endpoints/ListUsersEndpoint.php
@@ -4,7 +4,8 @@
  *
  * @return string JSON Array
  */
-class ListUsersEndpoint extends EndpointBase {
+class ListUsersEndpoint extends EndpointBase
+{
     public function __construct() {
         $this->_route = 'listUsers';
         $this->_module = 'Core';
@@ -41,9 +42,10 @@ class ListUsersEndpoint extends EndpointBase {
 
         $users = $api->getDb()->query($query)->results();
 
-        $users_json = array();
+        $users_json = [];
+
         foreach ($users as $user) {
-            $user_json = array();
+            $user_json = [];
             $user_json['id'] = intval($user->id);
             $user_json['username'] = $user->username;
             $user_json['uuid'] = $user->uuid;
@@ -53,6 +55,6 @@ class ListUsersEndpoint extends EndpointBase {
             $users_json[] = $user_json;
         }
 
-        $api->returnArray(array('users' => $users_json));
+        $api->returnArray(['users' => $users_json]);
     }
 }
diff --git a/modules/Core/includes/endpoints/RegisterEndpoint.php b/modules/Core/includes/endpoints/RegisterEndpoint.php
index f7d9ad30e674e1ef48112e1decc33342e64ce9bf..da1ae9e0505848cd2c12170d93c595ac764fd787 100644
--- a/modules/Core/includes/endpoints/RegisterEndpoint.php
+++ b/modules/Core/includes/endpoints/RegisterEndpoint.php
@@ -2,13 +2,13 @@
 
 /**
  * @param string $username The username of the new user to create
- * @param string $uuid (optional) The Minecraft UUID of the new user
- * @param string $email The email of the new user
+ * @param string $uuid     (optional) The Minecraft UUID of the new user
+ * @param string $email    The email of the new user
  *
  * @return string JSON Array
  */
-class RegisterEndpoint extends EndpointBase {
-
+class RegisterEndpoint extends EndpointBase
+{
     public function __construct() {
         $this->_route = 'register';
         $this->_module = 'Core';
@@ -20,6 +20,7 @@ class RegisterEndpoint extends EndpointBase {
         $params = ['username', 'email'];
 
         $minecraft_integration = Util::getSetting($api->getDb(), 'mc_integration');
+
         if ($minecraft_integration) {
             $params[] = 'uuid';
         }
@@ -28,6 +29,7 @@ class RegisterEndpoint extends EndpointBase {
 
         if ($minecraft_integration) {
             $_POST['uuid'] = str_replace('-', '', $_POST['uuid']);
+
             if (strlen($_POST['uuid']) > 32) {
                 $api->throwError(9, $api->getLanguage()->get('api', 'invalid_uuid'));
             }
@@ -42,22 +44,25 @@ class RegisterEndpoint extends EndpointBase {
         }
 
         // Validate email
-        if (!filter_var($_POST['email'], FILTER_VALIDATE_EMAIL)) {
+        if (! filter_var($_POST['email'], FILTER_VALIDATE_EMAIL)) {
             $api->throwError(7, $api->getLanguage()->get('api', 'invalid_email_address'));
         }
 
         // Ensure user doesn't already exist
-        $username = $api->getDb()->get('users', array('username', '=', Output::getClean($_POST['username'])));
+        $username = $api->getDb()->get('users', ['username', '=', Output::getClean($_POST['username'])]);
+
         if (count($username->results())) {
             $api->throwError(11, $api->getLanguage()->get('api', 'username_already_exists'));
         }
 
         if ($minecraft_integration) {
-            $uuid = $api->getDb()->get('users', array('uuid', '=', Output::getClean($_POST['uuid'])));
+            $uuid = $api->getDb()->get('users', ['uuid', '=', Output::getClean($_POST['uuid'])]);
+
             if (count($uuid->results())) $api->throwError(12, $api->getLanguage()->get('api', 'uuid_already_exists'));
         }
 
-        $email = $api->getDb()->get('users', array('email', '=', Output::getClean($_POST['email'])));
+        $email = $api->getDb()->get('users', ['email', '=', Output::getClean($_POST['email'])]);
+
         if (count($email->results())) {
             $api->throwError(10, $api->getLanguage()->get('api', 'email_already_exists'));
         }
@@ -82,31 +87,31 @@ class RegisterEndpoint extends EndpointBase {
      * @see Nameless2API::register()
      *
      * @param string $username The username of the new user to create
-     * @param string $uuid (optional) The Minecraft UUID of the new user
-     * @param string $email The email of the new user
+     * @param string $uuid     (optional) The Minecraft UUID of the new user
+     * @param string $email    The email of the new user
      *
      * @return string JSON Array
      */
     private function sendRegistrationEmail(Nameless2API $api, $username, $uuid, $email) {
         // Generate random code
-        $code = substr(str_shuffle("0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"), 0, 60);
+        $code = substr(str_shuffle('0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'), 0, 60);
 
         // Create user
         $user_id = $this->createUser($api, $username, $uuid, $email, false, $code);
         $user_id = $user_id['user_id'];
 
         // Get link + template
-        $link =  Util::getSelfURL() . ltrim(URL::build('/complete_signup/', 'c=' . $code), '/');
+        $link = Util::getSelfURL() . ltrim(URL::build('/complete_signup/', 'c=' . $code), '/');
 
         $html = Email::formatEmail('register', $api->getLanguage());
 
         if (Util::getSetting($api->getDb(), 'phpmailer')) {
             // PHP Mailer
-            $email = array(
-                'to' => array('email' => Output::getClean($email), 'name' => Output::getClean($username)),
+            $email = [
+                'to' => ['email' => Output::getClean($email), 'name' => Output::getClean($username)],
                 'subject' => SITE_NAME . ' - ' . $api->getLanguage()->get('emails', 'register_subject'),
                 'message' => str_replace('[Link]', $link, $html)
-            );
+            ];
 
             $sent = Email::send($email, 'mailer');
 
@@ -114,12 +119,12 @@ class RegisterEndpoint extends EndpointBase {
                 // Error, log it
                 $api->getDb()->insert(
                     'email_errors',
-                    array(
+                    [
                         'type' => 4, // 4 = API registration email
                         'content' => $sent['error'],
                         'at' => date('U'),
                         'user_id' => $user_id
-                    )
+                    ]
                 );
 
                 $api->throwError(14, $api->getLanguage()->get('api', 'unable_to_send_registration_email'));
@@ -128,7 +133,7 @@ class RegisterEndpoint extends EndpointBase {
             // PHP mail function
             $siteemail = Util::getSetting($api->getDb(), 'site_email');
 
-            $to      = $email;
+            $to = $email;
             $subject = SITE_NAME . ' - ' . $api->getLanguage()->get('emails', 'register_subject');
 
             $headers = 'From: ' . $siteemail . "\r\n" .
@@ -137,12 +142,12 @@ class RegisterEndpoint extends EndpointBase {
             'MIME-Version: 1.0' . "\r\n" .
             'Content-type: text/html; charset=UTF-8' . "\r\n";
 
-            $email = array(
+            $email = [
                 'to' => $to,
                 'subject' => $subject,
                 'message' => str_replace('[Link]', $link, $html),
                 'headers' => $headers
-            );
+            ];
 
             $sent = Email::send($email, 'php');
 
@@ -150,12 +155,12 @@ class RegisterEndpoint extends EndpointBase {
                 // Error, log it
                 $api->getDb()->insert(
                     'email_errors',
-                    array(
+                    [
                         'type' => 4,
                         'content' => $sent['error'],
                         'at' => date('U'),
                         'user_id' => $user_id
-                    )
+                    ]
                 );
 
                 $api->throwError(14, $api->getLanguage()->get('api', 'unable_to_send_registration_email'));
@@ -165,7 +170,7 @@ class RegisterEndpoint extends EndpointBase {
         $user = new User();
         HookHandler::executeEvent(
             'registerUser',
-            array(
+            [
                 'event' => 'registerUser',
                 'user_id' => $user_id,
                 'username' => Output::getClean($username),
@@ -173,10 +178,10 @@ class RegisterEndpoint extends EndpointBase {
                 'avatar_url' => $user->getAvatar($user_id, null, 128, true),
                 'url' => Util::getSelfURL() . ltrim(URL::build('/profile/' . Output::getClean($username)), '/'),
                 'language' => $api->getLanguage()
-            )
+            ]
         );
 
-        $api->returnArray(array('message' => $api->getLanguage()->get('api', 'finish_registration_email')));
+        $api->returnArray(['message' => $api->getLanguage()->get('api', 'finish_registration_email')]);
     }
 
     /**
@@ -187,33 +192,34 @@ class RegisterEndpoint extends EndpointBase {
      * @see Nameless2API::register()
      *
      * @param string $username The username of the new user to create
-     * @param string $uuid (optional) The Minecraft UUID of the new user
-     * @param string $email The email of the new user
-     * @param string $code The reset token/temp password of the new user
+     * @param string $uuid     (optional) The Minecraft UUID of the new user
+     * @param string $email    The email of the new user
+     * @param string $code     The reset token/temp password of the new user
      *
      * @return string JSON Array
      */
     private function createUser(Nameless2API $api, $username, $uuid, $email, $return, $code = null) {
         try {
             // Get default group ID
-            if (!is_file(ROOT_PATH . DIRECTORY_SEPARATOR . 'cache' . DIRECTORY_SEPARATOR . sha1('default_group') . '.cache')) {
+            if (! is_file(ROOT_PATH . DIRECTORY_SEPARATOR . 'cache' . DIRECTORY_SEPARATOR . sha1('default_group') . '.cache')) {
                 // Not cached, cache now
                 // Retrieve from database
-                $default_group = $api->getDb()->get('groups', array('default_group', '=', 1));
-                if (!$default_group->count()) {
+                $default_group = $api->getDb()->get('groups', ['default_group', '=', 1]);
+
+                if (! $default_group->count()) {
                     $default_group = 1;
                 } else {
                     $default_group = $default_group->results();
                     $default_group = $default_group[0]->id;
                 }
 
-                $to_cache = array(
-                    'default_group' => array(
+                $to_cache = [
+                    'default_group' => [
                         'time' => date('U'),
                         'expire' => 0,
                         'data' => serialize($default_group)
-                    )
-                );
+                    ]
+                ];
 
                 // Store in cache file
                 file_put_contents(ROOT_PATH . DIRECTORY_SEPARATOR . 'cache' . DIRECTORY_SEPARATOR . sha1('default_group') . '.cache', json_encode($to_cache));
@@ -223,13 +229,13 @@ class RegisterEndpoint extends EndpointBase {
                 $default_group = unserialize($default_group->default_group->data);
             }
 
-            if (!$code) {
-                $code = substr(str_shuffle("0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"), 0, 60);
+            if (! $code) {
+                $code = substr(str_shuffle('0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'), 0, 60);
             }
 
             $api->getDb()->insert(
                 'users',
-                array(
+                [
                     'username' => Output::getClean($username),
                     'nickname' => Output::getClean($username),
                     'uuid' => $uuid,
@@ -239,7 +245,7 @@ class RegisterEndpoint extends EndpointBase {
                     'lastip' => 'Unknown',
                     'reset_code' => $code,
                     'last_online' => date('U')
-                )
+                ]
             );
 
             $user_id = $api->getDb()->lastId();
@@ -249,7 +255,7 @@ class RegisterEndpoint extends EndpointBase {
 
             HookHandler::executeEvent(
                 'registerUser',
-                array(
+                [
                     'event' => 'registerUser',
                     'user_id' => $user_id,
                     'username' => $user->getDisplayname(),
@@ -257,13 +263,13 @@ class RegisterEndpoint extends EndpointBase {
                     'avatar_url' => $user->getAvatar(null, 128, true),
                     'url' => Util::getSelfURL() . ltrim($user->getProfileURL(), '/'),
                     'language' => $api->getLanguage()
-                )
+                ]
             );
 
             if ($return) {
-                $api->returnArray(array('message' => $api->getLanguage()->get('api', 'finish_registration_link'), 'user_id' => $user_id, 'link' => rtrim(Util::getSelfURL(), '/') . URL::build('/complete_signup/', 'c=' . $code)));
+                $api->returnArray(['message' => $api->getLanguage()->get('api', 'finish_registration_link'), 'user_id' => $user_id, 'link' => rtrim(Util::getSelfURL(), '/') . URL::build('/complete_signup/', 'c=' . $code)]);
             } else {
-                return array('user_id' => $user_id);
+                return ['user_id' => $user_id];
             }
         } catch (Exception $e) {
             $api->throwError(13, $api->getLanguage()->get('api', 'unable_to_create_account'), $e->getMessage());
diff --git a/modules/Core/includes/endpoints/RemoveGroupsEndpoint.php b/modules/Core/includes/endpoints/RemoveGroupsEndpoint.php
index a4f43a8ad26fc6700e6529bc0683c3a669d7fea4..0cbb1b69c99a40d44a9954dc3abd56eabff9e5c6 100644
--- a/modules/Core/includes/endpoints/RemoveGroupsEndpoint.php
+++ b/modules/Core/includes/endpoints/RemoveGroupsEndpoint.php
@@ -1,13 +1,13 @@
 <?php
 
 /**
- * @param int $user NamelessMC ID of user to view
+ * @param int        $user   NamelessMC ID of user to view
  * @param json array $groups ID of group ids
  *
  * @return string JSON Array
  */
-class RemoveGroupsEndpoint extends EndpointBase {
-
+class RemoveGroupsEndpoint extends EndpointBase
+{
     public function __construct() {
         $this->_route = 'removeGroups';
         $this->_module = 'Core';
@@ -20,12 +20,14 @@ class RemoveGroupsEndpoint extends EndpointBase {
 
         // Ensure user exists
         $user = new User($_POST['user']);
-        if (!count($user->data())) {
+
+        if (! count($user->data())) {
             $api->throwError(16, $api->getLanguage()->get('api', 'unable_to_find_user'));
         }
 
         $groups = $_POST['groups'];
-        if (!count($groups)) {
+
+        if (! count($groups)) {
             $api->throwError(6, $api->getLanguage()->get('api', 'invalid_post_contents'));
         }
 
@@ -36,6 +38,6 @@ class RemoveGroupsEndpoint extends EndpointBase {
             Discord::removeDiscordRole($user, $group, $api->getLanguage());
         }
 
-        $api->returnArray(array('message' => $api->getLanguage()->get('api', 'group_updated')));
+        $api->returnArray(['message' => $api->getLanguage()->get('api', 'group_updated')]);
     }
 }
diff --git a/modules/Core/includes/endpoints/ServerInfoEndpoint.php b/modules/Core/includes/endpoints/ServerInfoEndpoint.php
index e2eda38ed39d3c54afa63829de1d1d66b258e731..f7b1bd5ac002ad3ba010e5ec9d870d8a0ebf168d 100644
--- a/modules/Core/includes/endpoints/ServerInfoEndpoint.php
+++ b/modules/Core/includes/endpoints/ServerInfoEndpoint.php
@@ -1,7 +1,7 @@
 <?php
 
-class ServerInfoEndpoint extends EndpointBase {
-
+class ServerInfoEndpoint extends EndpointBase
+{
     public function __construct() {
         $this->_route = 'serverInfo';
         $this->_module = 'Core';
@@ -11,50 +11,51 @@ class ServerInfoEndpoint extends EndpointBase {
 
     public function execute(Nameless2API $api) {
         $api->validateParams($_POST, ['server-id', 'max-memory', 'free-memory', 'allocated-memory', 'tps']);
-        if (!isset($_POST['players'])) {
+
+        if (! isset($_POST['players'])) {
             $api->throwError(6, $this->_language->get('api', 'invalid_post_contents'), 'players');
         }
 
         $serverId = $_POST['server-id'];
         // Ensure server exists
-        $server_query = $api->getDb()->get('mc_servers', array('id', '=', $serverId));
+        $server_query = $api->getDb()->get('mc_servers', ['id', '=', $serverId]);
 
-        if (!$server_query->count()) {
+        if (! $server_query->count()) {
             $api->throwError(27, $api->getLanguage()->get('api', 'invalid_server_id') . ' - ' . $serverId);
         }
 
         try {
             $api->getDb()->insert(
                 'query_results',
-                array(
+                [
                     'server_id' => $_POST['server-id'],
                     'queried_at' => date('U'),
                     'players_online' => count($_POST['players']),
                     'extra' => json_encode($_POST),
                     'groups' => isset($_POST['groups']) ? json_encode($_POST['groups']) : '[]'
-                )
+                ]
             );
 
             if (file_exists(ROOT_PATH . DIRECTORY_SEPARATOR . 'cache' . DIRECTORY_SEPARATOR . sha1('server_query_cache') . '.cache')) {
                 $query_cache = file_get_contents(ROOT_PATH . DIRECTORY_SEPARATOR . 'cache' . DIRECTORY_SEPARATOR . sha1('server_query_cache') . '.cache');
                 $query_cache = json_decode($query_cache);
+
                 if (isset($query_cache->query_interval))
                     $query_interval = unserialize($query_cache->query_interval->data);
-                else
-                    $query_interval = 10;
+                else $query_interval = 10;
 
-                $to_cache = array(
-                    'query_interval' => array(
+                $to_cache = [
+                    'query_interval' => [
                         'time' => date('U'),
                         'expire' => 0,
                         'data' => serialize($query_interval)
-                    ),
-                    'last_query' => array(
+                    ],
+                    'last_query' => [
                         'time' => date('U'),
                         'expire' => 0,
                         'data' => serialize(date('U'))
-                    )
-                );
+                    ]
+                ];
 
                 // Store in cache file
                 file_put_contents(ROOT_PATH . DIRECTORY_SEPARATOR . 'cache' . DIRECTORY_SEPARATOR . sha1('server_query_cache') . '.cache', json_encode($to_cache));
@@ -69,22 +70,23 @@ class ServerInfoEndpoint extends EndpointBase {
                 if (count($_POST['players'])) {
                     foreach ($_POST['players'] as $uuid => $player) {
                         $user = new User($uuid, 'uuid');
+
                         if ($user->data()) {
                             if ($player['name'] != $user->data()->username) {
                                 // Update username
-                                if (!Util::getSetting($api->getDb(), 'displaynames', false)) {
+                                if (! Util::getSetting($api->getDb(), 'displaynames', false)) {
                                     $user->update(
-                                        array(
+                                        [
                                             'username' => Output::getClean($player['name']),
                                             'nickname' => Output::getClean($player['name'])
-                                        ),
+                                        ],
                                         $user->data()->id
                                     );
                                 } else {
                                     $user->update(
-                                        array(
+                                        [
                                             'username' => Output::getClean($player['name'])
-                                        ),
+                                        ],
                                         $user->data()->id
                                     );
                                 }
@@ -98,27 +100,29 @@ class ServerInfoEndpoint extends EndpointBase {
         }
 
         // Group sync
-        $log_array = array();
+        $log_array = [];
+
         try {
-            $group_sync = $api->getDb()->get('group_sync', array('id', '<>', 0));
+            $group_sync = $api->getDb()->get('group_sync', ['id', '<>', 0]);
 
             if ($group_sync->count()) {
                 $group_sync = $group_sync->results();
-                $group_sync_updates = array();
+                $group_sync_updates = [];
+
                 foreach ($group_sync as $item) {
                     if ($item->ingame_rank_name == '') {
                         continue;
                     }
 
-                    $group_sync_updates[strtolower($item->ingame_rank_name)] = array(
+                    $group_sync_updates[strtolower($item->ingame_rank_name)] = [
                         'website' => $item->website_group_id
-                    );
+                    ];
                 }
 
                 foreach ($_POST['players'] as $uuid => $player) {
                     $user = new User($uuid, 'uuid');
-                    if ($user->data()) {
 
+                    if ($user->data()) {
                         $should_log = false;
 
                         // Never edit root user
@@ -130,12 +134,13 @@ class ServerInfoEndpoint extends EndpointBase {
                         foreach ($user->getGroups() as $group) {
                             // Convert user group ID to minecraft group name. exit if this isnt set
                             $ingame_rank_name = Util::getIngameRankName($group->id);
+
                             if ($ingame_rank_name == null) {
                                 continue;
                             }
 
                             // Check that this website group is setup to sync
-                            if (!array_key_exists($ingame_rank_name, $group_sync_updates)) {
+                            if (! array_key_exists($ingame_rank_name, $group_sync_updates)) {
                                 continue;
                             }
 
@@ -157,7 +162,7 @@ class ServerInfoEndpoint extends EndpointBase {
                         foreach ($player['groups'] as $group) {
                             $ingame_rank_name = strtolower($group);
                             // Check that this ingame group is setup to sync
-                            if (!array_key_exists($ingame_rank_name, $group_sync_updates)) {
+                            if (! array_key_exists($ingame_rank_name, $group_sync_updates)) {
                                 continue;
                             }
                             
@@ -183,6 +188,6 @@ class ServerInfoEndpoint extends EndpointBase {
             $api->throwError(25, $api->getLanguage()->get('api', 'unable_to_update_server_info'), $e->getMessage());
         }
 
-        $api->returnArray(array('message' => $api->getLanguage()->get('api', 'server_info_updated'), 'meta' => json_encode($log_array)));
+        $api->returnArray(['message' => $api->getLanguage()->get('api', 'server_info_updated'), 'meta' => json_encode($log_array)]);
     }
 }
diff --git a/modules/Core/includes/endpoints/UpdateUsernameEndpoint.php b/modules/Core/includes/endpoints/UpdateUsernameEndpoint.php
index d3f7893f4368e7d2e9c933775d3fe7886ccb077a..91e6b57b78a97fc95067c5e1802593fc73a58b13 100644
--- a/modules/Core/includes/endpoints/UpdateUsernameEndpoint.php
+++ b/modules/Core/includes/endpoints/UpdateUsernameEndpoint.php
@@ -1,13 +1,13 @@
 <?php
 
 /**
- * @param int $id The NamelessMC user to update
+ * @param int    $id       The NamelessMC user to update
  * @param string $username The new username of the user
  *
  * @return string JSON Array
  */
-class UpdateUsernameEndpoint extends EndpointBase {
-
+class UpdateUsernameEndpoint extends EndpointBase
+{
     public function __construct() {
         $this->_route = 'updateUsername';
         $this->_module = 'Core';
@@ -21,9 +21,9 @@ class UpdateUsernameEndpoint extends EndpointBase {
         // Ensure user exists
         $user = $api->getUser('id', $_POST['id']);
 
-        $fields = array('username' => Output::getClean($_POST['username']));
+        $fields = ['username' => Output::getClean($_POST['username'])];
 
-        if (!Util::getSetting($api->getDb(), 'displaynames')) {
+        if (! Util::getSetting($api->getDb(), 'displaynames')) {
             $fields['nickname'] = Output::getClean($_POST['username']);
         }
 
@@ -33,6 +33,6 @@ class UpdateUsernameEndpoint extends EndpointBase {
             $api->throwError(24, $api->getLanguage()->get('api', 'unable_to_update_username'));
         }
 
-        $api->returnArray(array('message' => $api->getLanguage()->get('api', 'username_updated')));
+        $api->returnArray(['message' => $api->getLanguage()->get('api', 'username_updated')]);
     }
 }
diff --git a/modules/Core/includes/endpoints/UserInfoEndpoint.php b/modules/Core/includes/endpoints/UserInfoEndpoint.php
index 059df1014ecc76570b8ee7bb4f459c28bab5652d..215e6ab879f672e5a15c966cf48dd93eef4ce068 100644
--- a/modules/Core/includes/endpoints/UserInfoEndpoint.php
+++ b/modules/Core/includes/endpoints/UserInfoEndpoint.php
@@ -1,13 +1,13 @@
 <?php
 /**
- * @param int $id NamelessMC ID of user to view
+ * @param int    $id       NamelessMC ID of user to view
  * @param string $username The NamelessMC username of the user to view
- * @param string $uuid The Minecraft UUID of the user
+ * @param string $uuid     The Minecraft UUID of the user
  *
  * @return string JSON Array
  */
-class UserInfoEndpoint extends EndpointBase {
-
+class UserInfoEndpoint extends EndpointBase
+{
     public function __construct() {
         $this->_route = 'userInfo';
         $this->_module = 'Core';
@@ -18,7 +18,7 @@ class UserInfoEndpoint extends EndpointBase {
     public function execute(Nameless2API $api) {
         $query = 'SELECT nl2_users.id, nl2_users.username, nl2_users.language_id, nl2_languages.name as `language`, nl2_users.nickname as displayname, nl2_users.uuid, nl2_users.joined as registered_timestamp, nl2_users.last_online as last_online_timestamp, nl2_users.isbanned as banned, nl2_users.active as validated, nl2_users.user_title as user_title, nl2_users.discord_id as discord_id FROM nl2_users LEFT JOIN nl2_languages ON nl2_users.language_id = nl2_languages.id';
         $where = '';
-        $params = array();
+        $params = [];
 
         if (isset($_GET['id'])) {
             $where .= ' WHERE nl2_users.id = ?';
@@ -39,8 +39,8 @@ class UserInfoEndpoint extends EndpointBase {
         // Ensure the user exists
         $user = $api->getDb()->query($query . $where, $params);
 
-        if (!$user->count()) {
-            $api->returnArray(array('exists' => false));
+        if (! $user->count()) {
+            $api->returnArray(['exists' => false]);
         }
 
         $user = $user->first();
@@ -50,12 +50,13 @@ class UserInfoEndpoint extends EndpointBase {
         $user->last_online_timestamp = intval($user->last_online_timestamp);
         $user->banned = (bool) $user->banned;
         $user->validated = (bool) $user->validated;
+
         if ($user->discord_id != null) {
             $user->discord_id = intval($user->discord_id);
         }
 
         // Get custom profile fields
-        $custom_profile_fields = $api->getDb()->query('SELECT fields.id, fields.name, fields.type, fields.public, fields.required, fields.description, pf_values.value FROM nl2_users_profile_fields pf_values LEFT JOIN nl2_profile_fields fields ON pf_values.field_id = fields.id WHERE pf_values.user_id = ?', array($user->id));
+        $custom_profile_fields = $api->getDb()->query('SELECT fields.id, fields.name, fields.type, fields.public, fields.required, fields.description, pf_values.value FROM nl2_users_profile_fields pf_values LEFT JOIN nl2_profile_fields fields ON pf_values.field_id = fields.id WHERE pf_values.user_id = ?', [$user->id]);
 
         foreach ($custom_profile_fields->results() as $profile_field) {
             $user->profile_fields[$profile_field->id]['name'] = $profile_field->name;
@@ -67,21 +68,22 @@ class UserInfoEndpoint extends EndpointBase {
         }
 
         // Get the groups the user has
-        $groups = $api->getDb()->query('SELECT nl2_groups.* FROM nl2_users_groups INNER JOIN nl2_groups ON group_id = nl2_groups.id WHERE user_id = ? AND deleted = 0 ORDER BY `order`;', array($user->id))->results();
+        $groups = $api->getDb()->query('SELECT nl2_groups.* FROM nl2_users_groups INNER JOIN nl2_groups ON group_id = nl2_groups.id WHERE user_id = ? AND deleted = 0 ORDER BY `order`;', [$user->id])->results();
+
+        $groups_array = [];
 
-        $groups_array = array();
         foreach ($groups as $group) {
-            $groups_array[] = array(
+            $groups_array[] = [
                 'id' => intval($group->id),
                 'name' => $group->name,
                 'staff' => (bool) $group->staff,
                 'order' => intval($group->order),
                 'ingame_rank_name' => Util::getIngameRankName($group->id),
                 'discord_role_id' => intval(Discord::getDiscordRoleId($api->getDb(), $group->id))
-            );
+            ];
         }
         $user->groups = $groups_array;
 
-        $api->returnArray((array)$user);
+        $api->returnArray((array) $user);
     }
 }
diff --git a/modules/Core/includes/endpoints/VerifyMinecraftEndpoint.php b/modules/Core/includes/endpoints/VerifyMinecraftEndpoint.php
index c1081b6ef0a1a84ccfa92538feda3caf0dc9543e..f3553b1ca99c478ca2dd3bb651b479082f65d0c7 100644
--- a/modules/Core/includes/endpoints/VerifyMinecraftEndpoint.php
+++ b/modules/Core/includes/endpoints/VerifyMinecraftEndpoint.php
@@ -1,13 +1,13 @@
 <?php
 
 /**
- * @param int $id The NamelessMC user's ID
+ * @param int    $id   The NamelessMC user's ID
  * @param string $code The NamelessMC user's reset code, used to verify they own the account
  *
  * @return string JSON Array
  */
-class VerifyMinecraftEndpoint extends EndpointBase {
-
+class VerifyMinecraftEndpoint extends EndpointBase
+{
     public function __construct() {
         $this->_route = 'verifyMinecraft';
         $this->_module = 'Core';
@@ -31,22 +31,22 @@ class VerifyMinecraftEndpoint extends EndpointBase {
         $api->getDb()->update(
             'users',
             $user->data()->id,
-            array(
+            [
                 'reset_code' => '',
                 'active' => 1
-            )
+            ]
         );
 
         try {
-            HookHandler::executeEvent('validateUser', array(
+            HookHandler::executeEvent('validateUser', [
                 'event' => 'validateUser',
                 'user_id' => $user->data()->id,
                 'username' => Output::getClean($user->username),
                 'language' => $api->getLanguage()
-            ));
+            ]);
         } catch (Exception $e) {
         }
 
-        $api->returnArray(array('message' => $api->getLanguage()->get('api', 'account_validated')));
+        $api->returnArray(['message' => $api->getLanguage()->get('api', 'account_validated')]);
     }
 }
diff --git a/modules/Core/includes/endpoints/discord/SetDiscordRolesEndpoint.php b/modules/Core/includes/endpoints/discord/SetDiscordRolesEndpoint.php
index d50d01539ada6f355fc34e6a029ca0ccfc6022c6..e3084b1b856842b708d827f04513bbefbb63e0e7 100644
--- a/modules/Core/includes/endpoints/discord/SetDiscordRolesEndpoint.php
+++ b/modules/Core/includes/endpoints/discord/SetDiscordRolesEndpoint.php
@@ -1,13 +1,13 @@
 <?php
 
 /**
- * @param int $user The NamelessMC user ID to edit
+ * @param int    $user  The NamelessMC user ID to edit
  * @param string $roles An array of Discord Role ID to give to the user
  *
  * @return string JSON Array
  */
-class SetDiscordRolesEndpoint extends EndpointBase {
-
+class SetDiscordRolesEndpoint extends EndpointBase
+{
     public function __construct() {
         $this->_route = 'setDiscordRoles';
         $this->_module = 'Core';
@@ -18,7 +18,7 @@ class SetDiscordRolesEndpoint extends EndpointBase {
     public function execute(Nameless2API $api) {
         $api->validateParams($_POST, ['user']);
 
-        if (!Util::getSetting($api->getDb(), 'discord_integration')) {
+        if (! Util::getSetting($api->getDb(), 'discord_integration')) {
             $api->throwError(34, $api->getLanguage()->get('api', 'discord_integration_disabled'));
         }
 
@@ -27,19 +27,19 @@ class SetDiscordRolesEndpoint extends EndpointBase {
         $user = $api->getUser('id', $user_id);
 
         $should_log = false;
-        $log_array = array();
+        $log_array = [];
 
         if ($_POST['roles'] != null) {
-
             $roles = $_POST['roles'];
 
             $original_group_ids = $user->getAllGroupIds();
-            $added_groups_ids = array();
+            $added_groups_ids = [];
 
             $user->removeGroups();
 
             foreach ($roles as $role) {
                 $group = Discord::getWebsiteGroup($api->getDb(), $role);
+
                 if ($group == null) {
                     continue;
                 }
@@ -64,9 +64,7 @@ class SetDiscordRolesEndpoint extends EndpointBase {
 
                 $log_array['removed'][] = Util::getGroupNameFromId($group_id);
             }
-
         } else {
-
             $original_group_ids = $user->getAllGroupIds();
             $added_group_id = 0;
 
@@ -79,7 +77,7 @@ class SetDiscordRolesEndpoint extends EndpointBase {
             }
 
             // If the new group they got was not in their original groups, log it
-            if (!in_array($added_group_id, $original_group_ids)) {
+            if (! in_array($added_group_id, $original_group_ids)) {
                 $should_log = true;
                 $log_array['added'][] = Util::getGroupNameFromId($added_group_id);
             }
@@ -93,13 +91,12 @@ class SetDiscordRolesEndpoint extends EndpointBase {
                 $should_log = true;
                 $log_array['removed'][] = Util::getGroupNameFromId($group_id);
             }
-
         }
 
         if ($should_log) {
             Log::getInstance()->log(Log::Action('discord/role_set'), json_encode($log_array), $user->data()->id);
         }
 
-        $api->returnArray(array('message' => $api->getLanguage()->get('api', 'group_updated'), 'meta' => json_encode($log_array)));
+        $api->returnArray(['message' => $api->getLanguage()->get('api', 'group_updated'), 'meta' => json_encode($log_array)]);
     }
 }
diff --git a/modules/Core/includes/endpoints/discord/SubmitDiscordRoleListEndpoint.php b/modules/Core/includes/endpoints/discord/SubmitDiscordRoleListEndpoint.php
index d8c71bcbf5f578c41eb69fa5313981078984099d..34e382a37507535b7a41fb2e51a450395781dfcb 100644
--- a/modules/Core/includes/endpoints/discord/SubmitDiscordRoleListEndpoint.php
+++ b/modules/Core/includes/endpoints/discord/SubmitDiscordRoleListEndpoint.php
@@ -5,8 +5,8 @@
  *
  * @return string JSON Array
  */
-class SubmitDiscordRoleListEndpoint extends EndpointBase {
-
+class SubmitDiscordRoleListEndpoint extends EndpointBase
+{
     public function __construct() {
         $this->_route = 'submitDiscordRoleList';
         $this->_module = 'Core';
@@ -15,7 +15,7 @@ class SubmitDiscordRoleListEndpoint extends EndpointBase {
     }
 
     public function execute(Nameless2API $api) {
-        $roles = array();
+        $roles = [];
 
         if ($_POST['roles'] != null) {
             $roles = $_POST['roles'];
@@ -27,6 +27,6 @@ class SubmitDiscordRoleListEndpoint extends EndpointBase {
             $api->throwError(33, $api->getLanguage()->get('api', 'unable_to_update_discord_roles'), $e->getMessage());
         }
 
-        $api->returnArray(array('message' => $api->getLanguage()->get('api', 'discord_settings_updated')));
+        $api->returnArray(['message' => $api->getLanguage()->get('api', 'discord_settings_updated')]);
     }
 }
diff --git a/modules/Core/includes/endpoints/discord/UpdateDiscordBotSettingsEndpoint.php b/modules/Core/includes/endpoints/discord/UpdateDiscordBotSettingsEndpoint.php
index e1c53da47268259971b71c329a7943674ff85d6a..af61b5cb68cf2bb3fe2ef1ad7d175c75e39c7d6c 100644
--- a/modules/Core/includes/endpoints/discord/UpdateDiscordBotSettingsEndpoint.php
+++ b/modules/Core/includes/endpoints/discord/UpdateDiscordBotSettingsEndpoint.php
@@ -1,12 +1,12 @@
 <?php
 /**
  * @param string $url New Discord bot URL
- * @param string $id New Discord Guild/server ID
+ * @param string $id  New Discord Guild/server ID
  *
  * @return string JSON Array
  */
-class UpdateDiscordBotSettingsEndpoint extends EndpointBase {
-
+class UpdateDiscordBotSettingsEndpoint extends EndpointBase
+{
     public function __construct() {
         $this->_route = 'updateDiscordBotSettings';
         $this->_module = 'Core';
@@ -17,7 +17,7 @@ class UpdateDiscordBotSettingsEndpoint extends EndpointBase {
     public function execute(Nameless2API $api) {
         if (isset($_POST['url'])) {
             try {
-                $api->getDb()->createQuery('UPDATE nl2_settings SET `value` = ? WHERE `name` = ?', array($_POST['url'], 'discord_bot_url'));
+                $api->getDb()->createQuery('UPDATE nl2_settings SET `value` = ? WHERE `name` = ?', [$_POST['url'], 'discord_bot_url']);
             } catch (Exception $e) {
                 $api->throwError(30, $api->getLanguage()->get('api', 'unable_to_set_discord_bot_url'), $e->getMessage());
             }
@@ -25,15 +25,15 @@ class UpdateDiscordBotSettingsEndpoint extends EndpointBase {
 
         if (isset($_POST['guild_id'])) {
             try {
-                $api->getDb()->createQuery('UPDATE nl2_settings SET `value` = ? WHERE `name` = ?', array($_POST['guild_id'], 'discord'));
+                $api->getDb()->createQuery('UPDATE nl2_settings SET `value` = ? WHERE `name` = ?', [$_POST['guild_id'], 'discord']);
             } catch (Exception $e) {
-                $api->throwError(33, $api->getLanguage()->get('api', 'unable_to_set_discord_id'),  $e->getMessage());
+                $api->throwError(33, $api->getLanguage()->get('api', 'unable_to_set_discord_id'), $e->getMessage());
             }
         }
 
         if (isset($_POST['bot_username'])) {
             try {
-                $api->getDb()->createQuery('UPDATE nl2_settings SET `value` = ? WHERE `name` = ?', array($_POST['bot_username'], 'discord_bot_username'));
+                $api->getDb()->createQuery('UPDATE nl2_settings SET `value` = ? WHERE `name` = ?', [$_POST['bot_username'], 'discord_bot_username']);
             } catch (Exception $e) {
                 $api->throwError(33, $api->getLanguage()->get('api', 'unable_to_set_discord_bot_username'), $e->getMessage());
             }
@@ -43,6 +43,6 @@ class UpdateDiscordBotSettingsEndpoint extends EndpointBase {
             // TODO
         }
 
-        $api->returnArray(array('message' => $api->getLanguage()->get('api', 'discord_settings_updated')));
+        $api->returnArray(['message' => $api->getLanguage()->get('api', 'discord_settings_updated')]);
     }
 }
diff --git a/modules/Core/includes/endpoints/discord/UpdateDiscordUsernames.php b/modules/Core/includes/endpoints/discord/UpdateDiscordUsernames.php
index 0e919eb8d92f359aa3d462debb482c4cb7f8e977..9e6575ab090073d3264857244432755826e5afd7 100644
--- a/modules/Core/includes/endpoints/discord/UpdateDiscordUsernames.php
+++ b/modules/Core/includes/endpoints/discord/UpdateDiscordUsernames.php
@@ -4,8 +4,8 @@
  *
  * @return string JSON Array
  */
-class UpdateDiscordUsernames extends EndpointBase {
-
+class UpdateDiscordUsernames extends EndpointBase
+{
     public function __construct() {
         $this->_route = 'updateDiscordUsernames';
         $this->_module = 'Core';
@@ -19,13 +19,14 @@ class UpdateDiscordUsernames extends EndpointBase {
         foreach ($_POST['users'] as $row) {
             $user = $api->getUser('discord_id', $row['id'] + 0);
             $discord_username = Output::getClean($row['name']);
+
             try {
-                $api->getDb()->update('users', $user->data()->id, array('discord_username' => $discord_username));
+                $api->getDb()->update('users', $user->data()->id, ['discord_username' => $discord_username]);
             } catch (Exception $e) {
                 $api->throwError(24, $api->getLanguage()->get('api', 'unable_to_update_discord_username'), $e->getMessage());
             }
         }
 
-        $api->returnArray(array('message' => $api->getLanguage()->get('api', 'discord_usernames_updated')));
+        $api->returnArray(['message' => $api->getLanguage()->get('api', 'discord_usernames_updated')]);
     }
 }
diff --git a/modules/Core/includes/endpoints/discord/VerifyDiscordEndpoint.php b/modules/Core/includes/endpoints/discord/VerifyDiscordEndpoint.php
index 2caf9a29aa604ae2fa31c6a762618182fe059dcc..474dd2ff5176aa72924301f23c1b6ffdbbdb4519 100644
--- a/modules/Core/includes/endpoints/discord/VerifyDiscordEndpoint.php
+++ b/modules/Core/includes/endpoints/discord/VerifyDiscordEndpoint.php
@@ -1,12 +1,12 @@
 <?php
 /**
- * @param string $token The token of the user to update
- * @param int $discord_id The user's Discord user ID to set
+ * @param string $token      The token of the user to update
+ * @param int    $discord_id The user's Discord user ID to set
  *
  * @return string JSON Array
  */
-class VerifyDiscordEndpoint extends EndpointBase {
-
+class VerifyDiscordEndpoint extends EndpointBase
+{
     public function __construct() {
         $this->_route = 'verifyDiscord';
         $this->_module = 'Core';
@@ -22,8 +22,9 @@ class VerifyDiscordEndpoint extends EndpointBase {
         $discord_username = Output::getClean($_POST['discord_username']);
 
         // Find the user's NamelessMC id
-        $verification = $api->getDb()->get('discord_verifications', array('token', '=', $token));
-        if (!$verification->count()) {
+        $verification = $api->getDb()->get('discord_verifications', ['token', '=', $token]);
+
+        if (! $verification->count()) {
             $api->throwError(28, $api->getLanguage()->get('api', 'no_pending_verification_for_token'));
         }
         $id = $verification->first()->user_id;
@@ -32,13 +33,13 @@ class VerifyDiscordEndpoint extends EndpointBase {
         $api->getUser('id', $id);
 
         try {
-            $api->getDb()->update('users', $id, array('discord_id' => $discord_id));
-            $api->getDb()->update('users', $id, array('discord_username' => $discord_username));
-            $api->getDb()->delete('discord_verifications', array('user_id', '=', $id));
+            $api->getDb()->update('users', $id, ['discord_id' => $discord_id]);
+            $api->getDb()->update('users', $id, ['discord_username' => $discord_username]);
+            $api->getDb()->delete('discord_verifications', ['user_id', '=', $id]);
         } catch (Exception $e) {
             $api->throwError(29, $api->getLanguage()->get('api', 'unable_to_set_discord_id'), $e->getMessage());
         }
 
-        $api->returnArray(array('message' => $api->getLanguage()->get('api', 'discord_id_set')));
+        $api->returnArray(['message' => $api->getLanguage()->get('api', 'discord_id_set')]);
     }
 }
diff --git a/modules/Core/init.php b/modules/Core/init.php
index f7c517e61376a0f4384fe6766474d6d7c521a95c..f4bff71564e9456cff70801a09c6d65101bdee99 100644
--- a/modules/Core/init.php
+++ b/modules/Core/init.php
@@ -11,12 +11,13 @@
 
 // Ensure module has been installed
 $module_installed = $cache->retrieve('module_core');
-if (!$module_installed) {
+
+if (! $module_installed) {
     // Hasn't been installed
     // Need to run the installer
     die('Run the installer first!');
 }
 
-require_once(ROOT_PATH . '/modules/Core/module.php');
+require_once (ROOT_PATH . '/modules/Core/module.php');
 
 $module = new Core_Module($language, $pages, $user, $queries, $navigation, $cache, $endpoints);
diff --git a/modules/Core/module.php b/modules/Core/module.php
index bee9e65a92ffc1a5e99a90ed5187139a6a0a9843..ee75faf26b9dff9baf898c7d82525487d886c4be 100644
--- a/modules/Core/module.php
+++ b/modules/Core/module.php
@@ -9,11 +9,17 @@
  *  Core module file
  */
 
-class Core_Module extends Module {
+class Core_Module extends Module
+{
     private $_language;
-    private static $_dashboard_graph = array(), $_notices = array(), $_user_actions = array();
 
-    public function __construct($language, $pages, $user, $queries, $navigation, $cache, $endpoints){
+    private static $_dashboard_graph = [],
+
+ $_notices = [],
+
+ $_user_actions = [];
+
+    public function __construct($language, $pages, $user, $queries, $navigation, $cache, $endpoints) {
         $this->_language = $language;
 
         $name = 'Core';
@@ -104,46 +110,48 @@ class Core_Module extends Module {
 
         // "More" dropdown
         $cache->setCache('navbar_icons');
-        if($cache->isCached('more_dropdown_icon')){
+
+        if ($cache->isCached('more_dropdown_icon')){
             $icon = $cache->retrieve('more_dropdown_icon');
-        } else
-            $icon = '';
+        } else $icon = '';
 
         $cache->setCache('navbar_order');
-        if($cache->isCached('more_dropdown_order')){
+
+        if ($cache->isCached('more_dropdown_order')){
             $order = $cache->retrieve('more_dropdown_order');
-        } else
-            $order = 2500;
+        } else $order = 2500;
 
         $navigation->addDropdown('more_dropdown', $language->get('general', 'more'), 'top', $order, $icon);
 
         // Custom pages
-        $custom_pages = $queries->getWhere('custom_pages', array('id', '<>', 0));
-        if(count($custom_pages)){
-            $more = array();
+        $custom_pages = $queries->getWhere('custom_pages', ['id', '<>', 0]);
+
+        if (count($custom_pages)){
+            $more = [];
             $cache->setCache('navbar_order');
 
-            if($user->isLoggedIn()){
+            if ($user->isLoggedIn()){
                 // Check all groups
                 $user_groups = $user->getAllGroupIds();
 
-                foreach($custom_pages as $custom_page){
+                foreach ($custom_pages as $custom_page){
                     $redirect = null;
 
                     // Get redirect URL if enabled
-                    if($custom_page->redirect == 1)
+                    if ($custom_page->redirect == 1)
                         $redirect = Output::getClean($custom_page->link);
 
-                    $pages->addCustom(Output::getClean($custom_page->url), Output::getClean($custom_page->title), !$custom_page->basic);
+                    $pages->addCustom(Output::getClean($custom_page->url), Output::getClean($custom_page->title), ! $custom_page->basic);
+
+                    foreach ($user_groups as $user_group){
+                        $custom_page_permissions = $queries->getWhere('custom_pages_permissions', ['group_id', '=', $user_group]);
 
-                    foreach($user_groups as $user_group){
-                        $custom_page_permissions = $queries->getWhere('custom_pages_permissions', array('group_id', '=', $user_group));
-                        if(count($custom_page_permissions)){
-                            foreach($custom_page_permissions as $permission){
-                                if($permission->page_id == $custom_page->id){
-                                    if($permission->view == 1){
+                        if (count($custom_page_permissions)){
+                            foreach ($custom_page_permissions as $permission){
+                                if ($permission->page_id == $custom_page->id){
+                                    if ($permission->view == 1){
                                         // Check cache for order
-                                        if(!$cache->isCached($custom_page->id . '_order')){
+                                        if (! $cache->isCached($custom_page->id . '_order')){
                                             // Create cache entry now
                                             $page_order = 200;
                                             $cache->store($custom_page->id . '_order', 200);
@@ -155,18 +163,25 @@ class Core_Module extends Module {
                                             case 1:
                                                 // Navbar
                                                 $navigation->add($custom_page->id, Output::getClean($custom_page->title), (is_null($redirect)) ? URL::build(Output::getClean($custom_page->url)) : $redirect, 'top', $custom_page->target ? '_blank' : null, $page_order, $custom_page->icon);
+
                                                 break;
+
                                             case 2:
                                                 // "More" dropdown
-                                                $more[] = array('id' => $custom_page->id, 'title' => Output::getClean($custom_page->title), 'url' => (is_null($redirect)) ? URL::build(Output::getClean($custom_page->url)) : $redirect, 'redirect' => $redirect, 'target' => $custom_page->target, 'icon' => $custom_page->icon, 'order' => $page_order);
+                                                $more[] = ['id' => $custom_page->id, 'title' => Output::getClean($custom_page->title), 'url' => (is_null($redirect)) ? URL::build(Output::getClean($custom_page->url)) : $redirect, 'redirect' => $redirect, 'target' => $custom_page->target, 'icon' => $custom_page->icon, 'order' => $page_order];
+
                                                 break;
+
                                             case 3:
                                                 // Footer
                                                 $navigation->add($custom_page->id, Output::getClean($custom_page->title), (is_null($redirect)) ? URL::build(Output::getClean($custom_page->url)) : $redirect, 'footer', $custom_page->target ? '_blank' : null, 2000, $custom_page->icon);
+
                                                 break;
                                         }
+
                                         break 2;
-                                    } else
+                                    }
+
                                         break;
                                 }
                             }
@@ -174,21 +189,22 @@ class Core_Module extends Module {
                     }
                 }
             } else {
-                $custom_page_permissions = $queries->getWhere('custom_pages_permissions', array('group_id', '=', 0));
-                if(count($custom_page_permissions)){
-                    foreach($custom_pages as $custom_page){
+                $custom_page_permissions = $queries->getWhere('custom_pages_permissions', ['group_id', '=', 0]);
+
+                if (count($custom_page_permissions)){
+                    foreach ($custom_pages as $custom_page){
                         $redirect = null;
 
-                        if($custom_page->redirect == 1)
+                        if ($custom_page->redirect == 1)
                             $redirect = Output::getClean($custom_page->link);
 
-                        $pages->addCustom(Output::getClean($custom_page->url), Output::getClean($custom_page->title), !$custom_page->basic);
+                        $pages->addCustom(Output::getClean($custom_page->url), Output::getClean($custom_page->title), ! $custom_page->basic);
 
-                        foreach($custom_page_permissions as $permission){
-                            if($permission->page_id == $custom_page->id){
-                                if($permission->view == 1){
+                        foreach ($custom_page_permissions as $permission){
+                            if ($permission->page_id == $custom_page->id){
+                                if ($permission->view == 1){
                                     // Check cache for order
-                                    if(!$cache->isCached($custom_page->id . '_order')){
+                                    if (! $cache->isCached($custom_page->id . '_order')){
                                         // Create cache entry now
                                         $page_order = 200;
                                         $cache->store($custom_page->id . '_order', 200);
@@ -200,17 +216,23 @@ class Core_Module extends Module {
                                         case 1:
                                             // Navbar
                                             $navigation->add($custom_page->id, Output::getClean($custom_page->title), (is_null($redirect)) ? URL::build(Output::getClean($custom_page->url)) : $redirect, 'top', $custom_page->target ? '_blank' : null, $page_order, $custom_page->icon);
+
                                             break;
+
                                         case 2:
                                             // "More" dropdown
-                                            $more[] = array('id' => $custom_page->id, 'title' => Output::getClean($custom_page->title), 'url' => (is_null($redirect)) ? URL::build(Output::getClean($custom_page->url)) : $redirect, 'redirect' => $redirect, 'target' => $custom_page->target, 'icon' => $custom_page->icon, 'order' => $page_order);
+                                            $more[] = ['id' => $custom_page->id, 'title' => Output::getClean($custom_page->title), 'url' => (is_null($redirect)) ? URL::build(Output::getClean($custom_page->url)) : $redirect, 'redirect' => $redirect, 'target' => $custom_page->target, 'icon' => $custom_page->icon, 'order' => $page_order];
+
                                             break;
+
                                         case 3:
                                             // Footer
                                             $navigation->add($custom_page->id, Output::getClean($custom_page->title), (is_null($redirect)) ? URL::build(Output::getClean($custom_page->url)) : $redirect, 'footer', $custom_page->target ? '_blank' : null, 2000, $custom_page->icon);
+
                                             break;
                                     }
                                 }
+
                                 break;
                             }
                         }
@@ -219,29 +241,32 @@ class Core_Module extends Module {
             }
             $custom_page_permissions = null;
 
-            if(count($more)){
-                foreach($more as $item)
+            if (count($more)){
+                foreach ($more as $item)
                     $navigation->addItemToDropdown('more_dropdown', $item['id'], $item['title'], $item['url'], 'top', ($item['target']) ? '_blank' : null, $item['icon'], $item['order']);
             }
         }
         $custom_pages = null;
 
         // Hooks
-        HookHandler::registerEvent('registerUser', $language->get('admin', 'register_hook_info'), array('user_id' => $language->get('admin', 'user_id'), 'username' => $language->get('user', 'username'), 'uuid' => $language->get('admin', 'uuid'), 'avatar_url' => $language->get('user', 'avatar'), 'content' => $language->get('general', 'content'), 'url' => $language->get('user', 'profile')));
-        HookHandler::registerEvent('validateUser', $language->get('admin', 'validate_hook_info'), array('user_id' => $language->get('admin', 'user_id'), 'username' => $language->get('user', 'username'), 'uuid' => $language->get('admin', 'uuid')));
-        HookHandler::registerEvent('deleteUser', $language->get('admin', 'delete_hook_info'), array('user_id' => $language->get('admin', 'user_id'), 'username' => $language->get('user', 'username'), 'uuid' => $language->get('admin', 'uuid'), 'email_address' => $language->get('user', 'email_address')));
+        HookHandler::registerEvent('registerUser', $language->get('admin', 'register_hook_info'), ['user_id' => $language->get('admin', 'user_id'), 'username' => $language->get('user', 'username'), 'uuid' => $language->get('admin', 'uuid'), 'avatar_url' => $language->get('user', 'avatar'), 'content' => $language->get('general', 'content'), 'url' => $language->get('user', 'profile')]);
+        HookHandler::registerEvent('validateUser', $language->get('admin', 'validate_hook_info'), ['user_id' => $language->get('admin', 'user_id'), 'username' => $language->get('user', 'username'), 'uuid' => $language->get('admin', 'uuid')]);
+        HookHandler::registerEvent('deleteUser', $language->get('admin', 'delete_hook_info'), ['user_id' => $language->get('admin', 'user_id'), 'username' => $language->get('user', 'username'), 'uuid' => $language->get('admin', 'uuid'), 'email_address' => $language->get('user', 'email_address')]);
 
         // Discord hook
-        require_once(ROOT_PATH . '/modules/Core/hooks/DiscordHook.php');
+        require_once (ROOT_PATH . '/modules/Core/hooks/DiscordHook.php');
 
         // Webhooks
         $cache->setCache('hooks');
-        if($cache->isCached('hooks')){
+
+        if ($cache->isCached('hooks')){
             $hook_array = $cache->retrieve('hooks');
         } else {
-            $hook_array = array();
-            if (!empty($queries->tableExists('hooks'))) {
-                $hooks = $queries->getWhere('hooks', array('id', '<>', 0));
+            $hook_array = [];
+
+            if (! empty($queries->tableExists('hooks'))) {
+                $hooks = $queries->getWhere('hooks', ['id', '<>', 0]);
+
                 if (count($hooks)) {
                     foreach ($hooks as $hook) {
                         if ($hook->action == 2) {
@@ -250,12 +275,12 @@ class Core_Module extends Module {
                             continue;
                         }
 
-                        $hook_array[] = array(
+                        $hook_array[] = [
                             'id' => $hook->id,
                             'url' => Output::getClean($hook->url),
                             'action' => $action,
                             'events' => json_decode($hook->events, true)
-                        );
+                        ];
                     }
                     $cache->store('hooks', $hook_array);
                 }
@@ -264,31 +289,31 @@ class Core_Module extends Module {
         HookHandler::registerHooks($hook_array);
 
         // Autoload API Endpoints
-        Util::loadEndpoints(join(DIRECTORY_SEPARATOR, array(ROOT_PATH, 'modules', 'Core', 'includes', 'endpoints')), $endpoints);
+        Util::loadEndpoints(join(DIRECTORY_SEPARATOR, [ROOT_PATH, 'modules', 'Core', 'includes', 'endpoints']), $endpoints);
     }
 
-    public function onInstall(){
+    public function onInstall() {
         // Not necessary for Core
     }
 
-    public function onUninstall(){
+    public function onUninstall() {
         // Not necessary for Core
     }
 
-    public function onEnable(){
+    public function onEnable() {
         // Not necessary for Core
     }
 
-    public function onDisable(){
+    public function onDisable() {
         // Not necessary for Core
     }
 
-    public function onPageLoad($user, $pages, $cache, $smarty, $navs, $widgets, $template){
+    public function onPageLoad($user, $pages, $cache, $smarty, $navs, $widgets, $template) {
         $language = $this->_language;
 
         // Permissions
         // AdminCP
-        PermissionHandler::registerPermissions($language->get('moderator', 'staff_cp'), array(
+        PermissionHandler::registerPermissions($language->get('moderator', 'staff_cp'), [
             'admincp.core' => $language->get('admin', 'core'),
             'admincp.core.api' => $language->get('admin', 'core') . ' &raquo; ' . $language->get('admin', 'api'),
             'admincp.core.seo' => $language->get('admin', 'core') . ' &raquo; ' . $language->get('admin', 'seo'),
@@ -342,22 +367,22 @@ class Core_Module extends Module {
             'admincp.groups' => $language->get('admin', 'groups'),
             'admincp.groups.self' => $language->get('admin', 'groups') . ' &raquo; ' . $language->get('admin', 'can_edit_own_group'),
             'admincp.widgets' => $language->get('admin', 'widgets'),
-        ));
+        ]);
 
         // UserCP
-        PermissionHandler::registerPermissions('UserCP', array(
+        PermissionHandler::registerPermissions('UserCP', [
             'usercp.messaging' => $language->get('user', 'messaging'),
             'usercp.signature' => $language->get('user', 'profile_settings') . ' &raquo; ' . $language->get('user', 'signature'),
             'usercp.private_profile' => $language->get('user', 'profile_settings') . ' &raquo; ' . $language->get('user', 'private_profile'),
             'usercp.nickname' => $language->get('user', 'profile_settings') . ' &raquo; ' . $language->get('user', 'nickname'),
             'usercp.profile_banner' => $language->get('user', 'profile_settings') . ' &raquo; ' . $language->get('user', 'upload_profile_banner'),
             'usercp.gif_avatar' => $language->get('user', 'profile_settings') . ' &raquo; ' . $language->get('user', 'gif_avatar')
-        ));
+        ]);
 
         // Profile Page
-        PermissionHandler::registerPermissions('Profile', array(
+        PermissionHandler::registerPermissions('Profile', [
             'profile.private.bypass' => $language->get('general', 'bypass') . ' &raquo; ' . $language->get('user', 'private_profile')
-        ));
+        ]);
 
         // Sitemap
         $pages->registerSitemapMethod(ROOT_PATH . '/modules/Core/classes/Core_Sitemap.php', 'Core_Sitemap::generateSitemap');
@@ -367,10 +392,11 @@ class Core_Module extends Module {
 
         // Widgets
         // Facebook
-        require_once(ROOT_PATH . '/modules/Core/widgets/FacebookWidget.php');
+        require_once (ROOT_PATH . '/modules/Core/widgets/FacebookWidget.php');
         $cache->setCache('social_media');
         $fb_url = $cache->retrieve('facebook');
-        if($fb_url){
+
+        if ($fb_url){
             // Active pages
             $module_pages = $widgets->getPages('Facebook');
 
@@ -378,10 +404,10 @@ class Core_Module extends Module {
         }
 
         // Twitter
-        require_once(ROOT_PATH . '/modules/Core/widgets/TwitterWidget.php');
+        require_once (ROOT_PATH . '/modules/Core/widgets/TwitterWidget.php');
         $twitter = $cache->retrieve('twitter');
 
-        if($twitter){
+        if ($twitter){
             $theme = $cache->retrieve('twitter_theme');
             $module_pages = $widgets->getPages('Twitter');
 
@@ -389,35 +415,35 @@ class Core_Module extends Module {
         }
 
         // Discord
-        require_once(ROOT_PATH . '/modules/Core/widgets/DiscordWidget.php');
+        require_once (ROOT_PATH . '/modules/Core/widgets/DiscordWidget.php');
         $discord = $cache->retrieve('discord');
         $module_pages = $widgets->getPages('Discord');
         $widgets->add(new DiscordWidget($module_pages, $language, $cache, $discord));
 
         // Profile Posts
-        require_once(ROOT_PATH . '/modules/Core/widgets/ProfilePostsWidget.php');
+        require_once (ROOT_PATH . '/modules/Core/widgets/ProfilePostsWidget.php');
         $module_pages = $widgets->getPages('Latest Profile Posts');
         $widgets->add(new ProfilePostsWidget($module_pages, $smarty, $language, $cache, $user, new Timeago(TIMEZONE)));
 
         // Online staff
-        require_once(ROOT_PATH . '/modules/Core/widgets/OnlineStaff.php');
+        require_once (ROOT_PATH . '/modules/Core/widgets/OnlineStaff.php');
         $module_pages = $widgets->getPages('Online Staff');
-        $widgets->add(new OnlineStaffWidget($module_pages, $smarty, array('title' => $language->get('general', 'online_staff'), 'no_online_staff' => $language->get('general', 'no_online_staff'), 'total_online_staff' => $language->get('general', 'total_online_staff')), $cache));
+        $widgets->add(new OnlineStaffWidget($module_pages, $smarty, ['title' => $language->get('general', 'online_staff'), 'no_online_staff' => $language->get('general', 'no_online_staff'), 'total_online_staff' => $language->get('general', 'total_online_staff')], $cache));
 
         // Online users
-        require_once(ROOT_PATH . '/modules/Core/widgets/OnlineUsers.php');
+        require_once (ROOT_PATH . '/modules/Core/widgets/OnlineUsers.php');
         $module_pages = $widgets->getPages('Online Users');
-        $widgets->add(new OnlineUsersWidget($module_pages, $cache, $smarty, array('title' => $language->get('general', 'online_users'), 'no_online_users' => $language->get('general', 'no_online_users'), 'total_online_users' => $language->get('general', 'total_online_users'))));
+        $widgets->add(new OnlineUsersWidget($module_pages, $cache, $smarty, ['title' => $language->get('general', 'online_users'), 'no_online_users' => $language->get('general', 'no_online_users'), 'total_online_users' => $language->get('general', 'total_online_users')]));
 
         // Online users
-        require_once(ROOT_PATH . '/modules/Core/widgets/ServerStatusWidget.php');
+        require_once (ROOT_PATH . '/modules/Core/widgets/ServerStatusWidget.php');
         $module_pages = $widgets->getPages('Server Status');
         $widgets->add(new ServerStatusWidget($module_pages, $smarty, $language, $cache));
 
         // Statistics
-        require_once(ROOT_PATH . '/modules/Core/widgets/StatsWidget.php');
+        require_once (ROOT_PATH . '/modules/Core/widgets/StatsWidget.php');
         $module_pages = $widgets->getPages('Statistics');
-        $widgets->add(new StatsWidget($module_pages, $smarty, array(
+        $widgets->add(new StatsWidget($module_pages, $smarty, [
             'statistics' => $language->get('general', 'statistics'),
             'users_registered' => $language->get('general', 'users_registered'),
             'latest_member' => $language->get('general', 'latest_member'),
@@ -427,24 +453,23 @@ class Core_Module extends Module {
             'users_online' => $language->get('general', 'online_users'),
             'guests_online' => $language->get('general', 'online_guests'),
             'total_online' => $language->get('general', 'total_online'),
-        ), $cache));
+        ], $cache));
 
         // Validate user hook
         $cache->setCache('validate_action');
-        if($cache->isCached('validate_action')){
-            $validate_action = $cache->retrieve('validate_action');
 
+        if ($cache->isCached('validate_action')){
+            $validate_action = $cache->retrieve('validate_action');
         } else {
-            $validate_action = $queries->getWhere('settings', array('name', '=', 'validate_user_action'));
+            $validate_action = $queries->getWhere('settings', ['name', '=', 'validate_user_action']);
             $validate_action = $validate_action[0]->value;
             $validate_action = json_decode($validate_action, true);
 
             $cache->store('validate_action', $validate_action);
-
         }
 
-        if($validate_action['action'] == 'promote') {
-            require_once(ROOT_PATH . '/modules/Core/hooks/ValidateHook.php');
+        if ($validate_action['action'] == 'promote') {
+            require_once (ROOT_PATH . '/modules/Core/hooks/ValidateHook.php');
             HookHandler::registerHook('validateUser', 'ValidateHook::validatePromote');
             define('VALIDATED_DEFAULT', $validate_action['group']);
         }
@@ -455,173 +480,166 @@ class Core_Module extends Module {
 
         if ($cache->isCached('pre_validation_default')) {
             $group_id = $cache->retrieve('pre_validation_default');
-
         } else {
-            $group_id = $queries->getWhere('groups', array('default_group', '=', '1'));
+            $group_id = $queries->getWhere('groups', ['default_group', '=', '1']);
             $group_id = $group_id[0]->id;
         }
 
         define('PRE_VALIDATED_DEFAULT', $group_id);
 
         // Check for updates
-        if($user->isLoggedIn()){
-            if($user->hasPermission('admincp.update')){
+        if ($user->isLoggedIn()){
+            if ($user->hasPermission('admincp.update')){
                 $cache->setCache('update_check');
-                if($cache->isCached('update_check')){
+
+                if ($cache->isCached('update_check')){
                     $update_check = $cache->retrieve('update_check');
                 } else {
                     $update_check = Util::updateCheck();
                     $cache->store('update_check', $update_check, 3600);
                 }
 
-                $current_version = $queries->getWhere('settings', array('name', '=', 'nameless_version'));
+                $current_version = $queries->getWhere('settings', ['name', '=', 'nameless_version']);
                 $current_version = $current_version[0]->value;
 
                 $update_check = json_decode($update_check);
 
-                if(!isset($update_check->error) && !isset($update_check->no_update) && isset($update_check->new_version)){
-                    $smarty->assign(array(
+                if (! isset($update_check->error) && ! isset($update_check->no_update) && isset($update_check->new_version)){
+                    $smarty->assign([
                         'NEW_UPDATE' => (isset($update_check->urgent) && $update_check->urgent == 'true') ? $language->get('admin', 'new_urgent_update_available') : $language->get('admin', 'new_update_available'),
                         'NEW_UPDATE_URGENT' => (isset($update_check->urgent) && $update_check->urgent == 'true'),
                         'CURRENT_VERSION' => str_replace('{x}', Output::getClean($current_version), $language->get('admin', 'current_version_x')),
                         'NEW_VERSION' => str_replace('{x}', Output::getClean($update_check->new_version), $language->get('admin', 'new_version_x')),
                         'UPDATE' => $language->get('admin', 'update'),
                         'UPDATE_LINK' => URL::build('/panel/update')
-                    ));
+                    ]);
                 }
             }
         }
 
-        if(defined('MINECRAFT') && MINECRAFT === true){
+        if (defined('MINECRAFT') && MINECRAFT === true){
             // Status page?
             $cache->setCache('status_page');
-            if($cache->isCached('enabled')){
-                $status_enabled = $cache->retrieve('enabled');
 
+            if ($cache->isCached('enabled')){
+                $status_enabled = $cache->retrieve('enabled');
             } else {
-                $status_enabled = $queries->getWhere('settings', array('name', '=', 'status_page'));
-                if($status_enabled[0]->value == 1)
+                $status_enabled = $queries->getWhere('settings', ['name', '=', 'status_page']);
+
+                if ($status_enabled[0]->value == 1)
                     $status_enabled = 1;
-                else
-                    $status_enabled = 0;
+                else $status_enabled = 0;
 
                 $cache->store('enabled', $status_enabled);
-
             }
 
-            if($status_enabled == 1){
+            if ($status_enabled == 1){
                 // Add status link to navbar
                 $cache->setCache('navbar_order');
-                if(!$cache->isCached('status_order')){
+
+                if (! $cache->isCached('status_order')){
                     $status_order = 3;
                     $cache->store('status_order', 3);
-                } else{
+                } else {
                     $status_order = $cache->retrieve('status_order');
                 }
 
                 $cache->setCache('navbar_icons');
-                if(!$cache->isCached('status_icon'))
+
+                if (! $cache->isCached('status_icon'))
                     $icon = '';
-                else
-                    $icon = $cache->retrieve('status_icon');
+                else $icon = $cache->retrieve('status_icon');
 
                 $navs[0]->add('status', $language->get('general', 'status'), URL::build('/status'), 'top', null, $status_order, $icon);
             }
         }
 
         // Check page type (frontend or backend)
-        if(defined('FRONT_END')){
+        if (defined('FRONT_END')){
             // Minecraft integration?
-            if(defined('MINECRAFT') && MINECRAFT === true){
+            if (defined('MINECRAFT') && MINECRAFT === true){
                 // Query main server
                 $cache->setCache('mc_default_server');
 
                 // Already cached?
-                if($cache->isCached('default_query')) {
+                if ($cache->isCached('default_query')) {
                     $result = $cache->retrieve('default_query');
                     $default = $cache->retrieve('default');
                 } else {
-                    if($cache->isCached('default')){
+                    if ($cache->isCached('default')){
                         $default = $cache->retrieve('default');
                         $sub_servers = $cache->retrieve('default_sub');
                     } else {
                         // Get default server from database
-                        $default = $queries->getWhere('mc_servers', array('is_default', '=', 1));
-                        if(count($default)){
+                        $default = $queries->getWhere('mc_servers', ['is_default', '=', 1]);
+
+                        if (count($default)){
                             // Get sub-servers of default server
-                            $sub_servers = $queries->getWhere('mc_servers', array('parent_server', '=', $default[0]->id));
-                            if(count($sub_servers))
+                            $sub_servers = $queries->getWhere('mc_servers', ['parent_server', '=', $default[0]->id]);
+
+                            if (count($sub_servers))
                                 $cache->store('default_sub', $sub_servers);
-                            else
-                                $cache->store('default_sub', array());
+                            else $cache->store('default_sub', []);
 
                             $default = $default[0];
 
                             $cache->store('default', $default, 60);
-                        } else
-                            $cache->store('default', null, 60);
+                        } else $cache->store('default', null, 60);
                     }
 
-                    if(!is_null($default) && isset($default->ip)){
-                        $full_ip = array('ip' => $default->ip . (is_null($default->port) ? '' : ':' . $default->port), 'pre' => $default->pre, 'name' => $default->name);
+                    if (! is_null($default) && isset($default->ip)){
+                        $full_ip = ['ip' => $default->ip . (is_null($default->port) ? '' : ':' . $default->port), 'pre' => $default->pre, 'name' => $default->name];
 
                         // Get query type
-                        $query_type = $queries->getWhere('settings', array('name', '=', 'external_query'));
-                        if(count($query_type)){
-                            if($query_type[0]->value == '1')
+                        $query_type = $queries->getWhere('settings', ['name', '=', 'external_query']);
+
+                        if (count($query_type)){
+                            if ($query_type[0]->value == '1')
                                 $query_type = 'external';
-                            else
-                                $query_type = 'internal';
-                        } else
-                            $query_type = 'internal';
+                            else $query_type = 'internal';
+                        } else $query_type = 'internal';
 
-                        if(isset($sub_servers) && count($sub_servers)){
-                            $servers = array($full_ip);
+                        if (isset($sub_servers) && count($sub_servers)){
+                            $servers = [$full_ip];
 
-                            foreach($sub_servers as $server)
-                                $servers[] = array('ip' => $server->ip . (is_null($server->port) ? '' : ':' . $server->port), 'pre' => $server->pre, 'name' => $server->name);
+                            foreach ($sub_servers as $server)
+                                $servers[] = ['ip' => $server->ip . (is_null($server->port) ? '' : ':' . $server->port), 'pre' => $server->pre, 'name' => $server->name];
 
                             $result = MCQuery::multiQuery($servers, $query_type, $language, true, $queries);
 
-                            if(isset($result['status_value']) && $result['status_value'] == 1){
+                            if (isset($result['status_value']) && $result['status_value'] == 1){
                                 $result['status'] = $language->get('general', 'online');
 
-                                if($result['total_players'] == 1){
+                                if ($result['total_players'] == 1){
                                     $result['status_full'] = $language->get('general', 'currently_1_player_online');
                                     $result['x_players_online'] = $language->get('general', 'currently_1_player_online');
                                 } else {
                                     $result['status_full'] = str_replace('{x}', $result['total_players'], $language->get('general', 'currently_x_players_online'));
                                     $result['x_players_online'] = str_replace('{x}', $result['total_players'], $language->get('general', 'currently_x_players_online'));
                                 }
-
                             } else {
                                 $result['status'] = $language->get('general', 'offline');
                                 $result['status_full'] = $language->get('general', 'server_offline');
                                 $result['server_offline'] = $language->get('general', 'server_offline');
-
                             }
-
                         } else {
                             $result = MCQuery::singleQuery($full_ip, $query_type, $language, $queries);
 
-                            if(isset($result['status_value']) && $result['status_value'] == 1){
+                            if (isset($result['status_value']) && $result['status_value'] == 1){
                                 $result['status'] = $language->get('general', 'online');
 
-                                if($result['player_count'] == 1){
+                                if ($result['player_count'] == 1){
                                     $result['status_full'] = $language->get('general', 'currently_1_player_online');
                                     $result['x_players_online'] = $language->get('general', 'currently_1_player_online');
                                 } else {
                                     $result['status_full'] = str_replace('{x}', $result['player_count'], $language->get('general', 'currently_x_players_online'));
                                     $result['x_players_online'] = str_replace('{x}', $result['player_count'], $language->get('general', 'currently_x_players_online'));
                                 }
-
                             } else {
                                 $result['status'] = $language->get('general', 'offline');
                                 $result['status_full'] = $language->get('general', 'server_offline');
                                 $result['server_offline'] = $language->get('general', 'server_offline');
-
                             }
-
                         }
 
                         // Cache for 1 minute
@@ -631,10 +649,10 @@ class Core_Module extends Module {
 
                 $smarty->assign('MINECRAFT', true);
 
-                if(isset($result))
+                if (isset($result))
                     $smarty->assign('SERVER_QUERY', $result);
 
-                if(!is_null($default) && isset($default->ip)){
+                if (! is_null($default) && isset($default->ip)){
                     $smarty->assign('CONNECT_WITH', str_replace('{x}', '<span id="ip">' . Output::getClean($default->ip . ($default->port && $default->port != 25565 ? ':' . $default->port : '')) . '</span>', $language->get('general', 'connect_with_ip_x')));
                     $smarty->assign('DEFAULT_IP', Output::getClean($default->ip . ($default->port != 25565 ? ':' . $default->port : '')));
                     $smarty->assign('CLICK_TO_COPY_TOOLTIP', $language->get('general', 'click_to_copy_tooltip'));
@@ -645,436 +663,402 @@ class Core_Module extends Module {
                 }
 
                 $smarty->assign('SERVER_OFFLINE', $language->get('general', 'server_offline'));
-
             }
 
-            if(defined('PAGE') && PAGE == 'user_query'){
+            if (defined('PAGE') && PAGE == 'user_query'){
                 // Collection
                 $user_id = $smarty->getTemplateVars('USER_ID');
 
                 $timeago = new Timeago(TIMEZONE);
 
-                if($user_id){
-                    $user_query = $queries->getWhere('users', array('id', '=', $user_id));
-                    if(count($user_query)){
+                if ($user_id){
+                    $user_query = $queries->getWhere('users', ['id', '=', $user_id]);
+
+                    if (count($user_query)){
                         $user_query = $user_query[0];
                         $smarty->assign('REGISTERED', str_replace('{x}', $timeago->inWords(date('Y-m-d H:i:s', $user_query->joined), $language->getTimeLanguage()), $language->get('user', 'registered_x')));
                     }
                 }
             }
-
         } else {
             // Navigation
             $cache->setCache('panel_sidebar');
-            if(!$cache->isCached('dashboard_order')){
+
+            if (! $cache->isCached('dashboard_order')){
                 $order = 1;
                 $cache->store('dashboard_order', 1);
             } else {
                 $order = $cache->retrieve('dashboard_order');
             }
 
-            if(!$cache->isCached('dashboard_icon')){
+            if (! $cache->isCached('dashboard_icon')){
                 $icon = '<i class="nav-icon fas fa-home"></i>';
                 $cache->store('dashboard_icon', $icon);
-            } else
-                $icon = $cache->retrieve('dashboard_icon');
+            } else $icon = $cache->retrieve('dashboard_icon');
 
             $navs[2]->add('core_divider', mb_strtoupper($language->get('admin', 'core')), 'divider', 'top', null, $order, '');
             $navs[2]->add('dashboard', $language->get('admin', 'dashboard'), URL::build('/panel'), 'top', null, $order, $icon);
 
-            if($user->hasPermission('admincp.core')){
-                if(!$cache->isCached('configuration_order')){
+            if ($user->hasPermission('admincp.core')){
+                if (! $cache->isCached('configuration_order')){
                     $order = 2;
                     $cache->store('configuration_order', 2);
                 } else {
                     $order = $cache->retrieve('configuration_order');
                 }
 
-                if(!$cache->isCached('configuration_icon')){
+                if (! $cache->isCached('configuration_icon')){
                     $icon = '<i class="nav-icon fas fa-wrench"></i>';
                     $cache->store('configuration_icon', $icon);
-                } else
-                    $icon = $cache->retrieve('configuration_icon');
+                } else $icon = $cache->retrieve('configuration_icon');
 
                 $navs[2]->addDropdown('core_configuration', $language->get('admin', 'configuration'), 'top', $order, $icon);
 
-                if($user->hasPermission('admincp.core.general')){
-                    if(!$cache->isCached('general_settings_icon')){
+                if ($user->hasPermission('admincp.core.general')){
+                    if (! $cache->isCached('general_settings_icon')){
                         $icon = '<i class="nav-icon fas fa-cogs"></i>';
                         $cache->store('general_settings_icon', $icon);
-                    } else
-                        $icon = $cache->retrieve('general_settings_icon');
+                    } else $icon = $cache->retrieve('general_settings_icon');
 
                     $navs[2]->addItemToDropdown('core_configuration', 'general_settings', $language->get('admin', 'general_settings'), URL::build('/panel/core/general_settings'), 'top', $order, $icon);
                 }
 
-                if($user->hasPermission('admincp.core.api')){
-                    if(!$cache->isCached('api_icon')){
+                if ($user->hasPermission('admincp.core.api')){
+                    if (! $cache->isCached('api_icon')){
                         $icon = '<i class="nav-icon fas fa-code"></i>';
                         $cache->store('api_icon', $icon);
-                    } else
-                        $icon = $cache->retrieve('api_icon');
+                    } else $icon = $cache->retrieve('api_icon');
 
                     $navs[2]->addItemToDropdown('core_configuration', 'api', $language->get('admin', 'api'), URL::build('/panel/core/api'), 'top', $order, $icon);
                 }
 
-                if($user->hasPermission('admincp.core.seo')){
-                    if(!$cache->isCached('seo_icon')){
+                if ($user->hasPermission('admincp.core.seo')){
+                    if (! $cache->isCached('seo_icon')){
                         $icon = '<i class="nav-icon fas fa-globe"></i>';
                         $cache->store('seo_icon', $icon);
-                    } else
-                        $icon = $cache->retrieve('seo_icon');
+                    } else $icon = $cache->retrieve('seo_icon');
 
                     $navs[2]->addItemToDropdown('core_configuration', 'seo', $language->get('admin', 'seo'), URL::build('/panel/core/seo'), 'top', $order, $icon);
                 }
 
-                if($user->hasPermission('admincp.core.avatars')){
-                    if(!$cache->isCached('avatars_icon')){
+                if ($user->hasPermission('admincp.core.avatars')){
+                    if (! $cache->isCached('avatars_icon')){
                         $icon = '<i class="nav-icon fas fa-image"></i>';
                         $cache->store('avatars_icon', $icon);
-                    } else
-                        $icon = $cache->retrieve('avatars_icon');
+                    } else $icon = $cache->retrieve('avatars_icon');
 
                     $navs[2]->addItemToDropdown('core_configuration', 'avatars', $language->get('admin', 'avatars'), URL::build('/panel/core/avatars'), 'top', $order, $icon);
                 }
 
-                if($user->hasPermission('admincp.core.fields')){
-                    if(!$cache->isCached('custom_profile_fields_icon')){
+                if ($user->hasPermission('admincp.core.fields')){
+                    if (! $cache->isCached('custom_profile_fields_icon')){
                         $icon = '<i class="nav-icon fas fa-id-card"></i>';
                         $cache->store('custom_profile_fields_icon', $icon);
-                    } else
-                        $icon = $cache->retrieve('custom_profile_fields_icon');
+                    } else $icon = $cache->retrieve('custom_profile_fields_icon');
 
                     $navs[2]->addItemToDropdown('core_configuration', 'custom_profile_fields', $language->get('admin', 'custom_fields'), URL::build('/panel/core/profile_fields'), 'top', $order, $icon);
                 }
 
-                if($user->hasPermission('admincp.core.debugging')){
-                    if(!$cache->isCached('debugging_icon')){
+                if ($user->hasPermission('admincp.core.debugging')){
+                    if (! $cache->isCached('debugging_icon')){
                         $icon = '<i class="nav-icon fas fa-tachometer-alt"></i>';
                         $cache->store('debugging_icon', $icon);
-                    } else
-                        $icon = $cache->retrieve('debugging_icon');
+                    } else $icon = $cache->retrieve('debugging_icon');
 
                     $navs[2]->addItemToDropdown('core_configuration', 'debugging_and_maintenance', $language->get('admin', 'maintenance'), URL::build('/panel/core/debugging_and_maintenance'), 'top', $order, $icon);
                 }
 
-                if($user->hasPermission('admincp.core.emails')){
-                    if(!$cache->isCached('email_icon')){
+                if ($user->hasPermission('admincp.core.emails')){
+                    if (! $cache->isCached('email_icon')){
                         $icon = '<i class="nav-icon fas fa-envelope"></i>';
                         $cache->store('email_icon', $icon);
-                    } else
-                        $icon = $cache->retrieve('email_icon');
+                    } else $icon = $cache->retrieve('email_icon');
 
                     $navs[2]->addItemToDropdown('core_configuration', 'emails', $language->get('admin', 'emails'), URL::build('/panel/core/emails'), 'top', $order, $icon);
                 }
 
-                if($user->hasPermission('admincp.core.navigation')){
-                    if(!$cache->isCached('navigation_icon')){
+                if ($user->hasPermission('admincp.core.navigation')){
+                    if (! $cache->isCached('navigation_icon')){
                         $icon = '<i class="nav-icon fas fa-bars"></i>';
                         $cache->store('navigation_icon', $icon);
-                    } else
-                        $icon = $cache->retrieve('navigation_icon');
+                    } else $icon = $cache->retrieve('navigation_icon');
 
                     $navs[2]->addItemToDropdown('core_configuration', 'navigation', $language->get('admin', 'navigation'), URL::build('/panel/core/navigation'), 'top', $order, $icon);
                 }
 
-                if($user->hasPermission('admincp.core.terms')){
-                    if(!$cache->isCached('privacy_and_terms_icon')){
+                if ($user->hasPermission('admincp.core.terms')){
+                    if (! $cache->isCached('privacy_and_terms_icon')){
                         $icon = '<i class="nav-icon fas fa-file-alt"></i>';
                         $cache->store('privacy_and_terms_icon', $icon);
-                    } else
-                        $icon = $cache->retrieve('privacy_and_terms_icon');
+                    } else $icon = $cache->retrieve('privacy_and_terms_icon');
 
                     $navs[2]->addItemToDropdown('core_configuration', 'privacy_and_terms', $language->get('admin', 'privacy_and_terms'), URL::build('/panel/core/privacy_and_terms'), 'top', $order, $icon);
                 }
 
-                if($user->hasPermission('admincp.core.reactions')){
-                    if(!$cache->isCached('reactions_icon')){
+                if ($user->hasPermission('admincp.core.reactions')){
+                    if (! $cache->isCached('reactions_icon')){
                         $icon = '<i class="nav-icon fas fa-smile"></i>';
                         $cache->store('reactions_icon', $icon);
-                    } else
-                        $icon = $cache->retrieve('reactions_icon');
+                    } else $icon = $cache->retrieve('reactions_icon');
 
                     $navs[2]->addItemToDropdown('core_configuration', 'reactions', $language->get('user', 'reactions'), URL::build('/panel/core/reactions'), 'top', $order, $icon);
                 }
 
-                if($user->hasPermission('admincp.core.registration')){
-                    if(!$cache->isCached('registration_icon')){
+                if ($user->hasPermission('admincp.core.registration')){
+                    if (! $cache->isCached('registration_icon')){
                         $icon = '<i class="nav-icon fas fa-user-plus"></i>';
                         $cache->store('registration_icon', $icon);
-                    } else
-                        $icon = $cache->retrieve('registration_icon');
+                    } else $icon = $cache->retrieve('registration_icon');
 
                     $navs[2]->addItemToDropdown('core_configuration', 'registration', $language->get('admin', 'registration'), URL::build('/panel/core/registration'), 'top', $order, $icon);
                 }
 
-                if($user->hasPermission('admincp.core.social_media')){
-                    if(!$cache->isCached('social_media_icon')){
+                if ($user->hasPermission('admincp.core.social_media')){
+                    if (! $cache->isCached('social_media_icon')){
                         $icon = '<i class="nav-icon fas fa-users"></i>';
                         $cache->store('social_media_icon', $icon);
-                    } else
-                        $icon = $cache->retrieve('social_media_icon');
+                    } else $icon = $cache->retrieve('social_media_icon');
 
                     $navs[2]->addItemToDropdown('core_configuration', 'social_media', $language->get('admin', 'social_media'), URL::build('/panel/core/social_media'), 'top', $order, $icon);
                 }
 
-                if($user->hasPermission('admincp.core.hooks')){
-                    if(!$cache->isCached('hooks_icon')){
+                if ($user->hasPermission('admincp.core.hooks')){
+                    if (! $cache->isCached('hooks_icon')){
                         $icon = '<i class="nav-icon fas fa-link"></i>';
                         $cache->store('hooks_icon', $icon);
-                    } else
-                        $icon = $cache->retrieve('hooks_icon');
+                    } else $icon = $cache->retrieve('hooks_icon');
 
                     $navs[2]->addItemToDropdown('core_configuration', 'hooks', $language->get('admin', 'hooks'), URL::build('/panel/core/hooks'), 'top', $order, $icon);
                 }
             }
 
-            if($user->hasPermission('admincp.groups')){
-                if(!$cache->isCached('groups_order')){
+            if ($user->hasPermission('admincp.groups')){
+                if (! $cache->isCached('groups_order')){
                     $order = 3;
                     $cache->store('groups_order', 3);
                 } else {
                     $order = $cache->retrieve('groups_order');
                 }
 
-                if(!$cache->isCached('groups_icon')){
+                if (! $cache->isCached('groups_icon')){
                     $icon = '<i class="nav-icon fas fa-address-book"></i>';
                     $cache->store('group_icon', $icon);
-                } else
-                    $icon = $cache->retrieve('group_icon');
+                } else $icon = $cache->retrieve('group_icon');
 
                 $navs[2]->add('groups', $language->get('admin', 'groups'), URL::build('/panel/core/groups'), 'top', null, $order, $icon);
             }
 
             if ($user->hasPermission('admincp.core.announcements')) {
-                if (!$cache->isCached('announcements_order')) {
+                if (! $cache->isCached('announcements_order')) {
                     $order = 4;
                     $cache->store('announcements_order', 4);
                 } else {
                     $order = $cache->retrieve('announcements_order');
                 }
 
-                if (!$cache->isCached('announcements_icon')) {
+                if (! $cache->isCached('announcements_icon')) {
                     $icon = '<i class="nav-icon fas fa-bullhorn"></i>';
                     $cache->store('announcements_icon', $icon);
-                } else
-                $icon = $cache->retrieve('announcements_icon');
+                } else $icon = $cache->retrieve('announcements_icon');
 
                 $navs[2]->add('announcements', $language->get('admin', 'announcements'), URL::build('/panel/core/announcements'), 'top', null, $order, $icon);
             }
 
-            if($user->hasPermission('admincp.integrations')){
-                if(!$cache->isCached('integrations_order')){
+            if ($user->hasPermission('admincp.integrations')){
+                if (! $cache->isCached('integrations_order')){
                     $order = 5;
                     $cache->store('integrations_order', 5);
                 } else {
                     $order = $cache->retrieve('integrations_order');
                 }
 
-                if(!$cache->isCached('integrations_icon')){
+                if (! $cache->isCached('integrations_icon')){
                     $icon = '<i class="nav-icon fas fa-plug"></i>';
                     $cache->store('integrations_icon', $icon);
-                } else
-                    $icon = $cache->retrieve('integrations_icon');
+                } else $icon = $cache->retrieve('integrations_icon');
 
                 $navs[2]->addDropdown('integrations', $language->get('admin', 'integrations'), 'top', $order, $icon);
             }
 
-            if($user->hasPermission('admincp.minecraft')){
-                if(!$cache->isCached('minecraft_icon')){
+            if ($user->hasPermission('admincp.minecraft')){
+                if (! $cache->isCached('minecraft_icon')){
                     $icon = '<i class="nav-icon fas fa-cubes"></i>';
                     $cache->store('minecraft_icon', $icon);
-                } else
-                    $icon = $cache->retrieve('minecraft_icon');
+                } else $icon = $cache->retrieve('minecraft_icon');
 
                 $navs[2]->addItemToDropdown('integrations', 'minecraft', $language->get('admin', 'minecraft'), URL::build('/panel/minecraft'), 'top', $order, $icon);
             }
 
             if ($user->hasPermission('admincp.discord')) {
-                if (!$cache->isCached('discord_icon')) {
+                if (! $cache->isCached('discord_icon')) {
                     $icon = '<i class="nav-icon fab fa-discord"></i>';
                     $cache->store('discord_icon', $icon);
-                } else
-                $icon = $cache->retrieve('discord_icon');
+                } else $icon = $cache->retrieve('discord_icon');
 
                 $navs[2]->addItemToDropdown('integrations', 'discord', $language->get('admin', 'discord'), URL::build('/panel/discord'), 'top', $order, $icon);
             }
 
-            if($user->hasPermission('admincp.styles') || $user->hasPermission('admincp.sitemap') || $user->hasPermission('admincp.widgets')){
-                if(!$cache->isCached('layout_order')){
+            if ($user->hasPermission('admincp.styles') || $user->hasPermission('admincp.sitemap') || $user->hasPermission('admincp.widgets')){
+                if (! $cache->isCached('layout_order')){
                     $order = 6;
                     $cache->store('layout_order', 6);
                 } else {
                     $order = $cache->retrieve('layout_order');
                 }
 
-                if(!$cache->isCached('layout_icon')){
+                if (! $cache->isCached('layout_icon')){
                     $icon = '<i class="nav-icon fas fa-object-group"></i>';
                     $cache->store('layout_icon', $icon);
-                } else
-                    $icon = $cache->retrieve('layout_icon');
+                } else $icon = $cache->retrieve('layout_icon');
 
                 $navs[2]->addDropdown('layout', $language->get('admin', 'layout'), 'top', $order, $icon);
 
-                if($user->hasPermission('admincp.styles.images')){
-                    if(!$cache->isCached('images_icon')){
+                if ($user->hasPermission('admincp.styles.images')){
+                    if (! $cache->isCached('images_icon')){
                         $icon = '<i class="nav-icon fas fa-images"></i>';
                         $cache->store('images_icon', $icon);
-                    } else
-                        $icon = $cache->retrieve('images_icon');
+                    } else $icon = $cache->retrieve('images_icon');
 
                     $navs[2]->addItemToDropdown('layout', 'images', $language->get('admin', 'images'), URL::build('/panel/core/images'), 'top', $order, $icon);
                 }
 
-                if($user->hasPermission('admincp.styles.panel_templates')){
-                    if(!$cache->isCached('panel_templates_icon')){
+                if ($user->hasPermission('admincp.styles.panel_templates')){
+                    if (! $cache->isCached('panel_templates_icon')){
                         $icon = '<i class="nav-icon fas fa-tachometer-alt"></i>';
                         $cache->store('panel_templates_icon', $icon);
-                    } else
-                        $icon = $cache->retrieve('panel_templates_icon');
+                    } else $icon = $cache->retrieve('panel_templates_icon');
 
                     $navs[2]->addItemToDropdown('layout', 'panel_templates', $language->get('admin', 'panel_templates'), URL::build('/panel/core/panel_templates'), 'top', $order, $icon);
                 }
 
-                if($user->hasPermission('admincp.styles')){
-                    if(!$cache->isCached('templates_icon')){
+                if ($user->hasPermission('admincp.styles')){
+                    if (! $cache->isCached('templates_icon')){
                         $icon = '<i class="nav-icon fas fa-paint-brush"></i>';
                         $cache->store('templates_icon', $icon);
-                    } else
-                        $icon = $cache->retrieve('templates_icon');
+                    } else $icon = $cache->retrieve('templates_icon');
 
                     $navs[2]->addItemToDropdown('layout', 'template', $language->get('admin', 'templates'), URL::build('/panel/core/templates'), 'top', $order, $icon);
                 }
 
-                if($user->hasPermission('admincp.widgets')){
-                    if(!$cache->isCached('widgets_icon')){
+                if ($user->hasPermission('admincp.widgets')){
+                    if (! $cache->isCached('widgets_icon')){
                         $icon = '<i class="nav-icon fas fa-th"></i>';
                         $cache->store('widgets_icon', $icon);
-                    } else
-                        $icon = $cache->retrieve('widgets_icon');
+                    } else $icon = $cache->retrieve('widgets_icon');
 
                     $navs[2]->addItemToDropdown('layout', 'widgets', $language->get('admin', 'widgets'), URL::build('/panel/core/widgets'), 'top', $order, $icon);
                 }
             }
 
-            if($user->hasPermission('admincp.modules')){
-                if(!$cache->isCached('modules_order')){
+            if ($user->hasPermission('admincp.modules')){
+                if (! $cache->isCached('modules_order')){
                     $order = 7;
                     $cache->store('modules_order', 7);
                 } else {
                     $order = $cache->retrieve('modules_order');
                 }
 
-                if(!$cache->isCached('modules_icon')){
+                if (! $cache->isCached('modules_icon')){
                     $icon = '<i class="nav-icon fas fa-puzzle-piece"></i>';
                     $cache->store('modules_icon', $icon);
-                } else
-                    $icon = $cache->retrieve('modules_icon');
+                } else $icon = $cache->retrieve('modules_icon');
 
                 $navs[2]->add('modules', $language->get('admin', 'modules'), URL::build('/panel/core/modules'), 'top', null, $order, $icon);
             }
 
-            if($user->hasPermission('admincp.pages')){
-                if(!$cache->isCached('pages_order')){
+            if ($user->hasPermission('admincp.pages')){
+                if (! $cache->isCached('pages_order')){
                     $order = 8;
                     $cache->store('pages_order', 8);
                 } else {
                     $order = $cache->retrieve('pages_order');
                 }
                 
-                if(!$cache->isCached('pages_icon')){
+                if (! $cache->isCached('pages_icon')){
                     $icon = '<i class="nav-icon fas fa-file"></i>';
                     $cache->store('pages_icon', $icon);
-                } else
-                    $icon = $cache->retrieve('pages_icon');
+                } else $icon = $cache->retrieve('pages_icon');
 
                 $navs[2]->add('custom_pages', $language->get('admin', 'custom_pages'), URL::build('/panel/core/pages'), 'top', null, $order, $icon);
             }
 
-            if($user->hasPermission('admincp.security')){
-                if(!$cache->isCached('security_order')){
+            if ($user->hasPermission('admincp.security')){
+                if (! $cache->isCached('security_order')){
                     $order = 9;
                     $cache->store('security_order', 9);
                 } else {
                     $order = $cache->retrieve('security_order');
                 }
 
-                if(!$cache->isCached('security_icon')){
+                if (! $cache->isCached('security_icon')){
                     $icon = '<i class="nav-icon fas fa-lock"></i>';
                     $cache->store('security_icon', $icon);
-                } else
-                    $icon = $cache->retrieve('security_icon');
+                } else $icon = $cache->retrieve('security_icon');
 
                 $navs[2]->add('security', $language->get('admin', 'security'), URL::build('/panel/security'), 'top', null, $order, $icon);
             }
 
-            if($user->hasPermission('admincp.update')){
-                if(!$cache->isCached('update_order')){
+            if ($user->hasPermission('admincp.update')){
+                if (! $cache->isCached('update_order')){
                     $order = 10;
                     $cache->store('update_order', 10);
                 } else {
                     $order = $cache->retrieve('update_order');
                 }
 
-                if(!$cache->isCached('update_icon')){
+                if (! $cache->isCached('update_icon')){
                     $icon = '<i class="nav-icon fas fa-download"></i>';
                     $cache->store('update_icon', $icon);
-                } else
-                    $icon = $cache->retrieve('update_icon');
+                } else $icon = $cache->retrieve('update_icon');
 
                 $navs[2]->add('update', $language->get('admin', 'update'), URL::build('/panel/update'), 'top', null, $order, $icon);
             }
 
-            if($user->hasPermission('admincp.users')){
-                if(!$cache->isCached('users_order')){
+            if ($user->hasPermission('admincp.users')){
+                if (! $cache->isCached('users_order')){
                     $order = 11;
                     $cache->store('users_order', 11);
                 } else {
                     $order = $cache->retrieve('users_order');
                 }
 
-                if(!$cache->isCached('users_icon')){
+                if (! $cache->isCached('users_icon')){
                     $icon = '<i class="nav-icon fas fa-user-circle"></i>';
                     $cache->store('users_icon', $icon);
-                } else
-                    $icon = $cache->retrieve('users_icon');
+                } else $icon = $cache->retrieve('users_icon');
 
                 $navs[2]->addDropdown('users', $language->get('admin', 'user_management'), 'top', $order, $icon);
 
-                if(!$cache->isCached('user_icon')){
+                if (! $cache->isCached('user_icon')){
                     $icon = '<i class="nav-icon fas fa-users"></i>';
                     $cache->store('user_icon', $icon);
-                } else
-                    $icon = $cache->retrieve('user_icon');
+                } else $icon = $cache->retrieve('user_icon');
 
                 $navs[2]->addItemToDropdown('users', 'users', $language->get('admin', 'users'), URL::build('/panel/users'), 'top', $order, $icon);
 
-                if($user->hasPermission('modcp.ip_lookup')){
-                    if(!$cache->isCached('ip_lookup_icon')){
+                if ($user->hasPermission('modcp.ip_lookup')){
+                    if (! $cache->isCached('ip_lookup_icon')){
                         $icon = '<i class="nav-icon fas fa-binoculars"></i>';
                         $cache->store('ip_lookup_icon', $icon);
-                    } else
-                        $icon = $cache->retrieve('ip_lookup_icon');
+                    } else $icon = $cache->retrieve('ip_lookup_icon');
 
                     $navs[2]->addItemToDropdown('users', 'ip_lookup', $language->get('moderator', 'ip_lookup'), URL::build('/panel/users/ip_lookup'), 'top', $order, $icon);
                 }
 
-                if($user->hasPermission('modcp.punishments')){
-                    if(!$cache->isCached('punishments_icon')){
+                if ($user->hasPermission('modcp.punishments')){
+                    if (! $cache->isCached('punishments_icon')){
                         $icon = '<i class="nav-icon fas fa-gavel"></i>';
                         $cache->store('punishments_icon', $icon);
-                    } else
-                        $icon = $cache->retrieve('punishments_icon');
+                    } else $icon = $cache->retrieve('punishments_icon');
 
                     $navs[2]->addItemToDropdown('users', 'punishments', $language->get('moderator', 'punishments'), URL::build('/panel/users/punishments'), 'top', $order, $icon);
                 }
 
-                if($user->hasPermission('modcp.reports')){
-                    if(!$cache->isCached('reports_icon')){
+                if ($user->hasPermission('modcp.reports')){
+                    if (! $cache->isCached('reports_icon')){
                         $icon = '<i class="nav-icon fas fa-exclamation-triangle"></i>';
                         $cache->store('reports_icon', $icon);
-                    } else
-                        $icon = $cache->retrieve('reports_icon');
+                    } else $icon = $cache->retrieve('reports_icon');
 
                     $navs[2]->addItemToDropdown('users', 'reports', $language->get('moderator', 'reports'), URL::build('/panel/users/reports'), 'top', $order, $icon);
                 }
@@ -1084,40 +1068,40 @@ class Core_Module extends Module {
             $cache->setCache('notices_cache');
 
             // Email errors?
-            if($user->hasPermission('admincp.core.emails')){
-                if($cache->isCached('email_errors')){
+            if ($user->hasPermission('admincp.core.emails')){
+                if ($cache->isCached('email_errors')){
                     $email_errors = $cache->retrieve('email_errors');
                 } else {
-                    $email_errors = $queries->getWhere('email_errors', array('id', '<>', 0));
+                    $email_errors = $queries->getWhere('email_errors', ['id', '<>', 0]);
                     $cache->store('email_errors', $email_errors, 120);
                 }
 
-                if(count($email_errors))
+                if (count($email_errors))
                     self::addNotice(URL::build('/panel/core/emails/errors'), $language->get('admin', 'email_errors_logged'));
             }
 
-            if(defined('PANEL_PAGE') && PANEL_PAGE == 'dashboard'){
+            if (defined('PANEL_PAGE') && PANEL_PAGE == 'dashboard'){
                 // Dashboard graph
                 $cache->setCache('dashboard_graph');
-                if($cache->isCached('core_data')){
-                    $data = $cache->retrieve('core_data');
 
+                if ($cache->isCached('core_data')){
+                    $data = $cache->retrieve('core_data');
                 } else {
-                    $users = $queries->orderWhere('users', 'joined > ' . strtotime("-1 week"), 'joined', 'ASC');
+                    $users = $queries->orderWhere('users', 'joined > ' . strtotime('-1 week'), 'joined', 'ASC');
 
                     // Output array
-                    $data = array();
+                    $data = [];
 
                     $data['datasets']['users']['label'] = 'language/admin/registrations'; // for $language->get('admin', 'registrations');
                     $data['datasets']['users']['colour'] = '#0004FF';
 
-                    foreach($users as $member){
+                    foreach ($users as $member){
                         // Turn into format for graph
                         // First, order them per day
                         $date = date('d M Y', $member->joined);
                         $date = '_' . strtotime($date);
 
-                        if(isset($data[$date]['users'])){
+                        if (isset($data[$date]['users'])){
                             $data[$date]['users'] = $data[$date]['users'] + 1;
                         } else {
                             $data[$date]['users'] = 1;
@@ -1126,18 +1110,18 @@ class Core_Module extends Module {
 
                     $users = null;
 
-                    if(defined('MINECRAFT') && MINECRAFT){
-                        $players = array();
+                    if (defined('MINECRAFT') && MINECRAFT){
+                        $players = [];
 
                         $version = DB::getInstance()->query('select version()')->first()->{'version()'};
 
-                        if(strpos(strtolower($version), 'mariadb') !== false){
+                        if (strpos(strtolower($version), 'mariadb') !== false){
                             $version = preg_replace('#[^0-9\.]#', '', $version);
 
-                            if(version_compare($version, '10.1', '>=')){
+                            if (version_compare($version, '10.1', '>=')){
                                 try {
                                     $players = DB::getInstance()->query('SET STATEMENT MAX_STATEMENT_TIME = 1000 FOR SELECT ROUND(AVG(players_online)) AS players, DATE(FROM_UNIXTIME(queried_at)) AS `date` FROM nl2_query_results WHERE DATE(FROM_UNIXTIME(queried_at)) IN (SELECT DATE(FROM_UNIXTIME(queried_at)) AS ForDate FROM nl2_query_results WHERE DATE(FROM_UNIXTIME(queried_at)) > NOW() - INTERVAL 1 WEEK GROUP BY DATE(FROM_UNIXTIME(queried_at)) ORDER BY ForDate) GROUP BY DATE(FROM_UNIXTIME(queried_at))')->results();
-                                } catch(Exception $e){
+                                } catch (Exception $e){
                                     // Unable to obtain player count
                                     $player_count_error = true;
                                 }
@@ -1145,31 +1129,30 @@ class Core_Module extends Module {
                         } else {
                             $version = preg_replace('#[^0-9\.]#', '', $version);
 
-                            if(version_compare($version, '5.7.4', '>=') && version_compare($version, '5.7.8', '<')){
+                            if (version_compare($version, '5.7.4', '>=') && version_compare($version, '5.7.8', '<')){
                                 try {
                                     $players = DB::getInstance()->query('SELECT MAX_STATEMENT_TIME = 1000 ROUND(AVG(players_online)) AS players, DATE(FROM_UNIXTIME(queried_at)) AS `date` FROM nl2_query_results WHERE DATE(FROM_UNIXTIME(queried_at)) IN (SELECT DATE(FROM_UNIXTIME(queried_at)) AS ForDate FROM nl2_query_results WHERE DATE(FROM_UNIXTIME(queried_at)) > NOW() - INTERVAL 1 WEEK GROUP BY DATE(FROM_UNIXTIME(queried_at)) ORDER BY ForDate) GROUP BY DATE(FROM_UNIXTIME(queried_at))')->results();
-                                } catch(Exception $e){
+                                } catch (Exception $e){
                                     // Unable to obtain player count
                                     $player_count_error = true;
                                 }
-                            } else if(version_compare($version, '5.7.8', '>=')){
+                            } else if (version_compare($version, '5.7.8', '>=')){
                                 try {
                                     $players = DB::getInstance()->query('SELECT MAX_EXECUTION_TIME = 1000 ROUND(AVG(players_online)) AS players, DATE(FROM_UNIXTIME(queried_at)) AS `date` FROM nl2_query_results WHERE DATE(FROM_UNIXTIME(queried_at)) IN (SELECT DATE(FROM_UNIXTIME(queried_at)) AS ForDate FROM nl2_query_results WHERE DATE(FROM_UNIXTIME(queried_at)) > NOW() - INTERVAL 1 WEEK GROUP BY DATE(FROM_UNIXTIME(queried_at)) ORDER BY ForDate) GROUP BY DATE(FROM_UNIXTIME(queried_at))')->results();
-                                } catch(Exception $e){
+                                } catch (Exception $e){
                                     // Unable to obtain player count
                                     $player_count_error = true;
                                 }
-                            } else
-                                $player_count_error = true;
+                            } else $player_count_error = true;
                         }
 
-                        if(!isset($player_count_error)){
+                        if (! isset($player_count_error)){
                             $data['datasets']['players']['axis'] = 2; // second axis
                             $data['datasets']['players']['axis_side'] = 'right'; // right side
                             $data['datasets']['players']['label'] = 'language/admin/average_players';
                             $data['datasets']['players']['colour'] = '#ff0c00';
 
-                            foreach($players as $player){
+                            foreach ($players as $player){
                                 $date = '_' . strtotime($player->date);
                                 $data[$date]['players'] = $player->players;
                             }
@@ -1179,15 +1162,16 @@ class Core_Module extends Module {
                     }
 
                     // Fill in missing dates, set registrations/players to 0
-                    $start = strtotime("-1 week");
+                    $start = strtotime('-1 week');
                     $start = date('d M Y', $start);
                     $start = strtotime($start);
                     $end = strtotime(date('d M Y'));
-                    while($start <= $end){
-                        if(!isset($data['_' . $start]['users']))
+
+                    while ($start <= $end){
+                        if (! isset($data['_' . $start]['users']))
                             $data['_' . $start]['users'] = 0;
 
-                        if(!isset($player_count_error) && defined('MINECRAFT') && MINECRAFT && !isset($data['_' . $start]['players']))
+                        if (! isset($player_count_error) && defined('MINECRAFT') && MINECRAFT && ! isset($data['_' . $start]['players']))
                             $data['_' . $start]['players'] = 0;
 
                         $start = strtotime('+1 day', $start);
@@ -1202,75 +1186,74 @@ class Core_Module extends Module {
                 self::addDataToDashboardGraph($language->get('admin', 'overview'), $data);
 
                 // Dashboard stats
-                require_once(ROOT_PATH . '/modules/Core/collections/panel/TotalUsers.php');
+                require_once (ROOT_PATH . '/modules/Core/collections/panel/TotalUsers.php');
                 CollectionManager::addItemToCollection('dashboard_stats', new TotalUsersItem($smarty, $language, $cache));
 
-                require_once(ROOT_PATH . '/modules/Core/collections/panel/RecentUsers.php');
+                require_once (ROOT_PATH . '/modules/Core/collections/panel/RecentUsers.php');
                 CollectionManager::addItemToCollection('dashboard_stats', new RecentUsersItem($smarty, $language, $cache));
 
                 // Dashboard items
-                if($user->hasPermission('modcp.punishments')){
-                    require_once(ROOT_PATH . '/modules/Core/collections/panel/RecentPunishments.php');
+                if ($user->hasPermission('modcp.punishments')){
+                    require_once (ROOT_PATH . '/modules/Core/collections/panel/RecentPunishments.php');
                     CollectionManager::addItemToCollection('dashboard_main_items', new RecentPunishmentsItem($smarty, $language, $cache));
                 }
 
-                if($user->hasPermission('modcp.reports')){
-                    require_once(ROOT_PATH . '/modules/Core/collections/panel/RecentReports.php');
+                if ($user->hasPermission('modcp.reports')){
+                    require_once (ROOT_PATH . '/modules/Core/collections/panel/RecentReports.php');
                     CollectionManager::addItemToCollection('dashboard_main_items', new RecentReportsItem($smarty, $language, $cache));
                 }
 
-                if($user->hasPermission('admincp.users')){
-                    require_once(ROOT_PATH . '/modules/Core/collections/panel/RecentRegistrations.php');
+                if ($user->hasPermission('admincp.users')){
+                    require_once (ROOT_PATH . '/modules/Core/collections/panel/RecentRegistrations.php');
                     CollectionManager::addItemToCollection('dashboard_main_items', new RecentRegistrationsItem($smarty, $language, $cache));
                 }
             }
 
-            if($user->hasPermission('admincp.users.edit'))
+            if ($user->hasPermission('admincp.users.edit'))
                 self::addUserAction($language->get('general', 'edit'), URL::build('/panel/users/edit/', 'id={id}'));
 
-            if($user->hasPermission('modcp.ip_lookup'))
+            if ($user->hasPermission('modcp.ip_lookup'))
                 self::addUserAction($language->get('moderator', 'ip_lookup'), URL::build('/panel/users/ip_lookup/', 'uid={id}'));
 
-            if($user->hasPermission('modcp.punishments'))
+            if ($user->hasPermission('modcp.punishments'))
                 self::addUserAction($language->get('moderator', 'punish'), URL::build('/panel/users/punishments/', 'user={id}'));
 
             self::addUserAction($language->get('user', 'profile'), URL::build('/profile/{username}'));
 
-            if($user->hasPermission('modcp.reports'))
+            if ($user->hasPermission('modcp.reports'))
                 self::addUserAction($language->get('moderator', 'reports'), URL::build('/panel/users/reports/', 'uid={id}'));
         }
 
-        require_once(ROOT_PATH . '/modules/Core/hooks/DeleteUserHook.php');
+        require_once (ROOT_PATH . '/modules/Core/hooks/DeleteUserHook.php');
         HookHandler::registerHook('deleteUser', 'DeleteUserHook::deleteUser');
     }
 
-    public static function addDataToDashboardGraph($title, $data){
-        if(isset(self::$_dashboard_graph[$title]))
+    public static function addDataToDashboardGraph($title, $data) {
+        if (isset(self::$_dashboard_graph[$title]))
             self::$_dashboard_graph[$title] = array_merge_recursive(self::$_dashboard_graph[$title], $data);
-        else
-            self::$_dashboard_graph[$title] = $data;
+        else self::$_dashboard_graph[$title] = $data;
     }
 
-    public static function getDashboardGraphs(){
+    public static function getDashboardGraphs() {
         return self::$_dashboard_graph;
     }
 
-    public static function addNotice($url, $text){
+    public static function addNotice($url, $text) {
         self::$_notices[$url] = $text;
     }
 
-    public static function getNotices(){
+    public static function getNotices() {
         return self::$_notices;
     }
 
-    public static function addUserAction($title, $link){
-        self::$_user_actions[] = array('title' => $title, 'link' => $link);
+    public static function addUserAction($title, $link) {
+        self::$_user_actions[] = ['title' => $title, 'link' => $link];
     }
 
-    public static function getUserActions(){
+    public static function getUserActions() {
         $return = self::$_user_actions;
 
-        uasort($return, function($a, $b){
+        uasort($return, function ($a, $b) {
             return $a['title'] > $b['title'];
         });
 
diff --git a/modules/Core/pages/api/v2/index.php b/modules/Core/pages/api/v2/index.php
index be5eddf872c8ee3f4e0b9ce5c1ee79a0d105c0af..b74d4a97542b3a8de18dc7409505fd94a014319c 100644
--- a/modules/Core/pages/api/v2/index.php
+++ b/modules/Core/pages/api/v2/index.php
@@ -11,26 +11,29 @@
  */
 
 // Headers
-header("Content-Type: application/json; charset=UTF-8");
+header('Content-Type: application/json; charset=UTF-8');
 
 $page_title = 'api';
-require_once(ROOT_PATH . '/core/templates/frontend_init.php');
+
+require_once (ROOT_PATH . '/core/templates/frontend_init.php');
 
 // Load modules + template
-Module::loadPage($user, $pages, $cache, $smarty, array($navigation, $cc_nav, $mod_nav), $widgets);
+Module::loadPage($user, $pages, $cache, $smarty, [$navigation, $cc_nav, $mod_nav], $widgets);
 
 // Ensure API is actually enabled
-if (!Util::getSetting(DB::getInstance(), 'use_api')) {
+if (! Util::getSetting(DB::getInstance(), 'use_api')) {
     die($language->get('api', 'api_disabled'));
 }
 
 // Initialise
 $api = new Nameless2API($route, $language, $endpoints);
 
-class Nameless2API {
-
+class Nameless2API
+{
     private $_db,
+
             $_language,
+
             $_endpoints;
 
     public function getDb() {
@@ -50,13 +53,14 @@ class Nameless2API {
                 if (strlen($explode[$i]) == 32) {
                     if ($this->validateKey($explode[$i])) {
                         $api_key = $explode[$i];
+
                         break;
                     }
                 }
             }
 
             // Set language
-            if (!isset($api_language) || empty($api_language)) {
+            if (! isset($api_language) || empty($api_language)) {
                 $this->throwError(2, 'Invalid language file');
             }
 
@@ -78,7 +82,7 @@ class Nameless2API {
             } else {
                 $this->throwError(1, $this->_language->get('api', 'invalid_api_key'));
             }
-        } catch(Exception $e) {
+        } catch (Exception $e) {
             $this->throwError($e->getMessage());
         }
     }
@@ -88,53 +92,58 @@ class Nameless2API {
     private function validateKey($api_key = null) {
         if ($api_key) {
             // Check cached key
-            if (!is_file(ROOT_PATH . DIRECTORY_SEPARATOR . 'cache' . DIRECTORY_SEPARATOR . sha1('apicache') . '.cache')) {
+            if (! is_file(ROOT_PATH . DIRECTORY_SEPARATOR . 'cache' . DIRECTORY_SEPARATOR . sha1('apicache') . '.cache')) {
                 // Not cached, cache now
                 // Retrieve from database
-                $correct_key = $this->_db->get('settings', array('name', '=', 'mc_api_key'));
+                $correct_key = $this->_db->get('settings', ['name', '=', 'mc_api_key']);
                 $correct_key = $correct_key->results();
                 $correct_key = htmlspecialchars($correct_key[0]->value);
 
                 // Store in cache file
                 file_put_contents(ROOT_PATH . DIRECTORY_SEPARATOR . 'cache' . DIRECTORY_SEPARATOR . sha1('apicache') . '.cache', $correct_key);
-
             } else $correct_key = file_get_contents(ROOT_PATH . DIRECTORY_SEPARATOR . 'cache' . DIRECTORY_SEPARATOR . sha1('apicache') . '.cache');
 
             if ($api_key == $correct_key) return true;
         }
+
         return false;
     }
 
     public function getUser($column, $value) {
         $user = new User(Output::getClean($value), Output::getClean($column));
-        if (!count($user->data())) $this->throwError(16, $this->getLanguage()->get('api', 'unable_to_find_user'));
+
+        if (! count($user->data())) $this->throwError(16, $this->getLanguage()->get('api', 'unable_to_find_user'));
+
         return $user;
     }
 
     public function throwError($code = null, $message = null, $meta = null) {
         if ($code && $message) {
-            die(json_encode(array('error' => true, 'code' => $code, 'message' => $message, 'meta' => $meta), JSON_PRETTY_PRINT));
-        } else {
-            die(json_encode(array('error' => true, 'code' => 0, 'message' => $this->_language->get('api', 'unknown_error'), 'meta' => $meta), JSON_PRETTY_PRINT));
+            die(json_encode(['error' => true, 'code' => $code, 'message' => $message, 'meta' => $meta], JSON_PRETTY_PRINT));
         }
+
+            die(json_encode(['error' => true, 'code' => 0, 'message' => $this->_language->get('api', 'unknown_error'), 'meta' => $meta], JSON_PRETTY_PRINT));
     }
 
     public function returnArray($arr = null) {
-        if (!$arr) $arr = array();
+        if (! $arr) $arr = [];
 
         $arr['error'] = false;
+
         die(json_encode($arr, JSON_PRETTY_PRINT));
     }
 
     public function validateParams($input, $required_fields, $type = 'post') {
-        if (!isset($input) || empty($input)) {
+        if (! isset($input) || empty($input)) {
             $this->throwError(6, $this->_language->get('api', 'invalid_' . $type . '_contents'));
         }
+
         foreach ($required_fields as $required) {
-            if (!isset($input[$required]) || empty($input[$required])) {
-                $this->throwError(6, $this->_language->get('api', 'invalid_' . $type . '_contents'), array('field' => $required));
+            if (! isset($input[$required]) || empty($input[$required])) {
+                $this->throwError(6, $this->_language->get('api', 'invalid_' . $type . '_contents'), ['field' => $required]);
             }
         }
+
         return true;
     }
 }
diff --git a/modules/Core/pages/authme_connector.php b/modules/Core/pages/authme_connector.php
index f7f1e99e83263b0ebdca4a5a405df9a3774e28c7..73114cecd0774337f7a89e838336226a7024e827 100644
--- a/modules/Core/pages/authme_connector.php
+++ b/modules/Core/pages/authme_connector.php
@@ -10,100 +10,105 @@
  */
 
 $page_title = $language->get('general', 'register');
-require_once(ROOT_PATH . '/core/templates/frontend_init.php');
+
+require_once (ROOT_PATH . '/core/templates/frontend_init.php');
 
 // Ensure AuthMe is enabled
-$authme_enabled = $queries->getWhere('settings', array('name', '=', 'authme'));
+$authme_enabled = $queries->getWhere('settings', ['name', '=', 'authme']);
 $authme_enabled = $authme_enabled[0]->value;
 
 // Use recaptcha?
-$recaptcha = $queries->getWhere("settings", array("name", "=", "recaptcha"));
+$recaptcha = $queries->getWhere('settings', ['name', '=', 'recaptcha']);
 $recaptcha = $recaptcha[0]->value;
 
-$recaptcha_key = $queries->getWhere("settings", array("name", "=", "recaptcha_key"));
-$recaptcha_secret = $queries->getWhere('settings', array('name', '=', 'recaptcha_secret'));
+$recaptcha_key = $queries->getWhere('settings', ['name', '=', 'recaptcha_key']);
+$recaptcha_secret = $queries->getWhere('settings', ['name', '=', 'recaptcha_secret']);
 
 // Deal with any input
-$errors = array();
-if(Input::exists()){
-    if(Token::check()){
+$errors = [];
+
+if (Input::exists()){
+    if (Token::check()){
         // Valid token
-        if(isset($_GET['step']) && $_GET['step'] == 2){
+        if (isset($_GET['step']) && $_GET['step'] == 2){
             // Step 2
-            if(!isset($_SESSION['authme'])){
+            if (! isset($_SESSION['authme'])){
                 Redirect::to(URL::build('/register'));
+
                 die();
             }
 
             $validate = new Validate();
 
             // Are custom usernames enabled?
-            $custom_usernames = $queries->getWhere("settings", array("name", "=", "displaynames"));
+            $custom_usernames = $queries->getWhere('settings', ['name', '=', 'displaynames']);
             $custom_usernames = $custom_usernames[0]->value;
 
-            if($custom_usernames == 'true'){
-                $validation = $validate->check($_POST, array(
-                    'nickname' => array(
+            if ($custom_usernames == 'true'){
+                $validation = $validate->check($_POST, [
+                    'nickname' => [
                         'required' => true,
                         'min' => 3,
                         'max' => 20,
                         'unique' => 'users'
-                    ),
-                    'email' => array(
+                    ],
+                    'email' => [
                         'required' => true,
                         'min' => 4,
                         'max' => 64,
                         'unique' => 'users'
-                    )
-                ));
+                    ]
+                ]);
             } else {
-                $validation = $validate->check($_POST, array(
-                    'email' => array(
+                $validation = $validate->check($_POST, [
+                    'email' => [
                         'required' => true,
                         'min' => 4,
                         'max' => 64,
                         'unique' => 'users'
-                    )
-                ));
+                    ]
+                ]);
             }
 
-            if($validation->passed()){
+            if ($validation->passed()){
                 // Get Authme hashing method
                 $cache->setCache('authme_cache');
                 $authme_hash = $cache->retrieve('authme');
 
                 // UUID linking
-                $uuid_linking = $queries->getWhere('settings', array('name', '=', 'uuid_linking'));
+                $uuid_linking = $queries->getWhere('settings', ['name', '=', 'uuid_linking']);
                 $uuid_linking = $uuid_linking[0]->value;
 
                 // Get default language ID before creating user
-                $language_id = $queries->getWhere('languages', array('name', '=', LANGUAGE));
+                $language_id = $queries->getWhere('languages', ['name', '=', LANGUAGE]);
 
-                if(count($language_id)) $language_id = $language_id[0]->id;
+                if (count($language_id)) $language_id = $language_id[0]->id;
                 else $language_id = 1; // fallback to EnglishUK
 
                 $ip = $user->getIP();
-                if(filter_var($ip, FILTER_VALIDATE_IP)){
+
+                if (filter_var($ip, FILTER_VALIDATE_IP)){
                     // Valid IP
-                } else
-                    $ip = $_SESSION['authme']['ip'];
+                } else $ip = $_SESSION['authme']['ip'];
 
-                if($custom_usernames == 'true')
+                if ($custom_usernames == 'true')
                     $nickname = Output::getClean(Input::get('nickname'));
-                else
-                    $nickname = $_SESSION['authme']['user'];
+                else $nickname = $_SESSION['authme']['user'];
 
                 $mcname = $_SESSION['authme']['user'];
 
                 // UUID
-                if($uuid_linking == '1'){
-                    require(ROOT_PATH . '/core/integration/uuid.php'); // For UUID stuff
-                    if(!isset($mcname_result)){
+                if ($uuid_linking == '1'){
+                    require (ROOT_PATH . '/core/integration/uuid.php'); // For UUID stuff
+
+                    if (! isset($mcname_result)){
                         $profile = ProfileUtils::getProfile(str_replace(' ', '%20', $mcname));
-                        if($profile && method_exists($profile, 'getProfileAsArray'))
+
+                        if ($profile && method_exists($profile, 'getProfileAsArray'))
                             $mcname_result = $profile->getProfileAsArray();
                     }
-                    if(isset($mcname_result["uuid"]) && !empty($mcname_result['uuid'])){
+
+                    if (isset($mcname_result['uuid']) && ! empty($mcname_result['uuid'])){
                         $uuid = $mcname_result['uuid'];
                     } else {
                         $errors[] = $language->get('user', 'mcname_lookup_error');
@@ -116,11 +121,13 @@ if(Input::exists()){
                 try {
                     // Get default group ID
                     $cache->setCache('default_group');
+
                     if ($cache->isCached('default_group')) {
                         $default_group = $cache->retrieve('default_group');
                     } else {
-                        $default_group = $queries->getWhere('groups', array('default_group', '=', 1));
-                        if (!count($default_group)) {
+                        $default_group = $queries->getWhere('groups', ['default_group', '=', 1]);
+
+                        if (! count($default_group)) {
                             $default_group = 1;
                         } else {
                             $default_group = $default_group[0]->id;
@@ -129,7 +136,7 @@ if(Input::exists()){
                         $cache->store('default_group', $default_group);
                     }
 
-                    $user->create(array(
+                    $user->create([
                         'username' => $_SESSION['authme']['user'],
                         'nickname' => $nickname,
                         'password' => $_SESSION['authme']['pass'],
@@ -140,7 +147,7 @@ if(Input::exists()){
                         'lastip' => $ip,
                         'active' => 1,
                         'last_online' => date('U')
-                    ));
+                    ]);
 
                     // Get user ID
                     $user_id = $queries->getLastId();
@@ -152,60 +159,63 @@ if(Input::exists()){
 
                     Session::flash('home', $language->get('user', 'validation_complete'));
                     Redirect::to(URL::build('/'));
-                    die();
 
-                } catch(Exception $e){
+                    die();
+                } catch (Exception $e){
                     $errors[] = $e->getMessage();
                 }
-
             } else {
                 // Validation errors
-                foreach($validation->errors() as $validation_error){
-                    if(strpos($validation_error, 'is required') !== false){
+                foreach ($validation->errors() as $validation_error){
+                    if (strpos($validation_error, 'is required') !== false){
                         // x is required
                         switch($validation_error){
                             case (strpos($validation_error, 'nickname') !== false):
                                 $errors[] = $language->get('user', 'username_required');
+
                                 break;
+
                             case (strpos($validation_error, 'email') !== false):
                                 $errors[] = $language->get('user', 'email_required');
+
                                 break;
                         }
-
-                    } else if(strpos($validation_error, 'minimum') !== false){
+                    } else if (strpos($validation_error, 'minimum') !== false){
                         // x must be a minimum of y characters long
                         switch($validation_error){
                             case (strpos($validation_error, 'nickname') !== false):
                                 $errors[] = $language->get('user', 'username_minimum_3');
+
                                 break;
+
                             case (strpos($validation_error, 'email') !== false):
                                 $errors[] = $language->get('user', 'invalid_email');
+
                                 break;
                         }
-
-                    } else if(strpos($validation_error, 'maximum') !== false){
+                    } else if (strpos($validation_error, 'maximum') !== false){
                         // x must be a maximum of y characters long
                         switch($validation_error){
                             case (strpos($validation_error, 'username') !== false):
                                 $errors[] = $language->get('user', 'username_maximum_20');
+
                                 break;
+
                             case (strpos($validation_error, 'email') !== false):
                                 $errors[] = $language->get('user', 'invalid_email');
+
                                 break;
                         }
-
-                    } else if(strpos($validation_error, 'already exists') !== false){
+                    } else if (strpos($validation_error, 'already exists') !== false){
                         // already exists
-                        if(!in_array($language->get('user', 'username_mcname_email_exists'), $errors))
+                        if (! in_array($language->get('user', 'username_mcname_email_exists'), $errors))
                             $errors[] = $language->get('user', 'username_mcname_email_exists');
-
                     }
                 }
             }
-
         } else {
             // Step 1
-            if($recaptcha == 'true'){
+            if ($recaptcha == 'true'){
                 // Check reCAPCTHA
                 $url = 'https://www.google.com/recaptcha/api/siteverify';
 
@@ -222,29 +232,29 @@ if(Input::exists()){
                 $result = json_decode($result, true);
             } else {
                 // reCAPTCHA is disabled
-                $result = array(
+                $result = [
                     'success' => 'true'
-                );
+                ];
             }
 
-            if(isset($result['success']) && $result['success'] == 'true'){
+            if (isset($result['success']) && $result['success'] == 'true'){
                 // Valid recaptcha
                 $validate = new Validate();
-                $validation = $validate->check($_POST, array(
-                    'username' => array(
+                $validation = $validate->check($_POST, [
+                    'username' => [
                         'required' => true,
                         'unique' => 'users'
-                    ),
-                    'password' => array(
+                    ],
+                    'password' => [
                         'required' => true
-                    ),
-                    't_and_c' => array(
+                    ],
+                    't_and_c' => [
                         'required' => true,
                         'agree' => true
-                    )
-                ));
+                    ]
+                ]);
 
-                if($validation->passed()){
+                if ($validation->passed()){
                     // Try connecting to AuthMe
                     $cache->setCache('authme_cache');
                     $authme_db = $cache->retrieve('authme');
@@ -252,26 +262,27 @@ if(Input::exists()){
                     // Try to connect to the database
                     $authme_conn = new mysqli($authme_db['address'], $authme_db['user'], $authme_db['pass'], $authme_db['db'], $authme_db['port']);
 
-                    if($authme_conn->connect_errno){
+                    if ($authme_conn->connect_errno){
                         // Connection error
                         $errors[] = $authme_conn->connect_errno . ' - ' . $authme_conn->connect_error;
                         $errors[] = $language->get('user', 'unable_to_connect_to_authme_db');
                     } else {
                         // Success, check user exists in database and validate password
-                        $stmt = $authme_conn->prepare("SELECT password, ip FROM " . $authme_db['table'] . " WHERE realname = ?");
-                        if($stmt){
+                        $stmt = $authme_conn->prepare('SELECT password, ip FROM ' . $authme_db['table'] . ' WHERE realname = ?');
+
+                        if ($stmt){
                             $stmt->bind_param('s', Input::get('username'));
                             $stmt->execute();
                             $stmt->bind_result($password, $ip);
 
-                            while($stmt->fetch()){
+                            while ($stmt->fetch()){
                                 // Retrieve result
                             }
 
                             $stmt->free_result();
                             $stmt->close();
 
-                            if(is_null($password)){
+                            if (is_null($password)){
                                 $errors[] = $language->get('user', 'incorrect_details');
                             } else {
                                 // Validate inputted password against actual password
@@ -279,27 +290,27 @@ if(Input::exists()){
 
                                 switch($authme_db['hash']){
                                     case 'bcrypt':
-                                        require(ROOT_PATH . '/core/includes/password.php');
+                                        require (ROOT_PATH . '/core/includes/password.php');
 
-                                        if(password_verify($_POST['password'], $password)){
+                                        if (password_verify($_POST['password'], $password)){
                                             $valid = true;
-                                            $_SESSION['authme'] = array(
+                                            $_SESSION['authme'] = [
                                                 'user' => Output::getClean(Input::get('username')),
                                                 'pass' => $password,
                                                 'ip' => $ip
-                                            );
+                                            ];
                                         }
 
                                         break;
 
                                     case 'sha1':
-                                        if(sha1($_POST['password']) == $password){
+                                        if (sha1($_POST['password']) == $password){
                                             $valid = true;
-                                            $_SESSION['authme'] = array(
+                                            $_SESSION['authme'] = [
                                                 'user' => Output::getClean(Input::get('username')),
                                                 'pass' => $password,
                                                 'ip' => $ip
-                                            );
+                                            ];
                                         }
 
                                         break;
@@ -308,13 +319,13 @@ if(Input::exists()){
                                         $exploded = explode('$', $password);
                                         $salt = $exploded[2];
 
-                                        if($salt . hash('sha256', hash('sha256', $_POST['password']) . $salt) == $salt . $exploded[3]){
+                                        if ($salt . hash('sha256', hash('sha256', $_POST['password']) . $salt) == $salt . $exploded[3]){
                                             $valid = true;
-                                            $_SESSION['authme'] = array(
+                                            $_SESSION['authme'] = [
                                                 'user' => Output::getClean(Input::get('username')),
                                                 'pass' => ($salt . '$' . $exploded[3]),
                                                 'ip' => $ip
-                                            );
+                                            ];
                                         }
 
                                         break;
@@ -328,31 +339,28 @@ if(Input::exists()){
 
                                         $hashed = hash_pbkdf2('sha256', $_POST['password'], $salt, $iterations, 64, true);
 
-                                        if($hashed == hex2bin($pass)){
+                                        if ($hashed == hex2bin($pass)){
                                             $valid = true;
-                                            $_SESSION['authme'] = array(
+                                            $_SESSION['authme'] = [
                                                 'user' => Output::getClean(Input::get('username')),
                                                 'pass' => ($iterations . '$' . $salt . '$' . $pass),
                                                 'ip' => $ip
-                                            );
+                                            ];
                                         }
 
                                         break;
                                 }
 
-                                if($valid === true){
+                                if ($valid === true){
                                     // Passwords match
                                     // Continue to step 2
                                     Redirect::to(URL::build('/register', 'step=2'));
-                                    die();
 
-                                } else {
+                                    die();
+                                }
                                     // Passwords don't match
                                     $errors[] = $language->get('user', 'incorrect_details');
-                                }
-
                             }
-
                         } else {
                             $errors[] = $language->get('user', 'unable_to_connect_to_authme_db');
                         }
@@ -366,24 +374,26 @@ if(Input::exists()){
                             switch ($validation_error) {
                                 case (strpos($validation_error, 'username') !== false):
                                     $errors[] = $language->get('user', 'username_required');
+
                                     break;
+
                                 case (strpos($validation_error, 'password') !== false):
                                     $errors[] = $language->get('user', 'password_required');
+
                                     break;
+
                                 case (strpos($validation_error, 't_and_c') !== false):
                                     $errors[] = $language->get('user', 'accept_terms');
+
                                     break;
                             }
-                        } else if(strpos($validation_error, 'exists') !== false){
+                        } else if (strpos($validation_error, 'exists') !== false){
                             $errors[] = $language->get('user', 'authme_username_exists');
                         }
                     }
                 }
-
-            } else {
-                // Invalid recaotcha
-
             }
+                // Invalid recaotcha
         }
     } else {
         // Invalid token
@@ -391,12 +401,12 @@ if(Input::exists()){
     }
 }
 
-if(count($errors))
+if (count($errors))
     $smarty->assign('ERRORS', $errors);
 
-if(!isset($_GET['step'])){
+if (! isset($_GET['step'])){
     // Smarty
-    $smarty->assign(array(
+    $smarty->assign([
         'CONNECT_WITH_AUTHME' => $language->get('user', 'connect_with_authme'),
         'AUTHME_INFO' => $language->get('user', 'authme_help'),
         'USERNAME' => $language->get('user', 'username'),
@@ -405,10 +415,10 @@ if(!isset($_GET['step'])){
         'SUBMIT' => $language->get('general', 'submit'),
         'I_AGREE' => $language->get('user', 'i_agree'),
         'AGREE_TO_TERMS' => str_replace('{x}', URL::build('/terms'), $language->get('user', 'agree_t_and_c'))
-    ));
+    ]);
 
     // Recaptcha
-    if($recaptcha == 'true'){
+    if ($recaptcha == 'true'){
         $smarty->assign('RECAPTCHA', Output::getClean($recaptcha_key[0]->value));
     }
 
@@ -416,42 +426,42 @@ if(!isset($_GET['step'])){
 } else {
     // Step 2
     // Are custom usernames enabled?
-    $custom_usernames = $queries->getWhere("settings", array("name", "=", "displaynames"));
+    $custom_usernames = $queries->getWhere('settings', ['name', '=', 'displaynames']);
     $custom_usernames = $custom_usernames[0]->value;
 
-    if($custom_usernames == 'true') {
+    if ($custom_usernames == 'true') {
         $info = $language->get('user', 'authme_email_help_2');
         $smarty->assign('NICKNAME', $language->get('user', 'username'));
-    } else
-        $info = $language->get('user', 'authme_email_help_1');
+    } else $info = $language->get('user', 'authme_email_help_1');
 
-    $smarty->assign(array(
+    $smarty->assign([
         'CONNECT_WITH_AUTHME' => $language->get('user', 'connect_with_authme'),
         'AUTHME_SUCCESS' => $language->get('user', 'authme_account_linked'),
         'AUTHME_INFO' => $info,
         'EMAIL' => $language->get('user', 'email'),
         'TOKEN' => Token::generate(),
         'SUBMIT' => $language->get('general', 'submit')
-    ));
+    ]);
 
     $template_file = ROOT_PATH . '/custom/templates/' . TEMPLATE . '/authme_email.tpl';
 }
 
-if($recaptcha === "true"){
-	$template->addJSFiles(array(
-		'https://www.google.com/recaptcha/api.js' => array()
-	));
+if ($recaptcha === 'true'){
+    $template->addJSFiles([
+        'https://www.google.com/recaptcha/api.js' => []
+    ]);
 }
 
 // Load modules + template
-Module::loadPage($user, $pages, $cache, $smarty, array($navigation, $cc_nav, $mod_nav), $widgets, $template);
+Module::loadPage($user, $pages, $cache, $smarty, [$navigation, $cc_nav, $mod_nav], $widgets, $template);
 
 $page_load = microtime(true) - $start;
 define('PAGE_LOAD_TIME', str_replace('{x}', round($page_load, 3), $language->get('general', 'page_loaded_in')));
 
 $template->onPageLoad();
 
-require(ROOT_PATH . '/core/templates/navbar.php');
-require(ROOT_PATH . '/core/templates/footer.php');
+require (ROOT_PATH . '/core/templates/navbar.php');
+
+require (ROOT_PATH . '/core/templates/footer.php');
 
-$template->displayTemplate($template_file, $smarty);
\ No newline at end of file
+$template->displayTemplate($template_file, $smarty);
diff --git a/modules/Core/pages/complete_signup.php b/modules/Core/pages/complete_signup.php
index 78f659cea74827b81c868ac873032fc930df4814..ec47f611a7ec696533fc7bca4bd2f9c5b4b11941 100644
--- a/modules/Core/pages/complete_signup.php
+++ b/modules/Core/pages/complete_signup.php
@@ -13,68 +13,73 @@ $page = 'complete_signup';
 define('PAGE', 'complete_signup');
 $page_title = $language->get('general', 'register');
 
-require_once(ROOT_PATH . '/core/templates/frontend_init.php');
+require_once (ROOT_PATH . '/core/templates/frontend_init.php');
 
 // Load modules + template
-Module::loadPage($user, $pages, $cache, $smarty, array($navigation, $cc_nav, $mod_nav), $widgets, $template);
+Module::loadPage($user, $pages, $cache, $smarty, [$navigation, $cc_nav, $mod_nav], $widgets, $template);
 
 // Validate code
-if(!isset($_GET['c'])){
+if (! isset($_GET['c'])){
     Redirect::to(URL::build('/'));
+
     die();
-} else {
-    require(ROOT_PATH . '/core/includes/password.php');
+}
+
+    require (ROOT_PATH . '/core/includes/password.php');
 
     // Ensure API is enabled
-    $is_api_enabled = $queries->getWhere('settings', array('name', '=', 'use_api'));
-    if($is_api_enabled[0]->value != '1'){
-        $is_legacy_enabled = $queries->getWhere('settings', array('name', '=', 'use_legacy_api'));
-        if($is_legacy_enabled[0]->value != '1'){
+    $is_api_enabled = $queries->getWhere('settings', ['name', '=', 'use_api']);
+
+    if ($is_api_enabled[0]->value != '1'){
+        $is_legacy_enabled = $queries->getWhere('settings', ['name', '=', 'use_legacy_api']);
+
+        if ($is_legacy_enabled[0]->value != '1'){
             die('Legacy API is disabled');
         }
     }
 
-    if(!$user->isLoggedIn()){
-		$target_user = new User($_GET['c'], 'reset_code');
+    if (! $user->isLoggedIn()){
+        $target_user = new User($_GET['c'], 'reset_code');
+
         if ($target_user->data()) {
-            if(Input::exists()){
-                if(Token::check()){
+            if (Input::exists()){
+                if (Token::check()){
                     // Validate input
-                    $to_validation = array(
-                        'password' => array(
+                    $to_validation = [
+                        'password' => [
                             'required' => true,
                             'min' => 6,
                             'max' => 30
-                        ),
-                        'password_again' => array(
+                        ],
+                        'password_again' => [
                             'matches' => 'password'
-                        ),
-                        't_and_c' => array(
+                        ],
+                        't_and_c' => [
                             'required' => true,
                             'agree' => true
-                        )
-                    );
+                        ]
+                    ];
 
                     $validate = new Validate();
                     $validation = $validate->check($_POST, $to_validation);
 
-                    if($validation->passed()){
+                    if ($validation->passed()){
                         // Complete registration
                         // Hash password
-                        $password = password_hash(Input::get('password'), PASSWORD_BCRYPT, array("cost" => 13));
+                        $password = password_hash(Input::get('password'), PASSWORD_BCRYPT, ['cost' => 13]);
 
                         try {
-                            $target_user->update(array(
+                            $target_user->update([
                                 'password' => $password,
                                 'reset_code' => null,
                                 'last_online' => date('U'),
                                 'active' => 1
-                            ));
-                        } catch(Exception $e){
+                            ]);
+                        } catch (Exception $e){
                             die($e->getMessage());
                         }
 
-                        HookHandler::executeEvent('validateUser', array(
+                        HookHandler::executeEvent('validateUser', [
                             'event' => 'validateUser',
                             'user_id' => $target_user->data()->id,
                             'username' => $target_user->getDisplayname(),
@@ -83,41 +88,39 @@ if(!isset($_GET['c'])){
                             'avatar_url' => $target_user->getAvatar(null, 128, true),
                             'url' => Util::getSelfURL() . ltrim($target_user->getProfileURL(), '/'),
                             'language' => $language
-                        ));
+                        ]);
 
                         Session::flash('home', $language->get('user', 'validation_complete'));
                         Redirect::to(URL::build('/'));
-                        die();
 
-                    } else {
+                        die();
+                    }
                         // Errors
-                        $errors = array();
+                        $errors = [];
 
-                        foreach($validation->errors() as $validation_error){
-                            if(strpos($validation_error, 'is required') !== false){
+                        foreach ($validation->errors() as $validation_error){
+                            if (strpos($validation_error, 'is required') !== false){
                                 // x is required
                                 switch($validation_error){
                                     case (strpos($validation_error, 'password') !== false):
                                         $errors[] = $language->get('user', 'password_required');
+
                                         break;
+
                                     case (strpos($validation_error, 't_and_c') !== false):
                                         $errors[] = $language->get('user', 'accept_terms');
+
                                         break;
                                 }
-
-                            } else if(strpos($validation_error, 'minimum') !== false){
+                            } else if (strpos($validation_error, 'minimum') !== false){
                                 $errors[] = $language->get('user', 'password_minimum_6');
-
-                            } else if(strpos($validation_error, 'maximum') !== false){
+                            } else if (strpos($validation_error, 'maximum') !== false){
                                 $errors[] = $language->get('user', 'password_maximum_30');
-
-                            } else if(strpos($validation_error, 'must match') !== false){
+                            } else if (strpos($validation_error, 'must match') !== false){
                                 // password must match password again
                                 $errors[] = $language->get('user', 'passwords_dont_match');
                             }
                         }
-                    }
-
                 } else {
                     $errors[] = $language->get('general', 'invalid_token');
                 }
@@ -125,35 +128,37 @@ if(!isset($_GET['c'])){
         } else {
             Session::flash('home', $language->get('user', 'validation_error'));
             Redirect::to(URL::build('/'));
+
             die();
         }
     } else {
         Redirect::to(URL::build('/'));
+
         die();
     }
-}
 
 // Smarty variables
-if(isset($errors) && count($errors)){
-	$smarty->assign('ERRORS', $errors);
+if (isset($errors) && count($errors)){
+    $smarty->assign('ERRORS', $errors);
 }
 
-$smarty->assign(array(
-	'REGISTER' => $language->get('general', 'register'),
-	'PASSWORD' => $language->get('user', 'password'),
-	'CONFIRM_PASSWORD' => $language->get('user', 'confirm_password'),
-	'SUBMIT' => $language->get('general', 'submit'),
-	'I_AGREE' => $language->get('user', 'i_agree'),
-	'AGREE_TO_TERMS' => str_replace('{x}', URL::build('/terms'), $language->get('user', 'agree_t_and_c')),
-	'TOKEN' => Token::get()
-));
+$smarty->assign([
+    'REGISTER' => $language->get('general', 'register'),
+    'PASSWORD' => $language->get('user', 'password'),
+    'CONFIRM_PASSWORD' => $language->get('user', 'confirm_password'),
+    'SUBMIT' => $language->get('general', 'submit'),
+    'I_AGREE' => $language->get('user', 'i_agree'),
+    'AGREE_TO_TERMS' => str_replace('{x}', URL::build('/terms'), $language->get('user', 'agree_t_and_c')),
+    'TOKEN' => Token::get()
+]);
 
 $page_load = microtime(true) - $start;
 define('PAGE_LOAD_TIME', str_replace('{x}', round($page_load, 3), $language->get('general', 'page_loaded_in')));
 
 $template->onPageLoad();
 
-require(ROOT_PATH . '/core/templates/navbar.php');
-require(ROOT_PATH . '/core/templates/footer.php');
+require (ROOT_PATH . '/core/templates/navbar.php');
+
+require (ROOT_PATH . '/core/templates/footer.php');
 
 $template->displayTemplate('complete_signup.tpl', $smarty);
diff --git a/modules/Core/pages/contact.php b/modules/Core/pages/contact.php
index 89d70fb107c269a813ebd5b0a68500fe7f9fea15..0d266794c78bc6afcdfce9f8fbf72b460b475a2c 100644
--- a/modules/Core/pages/contact.php
+++ b/modules/Core/pages/contact.php
@@ -12,29 +12,30 @@
 // Always define page name
 define('PAGE', 'contact');
 $page_title = $language->get('general', 'contact');
-require_once(ROOT_PATH . '/core/templates/frontend_init.php');
+
+require_once (ROOT_PATH . '/core/templates/frontend_init.php');
 
 // Use recaptcha?
-$recaptcha = $queries->getWhere("settings", array("name", "=", "recaptcha"));
+$recaptcha = $queries->getWhere('settings', ['name', '=', 'recaptcha']);
 $recaptcha = $recaptcha[0]->value;
 
-$captcha_type = $queries->getWhere('settings', array('name', '=', 'recaptcha_type'));
+$captcha_type = $queries->getWhere('settings', ['name', '=', 'recaptcha_type']);
 $captcha_type = $captcha_type[0]->value;
 
-$recaptcha_key = $queries->getWhere("settings", array("name", "=", "recaptcha_key"));
-$recaptcha_secret = $queries->getWhere('settings', array('name', '=', 'recaptcha_secret'));
+$recaptcha_key = $queries->getWhere('settings', ['name', '=', 'recaptcha_key']);
+$recaptcha_secret = $queries->getWhere('settings', ['name', '=', 'recaptcha_secret']);
 
 // Handle input
-if(Input::exists()){
-  if(Token::check()){
+if (Input::exists()){
+  if (Token::check()){
     // Check last contact message sending time
-    if(!isset($_SESSION['last_contact_sent']) || (isset($_SESSION['last_contact_sent']) && $_SESSION['last_contact_sent'] < strtotime('-1 hour'))){
+    if (! isset($_SESSION['last_contact_sent']) || (isset($_SESSION['last_contact_sent']) && $_SESSION['last_contact_sent'] < strtotime('-1 hour'))){
         // Check recaptcha
-        if($recaptcha == 'true'){
-			// Check captcha
-			$url = $captcha_type === 'hCaptcha' ? 'https://hcaptcha.com/siteverify' : 'https://www.google.com/recaptcha/api/siteverify';
+        if ($recaptcha == 'true'){
+            // Check captcha
+            $url = $captcha_type === 'hCaptcha' ? 'https://hcaptcha.com/siteverify' : 'https://www.google.com/recaptcha/api/siteverify';
 
-			$post_data = 'secret=' . $recaptcha_secret[0]->value . '&response=' . ($captcha_type === 'hCaptcha' ? Input::get('h-captcha-response') : Input::get('g-recaptcha-response'));
+            $post_data = 'secret=' . $recaptcha_secret[0]->value . '&response=' . ($captcha_type === 'hCaptcha' ? Input::get('h-captcha-response') : Input::get('g-recaptcha-response'));
 
             $ch = curl_init($url);
             curl_setopt($ch, CURLOPT_POST, 1);
@@ -47,61 +48,60 @@ if(Input::exists()){
             $result = json_decode($result, true);
         } else {
             // reCAPTCHA is disabled
-            $result = array(
+            $result = [
                 'success' => 'true'
-            );
+            ];
         }
 
-        if(isset($result['success']) && $result['success'] == 'true'){
+        if (isset($result['success']) && $result['success'] == 'true'){
             // Validate input
             $validate = new Validate();
-            $validation = $validate->check($_POST, array(
-                'content' => array(
+            $validation = $validate->check($_POST, [
+                'content' => [
                     'required' => true,
                     'min' => 10,
                     'max' => 5000
-                ),
-                'email' => array(
+                ],
+                'email' => [
                     'required' => true,
                     'min' => 4,
                     'max' => 64,
-                )
-            ));
+                ]
+            ]);
 
-            if($validation->passed()){
+            if ($validation->passed()){
                 try {
-                    $php_mailer = $queries->getWhere('settings', array('name', '=', 'phpmailer'));
+                    $php_mailer = $queries->getWhere('settings', ['name', '=', 'phpmailer']);
                     $php_mailer = $php_mailer[0]->value;
 
-                    $contactemail = $queries->getWhere('settings', array('name', '=', 'incoming_email'));
+                    $contactemail = $queries->getWhere('settings', ['name', '=', 'incoming_email']);
                     $contactemail = $contactemail[0]->value;
 
                     if ($php_mailer == '1') {
                         // PHP Mailer
                         $html = Output::getClean(Input::get('content'));
 
-                        $email = array(
-                            'replyto' => array('email' => Output::getClean(Input::get('email')), 'name' => Output::getClean(Input::get('email'))),
-                            'to' => array('email' => Output::getClean($contactemail), 'name' => Output::getClean(SITE_NAME)),
+                        $email = [
+                            'replyto' => ['email' => Output::getClean(Input::get('email')), 'name' => Output::getClean(Input::get('email'))],
+                            'to' => ['email' => Output::getClean($contactemail), 'name' => Output::getClean(SITE_NAME)],
                             'subject' => SITE_NAME . ' - ' . $language->get('general', 'contact_email_subject'),
                             'message' => $html
-                        );
+                        ];
 
                         $sent = Email::send($email, 'mailer');
 
                         if (isset($sent['error'])) {
                             // Error, log it
-                            $queries->create('email_errors', array(
+                            $queries->create('email_errors', [
                                 'type' => 2, // 2 = contact
                                 'content' => $sent['error'],
                                 'at' => date('U'),
                                 'user_id' => ($user->isLoggedIn() ? $user->data()->id : null)
-                            ));
+                            ]);
                         }
-
                     } else {
                         // PHP mail function
-                        $siteemail = $queries->getWhere('settings', array('name', '=', 'outgoing_email'));
+                        $siteemail = $queries->getWhere('settings', ['name', '=', 'outgoing_email']);
                         $siteemail = $siteemail[0]->value;
 
                         $to = $contactemail;
@@ -113,28 +113,27 @@ if(Input::exists()){
                         $headers = 'From: ' . $siteemail . "\r\n" .
                             'Reply-To: ' . $fromemail . "\r\n" .
                             'X-Mailer: PHP/' . phpversion() . "\r\n" .
-                            'MIME-Version: 1.0' . "\r\n" . 
+                            'MIME-Version: 1.0' . "\r\n" .
                             'Content-type: text/html; charset=UTF-8' . "\r\n";
 
-                        $email = array(
+                        $email = [
                             'to' => $to,
                             'subject' => $subject,
                             'message' => $message,
                             'headers' => $headers
-                        );
+                        ];
 
                         $sent = Email::send($email, 'php');
 
                         if (isset($sent['error'])) {
                             // Error, log it
-                            $queries->create('email_errors', array(
+                            $queries->create('email_errors', [
                                 'type' => 2, // 2 = contact
                                 'content' => $sent['error'],
                                 'at' => date('U'),
                                 'user_id' => ($user->isLoggedIn() ? $user->data()->id : null)
-                            ));
+                            ]);
                         }
-
                     }
                 } catch (Exception $e) {
                     // Error
@@ -144,20 +143,21 @@ if(Input::exists()){
                 $_SESSION['last_contact_sent'] = date('U');
                 $success = $language->get('general', 'contact_message_sent');
             } else {
-                foreach($validation->errors() as $validation_error){
+                foreach ($validation->errors() as $validation_error){
                     switch($validation_error){
                         case (strpos($validation_error, 'content') !== false):
                             $errorcontent = $language->get('general', 'contact_message_failed');
+
                             break;
+
                         case (strpos($validation_error, 'email') !== false):
                             $erroremail = $language->get('general', 'contact_message_email');
+
                             break;
                     }
                 }
             }
-
-        } else
-            // Invalid recaptcha
+        } else // Invalid recaptcha
             $error = $language->get('user', 'invalid_recaptcha');
     } else {
         // TODO: This seems to never go down
@@ -174,48 +174,49 @@ if ($recaptcha === 'true') {
     $smarty->assign('RECAPTCHA', Output::getClean($recaptcha_key[0]->value));
 
     if ($captcha_type === 'hCaptcha') {
-        $template->addJSFiles(array(
-            'https://hcaptcha.com/1/api.js' => array()
-        ));
+        $template->addJSFiles([
+            'https://hcaptcha.com/1/api.js' => []
+        ]);
     } else {
-        $template->addJSFiles(array(
-            'https://www.google.com/recaptcha/api.js' => array()
-        ));
+        $template->addJSFiles([
+            'https://www.google.com/recaptcha/api.js' => []
+        ]);
     }
 }
 
-if(isset($error))
-	$smarty->assign('ERROR', $error);
+if (isset($error))
+    $smarty->assign('ERROR', $error);
 
-if(isset($erroremail))
-	$smarty->assign('ERROR_EMAIL', $erroremail);
+if (isset($erroremail))
+    $smarty->assign('ERROR_EMAIL', $erroremail);
 
-if(isset($errorcontent))
-	$smarty->assign('ERROR_CONTENT', $errorcontent);
+if (isset($errorcontent))
+    $smarty->assign('ERROR_CONTENT', $errorcontent);
 
-if(isset($success))
-	$smarty->assign('SUCCESS', $success);
+if (isset($success))
+    $smarty->assign('SUCCESS', $success);
 
-$smarty->assign(array(
-	'EMAIL' => $language->get('general', 'email_address'),
-	'CONTACT' => $language->get('general', 'contact'),
-	'MESSAGE' => $language->get('general', 'message'),
-	'TOKEN' => Token::get(),
-	'SUBMIT' => $language->get('general', 'submit'),
-	'ERROR_TITLE' => $language->get('general', 'error'),
-	'SUCCESS_TITLE' => $language->get('general', 'success'),
+$smarty->assign([
+    'EMAIL' => $language->get('general', 'email_address'),
+    'CONTACT' => $language->get('general', 'contact'),
+    'MESSAGE' => $language->get('general', 'message'),
+    'TOKEN' => Token::get(),
+    'SUBMIT' => $language->get('general', 'submit'),
+    'ERROR_TITLE' => $language->get('general', 'error'),
+    'SUCCESS_TITLE' => $language->get('general', 'success'),
     'CAPTCHA_CLASS' => $captcha_type === 'hCaptcha' ? 'h-captcha' : 'g-recaptcha'
-));
+]);
 
 // Load modules + template
-Module::loadPage($user, $pages, $cache, $smarty, array($navigation, $cc_nav, $mod_nav), $widgets, $template);
+Module::loadPage($user, $pages, $cache, $smarty, [$navigation, $cc_nav, $mod_nav], $widgets, $template);
 
 $page_load = microtime(true) - $start;
 define('PAGE_LOAD_TIME', str_replace('{x}', round($page_load, 3), $language->get('general', 'page_loaded_in')));
 
 $template->onPageLoad();
 
-require(ROOT_PATH . '/core/templates/navbar.php');
-require(ROOT_PATH . '/core/templates/footer.php');
+require (ROOT_PATH . '/core/templates/navbar.php');
+
+require (ROOT_PATH . '/core/templates/footer.php');
 
 $template->displayTemplate('contact.tpl', $smarty);
diff --git a/modules/Core/pages/custom.php b/modules/Core/pages/custom.php
index b52d03eb9a5a1ce54e06dca8e9e30d3a5cf7e159..4a17b52f7442b04e48585f27c64aaadd400d2eef 100644
--- a/modules/Core/pages/custom.php
+++ b/modules/Core/pages/custom.php
@@ -10,32 +10,38 @@
  */
 
 // Get page info from URL
-$custom_page = $queries->getWhere('custom_pages', array('url', '=', rtrim($route, '/')));
-if(!count($custom_page)){
-    require(ROOT_PATH . '/404.php');
+$custom_page = $queries->getWhere('custom_pages', ['url', '=', rtrim($route, '/')]);
+
+if (! count($custom_page)){
+    require (ROOT_PATH . '/404.php');
+
     die();
-} else
+}
     $custom_page = $custom_page[0];
 
 // Check permissions
-$perms = $queries->getWhere('custom_pages_permissions', array('page_id', '=', $custom_page->id));
-if($user->isLoggedIn()){
+$perms = $queries->getWhere('custom_pages_permissions', ['page_id', '=', $custom_page->id]);
+
+if ($user->isLoggedIn()){
     $groups = $user->getAllGroups();
-    foreach($groups as $group){
-        foreach($perms as $perm){
-            if($perm->group_id == $group){
-                if($perm->view == 1){
+
+    foreach ($groups as $group){
+        foreach ($perms as $perm){
+            if ($perm->group_id == $group){
+                if ($perm->view == 1){
                     $can_view = 1;
+
                     break 2;
-                } else
+                }
+
                     break;
             }
         }
     }
 } else {
-    foreach($perms as $perm){
-        if($perm->group_id == 0){
-            if($perm->view == 1)
+    foreach ($perms as $perm){
+        if ($perm->group_id == 0){
+            if ($perm->view == 1)
                 $can_view = 1;
 
             break;
@@ -43,51 +49,54 @@ if($user->isLoggedIn()){
     }
 }
 
-if(!isset($can_view)){
-    require(ROOT_PATH . '/403.php');
+if (! isset($can_view)){
+    require (ROOT_PATH . '/403.php');
+
     die();
 }
 
-if($custom_page->redirect) {
-	header("X-Robots-Tag: noindex, nofollow", true);
-	header('Location: ' . Output::getClean($custom_page->link));
+if ($custom_page->redirect) {
+    header('X-Robots-Tag: noindex, nofollow', true);
+    header('Location: ' . Output::getClean($custom_page->link));
 
-	die(str_replace('{x}', Output::getClean($custom_page->link), $language->get('general', 'redirecting_message')));
+    die(str_replace('{x}', Output::getClean($custom_page->link), $language->get('general', 'redirecting_message')));
 }
 
 // Always define page name
 define('PAGE', $custom_page->id);
 define('CUSTOM_PAGE', $custom_page->title);
 $page_title = Output::getClean($custom_page->title);
-require_once(ROOT_PATH . '/core/templates/frontend_init.php');
+
+require_once (ROOT_PATH . '/core/templates/frontend_init.php');
 
 // Load modules + template
-Module::loadPage($user, $pages, $cache, $smarty, array($navigation, $cc_nav, $mod_nav), $widgets, $template);
+Module::loadPage($user, $pages, $cache, $smarty, [$navigation, $cc_nav, $mod_nav], $widgets, $template);
 
-$smarty->assign(array(
+$smarty->assign([
     'WIDGETS_LEFT' => $widgets->getWidgets('left'),
     'WIDGETS_RIGHT' => $widgets->getWidgets('right'),
-	'CONTENT' => (($custom_page->all_html == 0) ? Output::getPurified(htmlspecialchars_decode($custom_page->content)) : htmlspecialchars_decode($custom_page->content))
-));
+    'CONTENT' => (($custom_page->all_html == 0) ? Output::getPurified(htmlspecialchars_decode($custom_page->content)) : htmlspecialchars_decode($custom_page->content))
+]);
 
-$template->addCSSFiles(array(
-	(defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/ckeditor/plugins/spoiler/css/spoiler.css' => array()
-));
+$template->addCSSFiles([
+    (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/ckeditor/plugins/spoiler/css/spoiler.css' => []
+]);
 
-$template->addJSFiles(array(
-	(defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/ckeditor/plugins/spoiler/js/spoiler.js' => array()
-));
+$template->addJSFiles([
+    (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/ckeditor/plugins/spoiler/js/spoiler.js' => []
+]);
 
 $page_load = microtime(true) - $start;
 define('PAGE_LOAD_TIME', str_replace('{x}', round($page_load, 3), $language->get('general', 'page_loaded_in')));
 
 $template->onPageLoad();
 
-require(ROOT_PATH . '/core/templates/navbar.php');
-require(ROOT_PATH . '/core/templates/footer.php');
+require (ROOT_PATH . '/core/templates/navbar.php');
+
+require (ROOT_PATH . '/core/templates/footer.php');
 
 if ($custom_page->basic) {
-	$template->displayTemplate('custom_basic.tpl', $smarty);
+    $template->displayTemplate('custom_basic.tpl', $smarty);
 } else {
-	$template->displayTemplate('custom.tpl', $smarty);
+    $template->displayTemplate('custom.tpl', $smarty);
 }
diff --git a/modules/Core/pages/forgot_password.php b/modules/Core/pages/forgot_password.php
index b879873146c09606766fce924f19f2b39586de9f..bf90dffc692704ce691ccaec4621652b173da5a4 100644
--- a/modules/Core/pages/forgot_password.php
+++ b/modules/Core/pages/forgot_password.php
@@ -12,59 +12,61 @@
 define('PAGE', 'forgot_password');
 
 $page_title = str_replace('?', '', $language->get('user', 'forgot_password'));
-require_once(ROOT_PATH . '/core/templates/frontend_init.php');
+
+require_once (ROOT_PATH . '/core/templates/frontend_init.php');
 
 // Ensure user is not logged in
 if ($user->isLoggedIn()) {
     Redirect::to(URL::build('/'));
+
     die();
 }
 
-require(ROOT_PATH . '/core/includes/password.php'); // For password hashing
+require (ROOT_PATH . '/core/includes/password.php'); // For password hashing
 
-if (!isset($_GET['c'])) {
+if (! isset($_GET['c'])) {
     // Enter email address form
     if (Input::exists()) {
         if (Token::check()) {
-            if (!isset($_POST['email']) || empty($_POST['email']))
+            if (! isset($_POST['email']) || empty($_POST['email']))
                 $error = $language->get('user', 'email_required');
             else {
                 // Check to see if the email exists
                 $target_user = new User(Input::get('email'), 'email');
+
                 if ($target_user->data()) {
                     // Generate a code
-                    $code = substr(str_shuffle("0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"), 0, 60);
+                    $code = substr(str_shuffle('0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'), 0, 60);
 
                     // Send an email
-                    $php_mailer = $queries->getWhere('settings', array('name', '=', 'phpmailer'));
+                    $php_mailer = $queries->getWhere('settings', ['name', '=', 'phpmailer']);
                     $php_mailer = $php_mailer[0]->value;
                     $link = rtrim(Util::getSelfURL(), '/') . URL::build('/forgot_password/', 'c=' . $code);
 
                     if ($php_mailer == '1') {
-
                         // PHP Mailer
-                        $email = array(
-                            'to' => array('email' => Output::getClean($target_user->data()->email), 'name' => $target_user->getDisplayname()),
+                        $email = [
+                            'to' => ['email' => Output::getClean($target_user->data()->email), 'name' => $target_user->getDisplayname()],
                             'subject' => SITE_NAME . ' - ' . $language->get('emails', 'change_password_subject'),
                             'message' => str_replace('[Link]', $link, Email::formatEmail('change_password', $language))
-                        );
+                        ];
 
                         $sent = Email::send($email, 'mailer');
 
                         if (isset($sent['error'])) {
                             // Error, log it
-                            $queries->create('email_errors', array(
+                            $queries->create('email_errors', [
                                 'type' => 3, // 3 = forgot password
                                 'content' => $sent['error'],
                                 'at' => date('U'),
                                 'user_id' => $target_user->data()->id
-                            ));
+                            ]);
 
                             $error = $language->get('user', 'unable_to_send_forgot_password_email');
                         }
                     } else {
                         // PHP mail function
-                        $siteemail = $queries->getWhere('settings', array('name', '=', 'outgoing_email'));
+                        $siteemail = $queries->getWhere('settings', ['name', '=', 'outgoing_email']);
                         $siteemail = $siteemail[0]->value;
 
                         $to = $target_user->data()->email;
@@ -78,39 +80,38 @@ if (!isset($_GET['c'])) {
                             'MIME-Version: 1.0' . "\r\n" .
                             'Content-type: text/html; charset=UTF-8' . "\r\n";
 
-                        $email = array(
+                        $email = [
                             'to' => $to,
                             'subject' => $subject,
                             'message' => $message,
                             'headers' => $headers
-                        );
+                        ];
 
                         $sent = Email::send($email, 'php');
 
                         if (isset($sent['error'])) {
                             // Error, log it
-                            $queries->create('email_errors', array(
+                            $queries->create('email_errors', [
                                 'type' => 3, // 3 = forgot password
                                 'content' => $sent['error'],
                                 'at' => date('U'),
                                 'user_id' => $target_user->data()->id
-                            ));
+                            ]);
 
                             $error = $language->get('user', 'unable_to_send_forgot_password_email');
                         }
                     }
 
-                    if (!isset($error)) {
-                        $target_user->update(array(
+                    if (! isset($error)) {
+                        $target_user->update([
                             'reset_code' => $code
-                        ));
+                        ]);
                     }
                 }
 
                 $success = $language->get('user', 'forgot_password_email_sent');
             }
-        } else
-            $error = $language->get('general', 'invalid_token');
+        } else $error = $language->get('general', 'invalid_token');
     }
 
     if (isset($error))
@@ -118,79 +119,87 @@ if (!isset($_GET['c'])) {
     else if (isset($success))
         $smarty->assign('SUCCESS', $success);
 
-    $smarty->assign(array(
+    $smarty->assign([
         'FORGOT_PASSWORD' => str_replace('?', '', $language->get('user', 'forgot_password')),
         'FORGOT_PASSWORD_INSTRUCTIONS' => $language->get('user', 'forgot_password_instructions'),
         'EMAIL_ADDRESS' => $language->get('user', 'email_address'),
         'TOKEN' => Token::get(),
         'SUBMIT' => $language->get('general', 'submit')
-    ));
+    ]);
 
     $page_load = microtime(true) - $start;
     define('PAGE_LOAD_TIME', str_replace('{x}', round($page_load, 3), $language->get('general', 'page_loaded_in')));
 
     // Load modules + template
-    Module::loadPage($user, $pages, $cache, $smarty, array($navigation, $cc_nav, $mod_nav), $widgets);
+    Module::loadPage($user, $pages, $cache, $smarty, [$navigation, $cc_nav, $mod_nav], $widgets);
     $template->onPageLoad();
 
-    require(ROOT_PATH . '/core/templates/navbar.php');
-    require(ROOT_PATH . '/core/templates/footer.php');
+    require (ROOT_PATH . '/core/templates/navbar.php');
+
+    require (ROOT_PATH . '/core/templates/footer.php');
 
     // Display template
     $template->displayTemplate('forgot_password.tpl', $smarty);
 } else {
     // Check code exists
     $target_user = new User($_GET['c'], 'reset_code');
-    if (!$target_user->data()) {
+
+    if (! $target_user->data()) {
         Redirect::to('/forgot_password');
+
         die();
     }
 
     if (Input::exists()) {
         if (Token::check()) {
             $validate = new Validate();
-            $validation = $validate->check($_POST, array(
-                'email' => array(
+            $validation = $validate->check($_POST, [
+                'email' => [
                     'required' => true
-                ),
-                'password' => array(
+                ],
+                'password' => [
                     'required' => true,
                     'min' => 6,
                     'max' => 30
-                ),
-                'password_again' => array(
+                ],
+                'password_again' => [
                     'matches' => 'password'
-                )
-            ));
+                ]
+            ]);
 
             if ($validation->passed()) {
                 if (strcasecmp($target_user->data()->email, $_POST['email']) == 0) {
-                    $new_password = password_hash(Input::get('password'), PASSWORD_BCRYPT, array("cost" => 13));
+                    $new_password = password_hash(Input::get('password'), PASSWORD_BCRYPT, ['cost' => 13]);
+
                     try {
-                        $target_user->update(array(
+                        $target_user->update([
                             'password' => $new_password,
                             'reset_code' => null
-                        ));
+                        ]);
 
                         Session::flash('login_success', $language->get('user', 'forgot_password_change_successful'));
                         Redirect::to(URL::build('/login'));
+
                         die();
                     } catch (Exception $e) {
-                        $errors = array($e->getMessage());
+                        $errors = [$e->getMessage()];
                     }
-                } else
-                    $errors = array($language->get('user', 'incorrect_email'));
+                } else $errors = [$language->get('user', 'incorrect_email')];
             } else {
-                $errors = array();
+                $errors = [];
+
                 foreach ($validation->errors() as $validation_error) {
                     if (strpos($validation_error, 'is required') !== false) {
                         // x is required
                         switch ($validation_error) {
                             case (strpos($validation_error, 'email') !== false):
                                 $errors[] = $language->get('user', 'email_required');
+
                                 break;
+
                             case (strpos($validation_error, 'password') !== false):
                                 $errors[] = $language->get('user', 'password_required');
+
                                 break;
                         }
                     } else if (strpos($validation_error, 'minimum') !== false) {
@@ -205,14 +214,13 @@ if (!isset($_GET['c'])) {
                     }
                 }
             }
-        } else
-            $errors = array($language->get('general', 'invalid_token'));
+        } else $errors = [$language->get('general', 'invalid_token')];
     }
 
     if (isset($errors) && count($errors))
         $smarty->assign('ERROR', $errors);
 
-    $smarty->assign(array(
+    $smarty->assign([
         'FORGOT_PASSWORD' => str_replace('?', '', $language->get('user', 'forgot_password')),
         'ENTER_NEW_PASSWORD' => $language->get('user', 'enter_new_password'),
         'EMAIL_ADDRESS' => $language->get('user', 'email_address'),
@@ -220,18 +228,19 @@ if (!isset($_GET['c'])) {
         'CONFIRM_PASSWORD' => $language->get('user', 'confirm_password'),
         'TOKEN' => Token::get(),
         'SUBMIT' => $language->get('general', 'submit')
-    ));
+    ]);
 
     // Load modules + template
-    Module::loadPage($user, $pages, $cache, $smarty, array($navigation, $cc_nav, $mod_nav), $widgets, $template);
+    Module::loadPage($user, $pages, $cache, $smarty, [$navigation, $cc_nav, $mod_nav], $widgets, $template);
 
     $page_load = microtime(true) - $start;
     define('PAGE_LOAD_TIME', str_replace('{x}', round($page_load, 3), $language->get('general', 'page_loaded_in')));
 
     $template->onPageLoad();
 
-    require(ROOT_PATH . '/core/templates/navbar.php');
-    require(ROOT_PATH . '/core/templates/footer.php');
+    require (ROOT_PATH . '/core/templates/navbar.php');
+
+    require (ROOT_PATH . '/core/templates/footer.php');
 
     // Display template
     $template->displayTemplate('change_password.tpl', $smarty);
diff --git a/modules/Core/pages/home.php b/modules/Core/pages/home.php
index e3d033cedb7a545a8e22726f481384be0d17b0cc..c1795f24ae9007efd1ca3475af4cf7c6bd4c30a5 100644
--- a/modules/Core/pages/home.php
+++ b/modules/Core/pages/home.php
@@ -12,38 +12,40 @@
 // Always define page name
 define('PAGE', 'index');
 $page_title = $language->get('general', 'home');
-require_once(ROOT_PATH . '/core/templates/frontend_init.php');
 
-$template->addCSSFiles(array(
-	(defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/prism/prism.css' => array(),
-	(defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/tinymce/plugins/spoiler/css/spoiler.css' => array()
-));
+require_once (ROOT_PATH . '/core/templates/frontend_init.php');
 
-$template->addJSFiles(array(
-	(defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/prism/prism.js' => array(),
-	(defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/tinymce/plugins/spoiler/js/spoiler.js' => array()
-));
+$template->addCSSFiles([
+    (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/prism/prism.css' => [],
+    (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/tinymce/plugins/spoiler/css/spoiler.css' => []
+]);
 
-if(Session::exists('home')){
+$template->addJSFiles([
+    (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/prism/prism.js' => [],
+    (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/tinymce/plugins/spoiler/js/spoiler.js' => []
+]);
+
+if (Session::exists('home')){
     $smarty->assign('HOME_SESSION_FLASH', Session::flash('home'));
     $smarty->assign('SUCCESS_TITLE', $language->get('general', 'success'));
 }
-if(Session::exists('home_error')){
+
+if (Session::exists('home_error')){
     $smarty->assign('HOME_SESSION_ERROR_FLASH', Session::flash('home_error'));
     $smarty->assign('ERROR_TITLE', $language->get('general', 'error'));
 }
 
-if(isset($front_page_modules)){
-	foreach($front_page_modules as $module){
-		require(ROOT_PATH . '/' . $module);
-	}
+if (isset($front_page_modules)){
+    foreach ($front_page_modules as $module){
+        require (ROOT_PATH . '/' . $module);
+    }
 }
 
 // Assign to Smarty variables
 $smarty->assign('SOCIAL', $language->get('general', 'social'));
 
 // Load modules + template
-Module::loadPage($user, $pages, $cache, $smarty, array($navigation, $cc_nav, $mod_nav), $widgets, $template);
+Module::loadPage($user, $pages, $cache, $smarty, [$navigation, $cc_nav, $mod_nav], $widgets, $template);
 
 $page_load = microtime(true) - $start;
 define('PAGE_LOAD_TIME', str_replace('{x}', round($page_load, 3), $language->get('general', 'page_loaded_in')));
@@ -53,9 +55,9 @@ $template->onPageLoad();
 $smarty->assign('WIDGETS_LEFT', $widgets->getWidgets('left'));
 $smarty->assign('WIDGETS_RIGHT', $widgets->getWidgets('right'));
 
+require (ROOT_PATH . '/core/templates/navbar.php');
 
-require(ROOT_PATH . '/core/templates/navbar.php');
-require(ROOT_PATH . '/core/templates/footer.php');
+require (ROOT_PATH . '/core/templates/footer.php');
 
 // Display template
-$template->displayTemplate('index.tpl', $smarty);
\ No newline at end of file
+$template->displayTemplate('index.tpl', $smarty);
diff --git a/modules/Core/pages/index.php b/modules/Core/pages/index.php
index 45e62b0cc79bb8c7d460b646925f3025de5e3dcd..96c9168a87bd042f4309d94c3efc50bd900c5ea9 100644
--- a/modules/Core/pages/index.php
+++ b/modules/Core/pages/index.php
@@ -13,5 +13,5 @@
 $cache->setCache('portal_cache');
 $use_portal = $cache->retrieve('portal');
 
-if($use_portal !== 1) require('home.php');
-else require('portal.php');
+if ($use_portal !== 1) require ('home.php');
+else require ('portal.php');
diff --git a/modules/Core/pages/login.php b/modules/Core/pages/login.php
index 0fe02db31eb747bf94a6278abbc0f14c3f1ebb12..3981b416d3810b507db9411d567ae9f99a995a67 100644
--- a/modules/Core/pages/login.php
+++ b/modules/Core/pages/login.php
@@ -12,342 +12,345 @@
 // Set page name variable
 define('PAGE', 'login');
 $page_title = $language->get('general', 'sign_in');
-require_once(ROOT_PATH . '/core/templates/frontend_init.php');
+
+require_once (ROOT_PATH . '/core/templates/frontend_init.php');
 
 // Requirements
-require(ROOT_PATH . '/core/includes/password.php'); // For password hashing
-require(ROOT_PATH . '/core/includes/phpass.php'); // phpass for Wordpress auth
-require(ROOT_PATH . '/core/includes/tfa/autoload.php'); // Two Factor Auth
+require (ROOT_PATH . '/core/includes/password.php'); // For password hashing
+
+require (ROOT_PATH . '/core/includes/phpass.php'); // phpass for Wordpress auth
+
+require (ROOT_PATH . '/core/includes/tfa/autoload.php'); // Two Factor Auth
 
 // Ensure user isn't already logged in
 if ($user->isLoggedIn()) {
-	Redirect::to(URL::build('/'));
-	die();
+    Redirect::to(URL::build('/'));
+
+    die();
 }
 
 // Get login method
-$method = $queries->getWhere('settings', array('name', '=', 'login_method'));
+$method = $queries->getWhere('settings', ['name', '=', 'login_method']);
 $method = $method[0]->value;
 
 // Use recaptcha?
-$recaptcha = $queries->getWhere('settings', array('name', '=', 'recaptcha_login'));
+$recaptcha = $queries->getWhere('settings', ['name', '=', 'recaptcha_login']);
 $recaptcha = count($recaptcha) ? $recaptcha[0]->value : 'false';
 
-$captcha_type = $queries->getWhere('settings', array('name', '=', 'recaptcha_type'));
+$captcha_type = $queries->getWhere('settings', ['name', '=', 'recaptcha_type']);
 $captcha_type = $captcha_type[0]->value;
 
-$recaptcha_key = $queries->getWhere("settings", array("name", "=", "recaptcha_key"));
-$recaptcha_secret = $queries->getWhere('settings', array('name', '=', 'recaptcha_secret'));
+$recaptcha_key = $queries->getWhere('settings', ['name', '=', 'recaptcha_key']);
+$recaptcha_secret = $queries->getWhere('settings', ['name', '=', 'recaptcha_secret']);
 
 // Deal with input
 if (Input::exists()) {
-	// Check form token
-	if (Token::check()) {
-		// Valid token
-		if (!isset($_SESSION['tfa']) && $recaptcha == 'true') {
-			// Check captcha
-			$url = $captcha_type === 'hCaptcha' ? 'https://hcaptcha.com/siteverify' : 'https://www.google.com/recaptcha/api/siteverify';
-
-			$post_data = 'secret=' . $recaptcha_secret[0]->value . '&response=' . ($captcha_type === 'hCaptcha' ? Input::get('h-captcha-response') : Input::get('g-recaptcha-response'));
-
-			$ch = curl_init($url);
-			curl_setopt($ch, CURLOPT_POST, 1);
-			curl_setopt($ch, CURLOPT_POSTFIELDS, $post_data);
-			curl_setopt($ch, CURLOPT_HEADER, 0);
-			curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
-
-			$result = curl_exec($ch);
-
-			$result = json_decode($result, true);
-		} else {
-			// reCAPTCHA is disabled
-			$result = array(
-				'success' => 'true'
-			);
-		}
-
-		if (isset($result['success']) && $result['success'] == 'true') {
-			if (isset($_SESSION['password'])) {
-				if (isset($_SESSION['username'])) {
-					$_POST['username'] = $_SESSION['username'];
-					unset($_SESSION['username']);
-				} else if (isset($_SESSION['email'])) {
-					$_POST['email'] = $_SESSION['email'];
-					unset($_SESSION['email']);
-				}
-
-				$_POST['remember'] = $_SESSION['remember'];
-				$_POST['password'] = $_SESSION['password'];
-
-				unset($_SESSION['remember']);
-				unset($_SESSION['password']);
-				unset($_SESSION['tfa']);
-			}
-
-			// Initialise validation
-			$validate = new Validate();
-			if ($method == 'email')
-				$to_validate = array(
-					'email' => array('required' => true, 'isbanned' => true, 'isactive' => true),
-					'password' => array('required' => true)
-				);
-			else
-				$to_validate = array(
-					'username' => array('required' => true, 'isbanned' => true, 'isactive' => true),
-					'password' => array('required' => true)
-				);
-
-			$validation = $validate->check($_POST, $to_validate);
-
-			// Check if validation passed
-			if ($validation->passed()) {
-				if ($method == 'email')
-					$username = Input::get('email');
-				else
-					$username = Input::get('username');
-
-				$user_query = new User($username, $method);
-				if ($user_query->data()) {
-					if ($user_query->data()->tfa_enabled == 1 && $user_query->data()->tfa_complete == 1) {
-						// Verify password first
-						if ($user->checkCredentials($username, Input::get('password'), $method)) {
-							if (!isset($_POST['tfa_code'])) {
-								if ($user_query->data()->tfa_type == 0) {
-									// Emails
-									// TODO
-
-								} else {
-									// App
-									require(ROOT_PATH . '/core/includes/tfa_signin.php');
-									die();
-								}
-							} else {
-								// Validate code
-								if ($user_query->data()->tfa_type == 1) {
-									// App
-									$tfa = new \RobThree\Auth\TwoFactorAuth('NamelessMC');
-
-									if ($tfa->verifyCode($user_query->data()->tfa_secret, $_POST['tfa_code']) !== true) {
-										Session::flash('tfa_signin', $language->get('user', 'invalid_tfa'));
-										require(ROOT_PATH . '/core/includes/tfa_signin.php');
-										die();
-									}
-								} else {
-									// Email
-									// TODO
-								}
-							}
-						} else {
-							$return_error = array($language->get('user', 'incorrect_details'));
-						}
-					}
-
-					if (!isset($return_error)) {
-
-						// Validation passed
-						// Initialise user class
-						$user = new User();
-
-						// Did the user check 'remember me'?
-						$remember = (Input::get('remember') == 1) ? true : false;
-
-						// Is Minecraft and AuthMe integration enabled?
-						$minecraft = $queries->getWhere('settings', array('name', '=', 'mc_integration'));
-						$minecraft = $minecraft[0]->value;
-
-						$authme_enabled = $queries->getWhere('settings', array('name', '=', 'authme'));
-						$authme_enabled = $authme_enabled[0]->value;
-
-						$cache->setCache('authme_cache');
-						$authme_db = $cache->retrieve('authme');
-
-						if ($minecraft == '1' && $authme_enabled == '1' && $authme_db['sync'] == '1') {
-
-							// Sync AuthMe password
-							try {
-								$authme_conn = new mysqli($authme_db['address'], $authme_db['user'], $authme_db['pass'], $authme_db['db'], $authme_db['port']);
-
-								if ($authme_conn->connect_errno) {
-									// Connection error
-									// Continue anyway, and use already stored password
-								} else {
-									// Success, check user exists in database and validate password
-									if ($method == 'email')
-										$field = 'email';
-									else
-										$field = 'realname';
-
-									$stmt = $authme_conn->prepare("SELECT password FROM " . $authme_db['table'] . " WHERE " . $field . " = ?");
-									if ($stmt) {
-										$stmt->bind_param('s', $username);
-										$stmt->execute();
-										$stmt->bind_result($password);
-
-										while ($stmt->fetch()) {
-											// Retrieve result
-										}
-
-										$stmt->free_result();
-										$stmt->close();
-
-										switch ($authme_db['hash']) {
-											case 'sha256':
-												$exploded = explode('$', $password);
-												$salt = $exploded[2];
-
-												$password = $salt . '$' . $exploded[3];
-
-												break;
-
-											case 'pbkdf2':
-												$exploded = explode('$', $password);
-
-												$iterations = $exploded[1];
-												$salt = $exploded[2];
-												$pass = $exploded[3];
-
-												$password = $iterations . '$' . $salt . '$' . $pass;
-
-												break;
-										}
-
-										// Update password
-										if (!is_null($password)) {
-											if ($method == 'email')
-												$user_id = $user->emailToId($username);
-											else
-												$user_id = $user->nameToId($username);
-
-											$queries->update('users', $user_id, array(
-												'password' => $password,
-												'pass_method' => $authme_db['hash']
-											));
-										}
-									}
-								}
-							} catch (Exception $e) {
-								// Error, continue as we can use the already stored password
-							}
-						}
-
-						$login = $user->login($username, Input::get('password'), $remember, $method);
-
-						// Successful login?
-						if ($login) {
-							// Yes
-							Log::getInstance()->log(Log::Action('user/login'));
-
-							// Redirect to a certain page?
-							if (isset($_SESSION['last_page']) && substr($_SESSION['last_page'], -1) != '=') {
-								Redirect::to($_SESSION['last_page']);
-								die();
-							} else {
-								Session::flash('home', $language->get('user', 'successful_login'));
-								Redirect::to(URL::build('/'));
-								die();
-							}
-						} else {
-							// No, output error
-							$return_error = array($language->get('user', 'incorrect_details'));
-						}
-					}
-				} else $return_error = array($language->get('user', 'incorrect_details'));
-			} else {
-				// Validation failed
-				$return_error = array();
-				foreach ($validation->errors() as $error) {
-					if (strpos($error, 'is required') !== false) {
-						if (strpos($error, 'username') !== false) {
-							// Empty username field
-							$return_error[] = $language->get('user', 'must_input_username');
-						} else if (strpos($error, 'email') !== false) {
-							// Empty email field
-							$return_error[] = $language->get('user', 'must_input_email');
-						} else if (strpos($error, 'password') !== false) {
-							// Empty password field
-							$return_error[] = $language->get('user', 'must_input_password');
-						}
-					}
-					if (strpos($error, 'active') !== false) {
-						// Account hasn't been activated
-						$return_error[] = $language->get('user', 'inactive_account');
-					}
-					if (strpos($error, 'banned') !== false) {
-						// Account is banned
-						$return_error[] = $language->get('user', 'account_banned');
-					}
-				}
-			}
-		} else {
-			// reCAPTCHA failed
-			$return_error = array($language->get('user', 'invalid_recaptcha'));
-		}
-	} else {
-		// Invalid token
-		$return_error = array($language->get('general', 'invalid_token'));
-	}
+    // Check form token
+    if (Token::check()) {
+        // Valid token
+        if (! isset($_SESSION['tfa']) && $recaptcha == 'true') {
+            // Check captcha
+            $url = $captcha_type === 'hCaptcha' ? 'https://hcaptcha.com/siteverify' : 'https://www.google.com/recaptcha/api/siteverify';
+
+            $post_data = 'secret=' . $recaptcha_secret[0]->value . '&response=' . ($captcha_type === 'hCaptcha' ? Input::get('h-captcha-response') : Input::get('g-recaptcha-response'));
+
+            $ch = curl_init($url);
+            curl_setopt($ch, CURLOPT_POST, 1);
+            curl_setopt($ch, CURLOPT_POSTFIELDS, $post_data);
+            curl_setopt($ch, CURLOPT_HEADER, 0);
+            curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
+
+            $result = curl_exec($ch);
+
+            $result = json_decode($result, true);
+        } else {
+            // reCAPTCHA is disabled
+            $result = [
+                'success' => 'true'
+            ];
+        }
+
+        if (isset($result['success']) && $result['success'] == 'true') {
+            if (isset($_SESSION['password'])) {
+                if (isset($_SESSION['username'])) {
+                    $_POST['username'] = $_SESSION['username'];
+                    unset($_SESSION['username']);
+                } else if (isset($_SESSION['email'])) {
+                    $_POST['email'] = $_SESSION['email'];
+                    unset($_SESSION['email']);
+                }
+
+                $_POST['remember'] = $_SESSION['remember'];
+                $_POST['password'] = $_SESSION['password'];
+
+                unset($_SESSION['remember'], $_SESSION['password'], $_SESSION['tfa']);
+            }
+
+            // Initialise validation
+            $validate = new Validate();
+
+            if ($method == 'email')
+                $to_validate = [
+                    'email' => ['required' => true, 'isbanned' => true, 'isactive' => true],
+                    'password' => ['required' => true]
+                ];
+            else $to_validate = [
+                    'username' => ['required' => true, 'isbanned' => true, 'isactive' => true],
+                    'password' => ['required' => true]
+                ];
+
+            $validation = $validate->check($_POST, $to_validate);
+
+            // Check if validation passed
+            if ($validation->passed()) {
+                if ($method == 'email')
+                    $username = Input::get('email');
+                else $username = Input::get('username');
+
+                $user_query = new User($username, $method);
+
+                if ($user_query->data()) {
+                    if ($user_query->data()->tfa_enabled == 1 && $user_query->data()->tfa_complete == 1) {
+                        // Verify password first
+                        if ($user->checkCredentials($username, Input::get('password'), $method)) {
+                            if (! isset($_POST['tfa_code'])) {
+                                if ($user_query->data()->tfa_type == 0) {
+                                    // Emails
+                                    // TODO
+                                } else {
+                                    // App
+                                    require (ROOT_PATH . '/core/includes/tfa_signin.php');
+
+                                    die();
+                                }
+                            } else {
+                                // Validate code
+                                if ($user_query->data()->tfa_type == 1) {
+                                    // App
+                                    $tfa = new \RobThree\Auth\TwoFactorAuth('NamelessMC');
+
+                                    if ($tfa->verifyCode($user_query->data()->tfa_secret, $_POST['tfa_code']) !== true) {
+                                        Session::flash('tfa_signin', $language->get('user', 'invalid_tfa'));
+
+                                        require (ROOT_PATH . '/core/includes/tfa_signin.php');
+
+                                        die();
+                                    }
+                                }
+                                    // Email
+                                    // TODO
+                            }
+                        } else {
+                            $return_error = [$language->get('user', 'incorrect_details')];
+                        }
+                    }
+
+                    if (! isset($return_error)) {
+                        // Validation passed
+                        // Initialise user class
+                        $user = new User();
+
+                        // Did the user check 'remember me'?
+                        $remember = (Input::get('remember') == 1) ? true : false;
+
+                        // Is Minecraft and AuthMe integration enabled?
+                        $minecraft = $queries->getWhere('settings', ['name', '=', 'mc_integration']);
+                        $minecraft = $minecraft[0]->value;
+
+                        $authme_enabled = $queries->getWhere('settings', ['name', '=', 'authme']);
+                        $authme_enabled = $authme_enabled[0]->value;
+
+                        $cache->setCache('authme_cache');
+                        $authme_db = $cache->retrieve('authme');
+
+                        if ($minecraft == '1' && $authme_enabled == '1' && $authme_db['sync'] == '1') {
+                            // Sync AuthMe password
+                            try {
+                                $authme_conn = new mysqli($authme_db['address'], $authme_db['user'], $authme_db['pass'], $authme_db['db'], $authme_db['port']);
+
+                                if ($authme_conn->connect_errno) {
+                                    // Connection error
+                                    // Continue anyway, and use already stored password
+                                } else {
+                                    // Success, check user exists in database and validate password
+                                    if ($method == 'email')
+                                        $field = 'email';
+                                    else $field = 'realname';
+
+                                    $stmt = $authme_conn->prepare('SELECT password FROM ' . $authme_db['table'] . ' WHERE ' . $field . ' = ?');
+
+                                    if ($stmt) {
+                                        $stmt->bind_param('s', $username);
+                                        $stmt->execute();
+                                        $stmt->bind_result($password);
+
+                                        while ($stmt->fetch()) {
+                                            // Retrieve result
+                                        }
+
+                                        $stmt->free_result();
+                                        $stmt->close();
+
+                                        switch ($authme_db['hash']) {
+                                            case 'sha256':
+                                                $exploded = explode('$', $password);
+                                                $salt = $exploded[2];
+
+                                                $password = $salt . '$' . $exploded[3];
+
+                                                break;
+
+                                            case 'pbkdf2':
+                                                $exploded = explode('$', $password);
+
+                                                $iterations = $exploded[1];
+                                                $salt = $exploded[2];
+                                                $pass = $exploded[3];
+
+                                                $password = $iterations . '$' . $salt . '$' . $pass;
+
+                                                break;
+                                        }
+
+                                        // Update password
+                                        if (! is_null($password)) {
+                                            if ($method == 'email')
+                                                $user_id = $user->emailToId($username);
+                                            else $user_id = $user->nameToId($username);
+
+                                            $queries->update('users', $user_id, [
+                                                'password' => $password,
+                                                'pass_method' => $authme_db['hash']
+                                            ]);
+                                        }
+                                    }
+                                }
+                            } catch (Exception $e) {
+                                // Error, continue as we can use the already stored password
+                            }
+                        }
+
+                        $login = $user->login($username, Input::get('password'), $remember, $method);
+
+                        // Successful login?
+                        if ($login) {
+                            // Yes
+                            Log::getInstance()->log(Log::Action('user/login'));
+
+                            // Redirect to a certain page?
+                            if (isset($_SESSION['last_page']) && substr($_SESSION['last_page'], -1) != '=') {
+                                Redirect::to($_SESSION['last_page']);
+
+                                die();
+                            }
+                                Session::flash('home', $language->get('user', 'successful_login'));
+                                Redirect::to(URL::build('/'));
+
+                                die();
+                        }
+                            // No, output error
+                            $return_error = [$language->get('user', 'incorrect_details')];
+                    }
+                } else $return_error = [$language->get('user', 'incorrect_details')];
+            } else {
+                // Validation failed
+                $return_error = [];
+
+                foreach ($validation->errors() as $error) {
+                    if (strpos($error, 'is required') !== false) {
+                        if (strpos($error, 'username') !== false) {
+                            // Empty username field
+                            $return_error[] = $language->get('user', 'must_input_username');
+                        } else if (strpos($error, 'email') !== false) {
+                            // Empty email field
+                            $return_error[] = $language->get('user', 'must_input_email');
+                        } else if (strpos($error, 'password') !== false) {
+                            // Empty password field
+                            $return_error[] = $language->get('user', 'must_input_password');
+                        }
+                    }
+
+                    if (strpos($error, 'active') !== false) {
+                        // Account hasn't been activated
+                        $return_error[] = $language->get('user', 'inactive_account');
+                    }
+
+                    if (strpos($error, 'banned') !== false) {
+                        // Account is banned
+                        $return_error[] = $language->get('user', 'account_banned');
+                    }
+                }
+            }
+        } else {
+            // reCAPTCHA failed
+            $return_error = [$language->get('user', 'invalid_recaptcha')];
+        }
+    } else {
+        // Invalid token
+        $return_error = [$language->get('general', 'invalid_token')];
+    }
 }
 
 // Sign in template
 // Generate content
 if ($method == 'email')
-	$smarty->assign('EMAIL', $language->get('user', 'email'));
+    $smarty->assign('EMAIL', $language->get('user', 'email'));
 else {
-	if (MINECRAFT)
-		$smarty->assign('USERNAME', $language->get('user', 'minecraft_username'));
-	else
-		$smarty->assign('USERNAME', $language->get('user', 'username'));
+    if (MINECRAFT)
+        $smarty->assign('USERNAME', $language->get('user', 'minecraft_username'));
+    else $smarty->assign('USERNAME', $language->get('user', 'username'));
 }
 
-$smarty->assign(array(
-	'USERNAME_INPUT' => ($method == 'email' ? Output::getClean(Input::get('email')) : Output::getClean(Input::get('username'))),
-	'PASSWORD' => $language->get('user', 'password'),
-	'REMEMBER_ME' => $language->get('user', 'remember_me'),
-	'FORGOT_PASSWORD_URL' => URL::build('/forgot_password'),
-	'FORGOT_PASSWORD' => $language->get('user', 'forgot_password'),
-	'FORM_TOKEN' => Token::get(),
-	'SIGN_IN' => $language->get('general', 'sign_in'),
-	'REGISTER_URL' => URL::build('/register'),
-	'REGISTER' => $language->get('general', 'register'),
-	'ERROR_TITLE' => $language->get('general', 'error'),
-	'ERROR' => (isset($return_error) ? $return_error : array()),
-	'NOT_REGISTERED_YET' => $language->get('general', 'not_registered_yet'),
-	'CAPTCHA_CLASS' => $captcha_type === 'hCaptcha' ? 'h-captcha' : 'g-recaptcha'
-));
+$smarty->assign([
+    'USERNAME_INPUT' => ($method == 'email' ? Output::getClean(Input::get('email')) : Output::getClean(Input::get('username'))),
+    'PASSWORD' => $language->get('user', 'password'),
+    'REMEMBER_ME' => $language->get('user', 'remember_me'),
+    'FORGOT_PASSWORD_URL' => URL::build('/forgot_password'),
+    'FORGOT_PASSWORD' => $language->get('user', 'forgot_password'),
+    'FORM_TOKEN' => Token::get(),
+    'SIGN_IN' => $language->get('general', 'sign_in'),
+    'REGISTER_URL' => URL::build('/register'),
+    'REGISTER' => $language->get('general', 'register'),
+    'ERROR_TITLE' => $language->get('general', 'error'),
+    'ERROR' => (isset($return_error) ? $return_error : []),
+    'NOT_REGISTERED_YET' => $language->get('general', 'not_registered_yet'),
+    'CAPTCHA_CLASS' => $captcha_type === 'hCaptcha' ? 'h-captcha' : 'g-recaptcha'
+]);
 
 if (isset($return_error)) {
-	$smarty->assign('SESSION_FLASH', $return_error);
+    $smarty->assign('SESSION_FLASH', $return_error);
 } else {
-	$smarty->assign('SESSION_FLASH', '');
+    $smarty->assign('SESSION_FLASH', '');
 }
 
 if (Session::exists('login_success'))
-	$smarty->assign('SUCCESS', Session::flash('login_success'));
+    $smarty->assign('SUCCESS', Session::flash('login_success'));
 
 if ($recaptcha === 'true') {
-	$smarty->assign('RECAPTCHA', Output::getClean($recaptcha_key[0]->value));
-
-	if ($captcha_type === 'hCaptcha') {
-		$template->addJSFiles(array(
-			'https://hcaptcha.com/1/api.js' => array()
-		));
-	} else {
-		$template->addJSFiles(array(
-			'https://www.google.com/recaptcha/api.js' => array()
-		));
-	}
+    $smarty->assign('RECAPTCHA', Output::getClean($recaptcha_key[0]->value));
+
+    if ($captcha_type === 'hCaptcha') {
+        $template->addJSFiles([
+            'https://hcaptcha.com/1/api.js' => []
+        ]);
+    } else {
+        $template->addJSFiles([
+            'https://www.google.com/recaptcha/api.js' => []
+        ]);
+    }
 }
 
 // Load modules + template
-Module::loadPage($user, $pages, $cache, $smarty, array($navigation, $cc_nav, $mod_nav), $widgets, $template);
+Module::loadPage($user, $pages, $cache, $smarty, [$navigation, $cc_nav, $mod_nav], $widgets, $template);
 
 $page_load = microtime(true) - $start;
 define('PAGE_LOAD_TIME', str_replace('{x}', round($page_load, 3), $language->get('general', 'page_loaded_in')));
 
 $template->onPageLoad();
 
-require(ROOT_PATH . '/core/templates/navbar.php');
-require(ROOT_PATH . '/core/templates/footer.php');
+require (ROOT_PATH . '/core/templates/navbar.php');
+
+require (ROOT_PATH . '/core/templates/footer.php');
 
 // Display template
 $template->displayTemplate('login.tpl', $smarty);
diff --git a/modules/Core/pages/logout.php b/modules/Core/pages/logout.php
index 74ed6678d6ec00099c1bad4c8380151bf78865cd..db8dce9a5d8b1c656ac25e77a3f08d500e4f14ad 100644
--- a/modules/Core/pages/logout.php
+++ b/modules/Core/pages/logout.php
@@ -9,15 +9,15 @@
  *  Log user out
  */
 
-if($user->isLoggedIn()){
-	Log::getInstance()->log(Log::Action('user/logout'));
-	$user->admLogout();
-	$user->logout();
-	
-	Session::flash('home', $language->get('user', 'successfully_logged_out'));
-	Redirect::to(URL::build('/'));
+if ($user->isLoggedIn()){
+    Log::getInstance()->log(Log::Action('user/logout'));
+    $user->admLogout();
+    $user->logout();
+    
+    Session::flash('home', $language->get('user', 'successfully_logged_out'));
+    Redirect::to(URL::build('/'));
 } else {
-	Redirect::to(URL::build('/'));
+    Redirect::to(URL::build('/'));
 }
 
 die(); // Ensure the script is killed
diff --git a/modules/Core/pages/minecraft/banner.php b/modules/Core/pages/minecraft/banner.php
index c84ae0cc3f79a2030944fd69b301a82d7418122e..7efd3e24c58786fdb80e0d97bb2365b370d20918 100644
--- a/modules/Core/pages/minecraft/banner.php
+++ b/modules/Core/pages/minecraft/banner.php
@@ -11,58 +11,59 @@
 
 define('PAGE', 'banner');
 
-if(!function_exists('exif_imagetype'))
-	die('exif_imagetype is required to use server banners.');
+if (! function_exists('exif_imagetype'))
+    die('exif_imagetype is required to use server banners.');
 
 // Minecraft integration?
-if(defined('MINECRAFT') && MINECRAFT === true){
-    if(isset($directories[count($directories) - 1]) && !empty($directories[count($directories) - 1])){
+if (defined('MINECRAFT') && MINECRAFT === true){
+    if (isset($directories[count($directories) - 1]) && ! empty($directories[count($directories) - 1])){
         // Server specified
         $banner = $directories[count($directories) - 1];
 
-        if(substr($banner, -4) == '.png')
+        if (substr($banner, -4) == '.png')
             $banner = substr($banner, 0, -4);
 
         $banner = urldecode($banner);
 
-        $server = $queries->getWhere('mc_servers', array('name', '=', $banner));
+        $server = $queries->getWhere('mc_servers', ['name', '=', $banner]);
 
-        if(!count($server))
+        if (! count($server))
             die('Invalid server');
 
         $server = $server[0];
 
-        require(ROOT_PATH . '/core/includes/motd_format.php');
+        require (ROOT_PATH . '/core/includes/motd_format.php');
 
         $display_ip = $server->ip;
-        if(!is_null($server->port) && $server->port != 25565)
+
+        if (! is_null($server->port) && $server->port != 25565)
             $display_ip .= ':' . $server->port;
 
-        $full_ip = array('ip' => $server->ip . (is_null($server->port) ? ':' . 25565 : ':' . $server->port), 'pre' => $server->pre, 'name' => $server->name);
+        $full_ip = ['ip' => $server->ip . (is_null($server->port) ? ':' . 25565 : ':' . $server->port), 'pre' => $server->pre, 'name' => $server->name];
 
         $cache->setCache('banner_cache_' . urlencode($server->name));
-        if(!$cache->isCached('image')){
+
+        if (! $cache->isCached('image')){
             // Internal or external query?
-            $query_type = $queries->getWhere('settings', array('name', '=', 'external_query'));
+            $query_type = $queries->getWhere('settings', ['name', '=', 'external_query']);
+
             if (count($query_type)) {
                 if ($query_type[0]->value == '1')
                     $query_type = 'external';
-                else
-                    $query_type = 'internal';
-            } else
-                $query_type = 'internal';
+                else $query_type = 'internal';
+            } else $query_type = 'internal';
 
             $query = MCQuery::singleQuery($full_ip, $query_type, $language, $queries);
 
-            if($query['status_value'] != 1)
-                $query['motd'] = array('§4Offline');
+            if ($query['status_value'] != 1)
+                $query['motd'] = ['§4Offline'];
 
             // Do we need to query for favicon?
-            if(!$cache->isCached('favicon')){
+            if (! $cache->isCached('favicon')){
                 $favicon = imagecreatefromstring(base64_decode(ltrim(ExternalMCQuery::getFavicon($full_ip['ip']), 'data:image/png;base64')));
 
-                imageAlphaBlending($favicon, true);
-                imageSaveAlpha($favicon, true);
+                imagealphablending($favicon, true);
+                imagesavealpha($favicon, true);
 
                 // Cache the favicon for 1 hour
                 imagepng($favicon, ROOT_PATH . '/cache/server_fav_' . urlencode($server->name) . '.png');
@@ -75,10 +76,9 @@ if(defined('MINECRAFT') && MINECRAFT === true){
             // Font
             $font = ROOT_PATH . '/core/assets/fonts/minecraft.ttf';
 
-            if($query['status_value'] === 1)
+            if ($query['status_value'] === 1)
                 $image = ServerBanner::server($display_ip, $query['motd'], $query['player_count'], $query['player_count_max'], $favicon, $server->banner_background, 5);
-            else
-                $image = ServerBanner::server($display_ip, $query['motd'], '?', '?', $favicon, $server->banner_background, 5);
+            else $image = ServerBanner::server($display_ip, $query['motd'], '?', '?', $favicon, $server->banner_background, 5);
 
             header('Content-type: image/png');
 
diff --git a/modules/Core/pages/panel/announcements.php b/modules/Core/pages/panel/announcements.php
index 0cc127b779253ff5da2db4f923ddbd744b7bd36e..50aab7ab0ec60c495d2f8d62a46211ac24e13c14 100644
--- a/modules/Core/pages/panel/announcements.php
+++ b/modules/Core/pages/panel/announcements.php
@@ -15,27 +15,29 @@ define('PAGE', 'panel');
 define('PARENT_PAGE', 'announcements');
 define('PANEL_PAGE', 'announcements');
 $page_title = $language->get('admin', 'announcements');
-require_once(ROOT_PATH . '/core/templates/backend_init.php');
+
+require_once (ROOT_PATH . '/core/templates/backend_init.php');
 $queries = new Queries();
 
-if (!isset($_GET['action'])) {
+if (! isset($_GET['action'])) {
     // View all announcements
 
-    $announcements = array();
+    $announcements = [];
+
     foreach (Announcements::getAll() as $announcement) {
-        $announcements[] = array(
+        $announcements[] = [
             $announcement,
             'pages' => Announcements::getPagesCsv($announcement->pages)
-        );
+        ];
     }
 
     if (count($announcements) >= 1) {
-        $smarty->assign(array(
+        $smarty->assign([
             'ALL_ANNOUNCEMENTS' => $announcements
-        ));
+        ]);
     }
 
-    $smarty->assign(array(
+    $smarty->assign([
         'NONE' => $language->get('general', 'none'),
         'NO_ANNOUNCEMENTS' => $language->get('admin', 'no_announcements'),
         'ANNOUCEMENTS_INFO' => $language->get('admin', 'announcement_info'),
@@ -44,7 +46,7 @@ if (!isset($_GET['action'])) {
         'ACTIONS' => $language->get('general', 'actions'),
         'EDIT_LINK' => URL::build('/panel/core/announcements', 'action=edit&id='),
         'DELETE_LINK' => URL::build('/panel/core/announcements', 'action=delete&id={x}')
-    ));
+    ]);
 
     $template_file = 'core/announcements.tpl';
 } else {
@@ -52,73 +54,90 @@ if (!isset($_GET['action'])) {
         case 'new':
             // Create new hook
             if (Input::exists()) {
-                $errors = array();
+                $errors = [];
+
                 if (Token::check()) {
                     // Validate input
                     $validate = new Validate();
-                    $validation = $validate->check($_POST, array(
-                        'header' => array(
+                    $validation = $validate->check($_POST, [
+                        'header' => [
                             'required' => true
-                        ),
-                        'message' => array(
+                        ],
+                        'message' => [
                             'required' => true
-                        ),
-                        'background_colour' => array(
+                        ],
+                        'background_colour' => [
                             'required' => true
-                        ),
-                        'text_colour' => array(
+                        ],
+                        'text_colour' => [
                             'required' => true
-                        ),
-                    ));
+                        ],
+                    ]);
+
                     if ($validation->passed()) {
-                        $groups = $queries->getWhere('groups', array('id', '<>', '0'));
-                        $all_groups = array();
+                        $groups = $queries->getWhere('groups', ['id', '<>', '0']);
+                        $all_groups = [];
+
                         if (Input::get('perm-view-0')) {
-                            $all_groups[] = "0";
+                            $all_groups[] = '0';
                         }
+
                         foreach ($groups as $group) {
                             if (Input::get('perm-view-' . $group->id)) {
                                 $all_groups[] = $group->id;
                             }
                         }
-                        $pages = array();
+                        $pages = [];
+
                         foreach (Input::get('pages') as $page) {
                             $pages[] = $page;
                         }
-                        if (!Announcements::create($pages, $all_groups, Output::getClean(Input::get('text_colour')), Output::getClean(Input::get('background_colour')), Output::getClean(Input::get('icon')), Output::getClean(Input::get('closable')), Output::getClean(Input::get('header')), Output::getClean(Input::get('message')))) {
+
+                        if (! Announcements::create($pages, $all_groups, Output::getClean(Input::get('text_colour')), Output::getClean(Input::get('background_colour')), Output::getClean(Input::get('icon')), Output::getClean(Input::get('closable')), Output::getClean(Input::get('header')), Output::getClean(Input::get('message')))) {
                             Session::flash('announcement_error', $language->get('admin', 'creating_announcement_failure'));
                             Redirect::to(URL::build('/panel/core/announcements'));
+
                             die();
+
                             break;
-                        } else {
+                        }
                             Session::flash('announcement_success', $language->get('admin', 'creating_announcement_success'));
                             Redirect::to(URL::build('/panel/core/announcements'));
+
                             die();
+
                             break;
-                        }
-                    } else {
+                    }
+
                         foreach ($validation->errors() as $validation_error) {
                             if (strpos($validation_error, 'is required') !== false) {
                                 // x is required
                                 switch ($validation_error) {
                                     case (strpos($validation_error, 'header') !== false):
                                         $errors[] = $language->get('admin', 'header_required');
+
                                         break;
+
                                     case (strpos($validation_error, 'message') !== false):
                                         $errors[] = $language->get('admin', 'message_required');
+
                                         break;
+
                                     case (strpos($validation_error, 'background_colour') !== false):
                                         $errors[] = $language->get('admin', 'background_colour_required');
+
                                         break;
+
                                     case (strpos($validation_error, 'text_colour') !== false):
                                         $errors[] = $language->get('admin', 'text_colour_required');
+
                                         break;
+
                                     default:
-                                        $errors[] = $validation_error . ".";
+                                        $errors[] = $validation_error . '.';
                                 }
                             }
                         }
-                    }
                 } else {
                     // Invalid token
                     $errors[] = $language->get('general', 'invalid_token');
@@ -126,106 +145,128 @@ if (!isset($_GET['action'])) {
             }
 
             $groups = DB::getInstance()->query('SELECT * FROM nl2_groups ORDER BY `order`')->results();
-            $template_array = array();
+            $template_array = [];
+
             foreach ($groups as $group) {
-                $template_array[Output::getClean($group->id)] = array(
+                $template_array[Output::getClean($group->id)] = [
                     'id' => Output::getClean($group->id),
                     'name' => Output::getClean($group->name),
-                );
+                ];
             }
 
-            $smarty->assign(array(
+            $smarty->assign([
                 'ANNOUNCEMENT_TITLE' => $language->get('admin', 'creating_announcement'),
                 'GROUPS' => $template_array,
-            ));
+            ]);
 
             $template_file = 'core/announcements_form.tpl';
+
             break;
+
         case 'edit':
             // Edit hook
-            if (!isset($_GET['id']) || !is_numeric($_GET['id'])) {
+            if (! isset($_GET['id']) || ! is_numeric($_GET['id'])) {
                 // Check the announcement ID is valid
                 Redirect::to(URL::build('/panel/core/announcements'));
+
                 die();
             }
 
             // Does the announcement exist?
-            $announcement = $queries->getWhere('custom_announcements', array('id', '=', $_GET['id']));
-            if (!count($announcement)) {
+            $announcement = $queries->getWhere('custom_announcements', ['id', '=', $_GET['id']]);
+
+            if (! count($announcement)) {
                 // No, it doesn't exist
                 Redirect::to(URL::build('/panel/core/announcements'));
+
                 die();
             }
             $announcement = $announcement[0];
 
             if (Input::exists()) {
-                $errors = array();
+                $errors = [];
+
                 if (Token::check()) {
                     // Validate input
                     $validate = new Validate();
-                    $validation = $validate->check($_POST, array(
-                        'header' => array(
+                    $validation = $validate->check($_POST, [
+                        'header' => [
                             'required' => true
-                        ),
-                        'message' => array(
+                        ],
+                        'message' => [
                             'required' => true
-                        ),
-                        'background_colour' => array(
+                        ],
+                        'background_colour' => [
                             'required' => true
-                        ),
-                        'text_colour' => array(
+                        ],
+                        'text_colour' => [
                             'required' => true
-                        ),
-                    ));
+                        ],
+                    ]);
 
                     if ($validation->passed()) {
-                        $all_groups = array();
+                        $all_groups = [];
+
                         if (Input::get('perm-view-0')) {
-                            $all_groups[] = "0";
+                            $all_groups[] = '0';
                         }
-                        foreach ($queries->getWhere('groups', array('id', '<>', '0')) as $group) {
+
+                        foreach ($queries->getWhere('groups', ['id', '<>', '0']) as $group) {
                             if (Input::get('perm-view-' . $group->id)) {
                                 $all_groups[] = $group->id;
                             }
                         }
-                        $pages = array();
+                        $pages = [];
+
                         foreach (Input::get('pages') as $page) {
                             $pages[] = $page;
                         }
-                        if (!Announcements::edit($announcement->id, $pages, $all_groups, Output::getClean(Input::get('text_colour')), Output::getClean(Input::get('background_colour')), Output::getClean(Input::get('icon')), Output::getClean(Input::get('closable')), Output::getClean(Input::get('header')), Output::getClean(Input::get('message')))) {
+
+                        if (! Announcements::edit($announcement->id, $pages, $all_groups, Output::getClean(Input::get('text_colour')), Output::getClean(Input::get('background_colour')), Output::getClean(Input::get('icon')), Output::getClean(Input::get('closable')), Output::getClean(Input::get('header')), Output::getClean(Input::get('message')))) {
                             Session::flash('announcement_error', $language->get('admin', 'editing_announcement_failure'));
                             Redirect::to(URL::build('/panel/core/announcements'));
+
                             die();
+
                             break;
-                        } else {
+                        }
                             Session::flash('announcement_success', $language->get('admin', 'editing_announcement_success'));
                             Redirect::to(URL::build('/panel/core/announcements'));
+
                             die();
+
                             break;
-                        }
-                    } else {
+                    }
+
                         foreach ($validation->errors() as $validation_error) {
                             if (strpos($validation_error, 'is required') !== false) {
                                 // x is required
                                 switch ($validation_error) {
                                     case (strpos($validation_error, 'header') !== false):
                                         $errors[] = $language->get('admin', 'header_required');
+
                                         break;
+
                                     case (strpos($validation_error, 'message') !== false):
                                         $errors[] = $language->get('admin', 'message_required');
+
                                         break;
+
                                     case (strpos($validation_error, 'background_colour') !== false):
                                         $errors[] = $language->get('admin', 'background_colour_required');
+
                                         break;
+
                                     case (strpos($validation_error, 'text_colour') !== false):
                                         $errors[] = $language->get('admin', 'text_colour_required');
+
                                         break;
+
                                     default:
-                                        $errors[] = $validation_error . ".";
+                                        $errors[] = $validation_error . '.';
                                 }
                             }
                         }
-                    }
                 } else {
                     // Invalid token
                     $errors[] = $language->get('general', 'invalid_token');
@@ -235,34 +276,38 @@ if (!isset($_GET['action'])) {
             $announcement_pages = json_decode($announcement->pages);
             $announcement->pages = is_array($announcement_pages) ? $announcement_pages : [];
 
-            $guest_permissions = in_array("0", json_decode($announcement->groups));
-            $groups = array();
+            $guest_permissions = in_array('0', json_decode($announcement->groups));
+            $groups = [];
+
             foreach (DB::getInstance()->query('SELECT * FROM nl2_groups ORDER BY `order`')->results() as $group) {
-                $groups[$group->id] = array(
+                $groups[$group->id] = [
                     'name' => $group->name,
                     'id' => $group->id,
                     'allowed' => in_array($group->id, json_decode($announcement->groups))
-                );
+                ];
             }
 
-            $smarty->assign(array(
+            $smarty->assign([
                 'ANNOUNCEMENT_TITLE' => $language->get('admin', 'editing_announcement'),
                 'ANNOUNCEMENT' => $announcement,
                 'GROUPS' => $groups,
                 'GUEST_PERMISSIONS' => $guest_permissions,
-            ));
+            ]);
 
             $template_file = 'core/announcements_form.tpl';
+
             break;
+
         case 'delete':
             // Delete Announcement
-            if (!isset($_GET['id']) || !is_numeric($_GET['id'])) {
+            if (! isset($_GET['id']) || ! is_numeric($_GET['id'])) {
                 Redirect::to(URL::build('/panel/core/announcements'));
+
                 die();
             }
 
             try {
-                $queries->delete('custom_announcements', array('id', '=', $_GET['id']));
+                $queries->delete('custom_announcements', ['id', '=', $_GET['id']]);
             } catch (Exception $e) {
                 die($e->getMessage());
             }
@@ -270,30 +315,36 @@ if (!isset($_GET['action'])) {
             Announcements::resetCache();
             Session::flash('announcement_success', $language->get('admin', 'deleted_announcement_success'));
             Redirect::to(URL::build('/panel/core/announcements'));
+
             die();
+
             break;
+
         default:
             Redirect::to(URL::build('/panel/core/announcements'));
+
             die();
+
             break;
     }
 }
 
 // Load modules + template
-Module::loadPage($user, $pages, $cache, $smarty, array($navigation, $cc_nav, $mod_nav), $widgets);
+Module::loadPage($user, $pages, $cache, $smarty, [$navigation, $cc_nav, $mod_nav], $widgets);
 
 if (Session::exists('announcement_success'))
-    $smarty->assign(array(
+    $smarty->assign([
         'SUCCESS' => Session::flash('announcement_success'),
         'SUCCESS_TITLE' => $language->get('general', 'success')
-    ));
+    ]);
+
 if (isset($errors) && count($errors))
-    $smarty->assign(array(
+    $smarty->assign([
         'ERRORS' => $errors,
         'ERRORS_TITLE' => $language->get('general', 'error')
-    ));
+    ]);
 
-$smarty->assign(array(
+$smarty->assign([
     'PAGE' => PANEL_PAGE,
     'PARENT_PAGE' => PARENT_PAGE,
     'DASHBOARD' => $language->get('admin', 'dashboard'),
@@ -320,14 +371,14 @@ $smarty->assign(array(
     'NAME' => $language->get('admin', 'name'),
     'CAN_VIEW_ANNOUNCEMENT' => $language->get('admin', 'can_view_announcement'),
     'ANNOUNCEMENTS' => $language->get('admin', 'announcements'),
-));
+]);
 
 $page_load = microtime(true) - $start;
 define('PAGE_LOAD_TIME', str_replace('{x}', round($page_load, 3), $language->get('general', 'page_loaded_in')));
 
 $template->onPageLoad();
 
-require(ROOT_PATH . '/core/templates/panel_navbar.php');
+require (ROOT_PATH . '/core/templates/panel_navbar.php');
 
 // Display template
 $template->displayTemplate($template_file, $smarty);
diff --git a/modules/Core/pages/panel/api.php b/modules/Core/pages/panel/api.php
index 5926f6a04120ce6608b9c428d80be562deebafd4..baccacc3dc3e1bec6c126d8ca79b09f354936614 100644
--- a/modules/Core/pages/panel/api.php
+++ b/modules/Core/pages/panel/api.php
@@ -15,24 +15,25 @@ define('PAGE', 'panel');
 define('PARENT_PAGE', 'core_configuration');
 define('PANEL_PAGE', 'api');
 $page_title = $language->get('admin', 'api');
-require_once(ROOT_PATH . '/core/templates/backend_init.php');
 
-if (!isset($_GET['view'])) {
+require_once (ROOT_PATH . '/core/templates/backend_init.php');
+
+if (! isset($_GET['view'])) {
     if (isset($_GET['action']) && $_GET['action'] == 'api_regen') {
         // Regenerate new API key
         // Generate new key
-        $new_api_key = substr(str_shuffle("0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"), 0, 32);
+        $new_api_key = substr(str_shuffle('0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'), 0, 32);
 
-        $plugin_api = $queries->getWhere('settings', array('name', '=', 'mc_api_key'));
+        $plugin_api = $queries->getWhere('settings', ['name', '=', 'mc_api_key']);
         $plugin_api = $plugin_api[0]->id;
 
         // Update key
         $queries->update(
             'settings',
             $plugin_api,
-            array(
+            [
                 'value' => $new_api_key
-            )
+            ]
         );
 
         // Cache
@@ -41,63 +42,65 @@ if (!isset($_GET['view'])) {
         // Redirect
         Session::flash('api_success', $language->get('admin', 'api_key_regenerated'));
         Redirect::to(URL::build('/panel/core/api'));
+
         die();
     }
 
     if (Input::exists()) {
-        $errors = array();
+        $errors = [];
 
         if (Token::check()) {
-            $plugin_id = $queries->getWhere('settings', array('name', '=', 'use_api'));
+            $plugin_id = $queries->getWhere('settings', ['name', '=', 'use_api']);
             $plugin_id = $plugin_id[0]->id;
             $queries->update(
                 'settings',
                 $plugin_id,
-                array(
+                [
                     'value' => Input::get('enable_api')
-                )
+                ]
             );
 
             $verification = isset($_POST['verification']) && $_POST['verification'] == 'on' ? 1 : 0;
 
-            $verification_id = $queries->getWhere('settings', array('name', '=', 'email_verification'))[0]->id;
+            $verification_id = $queries->getWhere('settings', ['name', '=', 'email_verification'])[0]->id;
+
             try {
                 $queries->update(
                     'settings',
                     $verification_id,
-                    array(
+                    [
                         'value' => $verification
-                    )
+                    ]
                 );
             } catch (Exception $e) {
                 $errors[] = $e->getMessage();
             }
 
             $api_verification = isset($_POST['api_verification']) && $_POST['api_verification'] == 'on' ? 1 : 0;
-            $api_verification_id = $queries->getWhere('settings', array('name', '=', 'api_verification'))[0]->id;
+            $api_verification_id = $queries->getWhere('settings', ['name', '=', 'api_verification'])[0]->id;
 
             try {
                 $queries->update(
                     'settings',
                     $api_verification_id,
-                    array(
+                    [
                         'value' => $api_verification
-                    )
+                    ]
                 );
             } catch (Exception $e) {
                 $errors[] = $e->getMessage();
             }
 
             $username_sync = isset($_POST['username_sync']) && $_POST['username_sync'] == 'on' ? 0 : 1;
-            $username_sync_id = $queries->getWhere('settings', array('name', '=', 'username_sync'))[0]->id;
+            $username_sync_id = $queries->getWhere('settings', ['name', '=', 'username_sync'])[0]->id;
 
             try {
                 $queries->update(
                     'settings',
                     $username_sync_id,
-                    array(
+                    [
                         'value' => $username_sync
-                    )
+                    ]
                 );
             } catch (Exception $e) {
                 $errors[] = $e->getMessage();
@@ -113,19 +116,21 @@ if (!isset($_GET['view'])) {
 } else {
     // Group sync
     if (isset($_GET['action']) && $_GET['action'] == 'delete') {
-        if (!isset($_GET['id']) || !is_numeric($_GET['id'])) {
+        if (! isset($_GET['id']) || ! is_numeric($_GET['id'])) {
             Redirect::to(URL::build('/panel/core/api/', 'view=group_sync'));
+
             die();
         }
 
         try {
-            $queries->delete('group_sync', array('id', '=', $_GET['id']));
+            $queries->delete('group_sync', ['id', '=', $_GET['id']]);
             Session::flash('api_success', $language->get('admin', 'group_sync_rule_deleted_successfully'));
         } catch (Exception $e) {
             // Redirect anyway
         }
 
         Redirect::to(URL::build('/panel/core/api/', 'view=group_sync'));
+
         die();
     }
 
@@ -135,41 +140,41 @@ if (!isset($_GET['view'])) {
                 $validate = new Validate();
                 $validation = $validate->check(
                     $_POST,
-                    array(
-                        'ingame_rank_name' => array(
+                    [
+                        'ingame_rank_name' => [
                             'min' => 2,
                             'max' => 64,
                             'unique' => 'group_sync'
-                        ),
-                        'discord_role_id' => array(
+                        ],
+                        'discord_role_id' => [
                             'min' => 18,
                             'max' => 18,
                             'numeric' => true,
                             'unique' => 'group_sync'
-                        ),
-                        'website_group' => array(
+                        ],
+                        'website_group' => [
                             'required' => true
-                        )
-                    )
+                        ]
+                    ]
                 );
 
-                $errors = array();
+                $errors = [];
 
                 if (empty($_POST['ingame_rank_name']) && empty($_POST['discord_role_id'])) {
                     $errors[] = $language->get('admin', 'at_least_one_external');
                 } else if ($validation->passed()) {
-
                     $discord_role_id = intval(Input::get('discord_role_id'));
+
                     if ($discord_role_id == 0) {
                         $discord_role_id = null;
                     }
-                    $fields = array();
-                    $fields['website_group_id']  = intval(Input::get('website_group'));
+                    $fields = [];
+                    $fields['website_group_id'] = intval(Input::get('website_group'));
                     $fields['discord_role_id'] = $discord_role_id;
 
                     $ingame_rank_name = $_POST['ingame_rank_name'];
 
-                    if (!empty($ingame_rank_name)) {
+                    if (! empty($ingame_rank_name)) {
                         if (strlen(str_replace(' ', '', $ingame_rank_name)) > 1 && strlen(str_replace(' ', '', $ingame_rank_name)) < 65) {
                             $fields['ingame_rank_name'] = $ingame_rank_name;
                         } else {
@@ -184,7 +189,7 @@ if (!isset($_GET['view'])) {
                         $errors[] = $language->get('admin', 'at_least_one_external');
                     }
 
-                    if (!count($errors)) {
+                    if (! count($errors)) {
                         $queries->create('group_sync', $fields);
                         Session::flash('api_success', $language->get('admin', 'group_sync_rule_created_successfully'));
                     }
@@ -212,21 +217,20 @@ if (!isset($_GET['view'])) {
                     }
                 }
             } else if ($_POST['action'] == 'update') {
-                $errors = array();
-
-                if (isset($_POST['ingame_group']) && isset($_POST['discord_role']) && isset($_POST['website_group'])) {
+                $errors = [];
 
+                if (isset($_POST['ingame_group'], $_POST['discord_role'], $_POST['website_group'])) {
                     foreach ($_POST['website_group'] as $key => $website_group) {
-                        if (!empty($_POST['ingame_group'][$key]) || !empty($_POST['discord_role'][$key])) {
-
+                        if (! empty($_POST['ingame_group'][$key]) || ! empty($_POST['discord_role'][$key])) {
                             $ingame_group = $_POST['ingame_group'][$key];
                             $discord_role_id = intval($_POST['discord_role'][$key]);
+
                             if ($discord_role_id == 0) $discord_role_id = null;
 
-                            $fields = array();
-                            $fields['website_group_id']  = intval($website_group);
+                            $fields = [];
+                            $fields['website_group_id'] = intval($website_group);
 
-                            if (!empty($_POST['ingame_group'][$key])) {
+                            if (! empty($_POST['ingame_group'][$key])) {
                                 if (strlen(str_replace(' ', '', $ingame_group)) > 1 && strlen(str_replace(' ', '', $ingame_group)) < 65) {
                                     $fields['ingame_rank_name'] = $ingame_group;
                                 } else {
@@ -234,13 +238,14 @@ if (!isset($_GET['view'])) {
                                     $errors[] = $language->get('admin', 'ingame_group_maximum');
                                 }
                             } else $fields['ingame_rank_name'] = '';
+
                             if (strlen($discord_role_id) == 0 || strlen($discord_role_id) == 18) {
                                 $fields['discord_role_id'] = $discord_role_id;
                             } else {
                                 $errors[] = $language->get('admin', 'discord_role_id_length');
                             }
 
-                            if (!count($errors)) {
+                            if (! count($errors)) {
                                 try {
                                     $queries->update('group_sync', $key, $fields);
                                 } catch (Exception $e) {
@@ -253,71 +258,72 @@ if (!isset($_GET['view'])) {
                     }
                 }
 
-                if (!count($errors)) {
+                if (! count($errors)) {
                     Session::flash('api_success', $language->get('admin', 'group_sync_rules_updated_successfully'));
                 }
             }
         } else {
-            $errors[] = array($language->get('general', 'invalid_token'));
+            $errors[] = [$language->get('general', 'invalid_token')];
         }
     }
 }
 
 // Load modules + template
-Module::loadPage($user, $pages, $cache, $smarty, array($navigation, $cc_nav, $mod_nav), $widgets);
+Module::loadPage($user, $pages, $cache, $smarty, [$navigation, $cc_nav, $mod_nav], $widgets);
 
 if (Session::exists('api_success')) {
     $smarty->assign(
-        array(
+        [
             'SUCCESS' => Session::flash('api_success'),
             'SUCCESS_TITLE' => $language->get('general', 'success')
-        )
+        ]
     );
 }
 
 if (isset($errors) && count($errors)) {
     $smarty->assign(
-        array(
+        [
             'ERRORS' => $errors,
             'ERRORS_TITLE' => $language->get('general', 'error')
-        )
+        ]
     );
 }
 
-if (!isset($_GET['view'])) {
+if (! isset($_GET['view'])) {
     // Is the API enabled?
-    $api_enabled = $queries->getWhere('settings', array('name', '=', 'use_api'));
+    $api_enabled = $queries->getWhere('settings', ['name', '=', 'use_api']);
+
     if (count($api_enabled)) {
         $api_enabled = $api_enabled[0]->value;
     } else {
         $queries->create(
             'settings',
-            array(
+            [
                 'name' => 'use_api',
                 'value' => 0
-            )
+            ]
         );
         $api_enabled = '0';
     }
 
     // Get API key
-    $plugin_api = $queries->getWhere('settings', array('name', '=', 'mc_api_key'));
+    $plugin_api = $queries->getWhere('settings', ['name', '=', 'mc_api_key']);
     $plugin_api = $plugin_api[0]->value;
 
     // Is email verification enabled
-    $emails = $queries->getWhere('settings', array('name', '=', 'email_verification'));
+    $emails = $queries->getWhere('settings', ['name', '=', 'email_verification']);
     $emails = $emails[0]->value;
 
     // Is API verification enabled?
-    $api_verification = $queries->getWhere('settings', array('name', '=', 'api_verification'));
+    $api_verification = $queries->getWhere('settings', ['name', '=', 'api_verification']);
     $api_verification = $api_verification[0]->value;
 
     // Is the username sync enabled?
-    $username_sync = $queries->getWhere('settings', array('name', '=', 'username_sync'));
+    $username_sync = $queries->getWhere('settings', ['name', '=', 'username_sync']);
     $username_sync = $username_sync[0]->value;
 
     $smarty->assign(
-        array(
+        [
             'PARENT_PAGE' => PARENT_PAGE,
             'DASHBOARD' => $language->get('admin', 'dashboard'),
             'CONFIGURATION' => $language->get('admin', 'configuration'),
@@ -357,48 +363,50 @@ if (!isset($_GET['view'])) {
             'GROUP_SYNC_LINK' => URL::build('/panel/core/api/', 'view=group_sync'),
             'API_ENDPOINTS' => $language->get('admin', 'api_endpoints'),
             'API_ENDPOINTS_LINK' => URL::build('/panel/core/api/', 'view=api_endpoints')
-        )
+        ]
     );
 
     $template_file = 'core/api.tpl';
 } else {
-
     if ($_GET['view'] == 'group_sync') {
         // Get all groups
-        $groups = $queries->getWhere('groups', array('id', '<>', 0));
-        $website_groups = array();
+        $groups = $queries->getWhere('groups', ['id', '<>', 0]);
+        $website_groups = [];
+
         foreach ($groups as $group) {
-            $website_groups[] = array(
+            $website_groups[] = [
                 'id' => Output::getClean($group->id),
                 'name' => Output::getClean($group->name)
-            );
+            ];
         }
 
         // Get ingame groups
-        $ingame_groups = DB::getInstance()->query("SELECT `groups` FROM `nl2_query_results` ORDER BY `id` DESC LIMIT 1")->first();
+        $ingame_groups = DB::getInstance()->query('SELECT `groups` FROM `nl2_query_results` ORDER BY `id` DESC LIMIT 1')->first();
         $ingame_groups = json_decode($ingame_groups->groups, true);
 
         // Get Discord groups
-        $discord_groups = array();
+        $discord_groups = [];
+
         if (Util::getSetting(DB::getInstance(), 'discord_integration')) {
             $discord_groups = Discord::getRoles();
         }
 
         // Get existing group sync configuration
-        $group_sync = $queries->getWhere('group_sync', array('id', '<>', 0));
-        $template_groups = array();
+        $group_sync = $queries->getWhere('group_sync', ['id', '<>', 0]);
+        $template_groups = [];
+
         foreach ($group_sync as $group) {
-            $template_groups[] = array(
+            $template_groups[] = [
                 'id' => Output::getClean($group->id),
                 'ingame' => Output::getClean($group->ingame_rank_name),
                 'discord' => $group->discord_role_id,
                 'website' => $group->website_group_id,
                 'delete_link' => URL::build('/panel/core/api/', 'view=group_sync&action=delete&id=' . Output::getClean($group->id))
-            );
+            ];
         }
 
         $smarty->assign(
-            array(
+            [
                 'PARENT_PAGE' => PARENT_PAGE,
                 'DASHBOARD' => $language->get('admin', 'dashboard'),
                 'CONFIGURATION' => $language->get('admin', 'configuration'),
@@ -410,9 +418,9 @@ if (!isset($_GET['view'])) {
                 'BACK_LINK' => URL::build('/panel/core/api'),
                 'TOKEN' => Token::get(),
                 'SUBMIT' => $language->get('general', 'submit'),
-                'INGAME_GROUPS' => is_array($ingame_groups) ? $ingame_groups : array(),
+                'INGAME_GROUPS' => is_array($ingame_groups) ? $ingame_groups : [],
                 'INGAME_GROUP_NAME' => $language->get('admin', 'ingame_group'),
-                'DISCORD_GROUPS' => is_array($discord_groups) ? $discord_groups : array(),
+                'DISCORD_GROUPS' => is_array($discord_groups) ? $discord_groups : [],
                 'DISCORD_ROLE_ID' => $language->get('admin', 'discord_role_id'),
                 'WEBSITE_GROUP' => $language->get('admin', 'website_group'),
                 'GROUPS' => $website_groups,
@@ -422,24 +430,24 @@ if (!isset($_GET['view'])) {
                 'EXISTING_RULES' => $language->get('admin', 'existing_rules'),
                 'DISCORD_INTEGRATION_NOT_SETUP' => $language->get('admin', 'discord_integration_not_setup'),
                 'GROUP_SYNC_PLUGIN_NOT_SET_UP' => $language->get('admin', 'group_sync_plugin_not_set_up')
-            )
+            ]
         );
 
         $template_file = 'core/api_group_sync.tpl';
     } else if ($_GET['view'] == 'api_endpoints') {
+        $endpoints_array = [];
 
-        $endpoints_array = array();
         foreach ($endpoints->getAll() as $endpoint) {
-            $endpoints_array[] = array(
+            $endpoints_array[] = [
                 'route' => $endpoint->getRoute(),
                 'module' => $endpoint->getModule(),
                 'description' => $endpoint->getDescription(),
                 'method' => $endpoint->getMethod()
-            );
-        };
+            ];
+        }
 
         $smarty->assign(
-            array(
+            [
                 'PARENT_PAGE' => PARENT_PAGE,
                 'DASHBOARD' => $language->get('admin', 'dashboard'),
                 'CONFIGURATION' => $language->get('admin', 'configuration'),
@@ -452,7 +460,7 @@ if (!isset($_GET['view'])) {
                 'MODULE' => $language->get('admin', 'module'),
                 'ENDPOINTS_INFO' => $language->get('admin', 'api_endpoints_info'),
                 'ENDPOINTS_ARRAY' => $endpoints_array
-            )
+            ]
         );
 
         $template_file = 'core/api_endpoints.tpl';
@@ -464,7 +472,7 @@ define('PAGE_LOAD_TIME', str_replace('{x}', round($page_load, 3), $language->get
 
 $template->onPageLoad();
 
-require(ROOT_PATH . '/core/templates/panel_navbar.php');
+require (ROOT_PATH . '/core/templates/panel_navbar.php');
 
 // Display template
 $template->displayTemplate($template_file, $smarty);
diff --git a/modules/Core/pages/panel/auth.php b/modules/Core/pages/panel/auth.php
index 6d0b3f7e5f80fe627648cf53ccb27140df8c33b9..92be0cb5d439d76a6697548de6f422ee5a0f10f0 100644
--- a/modules/Core/pages/panel/auth.php
+++ b/modules/Core/pages/panel/auth.php
@@ -10,31 +10,36 @@
  */
 
 if ($user->isLoggedIn()) {
-    if (!$user->canViewACP()) {
+    if (! $user->canViewACP()) {
         // No
         Redirect::to(URL::build('/'));
+
         die();
     }
+
     if ($user->isAdmLoggedIn()) {
         // Already authenticated
         Redirect::to(URL::build('/panel'));
+
         die();
     }
 } else {
     // Not logged in
     Redirect::to(URL::build('/login'));
+
     die();
 }
 
 define('PAGE', 'panel');
 define('PANEL_PAGE', 'auth');
 $page_title = $language->get('admin', 're-authenticate');
-require_once(ROOT_PATH . '/core/templates/backend_init.php');
 
-require(ROOT_PATH . '/core/includes/password.php'); // Require password compat library
+require_once (ROOT_PATH . '/core/templates/backend_init.php');
+
+require (ROOT_PATH . '/core/includes/password.php'); // Require password compat library
 
 // Get login method
-$method = $queries->getWhere('settings', array('name', '=', 'login_method'));
+$method = $queries->getWhere('settings', ['name', '=', 'login_method']);
 $method = $method[0]->value;
 
 // Deal with any input
@@ -44,23 +49,21 @@ if (Input::exists()) {
         $validate = new Validate();
 
         if ($method == 'email')
-            $to_validate = array(
-                'email' => array('required' => true, 'isbanned' => true, 'isactive' => true),
-                'password' => array('required' => true)
-            );
-        else
-            $to_validate = array(
-                'username' => array('required' => true, 'isbanned' => true, 'isactive' => true),
-                'password' => array('required' => true)
-            );
+            $to_validate = [
+                'email' => ['required' => true, 'isbanned' => true, 'isactive' => true],
+                'password' => ['required' => true]
+            ];
+        else $to_validate = [
+                'username' => ['required' => true, 'isbanned' => true, 'isactive' => true],
+                'password' => ['required' => true]
+            ];
 
         $validation = $validate->check($_POST, $to_validate);
 
         if ($validation->passed()) {
             if ($method == 'email')
                 $username = Input::get('email');
-            else
-                $username = Input::get('username');
+            else $username = Input::get('username');
 
             $user = new User();
             $login = $user->adminLogin($username, Input::get('password'), $method);
@@ -73,10 +76,10 @@ if (Input::exists()) {
                 Log::getInstance()->log(Log::Action('admin/login'));
 
                 Redirect::to(URL::build('/panel'));
+
                 die();
-            } else {
-                Session::flash('adm_auth_error', $language->get('user', 'incorrect_details'));
             }
+                Session::flash('adm_auth_error', $language->get('user', 'incorrect_details'));
         } else {
             Session::flash('adm_auth_error', $language->get('user', 'incorrect_details'));
         }
@@ -87,35 +90,35 @@ if (Input::exists()) {
 }
 
 if ($method == 'email') {
-    $smarty->assign(array(
+    $smarty->assign([
         'EMAIL' => $language->get('user', 'email')
-    ));
+    ]);
 } else {
-    $smarty->assign(array(
+    $smarty->assign([
         'USERNAME' => $language->get('user', 'username')
-    ));
+    ]);
 }
 
-$smarty->assign(array(
+$smarty->assign([
     'PLEASE_REAUTHENTICATE' => $language->get('admin', 're-authenticate'),
     'PASSWORD' => $language->get('user', 'password'),
     'TOKEN' => Token::get(),
     'SUBMIT' => $language->get('general', 'submit'),
     'CANCEL' => $language->get('general', 'cancel')
-));
+]);
 
 if (Session::exists('adm_auth_error'))
     $smarty->assign('ERROR', Session::flash('adm_auth_error'));
 
 // Load modules + template
-Module::loadPage($user, $pages, $cache, $smarty, array($navigation, $cc_nav, $mod_nav), $widgets);
+Module::loadPage($user, $pages, $cache, $smarty, [$navigation, $cc_nav, $mod_nav], $widgets);
 
 $page_load = microtime(true) - $start;
 define('PAGE_LOAD_TIME', str_replace('{x}', round($page_load, 3), $language->get('general', 'page_loaded_in')));
 
 $template->onPageLoad();
 
-require(ROOT_PATH . '/core/templates/panel_navbar.php');
+require (ROOT_PATH . '/core/templates/panel_navbar.php');
 
 // Display template
 $template->displayTemplate('auth.tpl', $smarty);
diff --git a/modules/Core/pages/panel/avatars.php b/modules/Core/pages/panel/avatars.php
index e78fce120e26bed02e7b89e3139f134f063ef08a..0abe6dd02cfe30be4b78e4e525a3ece3de345364 100644
--- a/modules/Core/pages/panel/avatars.php
+++ b/modules/Core/pages/panel/avatars.php
@@ -15,7 +15,8 @@ define('PAGE', 'panel');
 define('PARENT_PAGE', 'core_configuration');
 define('PANEL_PAGE', 'avatars');
 $page_title = $language->get('admin', 'avatars');
-require_once(ROOT_PATH . '/core/templates/backend_init.php');
+
+require_once (ROOT_PATH . '/core/templates/backend_init.php');
 
 // Input
 if (Input::exists()) {
@@ -24,25 +25,24 @@ if (Input::exists()) {
             // Custom avatars?
             if (isset($_POST['custom_avatars']) && $_POST['custom_avatars'] == 1)
                 $custom_avatars = 1;
-            else
-                $custom_avatars = 0;
+            else $custom_avatars = 0;
 
             try {
-                $custom_avatars_id = $queries->getWhere('settings', array('name', '=', 'user_avatars'));
+                $custom_avatars_id = $queries->getWhere('settings', ['name', '=', 'user_avatars']);
                 $custom_avatars_id = $custom_avatars_id[0]->id;
-                $queries->update('settings', $custom_avatars_id, array('value' => $custom_avatars));
+                $queries->update('settings', $custom_avatars_id, ['value' => $custom_avatars]);
 
-                $default_avatar_type = $queries->getWhere('settings', array('name', '=', 'default_avatar_type'));
+                $default_avatar_type = $queries->getWhere('settings', ['name', '=', 'default_avatar_type']);
                 $default_avatar_type = $default_avatar_type[0]->id;
-                $queries->update('settings', $default_avatar_type, array('value' => Input::get('default_avatar')));
+                $queries->update('settings', $default_avatar_type, ['value' => Input::get('default_avatar')]);
 
-                $mc_avatar_source = $queries->getWhere('settings', array('name', '=', 'avatar_site'));
+                $mc_avatar_source = $queries->getWhere('settings', ['name', '=', 'avatar_site']);
                 $mc_avatar_source = $mc_avatar_source[0]->id;
-                $queries->update('settings', $mc_avatar_source, array('value' => Input::get('avatar_source')));
+                $queries->update('settings', $mc_avatar_source, ['value' => Input::get('avatar_source')]);
 
-                $mc_avatar_perspective = $queries->getWhere('settings', array('name', '=', 'avatar_type'));
+                $mc_avatar_perspective = $queries->getWhere('settings', ['name', '=', 'avatar_type']);
                 $mc_avatar_perspective = $mc_avatar_perspective[0]->id;
-                $queries->update('settings', $mc_avatar_perspective, array('value' => Input::get('avatar_perspective')));
+                $queries->update('settings', $mc_avatar_perspective, ['value' => Input::get('avatar_perspective')]);
 
                 $cache->setCache('avatar_settings_cache');
                 $cache->store('custom_avatars', $custom_avatars);
@@ -50,71 +50,71 @@ if (Input::exists()) {
                 $cache->store('avatar_source', Input::get('avatar_source'));
                 $cache->store('avatar_perspective', Input::get('avatar_perspective'));
             } catch (Exception $e) {
-                $errors = array($e->getMessage());
+                $errors = [$e->getMessage()];
             }
         } else if (isset($_POST['avatar'])) {
             // Selecting a new default avatar
             try {
-                $default_avatar = $queries->getWhere('settings', array('name', '=', 'custom_default_avatar'));
+                $default_avatar = $queries->getWhere('settings', ['name', '=', 'custom_default_avatar']);
                 $default_avatar = $default_avatar[0]->id;
-                $queries->update('settings', $default_avatar, array('value' => Input::get('avatar')));
+                $queries->update('settings', $default_avatar, ['value' => Input::get('avatar')]);
 
                 $cache->setCache('avatar_settings_cache');
                 $cache->store('default_avatar_image', Input::get('avatar'));
             } catch (Exception $e) {
-                $errors = array($e->getMessage());
+                $errors = [$e->getMessage()];
             }
         }
 
         //Log::getInstance()->log(Log::Action('admin/core/avatar'));
 
         $success = $language->get('admin', 'avatar_settings_updated_successfully');
-    } else
-        $errors = array($language->get('general', 'invalid_token'));
+    } else $errors = [$language->get('general', 'invalid_token')];
 }
 
 // Load modules + template
-Module::loadPage($user, $pages, $cache, $smarty, array($navigation, $cc_nav, $mod_nav), $widgets);
+Module::loadPage($user, $pages, $cache, $smarty, [$navigation, $cc_nav, $mod_nav], $widgets);
 
 if (isset($success))
-    $smarty->assign(array(
+    $smarty->assign([
         'SUCCESS' => $success,
         'SUCCESS_TITLE' => $language->get('general', 'success')
-    ));
+    ]);
 
 if (isset($errors) && count($errors))
-    $smarty->assign(array(
+    $smarty->assign([
         'ERRORS' => $errors,
         'ERRORS_TITLE' => $language->get('general', 'error')
-    ));
+    ]);
 
 // Get setting values
-$custom_avatars = $queries->getWhere('settings', array('name', '=', 'user_avatars'));
+$custom_avatars = $queries->getWhere('settings', ['name', '=', 'user_avatars']);
 $custom_avatars = $custom_avatars[0]->value;
 
-$default_avatar_type = $queries->getWhere('settings', array('name', '=', 'default_avatar_type'));
+$default_avatar_type = $queries->getWhere('settings', ['name', '=', 'default_avatar_type']);
 $default_avatar_type = $default_avatar_type[0]->value;
 
-$mc_avatar_source = $queries->getWhere('settings', array('name', '=', 'avatar_site'));
+$mc_avatar_source = $queries->getWhere('settings', ['name', '=', 'avatar_site']);
 $mc_avatar_source = $mc_avatar_source[0]->value;
 
-$mc_avatar_perspective = $queries->getWhere('settings', array('name', '=', 'avatar_type'));
+$mc_avatar_perspective = $queries->getWhere('settings', ['name', '=', 'avatar_type']);
 $mc_avatar_perspective = $mc_avatar_perspective[0]->value;
 
-$default_avatar_image = $queries->getWhere('settings', array('name', '=', 'custom_default_avatar'));
+$default_avatar_image = $queries->getWhere('settings', ['name', '=', 'custom_default_avatar']);
 $default_avatar_image = $default_avatar_image[0]->value;
 
-$image_path = join(DIRECTORY_SEPARATOR, array(ROOT_PATH, 'uploads', 'avatars', 'defaults'));
+$image_path = join(DIRECTORY_SEPARATOR, [ROOT_PATH, 'uploads', 'avatars', 'defaults']);
 $images = scandir($image_path);
-$template_images = array();
+$template_images = [];
 
 // Only display jpeg, png, jpg, gif
-$allowed_exts = array('gif', 'png', 'jpg', 'jpeg');
+$allowed_exts = ['gif', 'png', 'jpg', 'jpeg'];
 
 if (count($images)) {
     foreach ($images as $image) {
         $ext = pathinfo($image, PATHINFO_EXTENSION);
-        if (!in_array($ext, $allowed_exts)) {
+
+        if (! in_array($ext, $allowed_exts)) {
             continue;
         }
 
@@ -122,7 +122,7 @@ if (count($images)) {
     }
 }
 
-$smarty->assign(array(
+$smarty->assign([
     'PARENT_PAGE' => PARENT_PAGE,
     'DASHBOARD' => $language->get('admin', 'dashboard'),
     'CONFIGURATION' => $language->get('admin', 'configuration'),
@@ -137,7 +137,7 @@ $smarty->assign(array(
     'MINECRAFT_AVATAR' => $language->get('admin', 'minecraft_avatar'),
     'CUSTOM_AVATAR' => $language->get('admin', 'custom_avatar'),
     'MINECRAFT_AVATAR_SOURCE' => $language->get('admin', 'minecraft_avatar_source'),
-    'MINECRAFT_AVATAR_VALUES' => array('crafatar' => 'crafatar.com', 'cravatar' => 'cravatar.eu', 'mc-heads' => 'mc-heads.net', 'minotar' => 'minotar.net', 'visage' => 'visage.surgeplay.com', 'nameless' => $language->get('admin', 'built_in_avatars')),
+    'MINECRAFT_AVATAR_VALUES' => ['crafatar' => 'crafatar.com', 'cravatar' => 'cravatar.eu', 'mc-heads' => 'mc-heads.net', 'minotar' => 'minotar.net', 'visage' => 'visage.surgeplay.com', 'nameless' => $language->get('admin', 'built_in_avatars')],
     'MINECRAFT_AVATAR_VALUE' => $mc_avatar_source,
     'MINECRAFT_AVATAR_PERSPECTIVE' => $language->get('admin', 'minecraft_avatar_perspective'),
     'MINECRAFT_AVATAR_PERSPECTIVE_VALUE' => $mc_avatar_perspective,
@@ -152,14 +152,14 @@ $smarty->assign(array(
     'UPLOAD_FORM_ACTION' => (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/includes/image_upload.php',
     'DRAG_FILES_HERE' => $language->get('admin', 'drag_files_here'),
     'CLOSE' => $language->get('general', 'close')
-));
+]);
 
 $page_load = microtime(true) - $start;
 define('PAGE_LOAD_TIME', str_replace('{x}', round($page_load, 3), $language->get('general', 'page_loaded_in')));
 
 $template->onPageLoad();
 
-require(ROOT_PATH . '/core/templates/panel_navbar.php');
+require (ROOT_PATH . '/core/templates/panel_navbar.php');
 
 // Display template
 $template->displayTemplate('core/avatars.tpl', $smarty);
diff --git a/modules/Core/pages/panel/debugging_and_maintenance.php b/modules/Core/pages/panel/debugging_and_maintenance.php
index ac23b37aed34258de32acc843e15fc4abe042b9b..725691c1afe507a25175477e570a42659bbf5f9d 100644
--- a/modules/Core/pages/panel/debugging_and_maintenance.php
+++ b/modules/Core/pages/panel/debugging_and_maintenance.php
@@ -15,21 +15,22 @@ define('PAGE', 'panel');
 define('PARENT_PAGE', 'core_configuration');
 define('PANEL_PAGE', 'debugging_and_maintenance');
 $page_title = $language->get('admin', 'debugging_and_maintenance');
-require_once(ROOT_PATH . '/core/templates/backend_init.php');
+
+require_once (ROOT_PATH . '/core/templates/backend_init.php');
 
 // Input
 if (Input::exists()) {
-    $errors = array();
+    $errors = [];
 
     if (Token::check()) {
         // Valid token
         // Validate message
         $validate = new Validate();
-        $validation = $validate->check($_POST, array(
-            'message' => array(
+        $validation = $validate->check($_POST, [
+            'message' => [
                 'max' => 1024
-            )
-        ));
+            ]
+        ]);
 
         if ($validation->passed()) {
             // Update database and cache
@@ -37,11 +38,11 @@ if (Input::exists()) {
             if (isset($_POST['enable_debugging']) && $_POST['enable_debugging'] == 1) $enabled = 1;
             else $enabled = 0;
 
-            $debug_id = $queries->getWhere('settings', array('name', '=', 'error_reporting'));
+            $debug_id = $queries->getWhere('settings', ['name', '=', 'error_reporting']);
             $debug_id = $debug_id[0]->id;
-            $queries->update('settings', $debug_id, array(
+            $queries->update('settings', $debug_id, [
                 'value' => $enabled
-            ));
+            ]);
 
             // Cache
             $cache->setCache('error_cache');
@@ -51,39 +52,39 @@ if (Input::exists()) {
             if (isset($_POST['enable_maintenance']) && $_POST['enable_maintenance'] == 1) $enabled = 'true';
             else $enabled = 'false';
 
-            $maintenance_id = $queries->getWhere('settings', array('name', '=', 'maintenance'));
+            $maintenance_id = $queries->getWhere('settings', ['name', '=', 'maintenance']);
             $maintenance_id = $maintenance_id[0]->id;
-            $queries->update('settings', $maintenance_id, array(
+            $queries->update('settings', $maintenance_id, [
                 'value' => $enabled
-            ));
+            ]);
 
-            if (isset($_POST['message']) && !empty($_POST['message'])) $message = Input::get('message');
+            if (isset($_POST['message']) && ! empty($_POST['message'])) $message = Input::get('message');
             else $message = 'Maintenance mode is enabled.';
 
-            $maintenance_id = $queries->getWhere('settings', array('name', '=', 'maintenance_message'));
+            $maintenance_id = $queries->getWhere('settings', ['name', '=', 'maintenance_message']);
             $maintenance_id = $maintenance_id[0]->id;
-            $queries->update('settings', $maintenance_id, array(
+            $queries->update('settings', $maintenance_id, [
                 'value' => Output::getClean($message)
-            ));
+            ]);
 
             //Log::getInstance()->log(Log::Action('admin/core/maintenance/update'));
 
             // Cache
             $cache->setCache('maintenance_cache');
-            $cache->store('maintenance', array(
+            $cache->store('maintenance', [
                 'maintenance' => $enabled,
                 'message' => Output::getClean($message)
-            ));
+            ]);
 
             // Page load timer
             if (isset($_POST['enable_page_load_timer']) && $_POST['enable_page_load_timer'] == 1) $enabled = 1;
             else $enabled = 0;
 
-            $load_id = $queries->getWhere('settings', array('name', '=', 'page_loading'));
+            $load_id = $queries->getWhere('settings', ['name', '=', 'page_loading']);
             $load_id = $load_id[0]->id;
-            $queries->update('settings', $load_id, array(
+            $queries->update('settings', $load_id, [
                 'value' => $enabled
-            ));
+            ]);
 
             // Cache
             $cache->setCache('page_load_cache');
@@ -92,8 +93,9 @@ if (Input::exists()) {
             // Reload to update debugging
             Session::flash('debugging_success', $language->get('admin', 'debugging_settings_updated_successfully'));
             Redirect::to(URL::build('/panel/core/debugging_and_maintenance'));
+
             die();
-        } else $errors[] = $language->get('admin', 'maintenance_message_max_1024');
+        }  $errors[] = $language->get('admin', 'maintenance_message_max_1024');
     } else {
         // Invalid token
         $errors[] = $language->get('general', 'invalid_token');
@@ -101,37 +103,37 @@ if (Input::exists()) {
 }
 
 // Load modules + template
-Module::loadPage($user, $pages, $cache, $smarty, array($navigation, $cc_nav, $mod_nav), $widgets);
+Module::loadPage($user, $pages, $cache, $smarty, [$navigation, $cc_nav, $mod_nav], $widgets);
 
 if (Session::exists('debugging_success'))
-    $smarty->assign(array(
+    $smarty->assign([
         'SUCCESS' => Session::flash('debugging_success'),
         'SUCCESS_TITLE' => $language->get('general', 'success')
-    ));
+    ]);
 
 if (isset($errors) && count($errors))
-    $smarty->assign(array(
+    $smarty->assign([
         'ERRORS' => $errors,
         'ERRORS_TITLE' => $language->get('general', 'error')
-    ));
+    ]);
 
 $cache->setCache('maintenance_cache');
 $maintenance = $cache->retrieve('maintenance');
 
 $cache->setCache('page_load_cache');
+
 if ($cache->isCached('page_load'))
     $page_loading = $cache->retrieve('page_load');
-else
-    $page_loading = 0;
+else $page_loading = 0;
 
 if ($user->hasPermission('admincp.errors')) {
-    $smarty->assign(array(
+    $smarty->assign([
         'ERROR_LOGS' => $language->get('admin', 'error_logs'),
         'ERROR_LOGS_LINK' => URL::build('/panel/core/errors')
-    ));
+    ]);
 }
 
-$smarty->assign(array(
+$smarty->assign([
     'PARENT_PAGE' => PARENT_PAGE,
     'DASHBOARD' => $language->get('admin', 'dashboard'),
     'CONFIGURATION' => $language->get('admin', 'configuration'),
@@ -147,14 +149,14 @@ $smarty->assign(array(
     'ENABLE_PAGE_LOAD_TIMER_VALUE' => $page_loading,
     'MAINTENANCE_MODE_MESSAGE' => $language->get('admin', 'maintenance_mode_message'),
     'MAINTENANCE_MODE_MESSAGE_VALUE' => Output::getPurified(htmlspecialchars_decode($maintenance['message']))
-));
+]);
 
 $page_load = microtime(true) - $start;
 define('PAGE_LOAD_TIME', str_replace('{x}', round($page_load, 3), $language->get('general', 'page_loaded_in')));
 
 $template->onPageLoad();
 
-require(ROOT_PATH . '/core/templates/panel_navbar.php');
+require (ROOT_PATH . '/core/templates/panel_navbar.php');
 
 // Display template
 $template->displayTemplate('core/debugging_and_maintenance.tpl', $smarty);
diff --git a/modules/Core/pages/panel/discord.php b/modules/Core/pages/panel/discord.php
index cf57d95767459943d9e69e8c01cd523e6089f816..085a01e17ff8a6e89149dbc8575e8fe8fda27c0f 100644
--- a/modules/Core/pages/panel/discord.php
+++ b/modules/Core/pages/panel/discord.php
@@ -15,72 +15,75 @@ define('PAGE', 'panel');
 define('PARENT_PAGE', 'integrations');
 define('PANEL_PAGE', 'discord');
 $page_title = $language->get('admin', 'discord');
-require_once(ROOT_PATH . '/core/templates/backend_init.php');
+
+require_once (ROOT_PATH . '/core/templates/backend_init.php');
 
 if (Input::exists()) {
     // Check token
-    $errors = array();
+    $errors = [];
 
     if (Token::check()) {
         // Valid token
         // Either enable or disable Discord integration
-        $enable_discord_id = $queries->getWhere('settings', array('name', '=', 'discord_integration'));
+        $enable_discord_id = $queries->getWhere('settings', ['name', '=', 'discord_integration']);
         $enable_discord_id = $enable_discord_id[0]->id;
+
         if ($_POST['enable_discord'] == '1') {
-            $guild_id = $queries->getWhere('settings', array('name', '=', 'discord'));
+            $guild_id = $queries->getWhere('settings', ['name', '=', 'discord']);
             $guild_id = $guild_id[0]->value;
+
             if (BOT_URL == '' || BOT_USERNAME == '' || $guild_id == '') {
                 $errors[] = $language->get('admin', 'discord_bot_must_be_setup');
-                $queries->update('settings', $enable_discord_id, array(
+                $queries->update('settings', $enable_discord_id, [
                     'value' => 0
-                ));
+                ]);
             } else {
-                $queries->update('settings', $enable_discord_id, array(
+                $queries->update('settings', $enable_discord_id, [
                     'value' => 1
-                ));
+                ]);
             }
         } else {
-            $queries->update('settings', $enable_discord_id, array(
+            $queries->update('settings', $enable_discord_id, [
                 'value' => 0
-            ));
+            ]);
         }
 
-        if (!count($errors))
+        if (! count($errors))
             $success = $language->get('admin', 'discord_settings_updated');
     } else {
         // Invalid token
-        $errors[] = array($language->get('general', 'invalid_token'));
+        $errors[] = [$language->get('general', 'invalid_token')];
     }
 }
 
 // Load modules + template
-Module::loadPage($user, $pages, $cache, $smarty, array($navigation, $cc_nav, $mod_nav), $widgets);
+Module::loadPage($user, $pages, $cache, $smarty, [$navigation, $cc_nav, $mod_nav], $widgets);
 
 if (isset($success))
-    $smarty->assign(array(
+    $smarty->assign([
         'SUCCESS' => $success,
         'SUCCESS_TITLE' => $language->get('general', 'success')
-    ));
+    ]);
 
 if (isset($errors) && count($errors))
-    $smarty->assign(array(
+    $smarty->assign([
         'ERRORS' => $errors,
         'ERRORS_TITLE' => $language->get('general', 'error')
-    ));
+    ]);
 
 if (Session::exists('discord_error'))
-    $smarty->assign(array(
-        'ERRORS' => array(Session::flash('discord_error')),
+    $smarty->assign([
+        'ERRORS' => [Session::flash('discord_error')],
         'ERRORS_TITLE' => $language->get('general', 'error')
-    ));
+    ]);
 
 // Check if Discord integration is enabled
-$discord_enabled = $queries->getWhere('settings', array('name', '=', 'discord_integration'));
+$discord_enabled = $queries->getWhere('settings', ['name', '=', 'discord_integration']);
 $discord_enabled = $discord_enabled[0]->value;
-$guild_id = $queries->getWhere('settings', array('name', '=', 'discord'));
+$guild_id = $queries->getWhere('settings', ['name', '=', 'discord']);
 $guild_id = $guild_id[0]->value;
 
-$smarty->assign(array(
+$smarty->assign([
     'PARENT_PAGE' => PARENT_PAGE,
     'DASHBOARD' => $language->get('admin', 'dashboard'),
     'INTEGRATIONS' => $language->get('admin', 'integrations'),
@@ -97,14 +100,14 @@ $smarty->assign(array(
     'BOT_USERNAME_SET' => (BOT_USERNAME != ''),
     'REQUIREMENTS' => rtrim($language->get('installer', 'requirements'), ':'),
     'BOT_SETUP' => $language->get('admin', 'discord_bot_setup')
-));
+]);
 
 $page_load = microtime(true) - $start;
 define('PAGE_LOAD_TIME', str_replace('{x}', round($page_load, 3), $language->get('general', 'page_loaded_in')));
 
 $template->onPageLoad();
 
-require(ROOT_PATH . '/core/templates/panel_navbar.php');
+require (ROOT_PATH . '/core/templates/panel_navbar.php');
 
 // Display template
 $template->displayTemplate('integrations/discord/discord.tpl', $smarty);
diff --git a/modules/Core/pages/panel/emails.php b/modules/Core/pages/panel/emails.php
index 19d922cc3140e72c2013ae1af80b40694d5f3331..452f8502d6be53b91b242bae5a485918a2d3d972 100644
--- a/modules/Core/pages/panel/emails.php
+++ b/modules/Core/pages/panel/emails.php
@@ -15,45 +15,44 @@ define('PAGE', 'panel');
 define('PARENT_PAGE', 'core_configuration');
 define('PANEL_PAGE', 'emails');
 $page_title = $language->get('admin', 'emails');
-require_once(ROOT_PATH . '/core/templates/backend_init.php');
+
+require_once (ROOT_PATH . '/core/templates/backend_init.php');
 
 // Since emails are sent in the user's language, they need to be able to pick which language's messages to edit
 if (Session::exists('editing_language')) $lang_name = Session::get('editing_language');
 else {
-    $default_lang = $queries->getWhere('languages', array('is_default', '=', 1));
+    $default_lang = $queries->getWhere('languages', ['is_default', '=', 1]);
     $default_lang = $default_lang[0]->name;
     $lang_name = $default_lang;
 }
 $editing_language = new Language(null, $lang_name);
-$emails = array(
+$emails = [
     ['register', $language->get('admin', 'registration'), ['subject' => $editing_language->get('emails', 'register_subject'), 'message' => $editing_language->get('emails', 'register_message')]],
     ['change_password', $language->get('user', 'change_password'), ['subject' => str_replace('?', '', $editing_language->get('emails', 'change_password_subject')), 'message' => $editing_language->get('emails', 'change_password_message')]],
     ['forum_topic_reply', $language->get('admin', 'forum_topic_reply_email'), ['subject' => $editing_language->get('emails', 'forum_topic_reply_subject'), 'message' => $editing_language->get('emails', 'forum_topic_reply_message')]]
-);
+];
 
 if (isset($_GET['action'])) {
-
     if ($_GET['action'] == 'test') {
-        $smarty->assign(array(
+        $smarty->assign([
             'SEND_TEST_EMAIL' => $language->get('admin', 'send_test_email'),
             'BACK' => $language->get('general', 'back'),
             'BACK_LINK' => URL::build('/panel/core/emails')
-        ));
+        ]);
 
         if (isset($_GET['do']) && $_GET['do'] == 'send') {
-            $errors = array();
+            $errors = [];
 
-            $php_mailer = $queries->getWhere('settings', array('name', '=', 'phpmailer'));
+            $php_mailer = $queries->getWhere('settings', ['name', '=', 'phpmailer']);
             $php_mailer = $php_mailer[0]->value;
 
             if ($php_mailer == '1') {
-
                 // PHP Mailer
-                $email = array(
-                    'to' => array('email' => Output::getClean($user->data()->email), 'name' => Output::getClean($user->data()->nickname)),
+                $email = [
+                    'to' => ['email' => Output::getClean($user->data()->email), 'name' => Output::getClean($user->data()->nickname)],
                     'subject' => SITE_NAME . ' - Test Email',
                     'message' => SITE_NAME . ' - Test email successful!',
-                );
+                ];
 
                 $sent = Email::send($email, 'mailer');
 
@@ -62,7 +61,7 @@ if (isset($_GET['action'])) {
                     $errors[] = $sent['error'];
             } else {
                 // PHP mail function
-                $siteemail = $queries->getWhere('settings', array('name', '=', 'outgoing_email'));
+                $siteemail = $queries->getWhere('settings', ['name', '=', 'outgoing_email']);
                 $siteemail = $siteemail[0]->value;
 
                 $to = $user->data()->email;
@@ -76,12 +75,12 @@ if (isset($_GET['action'])) {
                     'MIME-Version: 1.0' . "\r\n" .
                     'Content-type: text/html; charset=UTF-8' . "\r\n";
 
-                $email = array(
+                $email = [
                     'to' => $to,
                     'subject' => $subject,
                     'message' => $message,
                     'headers' => $headers
-                );
+                ];
 
                 $sent = Email::send($email, 'php');
 
@@ -90,30 +89,31 @@ if (isset($_GET['action'])) {
                     $errors[] = $sent['error'];
             }
 
-            if (!count($errors))
+            if (! count($errors))
                 $success = $language->get('admin', 'test_email_success');
         } else {
-            $smarty->assign(array(
+            $smarty->assign([
                 'SEND_TEST_EMAIL_INFO' => str_replace('{x}', Output::getClean($user->data()->email), $language->get('admin', 'send_test_email_info')),
                 'INFO' => $language->get('general', 'info'),
                 'SEND' => $language->get('admin', 'send'),
                 'SEND_LINK' => URL::build('/panel/core/emails/', 'action=test&do=send')
-            ));
+            ]);
         }
 
         $template_file = 'core/emails_test.tpl';
     } else if ($_GET['action'] == 'edit_messages') {
+        $available_languages = [];
 
-        $available_languages = array();
+        $languages = $queries->getWhere('languages', ['id', '<>', 0]);
 
-        $languages = $queries->getWhere('languages', array('id', '<>', 0));
         foreach ($languages as $language_db) {
             $lang = new Language(null, $language_db->name);
             $lang_file = ($lang->getActiveLanguageDirectory() . DIRECTORY_SEPARATOR . 'emails.php');
+
             if (file_exists($lang_file) && is_writable($lang_file)) array_push($available_languages, $language_db);
         }
 
-        $smarty->assign(array(
+        $smarty->assign([
             'BACK' => $language->get('general', 'back'),
             'BACK_LINK' => URL::build('/panel/core/emails'),
             'EMAILS_MESSAGES' => $language->get('admin', 'edit_email_messages'),
@@ -135,28 +135,26 @@ if (isset($_GET['action'])) {
             'PREVIEW_INFO' => $language->get('admin', 'email_preview_popup_message'),
             'SUBMIT' => $language->get('general', 'submit'),
             'TOKEN' => Token::get()
-        ));
+        ]);
 
         $template_file = 'core/emails_edit_messages.tpl';
     } else if ($_GET['action'] == 'preview') {
+        $viewing_language = new Language(null, Session::get('editing_language'));
 
-        $viewing_language =  new Language(null, Session::get('editing_language'));
-
-        $smarty->assign(array(
+        $smarty->assign([
             'USER_NAME' => $user->data()->username,
             'SUBJECT' => $viewing_language->get('emails', $_GET['email'] . '_subject'),
             'MESSAGE' => Email::formatEmail($_GET['email'], $viewing_language)
-        ));
+        ]);
 
         $template_file = 'core/emails_edit_messages_preview.tpl';
     }
 } else {
     // Handle input
     if (Input::exists()) {
-        $errors = array();
+        $errors = [];
 
         if (Token::check()) {
-
             // Handle email message updating
             if (isset($_POST['greeting'])) {
                 $editing_lang = new Language(null, $lang_name);
@@ -171,49 +169,49 @@ if (isset($_GET['action'])) {
                     $editing_lang->set('emails', $email[0] . '_message', Output::getClean(Input::get($email[0] . '_message')));
                 }
 
-                if (!count($errors)) {
+                if (! count($errors)) {
                     Session::flash('emails_success', $language->get('admin', 'email_settings_updated_successfully'));
                     Redirect::to(URL::build('/panel/core/emails', 'action=edit_messages'));
+
                     die();
                 }
             } else {
-
                 if (isset($_POST['enable_mailer']) && $_POST['enable_mailer'] == 1)
                     $mailer = '1';
-                else
-                    $mailer = '0';
+                else $mailer = '0';
 
-                $php_mailer = $queries->getWhere('settings', array('name', '=', 'phpmailer'));
+                $php_mailer = $queries->getWhere('settings', ['name', '=', 'phpmailer']);
                 $php_mailer = $php_mailer[0]->id;
 
-                $queries->update('settings', $php_mailer, array(
+                $queries->update('settings', $php_mailer, [
                     'value' => $mailer
-                ));
+                ]);
 
-                if (!empty($_POST['email'])) {
-                    $outgoing_email = $queries->getWhere('settings', array('name', '=', 'outgoing_email'));
+                if (! empty($_POST['email'])) {
+                    $outgoing_email = $queries->getWhere('settings', ['name', '=', 'outgoing_email']);
                     $outgoing_email = $outgoing_email[0]->id;
 
-                    $queries->update('settings', $outgoing_email, array(
+                    $queries->update('settings', $outgoing_email, [
                         'value' => Output::getClean($_POST['email'])
-                    ));
+                    ]);
                 }
 
                 // Update config
                 $config_path = ROOT_PATH . DIRECTORY_SEPARATOR . 'core' . DIRECTORY_SEPARATOR . 'email.php';
+
                 if (file_exists($config_path)) {
                     if (is_writable($config_path)) {
-                        require(ROOT_PATH . '/core/email.php');
+                        require (ROOT_PATH . '/core/email.php');
 
                         // Build new email config
                         $config = '<?php' . PHP_EOL .
                             '$GLOBALS[\'email\'] = array(' . PHP_EOL .
-                            '    \'email\' => \'' . str_replace('\'', '\\\'', (!empty($_POST['email']) ? $_POST['email'] : $GLOBALS['email']['email'])) . '\',' . PHP_EOL .
-                            '    \'username\' => \'' . str_replace('\'', '\\\'', (!empty($_POST['username']) ? $_POST['username'] : $GLOBALS['email']['username'])) . '\',' . PHP_EOL .
-                            '    \'password\' => \'' . str_replace('\'', '\\\'', ((!empty($_POST['password'])) ? $_POST['password'] : $GLOBALS['email']['password'])) . '\',' . PHP_EOL .
-                            '    \'name\' => \'' . str_replace('\'', '\\\'', (!empty($_POST['name']) ? $_POST['name'] : $GLOBALS['email']['name'])) . '\',' . PHP_EOL .
-                            '    \'host\' => \'' . str_replace('\'', '\\\'', (!empty($_POST['host']) ? $_POST['host'] : $GLOBALS['email']['host'])) . '\',' . PHP_EOL .
-                            '    \'port\' => ' . str_replace('\'', '\\\'', (!empty($_POST['port']) ? $_POST['port'] : $GLOBALS['email']['port'])) . ',' . PHP_EOL .
+                            '    \'email\' => \'' . str_replace('\'', '\\\'', (! empty($_POST['email']) ? $_POST['email'] : $GLOBALS['email']['email'])) . '\',' . PHP_EOL .
+                            '    \'username\' => \'' . str_replace('\'', '\\\'', (! empty($_POST['username']) ? $_POST['username'] : $GLOBALS['email']['username'])) . '\',' . PHP_EOL .
+                            '    \'password\' => \'' . str_replace('\'', '\\\'', ((! empty($_POST['password'])) ? $_POST['password'] : $GLOBALS['email']['password'])) . '\',' . PHP_EOL .
+                            '    \'name\' => \'' . str_replace('\'', '\\\'', (! empty($_POST['name']) ? $_POST['name'] : $GLOBALS['email']['name'])) . '\',' . PHP_EOL .
+                            '    \'host\' => \'' . str_replace('\'', '\\\'', (! empty($_POST['host']) ? $_POST['host'] : $GLOBALS['email']['host'])) . '\',' . PHP_EOL .
+                            '    \'port\' => ' . str_replace('\'', '\\\'', (! empty($_POST['port']) ? $_POST['port'] : $GLOBALS['email']['port'])) . ',' . PHP_EOL .
                             '    \'secure\' => \'' . str_replace('\'', '\\\'', $GLOBALS['email']['secure']) . '\',' . PHP_EOL .
                             '    \'smtp_auth\' => ' . (($GLOBALS['email']['smtp_auth']) ? 'true' : 'false') . PHP_EOL .
                             ');';
@@ -231,12 +229,12 @@ if (isset($_GET['action'])) {
                         // Build new email config
                         $config = '<?php' . PHP_EOL .
                             '$GLOBALS[\'email\'] = array(' . PHP_EOL .
-                            '    \'email\' => \'' . str_replace('\'', '\\\'', (!empty($_POST['email']) ? $_POST['email'] : '')) . '\',' . PHP_EOL .
-                            '    \'username\' => \'' . str_replace('\'', '\\\'', (!empty($_POST['username']) ? $_POST['username'] : '')) . '\',' . PHP_EOL .
-                            '    \'password\' => \'' . str_replace('\'', '\\\'', ((!empty($_POST['password'])) ? $_POST['password'] : '')) . '\',' . PHP_EOL .
-                            '    \'name\' => \'' . str_replace('\'', '\\\'', (!empty($_POST['name']) ? $_POST['name'] : '')) . '\',' . PHP_EOL .
-                            '    \'host\' => \'' . str_replace('\'', '\\\'', (!empty($_POST['host']) ? $_POST['host'] : '')) . '\',' . PHP_EOL .
-                            '    \'port\' => \'' . str_replace('\'', '\\\'', (!empty($_POST['port']) ? $_POST['host'] : 587)) . ',' . PHP_EOL .
+                            '    \'email\' => \'' . str_replace('\'', '\\\'', (! empty($_POST['email']) ? $_POST['email'] : '')) . '\',' . PHP_EOL .
+                            '    \'username\' => \'' . str_replace('\'', '\\\'', (! empty($_POST['username']) ? $_POST['username'] : '')) . '\',' . PHP_EOL .
+                            '    \'password\' => \'' . str_replace('\'', '\\\'', ((! empty($_POST['password'])) ? $_POST['password'] : '')) . '\',' . PHP_EOL .
+                            '    \'name\' => \'' . str_replace('\'', '\\\'', (! empty($_POST['name']) ? $_POST['name'] : '')) . '\',' . PHP_EOL .
+                            '    \'host\' => \'' . str_replace('\'', '\\\'', (! empty($_POST['host']) ? $_POST['host'] : '')) . '\',' . PHP_EOL .
+                            '    \'port\' => \'' . str_replace('\'', '\\\'', (! empty($_POST['port']) ? $_POST['host'] : 587)) . ',' . PHP_EOL .
                             '    \'secure\' => \'tls\',' . PHP_EOL .
                             '    \'smtp_auth\' => true' . PHP_EOL .
                             ');';
@@ -248,33 +246,33 @@ if (isset($_GET['action'])) {
                     }
                 }
 
-                if (!count($errors)) {
+                if (! count($errors)) {
                     // Redirect to refresh config values
                     Session::flash('emails_success', $language->get('admin', 'email_settings_updated_successfully'));
                     Redirect::to(URL::build('/panel/core/emails'));
+
                     die();
                 }
             }
-        } else
-            $errors[] = $language->get('general', 'invalid_token');
+        } else $errors[] = $language->get('general', 'invalid_token');
     }
 
-    $php_mailer = $queries->getWhere('settings', array('name', '=', 'phpmailer'));
+    $php_mailer = $queries->getWhere('settings', ['name', '=', 'phpmailer']);
     $php_mailer = $php_mailer[0]->value;
 
-    $outgoing_email = $queries->getWhere('settings', array('name', '=', 'outgoing_email'));
+    $outgoing_email = $queries->getWhere('settings', ['name', '=', 'outgoing_email']);
     $outgoing_email = $outgoing_email[0]->value;
 
-    require(ROOT_PATH . '/core/email.php');
+    require (ROOT_PATH . '/core/email.php');
 
     if ($user->hasPermission('admincp.core.emails_mass_message')) {
-        $smarty->assign(array(
+        $smarty->assign([
             'MASS_MESSAGE' => $language->get('admin', 'emails_mass_message'),
             'MASS_MESSAGE_LINK' => URL::build('/panel/core/emails/mass_message'),
-        ));
+        ]);
     }
 
-    $smarty->assign(array(
+    $smarty->assign([
         'MASS_MESSAGE' => $language->get('admin', 'emails_mass_message'),
         'MASS_MESSAGE_LINK' => URL::build('/panel/core/emails/mass_message'),
         'EDIT_EMAIL_MESSAGES' => $language->get('admin', 'edit_email_messages'),
@@ -292,41 +290,41 @@ if (isset($_GET['action'])) {
         'OUTGOING_EMAIL_VALUE' => Output::getClean($outgoing_email),
         'MAILER_SETTINGS_INFO' => $language->get('admin', 'mailer_settings_info'),
         'USERNAME' => $language->get('user', 'username'),
-        'USERNAME_VALUE' => (!empty($GLOBALS['email']['username']) ? Output::getClean($GLOBALS['email']['username']) : ''),
+        'USERNAME_VALUE' => (! empty($GLOBALS['email']['username']) ? Output::getClean($GLOBALS['email']['username']) : ''),
         'PASSWORD' => $language->get('user', 'password'),
         'PASSWORD_HIDDEN' => $language->get('admin', 'email_password_hidden'),
         'NAME' => $language->get('admin', 'name'),
-        'NAME_VALUE' => (!empty($GLOBALS['email']['name']) ? Output::getClean($GLOBALS['email']['name']) : ''),
+        'NAME_VALUE' => (! empty($GLOBALS['email']['name']) ? Output::getClean($GLOBALS['email']['name']) : ''),
         'HOST' => $language->get('admin', 'host'),
-        'HOST_VALUE' => (!empty($GLOBALS['email']['host']) ? Output::getClean($GLOBALS['email']['host']) : ''),
+        'HOST_VALUE' => (! empty($GLOBALS['email']['host']) ? Output::getClean($GLOBALS['email']['host']) : ''),
         'PORT' => $language->get('admin', 'email_port'),
-        'PORT_VALUE' => (!empty($GLOBALS['email']['port']) ? Output::getClean(isset($GLOBALS['email']['port']) ? $GLOBALS['email']['port'] : 587) : 587),
+        'PORT_VALUE' => (! empty($GLOBALS['email']['port']) ? Output::getClean(isset($GLOBALS['email']['port']) ? $GLOBALS['email']['port'] : 587) : 587),
         'SUBMIT' => $language->get('general', 'submit'),
         'TOKEN' => Token::get()
-    ));
+    ]);
 
     $template_file = 'core/emails.tpl';
 }
 
 // Load modules + template
-Module::loadPage($user, $pages, $cache, $smarty, array($navigation, $cc_nav, $mod_nav), $widgets);
+Module::loadPage($user, $pages, $cache, $smarty, [$navigation, $cc_nav, $mod_nav], $widgets);
 
 if (Session::exists('emails_success'))
     $success = Session::flash('emails_success');
 
 if (isset($success))
-    $smarty->assign(array(
+    $smarty->assign([
         'SUCCESS' => $success,
         'SUCCESS_TITLE' => $language->get('general', 'success')
-    ));
+    ]);
 
 if (isset($errors) && count($errors))
-    $smarty->assign(array(
+    $smarty->assign([
         'ERRORS' => $errors,
         'ERRORS_TITLE' => $language->get('general', 'error')
-    ));
+    ]);
 
-$smarty->assign(array(
+$smarty->assign([
     'PARENT_PAGE' => PARENT_PAGE,
     'DASHBOARD' => $language->get('admin', 'dashboard'),
     'CONFIGURATION' => $language->get('admin', 'configuration'),
@@ -334,14 +332,14 @@ $smarty->assign(array(
     'PAGE' => PANEL_PAGE,
     'TOKEN' => Token::get(),
     'SUBMIT' => $language->get('general', 'submit')
-));
+]);
 
 $page_load = microtime(true) - $start;
 define('PAGE_LOAD_TIME', str_replace('{x}', round($page_load, 3), $language->get('general', 'page_loaded_in')));
 
 $template->onPageLoad();
 
-require(ROOT_PATH . '/core/templates/panel_navbar.php');
+require (ROOT_PATH . '/core/templates/panel_navbar.php');
 
 // Display template
 $template->displayTemplate($template_file, $smarty);
diff --git a/modules/Core/pages/panel/emails_errors.php b/modules/Core/pages/panel/emails_errors.php
index d4b3e0aae9214cb4fa003fbf1382b607ff0f84f6..19a970c79de295e525ea4b754bfd85962802a3fe 100644
--- a/modules/Core/pages/panel/emails_errors.php
+++ b/modules/Core/pages/panel/emails_errors.php
@@ -15,35 +15,44 @@ define('PAGE', 'panel');
 define('PARENT_PAGE', 'core_configuration');
 define('PANEL_PAGE', 'emails');
 $page_title = $language->get('admin', 'email_errors');
-require_once(ROOT_PATH . '/core/templates/backend_init.php');
+
+require_once (ROOT_PATH . '/core/templates/backend_init.php');
 
 if (isset($_GET['do'])) {
     if ($_GET['do'] == 'purge') {
         // Purge all errors
         try {
-            $queries->delete('email_errors', array('id', '<>', 0));
+            $queries->delete('email_errors', ['id', '<>', 0]);
         } catch (Exception $e) {
             // Error
         }
 
         Session::flash('emails_errors_success', $language->get('admin', 'email_errors_purged_successfully'));
         Redirect::to(URL::build('/panel/core/emails/errors'));
+
         die();
-    } else if ($_GET['do'] == 'delete' && isset($_GET['id']) && is_numeric($_GET['id'])) {
+    }
+
+    if ($_GET['do'] == 'delete' && isset($_GET['id']) && is_numeric($_GET['id'])) {
         try {
-            $queries->delete('email_errors', array('id', '=', $_GET['id']));
+            $queries->delete('email_errors', ['id', '=', $_GET['id']]);
         } catch (Exception $e) {
             // Error
         }
 
         Session::flash('emails_errors_success', $language->get('admin', 'error_deleted_successfully'));
         Redirect::to(URL::build('/panel/core/emails/errors'));
+
         die();
-    } else if ($_GET['do'] == 'view' && isset($_GET['id']) && is_numeric($_GET['id'])) {
+    }
+
+    if ($_GET['do'] == 'view' && isset($_GET['id']) && is_numeric($_GET['id'])) {
         // Check the error exists
-        $error = $queries->getWhere('email_errors', array('id', '=', $_GET['id']));
-        if (!count($error)) {
+        $error = $queries->getWhere('email_errors', ['id', '=', $_GET['id']]);
+
+        if (! count($error)) {
             Redirect::to(URL::build('/panel/core/emails/errors'));
+
             die();
         }
         $error = $error[0];
@@ -51,28 +60,41 @@ if (isset($_GET['do'])) {
         switch ($error->type) {
             case 1:
                 $type = $language->get('admin', 'registration_email');
+
                 break;
+
             case 2:
                 $type = $language->get('admin', 'contact_email');
+
                 break;
+
             case 3:
                 $type = $language->get('admin', 'forgot_password_email');
+
                 break;
+
             case 4:
                 $type = $language->get('admin', 'api_registration_email');
+
                 break;
+
             case 5:
                 $type = $language->get('admin', 'forum_topic_reply_email');
+
                 break;
+
             case 6:
                 $type = $language->get('admin', 'emails_mass_message');
+
                 break;
+
             default:
                 $type = $language->get('admin', 'unknown');
+
                 break;
         }
 
-        $smarty->assign(array(
+        $smarty->assign([
             'BACK_LINK' => URL::build('/panel/core/emails/errors'),
             'VIEWING_ERROR' => $language->get('admin', 'viewing_email_error'),
             'USERNAME' => $language->get('user', 'username'),
@@ -92,29 +114,33 @@ if (isset($_GET['do'])) {
             'YES' => $language->get('general', 'yes'),
             'NO' => $language->get('general', 'no'),
             'CLOSE' => $language->get('general', 'close')
-        ));
+        ]);
 
         if ($error->type == 1) {
-            $user_validated = $queries->getWhere('users', array('id', '=', $error->user_id));
+            $user_validated = $queries->getWhere('users', ['id', '=', $error->user_id]);
+
             if (count($user_validated)) {
                 $user_validated = $user_validated[0];
+
                 if ($user_validated->active == 0) {
-                    $smarty->assign(array(
+                    $smarty->assign([
                         'VALIDATE_USER_LINK' => URL::build('/panel/users/edit/', 'id=' . $error->user_id . '&amp;action=validate'),
                         'VALIDATE_USER_TEXT' => $language->get('admin', 'validate_user')
-                    ));
+                    ]);
                 }
             }
         } else if ($error->type == 4) {
-            $user_error = $queries->getWhere('users', array('id', '=', $error->user_id));
+            $user_error = $queries->getWhere('users', ['id', '=', $error->user_id]);
+
             if (count($user_error)) {
                 $user_error = $user_error[0];
-                if ($user_error->active == 0 && !is_null($user_error->reset_code)) {
-                    $smarty->assign(array(
+
+                if ($user_error->active == 0 && ! is_null($user_error->reset_code)) {
+                    $smarty->assign([
                         'REGISTRATION_LINK' => $language->get('admin', 'registration_link'),
                         'SHOW_REGISTRATION_LINK' => $language->get('admin', 'show_registration_link'),
                         'REGISTRATION_LINK_VALUE' => rtrim(Util::getSelfURL(), '/') . URL::build('/complete_signup/', 'c=' . Output::getClean($user_error->reset_code))
-                    ));
+                    ]);
                 }
             }
         }
@@ -122,6 +148,7 @@ if (isset($_GET['do'])) {
         $template_file = 'core/emails_errors_view.tpl';
     } else {
         Redirect::to(URL::build('/panel/core/emails/errors'));
+
         die();
     }
 } else {
@@ -130,17 +157,19 @@ if (isset($_GET['do'])) {
 
     // Get page
     if (isset($_GET['p'])) {
-        if (!is_numeric($_GET['p'])) {
+        if (! is_numeric($_GET['p'])) {
             Redirect::to(URL::build('/panel/core/emails/errors'));
+
             die();
-        } else {
+        }
+
             if ($_GET['p'] == 1) {
                 // Avoid bug in pagination class
                 Redirect::to(URL::build('/panel/core/emails/errors'));
+
                 die();
             }
             $p = $_GET['p'];
-        }
     } else {
         $p = 1;
     }
@@ -151,52 +180,65 @@ if (isset($_GET['do'])) {
     $results = $paginator->getLimited($email_errors, 10, $p, count($email_errors));
     $pagination = $paginator->generate(7, URL::build('/panel/core/emails/errors', true));
 
-    $smarty->assign(array(
+    $smarty->assign([
         'BACK_LINK' => URL::build('/panel/core/emails'),
         'TYPE' => $language->get('admin', 'type'),
         'DATE' => $language->get('general', 'date'),
         'USERNAME' => $language->get('user', 'username'),
         'ACTIONS' => $language->get('general', 'actions')
-    ));
+    ]);
 
     if (count($email_errors)) {
-        $template_errors = array();
+        $template_errors = [];
 
         for ($n = 0; $n < count($results->data); $n++) {
             switch ($results->data[$n]->type) {
                 case 1:
                     $type = $language->get('admin', 'registration_email');
+
                     break;
+
                 case 2:
                     $type = $language->get('admin', 'contact_email');
+
                     break;
+
                 case 3:
                     $type = $language->get('admin', 'forgot_password_email');
+
                     break;
+
                 case 4:
                     $type = $language->get('admin', 'api_registration_email');
+
                     break;
+
                 case 5:
                     $type = $language->get('admin', 'forum_topic_reply_email');
+
                     break;
+
                 case 6:
                     $type = $language->get('admin', 'emails_mass_message');
+
                     break;
+
                 default:
                     $type = $language->get('admin', 'unknown');
+
                     break;
             }
 
-            $template_errors[] = array(
+            $template_errors[] = [
                 'type' => $type,
                 'date' => date('d M Y, H:i', $results->data[$n]->at),
                 'user' => Output::getClean($user->idToName($results->data[$n]->user_id)),
                 'view_link' => URL::build('/panel/core/emails/errors/', 'do=view&id=' . $results->data[$n]->id),
                 'id' => $results->data[$n]->id
-            );
+            ];
         }
 
-        $smarty->assign(array(
+        $smarty->assign([
             'EMAIL_ERRORS_ARRAY' => $template_errors,
             'DELETE_LINK' => URL::build('/panel/core/emails/errors/', 'do=delete&id={x}'),
             'ARE_YOU_SURE' => $language->get('general', 'are_you_sure'),
@@ -207,32 +249,32 @@ if (isset($_GET['do'])) {
             'YES' => $language->get('general', 'yes'),
             'NO' => $language->get('general', 'no'),
             'PAGINATION' => $pagination
-        ));
+        ]);
     } else {
-        $smarty->assign(array(
+        $smarty->assign([
             'NO_ERRORS' => $language->get('admin', 'no_email_errors')
-        ));
+        ]);
     }
 
     $template_file = 'core/emails_errors.tpl';
 }
 
 // Load modules + template
-Module::loadPage($user, $pages, $cache, $smarty, array($navigation, $cc_nav, $mod_nav), $widgets);
+Module::loadPage($user, $pages, $cache, $smarty, [$navigation, $cc_nav, $mod_nav], $widgets);
 
 if (Session::exists('emails_errors_success'))
-    $smarty->assign(array(
+    $smarty->assign([
         'SUCCESS' => Session::flash('emails_errors_success'),
         'SUCCESS_TITLE' => $language->get('general', 'success')
-    ));
+    ]);
 
 if (isset($errors) && count($errors))
-    $smarty->assign(array(
+    $smarty->assign([
         'ERRORS' => $errors,
         'ERRORS_TITLE' => $language->get('general', 'error')
-    ));
+    ]);
 
-$smarty->assign(array(
+$smarty->assign([
     'PARENT_PAGE' => PARENT_PAGE,
     'DASHBOARD' => $language->get('admin', 'dashboard'),
     'CONFIGURATION' => $language->get('admin', 'configuration'),
@@ -241,14 +283,14 @@ $smarty->assign(array(
     'EMAIL_ERRORS' => $language->get('admin', 'email_errors'),
     'PAGE' => PANEL_PAGE,
     'BACK' => $language->get('general', 'back')
-));
+]);
 
 $page_load = microtime(true) - $start;
 define('PAGE_LOAD_TIME', str_replace('{x}', round($page_load, 3), $language->get('general', 'page_loaded_in')));
 
 $template->onPageLoad();
 
-require(ROOT_PATH . '/core/templates/panel_navbar.php');
+require (ROOT_PATH . '/core/templates/panel_navbar.php');
 
 // Display template
 $template->displayTemplate($template_file, $smarty);
diff --git a/modules/Core/pages/panel/emails_mass_message.php b/modules/Core/pages/panel/emails_mass_message.php
index 2eb6f04c4ac101e2661baffa9cf7cc840621780a..9c663041a522260d9d4174767c0d16e00fe59e6a 100644
--- a/modules/Core/pages/panel/emails_mass_message.php
+++ b/modules/Core/pages/panel/emails_mass_message.php
@@ -15,59 +15,59 @@ define('PAGE', 'panel');
 define('PARENT_PAGE', 'core_configuration');
 define('PANEL_PAGE', 'emails');
 $page_title = $language->get('admin', 'emails_mass_message');
-require_once(ROOT_PATH . '/core/templates/backend_init.php');
+
+require_once (ROOT_PATH . '/core/templates/backend_init.php');
 
 // Handle input
 if (Input::exists()) {
-    $errors = array();
+    $errors = [];
 
     if (Token::check()) {
-
         $validate = new Validate();
 
-        $validate->check($_POST, array(
-            'subject' => array(
+        $validate->check($_POST, [
+            'subject' => [
                 'required' => true,
                 'min' => 1,
-            ),
-            'content' => array(
+            ],
+            'content' => [
                 'required' => true,
                 'min' => 1,
                 'max' => 75000
-            )
-        ));
+            ]
+        ]);
 
         if ($validate->passed()) {
+            $users = $queries->getWhere('users', ['id', '<>', 0]);
 
-            $users = $queries->getWhere('users', array('id', '<>', 0));
-
-            $siteemail = $queries->getWhere('settings', array('name', '=', 'outgoing_email'));
+            $siteemail = $queries->getWhere('settings', ['name', '=', 'outgoing_email']);
             $siteemail = $siteemail[0]->value;
-            $contactemail = $queries->getWhere('settings', array('name', '=', 'incoming_email'));
+            $contactemail = $queries->getWhere('settings', ['name', '=', 'incoming_email']);
             $contactemail = $contactemail[0]->value;
 
             try {
-                $php_mailer = $queries->getWhere('settings', array('name', '=', 'phpmailer'));
+                $php_mailer = $queries->getWhere('settings', ['name', '=', 'phpmailer']);
                 $php_mailer = $php_mailer[0]->value;
+
                 if ($php_mailer == '1') {
                     foreach ($users as $email_user) {
                         // PHP Mailer
-                        $email = array(
-                            'replyto' => array('email' => $contactemail, 'name' => Output::getClean(SITE_NAME)),
-                            'to' => array('email' => Output::getClean($email_user->email), 'name' => Output::getClean($email_user->username)),
+                        $email = [
+                            'replyto' => ['email' => $contactemail, 'name' => Output::getClean(SITE_NAME)],
+                            'to' => ['email' => Output::getClean($email_user->email), 'name' => Output::getClean($email_user->username)],
                             'subject' => Output::getClean(Input::get('subject')),
                             'message' => str_replace(['{username}', '{sitename}'], [$email_user->username, SITE_NAME], Input::get('content')),
-                        );
+                        ];
                         $sent = Email::send($email, 'mailer');
 
                         if (isset($sent['error'])) {
                             // Error, log it
-                            $queries->create('email_errors', array(
+                            $queries->create('email_errors', [
                                 'type' => 6, // 6 = mass message
                                 'content' => $sent['error'],
                                 'at' => date('U'),
                                 'user_id' => $user->data()->id
-                            ));
+                            ]);
                         }
                     }
                 } else {
@@ -79,23 +79,23 @@ if (Input::exists()) {
                             'MIME-Version: 1.0' . "\r\n" .
                             'Content-type: text/html; charset=UTF-8' . "\r\n";
 
-                        $email = array(
+                        $email = [
                             'to' => $email_user->email,
                             'subject' => Output::getClean(Input::get('subject')),
                             'message' => str_replace(['{username}', '{sitename}'], [$email_user->username, SITE_NAME], Input::get('content')),
                             'headers' => $headers
-                        );
+                        ];
 
                         $sent = Email::send($email, 'php');
 
                         if (isset($sent['error'])) {
                             // Error, log it
-                            $queries->create('email_errors', array(
+                            $queries->create('email_errors', [
                                 'type' => 6, // 6 = mass message
                                 'content' => $sent['error'],
                                 'at' => date('U'),
                                 'user_id' => $user->data()->id
-                            ));
+                            ]);
                         }
                     }
                 }
@@ -106,9 +106,10 @@ if (Input::exists()) {
 
             Log::getInstance()->log(Log::Action('admin/core/email/mass_message'));
 
-            if (!count($errors)) {
+            if (! count($errors)) {
                 Session::flash('emails_success', $language->get('admin', 'emails_mass_message_sent_successfully'));
                 Redirect::to(URL::build('/panel/core/emails'));
+
                 die();
             }
         } else {
@@ -116,19 +117,18 @@ if (Input::exists()) {
                 $errors[] = $error;
             }
         }
-    } else
-        $errors[] = $language->get('general', 'invalid_token');
+    } else $errors[] = $language->get('general', 'invalid_token');
 }
 
-$php_mailer = $queries->getWhere('settings', array('name', '=', 'phpmailer'));
+$php_mailer = $queries->getWhere('settings', ['name', '=', 'phpmailer']);
 $php_mailer = $php_mailer[0]->value;
 
-$outgoing_email = $queries->getWhere('settings', array('name', '=', 'outgoing_email'));
+$outgoing_email = $queries->getWhere('settings', ['name', '=', 'outgoing_email']);
 $outgoing_email = $outgoing_email[0]->value;
 
-require(ROOT_PATH . '/core/email.php');
+require (ROOT_PATH . '/core/email.php');
 
-$smarty->assign(array(
+$smarty->assign([
     'SENDING_MASS_MESSAGE' => $language->get('admin', 'sending_mass_message'),
     'EMAILS_MASS_MESSAGE' => $language->get('admin', 'emails_mass_message'),
     'SUBJECT' => $language->get('admin', 'email_message_subject'),
@@ -138,12 +138,12 @@ $smarty->assign(array(
     'LOADING' => $language->get('admin', 'emails_mass_message_loading'),
     'BACK' => $language->get('general', 'back'),
     'BACK_LINK' => URL::build('/panel/core/emails')
-));
+]);
 
-$template->addCSSFiles(array(
-    (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/emoji/css/emojione.min.css' => array(),
-    (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/emojionearea/css/emojionearea.min.css' => array(),
-));
+$template->addCSSFiles([
+    (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/emoji/css/emojione.min.css' => [],
+    (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/emojionearea/css/emojionearea.min.css' => [],
+]);
 
 // Get post formatting type (HTML or Markdown)
 $cache->setCache('post_formatting');
@@ -154,10 +154,10 @@ if ($formatting == 'markdown') {
     $smarty->assign('MARKDOWN', true);
     $smarty->assign('MARKDOWN_HELP', $language->get('general', 'markdown_help'));
 
-    $template->addJSFiles(array(
-        (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/emoji/js/emojione.min.js' => array(),
-        (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/emojionearea/js/emojionearea.min.js' => array()
-    ));
+    $template->addJSFiles([
+        (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/emoji/js/emojione.min.js' => [],
+        (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/emojionearea/js/emojionearea.min.js' => []
+    ]);
 
     $template->addJSScript('
       $(document).ready(function() {
@@ -167,12 +167,12 @@ if ($formatting == 'markdown') {
       });
     ');
 } else {
-    $template->addJSFiles(array(
-        (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/ckeditor/plugins/spoiler/js/spoiler.js' => array(),
-        (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/prism/prism.js' => array(),
-        (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/tinymce/plugins/spoiler/js/spoiler.js' => array(),
-        (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/tinymce/tinymce.min.js' => array()
-    ));
+    $template->addJSFiles([
+        (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/ckeditor/plugins/spoiler/js/spoiler.js' => [],
+        (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/prism/prism.js' => [],
+        (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/tinymce/plugins/spoiler/js/spoiler.js' => [],
+        (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/tinymce/tinymce.min.js' => []
+    ]);
 
     $template->addJSScript(Input::createTinyEditor($language, 'reply'));
 }
@@ -180,24 +180,24 @@ if ($formatting == 'markdown') {
 $template_file = 'core/emails_mass_message.tpl';
 
 // Load modules + template
-Module::loadPage($user, $pages, $cache, $smarty, array($navigation, $cc_nav, $mod_nav), $widgets);
+Module::loadPage($user, $pages, $cache, $smarty, [$navigation, $cc_nav, $mod_nav], $widgets);
 
 if (Session::exists('emails_success'))
     $success = Session::flash('emails_success');
 
 if (isset($success))
-    $smarty->assign(array(
+    $smarty->assign([
         'SUCCESS' => $success,
         'SUCCESS_TITLE' => $language->get('general', 'success')
-    ));
+    ]);
 
 if (isset($errors) && count($errors))
-    $smarty->assign(array(
+    $smarty->assign([
         'ERRORS' => $errors,
         'ERRORS_TITLE' => $language->get('general', 'error')
-    ));
+    ]);
 
-$smarty->assign(array(
+$smarty->assign([
     'PARENT_PAGE' => PARENT_PAGE,
     'DASHBOARD' => $language->get('admin', 'dashboard'),
     'CONFIGURATION' => $language->get('admin', 'configuration'),
@@ -205,14 +205,14 @@ $smarty->assign(array(
     'PAGE' => PANEL_PAGE,
     'TOKEN' => Token::get(),
     'SUBMIT' => $language->get('general', 'submit')
-));
+]);
 
 $page_load = microtime(true) - $start;
 define('PAGE_LOAD_TIME', str_replace('{x}', round($page_load, 3), $language->get('general', 'page_loaded_in')));
 
 $template->onPageLoad();
 
-require(ROOT_PATH . '/core/templates/panel_navbar.php');
+require (ROOT_PATH . '/core/templates/panel_navbar.php');
 
 // Display template
 $template->displayTemplate($template_file, $smarty);
diff --git a/modules/Core/pages/panel/errors.php b/modules/Core/pages/panel/errors.php
index 8059c94252186ba1596e4a6ab27db9687f16b2f3..ed7d994fde95d399f016f7200cb52a650396945f 100644
--- a/modules/Core/pages/panel/errors.php
+++ b/modules/Core/pages/panel/errors.php
@@ -15,23 +15,25 @@ define('PAGE', 'panel');
 define('PARENT_PAGE', 'core_configuration');
 define('PANEL_PAGE', 'debugging_and_maintenance');
 $page_title = $language->get('admin', 'error_logs');
-require_once(ROOT_PATH . '/core/templates/backend_init.php');
 
-if (isset($_GET['log']) && isset($_GET['do']) && $_GET['do'] == 'purge') {
-    file_put_contents(join(DIRECTORY_SEPARATOR, array(ROOT_PATH, 'cache', 'logs', $_GET['log'] . '-log.log')), '');
+require_once (ROOT_PATH . '/core/templates/backend_init.php');
+
+if (isset($_GET['log'], $_GET['do']) && $_GET['do'] == 'purge') {
+    file_put_contents(join(DIRECTORY_SEPARATOR, [ROOT_PATH, 'cache', 'logs', $_GET['log'] . '-log.log']), '');
     Session::flash('error_log_success', $language->get('admin', 'log_purged_successfully'));
     Redirect::to(URL::build('/panel/core/errors'));
+
     die();
 }
 
 // Load modules + template
-Module::loadPage($user, $pages, $cache, $smarty, array($navigation, $cc_nav, $mod_nav), $widgets);
+Module::loadPage($user, $pages, $cache, $smarty, [$navigation, $cc_nav, $mod_nav], $widgets);
 
 if (Session::exists('error_log_success'))
-    $smarty->assign(array(
+    $smarty->assign([
         'SUCCESS' => Session::flash('error_log_success'),
         'SUCCESS_TITLE' => $language->get('general', 'success')
-    ));
+    ]);
 
 if (isset($_GET['log'])) {
     switch ($_GET['log']) {
@@ -60,13 +62,13 @@ if (isset($_GET['log'])) {
             break;
     }
 
-    if (file_exists(join(DIRECTORY_SEPARATOR, array(ROOT_PATH, 'cache', 'logs', $_GET['log'] . '-log.log')))) {
-        $smarty->assign('LOG', nl2br(Output::getClean(file_get_contents(join(DIRECTORY_SEPARATOR, array(ROOT_PATH, 'cache', 'logs', $type . '-log.log'))))));
+    if (file_exists(join(DIRECTORY_SEPARATOR, [ROOT_PATH, 'cache', 'logs', $_GET['log'] . '-log.log']))) {
+        $smarty->assign('LOG', nl2br(Output::getClean(file_get_contents(join(DIRECTORY_SEPARATOR, [ROOT_PATH, 'cache', 'logs', $type . '-log.log'])))));
     } else {
         $smarty->assign('NO_LOG_FOUND', $language->get('admin', 'log_file_not_found'));
     }
 
-    $smarty->assign(array(
+    $smarty->assign([
         'BACK_LINK' => URL::build('/panel/core/errors'),
         'LOG_NAME' => $title,
         'ACTIONS' => $language->get('general', 'actions'),
@@ -76,9 +78,9 @@ if (isset($_GET['log'])) {
         'YES' => $language->get('general', 'yes'),
         'NO' => $language->get('general', 'no'),
         'PURGE_LOG_LINK' => URL::build('/panel/core/errors/', 'log=' . $type . '&do=purge')
-    ));
+    ]);
 } else {
-    $smarty->assign(array(
+    $smarty->assign([
         'BACK_LINK' => URL::build('/panel/core/debugging_and_maintenance'),
         'FATAL_LOG' => $language->get('admin', 'fatal_log'),
         'FATAL_LOG_LINK' => URL::build('/panel/core/errors/', 'log=fatal'),
@@ -88,10 +90,10 @@ if (isset($_GET['log'])) {
         'WARNING_LOG_LINK' => URL::build('/panel/core/errors/', 'log=warning'),
         'OTHER_LOG' => $language->get('admin', 'other_log'),
         'OTHER_LOG_LINK' => URL::build('/panel/core/errors/', 'log=other'),
-    ));
+    ]);
 }
 
-$smarty->assign(array(
+$smarty->assign([
     'PARENT_PAGE' => PARENT_PAGE,
     'DASHBOARD' => $language->get('admin', 'dashboard'),
     'CONFIGURATION' => $language->get('admin', 'configuration'),
@@ -99,17 +101,16 @@ $smarty->assign(array(
     'PAGE' => PANEL_PAGE,
     'ERROR_LOGS' => $language->get('admin', 'error_logs'),
     'BACK' => $language->get('general', 'back')
-));
+]);
 
 $page_load = microtime(true) - $start;
 define('PAGE_LOAD_TIME', str_replace('{x}', round($page_load, 3), $language->get('general', 'page_loaded_in')));
 
 $template->onPageLoad();
 
-require(ROOT_PATH . '/core/templates/panel_navbar.php');
+require (ROOT_PATH . '/core/templates/panel_navbar.php');
 
 // Display template
-if (!isset($_GET['log']))
+if (! isset($_GET['log']))
     $template->displayTemplate('core/errors.tpl', $smarty);
-else
-    $template->displayTemplate('core/errors_view.tpl', $smarty);
+else $template->displayTemplate('core/errors_view.tpl', $smarty);
diff --git a/modules/Core/pages/panel/general_settings.php b/modules/Core/pages/panel/general_settings.php
index 0fa35da7682794ad50880a88d29908916628763a..a161bebc1db7b9ea54eebe3110779797959306fe 100644
--- a/modules/Core/pages/panel/general_settings.php
+++ b/modules/Core/pages/panel/general_settings.php
@@ -15,34 +15,38 @@ define('PAGE', 'panel');
 define('PARENT_PAGE', 'core_configuration');
 define('PANEL_PAGE', 'general_settings');
 $page_title = $language->get('admin', 'general_settings');
-require_once(ROOT_PATH . '/core/templates/backend_init.php');
+
+require_once (ROOT_PATH . '/core/templates/backend_init.php');
 
 // Handle input
 if (isset($_GET['do'])) {
     if ($_GET['do'] == 'installLanguage') {
         // Install new language
         $languages = glob(ROOT_PATH . DIRECTORY_SEPARATOR . 'custom' . DIRECTORY_SEPARATOR . 'languages' . DIRECTORY_SEPARATOR . '*', GLOB_ONLYDIR);
+
         foreach ($languages as $item) {
             if (file_exists($item . DIRECTORY_SEPARATOR . 'version.php')) {
                 $folders = explode(DIRECTORY_SEPARATOR, $item);
                 $folder_name = $folders[count($folders) - 1];
 
                 // Is it already in the database?
-                $exists = $queries->getWhere('languages', array('name', '=', Output::getClean($folder_name)));
-                if (!count($exists)) {
+                $exists = $queries->getWhere('languages', ['name', '=', Output::getClean($folder_name)]);
+
+                if (! count($exists)) {
                     // No, add it now
-                    $queries->create('languages', array(
+                    $queries->create('languages', [
                         'name' => Output::getClean($folder_name)
-                    ));
+                    ]);
                 }
             }
         }
 
         Session::flash('general_language', $language->get('admin', 'installed_languages'));
     } else if ($_GET['do'] == 'updateLanguages') {
-        $active_language = $queries->getWhere('languages', array('is_default', '=', 1));
+        $active_language = $queries->getWhere('languages', ['is_default', '=', 1]);
+
         if (count($active_language)) {
-            DB::getInstance()->createQuery('UPDATE nl2_users SET language_id = ?', array($active_language[0]->id));
+            DB::getInstance()->createQuery('UPDATE nl2_users SET language_id = ?', [$active_language[0]->id]);
             $language = new Language('core', $active_language[0]->name);
         }
 
@@ -50,6 +54,7 @@ if (isset($_GET['do'])) {
     }
 
     Redirect::to(URL::build('/panel/core/general_settings'));
+
     die();
 }
 
@@ -59,59 +64,59 @@ if (Input::exists()) {
         // Validate input
         $validate = new Validate();
 
-        $validation = $validate->check($_POST, array(
-            'sitename' => array(
+        $validation = $validate->check($_POST, [
+            'sitename' => [
                 'required' => true,
                 'min' => 2,
                 'max' => 64
-            ),
-            'contact_email' => array(
+            ],
+            'contact_email' => [
                 'required' => true,
                 'min' => 3,
                 'max' => 255
-            )
-        ));
+            ]
+        ]);
 
         if ($validation->passed()) {
             // Update settings
             // Sitename
-            $sitename_id = $queries->getWhere('settings', array('name', '=', 'sitename'));
+            $sitename_id = $queries->getWhere('settings', ['name', '=', 'sitename']);
             $sitename_id = $sitename_id[0]->id;
 
-            $queries->update('settings', $sitename_id, array(
+            $queries->update('settings', $sitename_id, [
                 'value' => Output::getClean(Input::get('sitename'))
-            ));
+            ]);
 
             // Update cache
             $cache->setCache('sitenamecache');
             $cache->store('sitename', Output::getClean(Input::get('sitename')));
 
             // Email address
-            $contact_id = $queries->getWhere('settings', array('name', '=', 'incoming_email'));
+            $contact_id = $queries->getWhere('settings', ['name', '=', 'incoming_email']);
             $contact_id = $contact_id[0]->id;
 
-            $queries->update('settings', $contact_id, array(
+            $queries->update('settings', $contact_id, [
                 'value' => Output::getClean(Input::get('contact_email'))
-            ));
+            ]);
 
             // Language
             // Get current default language
-            $default_language = $queries->getWhere('languages', array('is_default', '=', 1));
+            $default_language = $queries->getWhere('languages', ['is_default', '=', 1]);
             $default_language = $default_language[0];
 
             if ($default_language->name != Input::get('language')) {
                 // The default language has been changed
-                $queries->update('languages', $default_language->id, array(
+                $queries->update('languages', $default_language->id, [
                     'is_default' => 0
-                ));
+                ]);
 
-                $language_id = $queries->getWhere('languages', array('id', '=', Input::get('language')));
+                $language_id = $queries->getWhere('languages', ['id', '=', Input::get('language')]);
                 $language_name = Output::getClean($language_id[0]->name);
                 $language_id = $language_id[0]->id;
 
-                $queries->update('languages', $language_id, array(
+                $queries->update('languages', $language_id, [
                     'is_default' => 1
-                ));
+                ]);
 
                 // Update cache
                 $cache->setCache('languagecache');
@@ -119,65 +124,64 @@ if (Input::exists()) {
             }
 
             // Timezone
-            $timezone_id = $queries->getWhere('settings', array('name', '=', 'timezone'));
+            $timezone_id = $queries->getWhere('settings', ['name', '=', 'timezone']);
             $timezone_id = $timezone_id[0]->id;
 
             try {
-                $queries->update('settings', $timezone_id, array(
+                $queries->update('settings', $timezone_id, [
                     'value' => Output::getClean($_POST['timezone'])
-                ));
+                ]);
 
                 // Cache
                 $cache->setCache('timezone_cache');
                 $cache->store('timezone', Output::getClean($_POST['timezone']));
             } catch (Exception $e) {
-                $errors = array($e->getMessage());
+                $errors = [$e->getMessage()];
             }
 
             // Portal
-            $portal_id = $queries->getWhere('settings', array('name', '=', 'portal'));
+            $portal_id = $queries->getWhere('settings', ['name', '=', 'portal']);
             $portal_id = $portal_id[0]->id;
 
             if ($_POST['homepage'] == 'portal') {
                 $use_portal = 1;
             } else $use_portal = 0;
 
-            $queries->update('settings', $portal_id, array(
+            $queries->update('settings', $portal_id, [
                 'value' => $use_portal
-            ));
+            ]);
 
             // Update cache
             $cache->setCache('portal_cache');
             $cache->store('portal', $use_portal);
 
             // Private profile
-            $private_profile_id = $queries->getWhere('settings', array('name', '=', 'private_profile'));
+            $private_profile_id = $queries->getWhere('settings', ['name', '=', 'private_profile']);
             $private_profile_id = $private_profile_id[0]->id;
 
             if ($_POST['privateProfile'])
                 $private_profile = 1;
-            else
-                $private_profile = 0;
+            else $private_profile = 0;
 
-            $queries->update('settings', $private_profile_id, array(
+            $queries->update('settings', $private_profile_id, [
                 'value' => $private_profile
-            ));
+            ]);
 
             // Registration displaynames
-            $displaynames_id = $queries->getWhere('settings', array('name', '=', 'displaynames'));
+            $displaynames_id = $queries->getWhere('settings', ['name', '=', 'displaynames']);
             $displaynames_id = $displaynames_id[0]->id;
 
-            $queries->update('settings', $displaynames_id, array(
+            $queries->update('settings', $displaynames_id, [
                 'value' => $_POST['displaynames']
-            ));
+            ]);
 
             // Post formatting
-            $formatting_id = $queries->getWhere('settings', array('name', '=', 'formatting_type'));
+            $formatting_id = $queries->getWhere('settings', ['name', '=', 'formatting_type']);
             $formatting_id = $formatting_id[0]->id;
 
-            $queries->update('settings', $formatting_id, array(
+            $queries->update('settings', $formatting_id, [
                 'value' => Output::getClean(Input::get('formatting'))
-            ));
+            ]);
 
             // Update cache
             $cache->setCache('post_formatting');
@@ -187,8 +191,7 @@ if (Input::exists()) {
             if (Input::get('friendlyURL') == 'true') $friendly = true;
             else $friendly = false;
 
-            if (is_writable(ROOT_PATH . '/' . join(DIRECTORY_SEPARATOR, array('core', 'config.php')))) {
-
+            if (is_writable(ROOT_PATH . '/' . join(DIRECTORY_SEPARATOR, ['core', 'config.php']))) {
                 // Require config
                 if (isset($path) && file_exists($path . 'core/config.php')) {
                     $loadedConfig = json_decode(file_get_contents($path . 'core/config.php'), true);
@@ -202,44 +205,44 @@ if (Input::exists()) {
 
                 // Make string to input
                 Config::set('core/friendly', $friendly);
-            } else $errors = array($language->get('admin', 'config_not_writable'));
+            } else $errors = [$language->get('admin', 'config_not_writable')];
 
             // Force HTTPS?
             if (Input::get('forceHTTPS') == 'true')
                 $https = 'true';
-            else
-                $https = 'false';
+            else $https = 'false';
+
+            $force_https_id = $queries->getWhere('settings', ['name', '=', 'force_https']);
 
-            $force_https_id = $queries->getWhere('settings', array('name', '=', 'force_https'));
             if (count($force_https_id)) {
                 $force_https_id = $force_https_id[0]->id;
-                $queries->update('settings', $force_https_id, array(
+                $queries->update('settings', $force_https_id, [
                     'value' => $https
-                ));
+                ]);
             } else {
-                $queries->create('settings', array(
+                $queries->create('settings', [
                     'name' => 'force_https',
                     'value' => $https
-                ));
+                ]);
             }
 
             // Force WWW?
             if (Input::get('forceWWW') == 'true')
                 $www = 'true';
-            else
-                $www = 'false';
+            else $www = 'false';
+
+            $force_www_id = $queries->getWhere('settings', ['name', '=', 'force_www']);
 
-            $force_www_id = $queries->getWhere('settings', array('name', '=', 'force_www'));
             if (count($force_www_id)) {
                 $force_www_id = $force_www_id[0]->id;
-                $queries->update('settings', $force_www_id, array(
+                $queries->update('settings', $force_www_id, [
                     'value' => $www
-                ));
+                ]);
             } else {
-                $queries->create('settings', array(
+                $queries->create('settings', [
                     'name' => 'force_www',
                     'value' => $www
-                ));
+                ]);
             }
 
             /*
@@ -256,12 +259,12 @@ if (Input::exists()) {
             */
 
             // Login method
-            $login_method_id = $queries->getWhere('settings', array('name', '=', 'login_method'));
+            $login_method_id = $queries->getWhere('settings', ['name', '=', 'login_method']);
             $login_method_id = $login_method_id[0]->id;
 
-            $queries->update('settings', $login_method_id, array(
+            $queries->update('settings', $login_method_id, [
                 'value' => $_POST['login_method']
-            ));
+            ]);
 
             Log::getInstance()->log(Log::Action('admin/core/general'));
 
@@ -275,17 +278,18 @@ if (Input::exists()) {
             Session::flash('general_language', $language->get('admin', 'settings_updated_successfully'));
 
             // Redirect in case URL type has changed
-            if (!isset($errors)) {
+            if (! isset($errors)) {
                 if ($friendly == 'true') {
                     $redirect = URL::build('/panel/core/general_settings', '', 'friendly');
                 } else {
                     $redirect = URL::build('/panel/core/general_settings', '', 'non-friendly');
                 }
                 Redirect::to($redirect);
+
                 die();
             }
         } else {
-            $errors = array();
+            $errors = [];
 
             foreach ($validation->errors() as $error) {
                 if (strpos($error, 'sitename') !== false) {
@@ -297,47 +301,48 @@ if (Input::exists()) {
         }
     } else {
         // Invalid token
-        $errors = array($language->get('general', 'invalid_token'));
+        $errors = [$language->get('general', 'invalid_token')];
     }
 }
 
 // Load modules + template
-Module::loadPage($user, $pages, $cache, $smarty, array($navigation, $cc_nav, $mod_nav), $widgets);
+Module::loadPage($user, $pages, $cache, $smarty, [$navigation, $cc_nav, $mod_nav], $widgets);
 
 if (Session::exists('general_language'))
     $success = Session::flash('general_language');
 
 if (isset($success)) {
-    $smarty->assign(array(
+    $smarty->assign([
         'SUCCESS_TITLE' => $language->get('general', 'success'),
         'SUCCESS' => $success
-    ));
+    ]);
 }
 
 if (isset($errors) && count($errors)) {
-    $smarty->assign(array(
+    $smarty->assign([
         'ERRORS_TITLE' => $language->get('general', 'error'),
         'ERRORS' => $errors
-    ));
+    ]);
 }
 
 // Get form values
-$contact_email = $queries->getWhere('settings', array('name', '=', 'incoming_email'));
+$contact_email = $queries->getWhere('settings', ['name', '=', 'incoming_email']);
 $contact_email = Output::getClean($contact_email[0]->value);
 
-$languages = $queries->getWhere('languages', array('id', '<>', 0));
+$languages = $queries->getWhere('languages', ['id', '<>', 0]);
 $count = count($languages);
 
 for ($i = 0; $i < $count; $i++) {
-    $language_path = join(DIRECTORY_SEPARATOR, array(ROOT_PATH, 'custom', 'languages', $languages[$i]->name, 'version.php'));
-    if (!file_exists($language_path))
+    $language_path = join(DIRECTORY_SEPARATOR, [ROOT_PATH, 'custom', 'languages', $languages[$i]->name, 'version.php']);
+
+    if (! file_exists($language_path))
         unset($languages[$i]);
 }
 
-$timezone = $queries->getWhere('settings', array('name', '=', 'timezone'));
+$timezone = $queries->getWhere('settings', ['name', '=', 'timezone']);
 $timezone = $timezone[0]->value;
 
-$portal = $queries->getWhere('settings', array('name', '=', 'portal'));
+$portal = $queries->getWhere('settings', ['name', '=', 'portal']);
 $portal = $portal[0]->value;
 
 $cache->setCache('post_formatting');
@@ -345,16 +350,16 @@ $formatting = $cache->retrieve('formatting');
 
 $friendly_url = Config::get('core/friendly');
 
-$private_profile = $queries->getWhere('settings', array('name', '=', 'private_profile'));
+$private_profile = $queries->getWhere('settings', ['name', '=', 'private_profile']);
 $private_profile = $private_profile[0]->value;
 
-$displaynames = $queries->getWhere('settings', array('name', '=', 'displaynames'));
+$displaynames = $queries->getWhere('settings', ['name', '=', 'displaynames']);
 $displaynames = $displaynames[0]->value;
 
-$method = $queries->getWhere('settings', array('name', '=', 'login_method'));
+$method = $queries->getWhere('settings', ['name', '=', 'login_method']);
 $method = $method[0]->value;
 
-$smarty->assign(array(
+$smarty->assign([
     'PARENT_PAGE' => PARENT_PAGE,
     'DASHBOARD' => $language->get('admin', 'dashboard'),
     'CONFIGURATION' => $language->get('admin', 'configuration'),
@@ -404,14 +409,14 @@ $smarty->assign(array(
     'LOGIN_METHOD_VALUE' => $method,
     'EMAIL' => $language->get('user', 'email'),
     'USERNAME' => $language->get('user', 'username')
-));
+]);
 
 $page_load = microtime(true) - $start;
 define('PAGE_LOAD_TIME', str_replace('{x}', round($page_load, 3), $language->get('general', 'page_loaded_in')));
 
 $template->onPageLoad();
 
-require(ROOT_PATH . '/core/templates/panel_navbar.php');
+require (ROOT_PATH . '/core/templates/panel_navbar.php');
 
 // Display template
 $template->displayTemplate('core/general_settings.tpl', $smarty);
diff --git a/modules/Core/pages/panel/groups.php b/modules/Core/pages/panel/groups.php
index 028c74757b8d7cad810698ab5b1db89d525d976e..17bd4bf0d8ecb58092d46e573969cd1fa6d11cf0 100644
--- a/modules/Core/pages/panel/groups.php
+++ b/modules/Core/pages/panel/groups.php
@@ -15,52 +15,55 @@ define('PAGE', 'panel');
 define('PARENT_PAGE', 'groups');
 define('PANEL_PAGE', 'groups');
 $page_title = $language->get('admin', 'groups');
-require_once(ROOT_PATH . '/core/templates/backend_init.php');
+
+require_once (ROOT_PATH . '/core/templates/backend_init.php');
 
 // Load modules + template
-Module::loadPage($user, $pages, $cache, $smarty, array($navigation, $cc_nav, $mod_nav), $widgets);
+Module::loadPage($user, $pages, $cache, $smarty, [$navigation, $cc_nav, $mod_nav], $widgets);
 
 if (Session::exists('admin_groups')) {
     $success = Session::flash('admin_groups');
 }
 
 if (Session::exists('admin_groups_error'))
-    $errors = array(Session::flash('admin_groups_error'));
+    $errors = [Session::flash('admin_groups_error')];
 
 if (isset($_GET['action'])) {
     if ($_GET['action'] == 'new') {
         if (Input::exists()) {
-            $errors = array();
+            $errors = [];
+
             if (Token::check()) {
                 $validate = new Validate();
-                $validation = $validate->check($_POST, array(
-                    'groupname' => array(
+                $validation = $validate->check($_POST, [
+                    'groupname' => [
                         'required' => true,
                         'min' => 2,
                         'max' => 20
-                    ),
-                    'html' => array(
+                    ],
+                    'html' => [
                         'max' => 1024
-                    )
-                ));
+                    ]
+                ]);
 
                 if ($validation->passed()) {
                     try {
                         if (isset($_POST['default']) && $_POST['default'] == 1)
                             $default = 1;
-                        else
-                            $default = 0;
+                        else $default = 0;
 
                         // If this is the new default group, update old default group
-                        $default_group = $queries->getWhere('groups', array('default_group', '=', 1));
-                        if (!count($default_group) && $default == 0)
+                        $default_group = $queries->getWhere('groups', ['default_group', '=', 1]);
+
+                        if (! count($default_group) && $default == 0)
                             $default = 1;
                         
                         $last_group_order = DB::getInstance()->query('SELECT `order` FROM nl2_groups ORDER BY `order` DESC LIMIT 1')->results();
+
                         if (count($last_group_order)) $last_group_order = $last_group_order[0]->order;
                         else $last_group_order = 0;
 
-                        $queries->create('groups', array(
+                        $queries->create('groups', [
                             'name' => Input::get('groupname'),
                             'group_html' => Input::get('html'),
                             'group_html_lg' => Input::get('html'),
@@ -71,15 +74,15 @@ if (isset($_GET['action'])) {
                             'default_group' => $default,
                             'order' => (Input::get('order') == 5 ? $last_group_order + 1 : Input::get('order')),
                             'force_tfa' => Input::get('tfa')
-                        ));
+                        ]);
 
                         $group_id = $queries->getLastId();
 
                         if ($default == 1) {
                             if (count($default_group) && $default_group[0]->id != $group_id) {
-                                $queries->update('groups', $default_group[0]->id, array(
+                                $queries->update('groups', $default_group[0]->id, [
                                     'default_group' => 0
-                                ));
+                                ]);
                             }
 
                             $cache->setCache('default_group');
@@ -91,6 +94,7 @@ if (isset($_GET['action'])) {
 
                         Session::flash('admin_groups', $language->get('admin', 'group_created_successfully'));
                         Redirect::to(URL::build('/panel/core/groups'));
+
                         die();
                     } catch (Exception $e) {
                         $errors[] = $e->getMessage();
@@ -103,25 +107,28 @@ if (isset($_GET['action'])) {
                             switch ($error) {
                                 case (strpos($error, 'groupname') !== false):
                                     $errors[] = $language->get('admin', 'group_name_minimum') . '<br />';
+
                                     break;
                             }
                         } else if (strpos($error, 'maximum') !== false) {
                             switch ($error) {
                                 case (strpos($error, 'groupname') !== false):
                                     $errors[] = $language->get('admin', 'group_name_maximum') . '<br />';
+
                                     break;
+
                                 case (strpos($error, 'html') !== false):
                                     $errors[] = $language->get('admin', 'html_maximum') . '<br />';
+
                                     break;
                             }
                         }
                     }
                 }
-            } else
-                $errors[] = $language->get('general', 'invalid_token');
+            } else $errors[] = $language->get('general', 'invalid_token');
         }
 
-        $smarty->assign(array(
+        $smarty->assign([
             'CREATING_NEW_GROUP' => $language->get('admin', 'creating_group'),
             'CANCEL' => $language->get('general', 'cancel'),
             'ARE_YOU_SURE' => $language->get('general', 'are_you_sure'),
@@ -138,52 +145,56 @@ if (isset($_GET['action'])) {
             'STAFF_CP' => $language->get('admin', 'can_view_staffcp'),
             'DEFAULT_GROUP' => $language->get('admin', 'default_group'),
             'FORCE_TFA' => $language->get('admin', 'force_tfa')
-        ));
+        ]);
 
         $template_file = 'core/groups_new.tpl';
     } else if ($_GET['action'] == 'edit') {
-        if (!isset($_GET['group']) || !is_numeric($_GET['group'])) {
+        if (! isset($_GET['group']) || ! is_numeric($_GET['group'])) {
             Redirect::to(URL::build('/panel/core/groups'));
+
             die();
         }
 
-        $group = $queries->getWhere('groups', array('id', '=', $_GET['group']));
-        if (!count($group)) {
+        $group = $queries->getWhere('groups', ['id', '=', $_GET['group']]);
+
+        if (! count($group)) {
             Redirect::to(URL::build('/panel/core/groups'));
+
             die();
         }
         $group = $group[0];
 
-        if ($group->id == 2 || ((in_array($group->id, $user->getAllGroupIds())) && !$user->hasPermission('admincp.groups.self'))) {
-            $smarty->assign(array(
+        if ($group->id == 2 || ((in_array($group->id, $user->getAllGroupIds())) && ! $user->hasPermission('admincp.groups.self'))) {
+            $smarty->assign([
                 'OWN_GROUP' => $language->get('admin', 'cant_edit_this_group'),
                 'INFO' => $language->get('general', 'info')
-            ));
+            ]);
         } else {
-            $smarty->assign(array(
+            $smarty->assign([
                 'PERMISSIONS' => $language->get('admin', 'permissions'),
                 'PERMISSIONS_LINK' => URL::build('/panel/core/groups/', 'action=permissions&group=' . Output::getClean($group->id)),
                 'DELETE' => $language->get('general', 'delete'),
                 'DELETE_GROUP' => $language->get('admin', 'delete_group'),
                 'CONFIRM_DELETE' => str_replace('{x}', Output::getClean($group->name), $language->get('admin', 'confirm_group_deletion'))
-            ));
+            ]);
         }
 
         if (Input::exists()) {
-            $errors = array();
+            $errors = [];
+
             if (Token::check()) {
                 if (Input::get('action') == 'update') {
                     $validate = new Validate();
-                    $validation = $validate->check($_POST, array(
-                        'groupname' => array(
+                    $validation = $validate->check($_POST, [
+                        'groupname' => [
                             'required' => true,
                             'min' => 2,
                             'max' => 20
-                        ),
-                        'html' => array(
+                        ],
+                        'html' => [
                             'max' => 1024
-                        )
-                    ));
+                        ]
+                    ]);
 
                     if ($validation->passed()) {
                         try {
@@ -191,16 +202,16 @@ if (isset($_GET['action'])) {
                                 $default = 1;
                                 $cache->setCache('default_group');
                                 $cache->store('default_group', $_GET['group']);
-                            } else
-                                $default = 0;
+                            } else $default = 0;
 
                             // If this is the new default group, update old default group
-                            $default_group = $queries->getWhere('groups', array('default_group', '=', 1));
+                            $default_group = $queries->getWhere('groups', ['default_group', '=', 1]);
+
                             if (count($default_group) && $default == 1 && $default_group[0]->id != $_GET['group'])
-                                $queries->update('groups', $default_group[0]->id, array(
+                                $queries->update('groups', $default_group[0]->id, [
                                     'default_group' => 0
-                                ));
-                            else if (!count($default_group) && $default == 0)
+                                ]);
+                            else if (! count($default_group) && $default == 0)
                                 $default = 1;
 
                             if ($group->id == 2) {
@@ -209,7 +220,7 @@ if (isset($_GET['action'])) {
                                 $staff_cp = Input::get('staffcp');
                             }
 
-                            $queries->update('groups', $_GET['group'], array(
+                            $queries->update('groups', $_GET['group'], [
                                 'name' => Input::get('groupname'),
                                 'group_html' => Input::get('html'),
                                 'group_html_lg' => Input::get('html'),
@@ -220,13 +231,14 @@ if (isset($_GET['action'])) {
                                 'default_group' => $default,
                                 '`order`' => Input::get('order'),
                                 'force_tfa' => Input::get('tfa')
-                            ));
+                            ]);
 
                             $cache->setCache('groups_tfa_' . $_GET['group']);
                             $cache->store('enabled', Input::get('tfa'));
 
                             Session::flash('admin_groups', $language->get('admin', 'group_updated_successfully'));
                             Redirect::to(URL::build('/panel/core/groups/', 'action=edit&group=' . Output::getClean($_GET['group'])));
+
                             die();
                         } catch (Exception $e) {
                             $errors[] = $e->getMessage();
@@ -239,15 +251,19 @@ if (isset($_GET['action'])) {
                                 switch ($error) {
                                     case (strpos($error, 'groupname') !== false):
                                         $errors[] = $language->get('admin', 'group_name_minimum') . '<br />';
+
                                         break;
                                 }
                             } else if (strpos($error, 'maximum') !== false) {
                                 switch ($error) {
                                     case (strpos($error, 'groupname') !== false):
                                         $errors[] = $language->get('admin', 'group_name_maximum') . '<br />';
+
                                         break;
+
                                     case (strpos($error, 'html') !== false):
                                         $errors[] = $language->get('admin', 'html_maximum') . '<br />';
+
                                         break;
                                 }
                             }
@@ -255,30 +271,30 @@ if (isset($_GET['action'])) {
                     }
                 } else if (Input::get('action') == 'delete') {
                     try {
-                        $default_group = $queries->getWhere('groups', array('default_group', '=', 1));
+                        $default_group = $queries->getWhere('groups', ['default_group', '=', 1]);
 
                         if (count($default_group)) {
                             if ($group->id == 2 || $default_group[0]->id == Input::get('id') || $group->admin_cp == 1) {
                                 // Can't delete default group/admin group
                                 Session::flash('admin_groups_error', $language->get('admin', 'unable_to_delete_group'));
                             } else {
-                                $queries->delete('groups', array('id', '=', Input::get('id')));
-                                $queries->delete('users_groups', array('group_id', '=', Input::get('id')));
+                                $queries->delete('groups', ['id', '=', Input::get('id')]);
+                                $queries->delete('users_groups', ['group_id', '=', Input::get('id')]);
                                 Session::flash('admin_groups', $language->get('admin', 'group_deleted_successfully'));
                             }
                         }
 
                         Redirect::to(URL::build('/panel/core/groups'));
+
                         die();
                     } catch (Exception $e) {
                         $errors[] = $e->getMessage();
                     }
                 }
-            } else
-                $errors[] = $language->get('general', 'invalid_token');
+            } else $errors[] = $language->get('general', 'invalid_token');
         }
 
-        $smarty->assign(array(
+        $smarty->assign([
             'GROUP_ID' => Output::getClean($group->id),
             'NAME' => $language->get('admin', 'name'),
             'GROUP_HTML' => $language->get('admin', 'group_html'),
@@ -304,34 +320,39 @@ if (isset($_GET['action'])) {
             'GROUP_ORDER_VALUE' => $group->order,
             'FORCE_TFA' => $language->get('admin', 'force_tfa'),
             'FORCE_TFA_VALUE' => $group->force_tfa
-        ));
+        ]);
 
         $template_file = 'core/groups_edit.tpl';
     } else if ($_GET['action'] == 'permissions') {
-        if (!isset($_GET['group']) || !is_numeric($_GET['group'])) {
+        if (! isset($_GET['group']) || ! is_numeric($_GET['group'])) {
             Redirect::to(URL::build('/panel/core/groups'));
+
             die();
         }
 
-        $group = $queries->getWhere('groups', array('id', '=', $_GET['group']));
-        if (!count($group)) {
+        $group = $queries->getWhere('groups', ['id', '=', $_GET['group']]);
+
+        if (! count($group)) {
             Redirect::to(URL::build('/panel/core/groups'));
+
             die();
         }
         $group = $group[0];
 
-        if ($group->id == 2 || ((in_array($group->id, $user->getAllGroupIds())) && !$user->hasPermission('admincp.groups.self'))) {
+        if ($group->id == 2 || ((in_array($group->id, $user->getAllGroupIds())) && ! $user->hasPermission('admincp.groups.self'))) {
             Redirect::to(URL::build('/panel/core/groups'));
+
             die();
         }
 
         if (Input::exists()) {
-            $errors = array();
+            $errors = [];
 
             if (Token::check()) {
                 // Token valid
                 // Build new JSON object for permissions
-                $perms = array();
+                $perms = [];
+
                 if (isset($_POST['permissions']) && count($_POST['permissions'])) {
                     foreach ($_POST['permissions'] as $permission => $value) {
                         $perms[$permission] = 1;
@@ -340,19 +361,19 @@ if (isset($_GET['action'])) {
                 $perms_json = json_encode($perms);
 
                 try {
-                    $queries->update('groups', $group->id, array('permissions' => $perms_json));
+                    $queries->update('groups', $group->id, ['permissions' => $perms_json]);
 
                     Session::flash('admin_groups', $language->get('admin', 'permissions_updated_successfully'));
                     Redirect::to(URL::build('/panel/core/groups/', 'action=edit&group=' . $group->id));
+
                     die();
                 } catch (Exception $e) {
                     $errors[] = $e->getMessage();
                 }
-            } else
-                $errors[] = $language->get('general', 'invalid_token');
+            } else $errors[] = $language->get('general', 'invalid_token');
         }
 
-        $smarty->assign(array(
+        $smarty->assign([
             'PERMISSIONS' => $language->get('admin', 'permissions'),
             'BACK' => $language->get('general', 'back'),
             'BACK_LINK' => URL::build('/panel/core/groups/', 'action=edit&group=' . Output::getClean($group->id)),
@@ -360,43 +381,46 @@ if (isset($_GET['action'])) {
             'ALL_PERMISSIONS' => PermissionHandler::getPermissions(),
             'SELECT_ALL' => $language->get('admin', 'select_all'),
             'DESELECT_ALL' => $language->get('admin', 'deselect_all')
-        ));
+        ]);
 
         $template_file = 'core/groups_permissions.tpl';
     } else if ($_GET['action'] == 'order') {
         // Get groups
-        if(isset($_GET['groups'])){
+        if (isset($_GET['groups'])){
             $groups = json_decode($_GET['groups'])->groups;
 
             $i = 1;
-            foreach($groups as $item){
-                $queries->update('groups', $item, array(
+
+            foreach ($groups as $item){
+                $queries->update('groups', $item, [
                     '`order`' => $i
-                ));
+                ]);
                 $i++;
             }
         }
+
         die('Complete');
     }
 } else {
     $groups = $queries->orderAll('groups', '`order`', 'ASC');
 
-    $groups_template = array();
+    $groups_template = [];
+
     foreach ($groups as $group) {
-        $users = $queries->getWhere('users_groups', array('group_id', '=', $group->id));
+        $users = $queries->getWhere('users_groups', ['group_id', '=', $group->id]);
         $users = count($users);
 
-        $groups_template[] = array(
+        $groups_template[] = [
             'id' => Output::getClean($group->id),
             'order' => $group->order,
             'name' => Output::getClean($group->name),
             'edit_link' => URL::build('/panel/core/groups/', 'action=edit&group=' . Output::getClean($group->id)),
             'users' => $users,
             'staff' => $group->staff
-        );
+        ];
     }
 
-    $smarty->assign(array(
+    $smarty->assign([
         'GROUP_ID' => $language->get('admin', 'group_id'),
         'NAME' => $language->get('admin', 'name'),
         'USERS' => $language->get('admin', 'users'),
@@ -409,24 +433,24 @@ if (isset($_GET['action'])) {
         'NO' => $language->get('general', 'no'),
         'EDIT' => $language->get('general', 'edit'),
         'REORDER_DRAG_URL' => URL::build('/panel/core/groups')
-    ));
+    ]);
 
     $template_file = 'core/groups.tpl';
 }
 
 if (isset($success))
-    $smarty->assign(array(
+    $smarty->assign([
         'SUCCESS' => $success,
         'SUCCESS_TITLE' => $language->get('general', 'success')
-    ));
+    ]);
 
 if (isset($errors) && count($errors))
-    $smarty->assign(array(
+    $smarty->assign([
         'ERRORS' => $errors,
         'ERRORS_TITLE' => $language->get('general', 'error')
-    ));
+    ]);
 
-$smarty->assign(array(
+$smarty->assign([
     'PARENT_PAGE' => PARENT_PAGE,
     'DASHBOARD' => $language->get('admin', 'dashboard'),
     'GROUPS' => $language->get('admin', 'groups'),
@@ -438,14 +462,14 @@ $smarty->assign(array(
     'FORCE_TFA_WARNING' => $language->get('admin', 'force_tfa_warning'),
     'GROUP_SYNC' => $language->get('admin', 'group_sync'),
     'GROUP_SYNC_LINK' => URL::build('/panel/core/api/', 'view=group_sync')
-));
+]);
 
 $page_load = microtime(true) - $start;
 define('PAGE_LOAD_TIME', str_replace('{x}', round($page_load, 3), $language->get('general', 'page_loaded_in')));
 
 $template->onPageLoad();
 
-require(ROOT_PATH . '/core/templates/panel_navbar.php');
+require (ROOT_PATH . '/core/templates/panel_navbar.php');
 
 // Display template
 $template->displayTemplate($template_file, $smarty);
diff --git a/modules/Core/pages/panel/hooks.php b/modules/Core/pages/panel/hooks.php
index f4593d47eab07b209fb37154076791b032dad3fa..f55aa22545e7be6762112d0f5a858d2fc021fc52 100644
--- a/modules/Core/pages/panel/hooks.php
+++ b/modules/Core/pages/panel/hooks.php
@@ -15,25 +15,27 @@ define('PAGE', 'panel');
 define('PARENT_PAGE', 'core_configuration');
 define('PANEL_PAGE', 'hooks');
 $page_title = $language->get('admin', 'hooks');
-require_once(ROOT_PATH . '/core/templates/backend_init.php');
 
-if (!isset($_GET['action'])) {
+require_once (ROOT_PATH . '/core/templates/backend_init.php');
+
+if (! isset($_GET['action'])) {
     // View all hooks
 
     $hooks_query = $queries->orderAll('hooks', 'id', 'ASC');
-    $hooks_array = array();
+    $hooks_array = [];
+
     if (count($hooks_query)) {
         foreach ($hooks_query as $hook) {
-            $hooks_array[] = array(
+            $hooks_array[] = [
                 'name' => Output::getClean($hook->name),
                 'url' => Output::getClean($hook->url),
                 'edit_link' => URL::build('/panel/core/hooks/', 'action=edit&id=' . Output::getClean($hook->id)),
                 'delete_link' => URL::build('/panel/core/hooks/', 'action=delete&id=' . Output::getClean($hook->id))
-            );
+            ];
         }
     }
 
-    $smarty->assign(array(
+    $smarty->assign([
         'HOOKS_INFO' => $language->get('admin', 'hooks_info'),
         'NEW_HOOK' => $language->get('admin', 'new_hook'),
         'NEW_HOOK_LINK' => URL::build('/panel/core/hooks/', 'action=new'),
@@ -42,7 +44,7 @@ if (!isset($_GET['action'])) {
         'CONFIRM_DELETE_HOOK' => $language->get('admin', 'delete_hook'),
         'YES' => $language->get('general', 'yes'),
         'NO' => $language->get('general', 'no')
-    ));
+    ]);
 
     $template_file = 'core/hooks.tpl';
 } else {
@@ -50,49 +52,52 @@ if (!isset($_GET['action'])) {
         case 'new':
             // Create new hook
             if (Input::exists()) {
-                $errors = array();
+                $errors = [];
+
                 if (Token::check()) {
                     // Validate input
                     $validate = new Validate();
-                    $validation = $validate->check($_POST, array(
-                        'hook_name' => array(
+                    $validation = $validate->check($_POST, [
+                        'hook_name' => [
                             'required' => true,
                             'min' => 3,
                             'max' => 128
-                        ),
-                        'hook_url' => array(
+                        ],
+                        'hook_url' => [
                             'required' => true,
                             'min' => 10,
                             'max' => 2048
-                        )
-                    ));
+                        ]
+                    ]);
 
                     if ($validation->passed()) {
-                        $events = array();
+                        $events = [];
+
                         if (isset($_POST['events']) && count($_POST['events'])) {
                             foreach ($_POST['events'] as $event => $value) {
                                 $events[] = $event;
                             }
 
                             // Save to database
-                            $queries->create('hooks', array(
+                            $queries->create('hooks', [
                                 'name' => Output::getClean($_POST['hook_name']),
                                 'action' => Output::getClean($_POST['hook_type']),
                                 'url' => Output::getClean($_POST['hook_url']),
                                 'events' => json_encode($events)
-                            ));
+                            ]);
 
                             $cache->setCache('hooks');
+
                             if ($cache->isCached('hooks')) {
                                 $cache->erase('hooks');
                             }
 
                             Session::flash('admin_hooks', $language->get('admin', 'hook_created'));
                             Redirect::to(URL::build('/panel/core/hooks'));
+
                             die();
-                        } else {
-                            $errors[] = $language->get('admin', 'invalid_hook_events');
                         }
+                            $errors[] = $language->get('admin', 'invalid_hook_events');
                     } else {
                         foreach ($validation->errors() as $error) {
                             if (strpos($error, 'url') !== false) {
@@ -108,7 +113,7 @@ if (!isset($_GET['action'])) {
                 }
             }
 
-            $smarty->assign(array(
+            $smarty->assign([
                 'CREATING_NEW_HOOK' => $language->get('admin', 'creating_new_hook'),
                 'HOOK_NAME' => $language->get('admin', 'hook_name'),
                 'HOOK_URL' => $language->get('admin', 'hook_url'),
@@ -117,70 +122,78 @@ if (!isset($_GET['action'])) {
                 'BACK' => $language->get('general', 'back'),
                 'BACK_LINK' => URL::build('/panel/core/hooks'),
                 'ALL_HOOKS' => HookHandler::getHooks(),
-            ));
+            ]);
 
             $template_file = 'core/hooks_new.tpl';
+
             break;
+
         case 'edit':
             // Edit hook
-            if (!isset($_GET['id']) || !is_numeric($_GET['id'])) {
+            if (! isset($_GET['id']) || ! is_numeric($_GET['id'])) {
                 // Check the hook ID is valid
                 Redirect::to(URL::build('/panel/forms'));
+
                 die();
             }
 
             // Does the hook exist?
-            $hook = $queries->getWhere('hooks', array('id', '=', $_GET['id']));
-            if (!count($hook)) {
+            $hook = $queries->getWhere('hooks', ['id', '=', $_GET['id']]);
+
+            if (! count($hook)) {
                 // No, it doesn't exist
                 Redirect::to(URL::build('/panel/core/hooks'));
+
                 die();
             }
             $hook = $hook[0];
 
             if (Input::exists()) {
-                $errors = array();
+                $errors = [];
+
                 if (Token::check()) {
                     // Validate input
                     $validate = new Validate();
-                    $validation = $validate->check($_POST, array(
-                        'hook_name' => array(
+                    $validation = $validate->check($_POST, [
+                        'hook_name' => [
                             'required' => true,
                             'min' => 3,
                             'max' => 128,
-                        ),
-                        'hook_url' => array(
+                        ],
+                        'hook_url' => [
                             'required' => true,
                             'min' => 10,
                             'max' => 2048
-                        )
-                    ));
+                        ]
+                    ]);
 
                     if ($validation->passed()) {
-                        $events = array();
+                        $events = [];
+
                         if (isset($_POST['events']) && count($_POST['events'])) {
                             foreach ($_POST['events'] as $event => $value) {
                                 $events[] = $event;
                             }
 
                             // Save to database
-                            $queries->update('hooks', $hook->id, array(
+                            $queries->update('hooks', $hook->id, [
                                 'name' => Output::getClean($_POST['hook_name']),
                                 'action' => Output::getClean($_POST['hook_type']),
                                 'url' => Output::getClean($_POST['hook_url']),
                                 'events' => json_encode($events)
-                            ));
+                            ]);
 
                             $cache->setCache('hooks');
+
                             if ($cache->isCached('hooks')) {
                                 $cache->erase('hooks');
                             }
                             Session::flash('admin_hooks', $language->get('admin', 'hook_edited'));
                             Redirect::to(URL::build('/panel/core/hooks'));
+
                             die();
-                        } else {
-                            $errors[] = $language->get('admin', 'invalid_hook_events');
                         }
+                            $errors[] = $language->get('admin', 'invalid_hook_events');
                     } else {
                         foreach ($validation->errors() as $error) {
                             if (strpos($error, 'url') !== false) {
@@ -196,7 +209,7 @@ if (!isset($_GET['action'])) {
                 }
             }
 
-            $smarty->assign(array(
+            $smarty->assign([
                 'EDITING_HOOK' => $language->get('admin', 'editing_hook'),
                 'HOOK_NAME' => $language->get('admin', 'hook_name'),
                 'HOOK_NAME_VALUE' => Output::getClean($hook->name),
@@ -209,21 +222,25 @@ if (!isset($_GET['action'])) {
                 'BACK_LINK' => URL::build('/panel/core/hooks'),
                 'ALL_HOOKS' => HookHandler::getHooks(),
                 'ENABLED_HOOKS' => json_decode($hook->events, true)
-            ));
+            ]);
 
             $template_file = 'core/hooks_edit.tpl';
+
             break;
+
         case 'delete':
             // Delete Form
-            if (!isset($_GET['id']) || !is_numeric($_GET['id'])) {
+            if (! isset($_GET['id']) || ! is_numeric($_GET['id'])) {
                 Redirect::to(URL::build('/panel/core/hooks'));
+
                 die();
             }
 
             try {
-                $queries->delete('hooks', array('id', '=', $_GET['id']));
+                $queries->delete('hooks', ['id', '=', $_GET['id']]);
 
                 $cache->setCache('hooks');
+
                 if ($cache->isCached('hooks')) {
                     $cache->erase('hooks');
                 }
@@ -233,17 +250,22 @@ if (!isset($_GET['action'])) {
 
             Session::flash('admin_hooks', $language->get('admin', 'hook_deleted'));
             Redirect::to(URL::build('/panel/core/hooks'));
+
             die();
+
             break;
+
         default:
             Redirect::to(URL::build('/panel/core/hooks'));
+
             die();
+
             break;
     }
 }
 
 // Load modules + template
-Module::loadPage($user, $pages, $cache, $smarty, array($navigation, $cc_nav, $mod_nav), $widgets);
+Module::loadPage($user, $pages, $cache, $smarty, [$navigation, $cc_nav, $mod_nav], $widgets);
 
 if (Session::exists('admin_hooks'))
     $success = Session::flash('admin_hooks');
@@ -252,18 +274,18 @@ if (Session::exists('admin_pages_error'))
     $errors[] = Session::flash('admin_pages_error');
 
 if (isset($success))
-    $smarty->assign(array(
+    $smarty->assign([
         'SUCCESS' => $success,
         'SUCCESS_TITLE' => $language->get('general', 'success')
-    ));
+    ]);
 
 if (isset($errors) && count($errors))
-    $smarty->assign(array(
+    $smarty->assign([
         'ERRORS' => $errors,
         'ERRORS_TITLE' => $language->get('general', 'error')
-    ));
+    ]);
 
-$smarty->assign(array(
+$smarty->assign([
     'NO_HOOKS' => $language->get('admin', 'no_hooks_yet'),
     'NAME' => $language->get('admin', 'name'),
     'LINK' => $language->get('general', 'url'),
@@ -275,14 +297,14 @@ $smarty->assign(array(
     'PAGE' => PANEL_PAGE,
     'TOKEN' => Token::get(),
     'SUBMIT' => $language->get('general', 'submit')
-));
+]);
 
 $page_load = microtime(true) - $start;
 define('PAGE_LOAD_TIME', str_replace('{x}', round($page_load, 3), $language->get('general', 'page_loaded_in')));
 
 $template->onPageLoad();
 
-require(ROOT_PATH . '/core/templates/panel_navbar.php');
+require (ROOT_PATH . '/core/templates/panel_navbar.php');
 
 // Display template
 $template->displayTemplate($template_file, $smarty);
diff --git a/modules/Core/pages/panel/images.php b/modules/Core/pages/panel/images.php
index b42aedd6ff03f0769cbeadbc529d008926489f16..0d74feb96a9e346ac09f6a1dcf714a29cb67103d 100644
--- a/modules/Core/pages/panel/images.php
+++ b/modules/Core/pages/panel/images.php
@@ -15,7 +15,8 @@ define('PAGE', 'panel');
 define('PARENT_PAGE', 'layout');
 define('PANEL_PAGE', 'images');
 $page_title = $language->get('admin', 'images');
-require_once(ROOT_PATH . '/core/templates/backend_init.php');
+
+require_once (ROOT_PATH . '/core/templates/backend_init.php');
 
 // Reset background
 if (isset($_GET['action'])) {
@@ -25,28 +26,37 @@ if (isset($_GET['action'])) {
 
         Session::flash('panel_images_success', $language->get('admin', 'background_reset_successfully'));
         Redirect::to(URL::build('/panel/core/images'));
+
         die();
+    }
 
-    } else if ($_GET['action'] == 'reset_banner') {
+    if ($_GET['action'] == 'reset_banner') {
         $cache->setCache('backgroundcache');
         $cache->store('banner_image', '');
 
         Session::flash('panel_images_success', $language->get('admin', 'template_banner_reset_successfully'));
         Redirect::to(URL::build('/panel/core/images'));
+
         die();
-    } else if ($_GET['action'] == 'reset_logo') {
+    }
+
+    if ($_GET['action'] == 'reset_logo') {
         $cache->setCache('backgroundcache');
         $cache->store('logo_image', '');
 
         Session::flash('panel_images_success', $language->get('admin', 'logo_reset_successfully'));
         Redirect::to(URL::build('/panel/core/images'));
+
         die();
-    } else if ($_GET['action'] == 'reset_favicon') {
+    }
+
+    if ($_GET['action'] == 'reset_favicon') {
         $cache->setCache('backgroundcache');
         $cache->store('favicon_image', '');
 
         Session::flash('panel_images_success', $language->get('admin', 'favicon_reset_successfully'));
         Redirect::to(URL::build('/panel/core/images'));
+
         die();
     }
 }
@@ -62,50 +72,44 @@ if (Input::exists()) {
             $cache->store('background_image', ((defined('CONFIG_PATH')) ? CONFIG_PATH . '/' : '/') . 'uploads/backgrounds/' . Input::get('bg'));
 
             Session::flash('panel_images_success', $language->get('admin', 'background_updated_successfully'));
-
         } else if (isset($_POST['banner'])) {
             $cache->store('banner_image', ((defined('CONFIG_PATH')) ? CONFIG_PATH . '/' : '/') . 'uploads/template_banners/' . Input::get('banner'));
 
             Session::flash('panel_images_success', $language->get('admin', 'template_banner_updated_successfully'));
-
         } else if (isset($_POST['logo'])) {
             $cache->store('logo_image', ((defined('CONFIG_PATH')) ? CONFIG_PATH . '/' : '/') . 'uploads/logos/' . Input::get('logo'));
 
             Session::flash('panel_images_success', $language->get('admin', 'logo_updated_successfully'));
-
         } else if (isset($_POST['favicon'])) {
             $cache->store('favicon_image', ((defined('CONFIG_PATH')) ? CONFIG_PATH . '/' : '/') . 'uploads/favicons/' . Input::get('favicon'));
 
             Session::flash('panel_images_success', $language->get('admin', 'favicon_updated_successfully'));
-
         }
 
         Redirect::to(URL::build('/panel/core/images'));
-        die();
 
-    } else {
-        // Invalid token
-        $errors = array($language->get('general', 'invalid_token'));
+        die();
     }
+        // Invalid token
+        $errors = [$language->get('general', 'invalid_token')];
 }
 
-
 // Load modules + template
-Module::loadPage($user, $pages, $cache, $smarty, array($navigation, $cc_nav, $mod_nav), $widgets);
+Module::loadPage($user, $pages, $cache, $smarty, [$navigation, $cc_nav, $mod_nav], $widgets);
 
 if (Session::exists('panel_images_success'))
     $success = Session::flash('panel_images_success');
 
 if (isset($success))
-    $smarty->assign(array(
+    $smarty->assign([
         'SUCCESS' => $success,
         'SUCCESS_TITLE' => $language->get('general', 'success')
-    ));
+    ]);
 
 if (isset($errors) && count($errors))
-    $smarty->assign(array(
+    $smarty->assign([
         'ERRORS' => $errors
-    ));
+    ]);
 
 // Get background from cache
 $cache->setCache('backgroundcache');
@@ -118,7 +122,7 @@ if ($background_image == '') {
 }
 
 // Get banner from cache
-if (!$cache->isCached('banner_image')) {
+if (! $cache->isCached('banner_image')) {
     $cache->store('banner_image', (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/uploads/template_banners/homepage_bg_trimmed.jpg');
     $banner_image = (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/uploads/template_banners/homepage_bg_trimmed.jpg';
 } else {
@@ -149,105 +153,109 @@ if ($favicon_image == '') {
     $favicon_img = Output::getClean($favicon_image);
 }
 
-$image_path = join(DIRECTORY_SEPARATOR, array(ROOT_PATH, 'uploads', 'backgrounds'));
+$image_path = join(DIRECTORY_SEPARATOR, [ROOT_PATH, 'uploads', 'backgrounds']);
 $images = scandir($image_path);
-$template_images = array();
+$template_images = [];
 
 // Only display jpeg, png, jpg, gif
-$allowed_exts = array('gif', 'png', 'jpg', 'jpeg', 'ico');
+$allowed_exts = ['gif', 'png', 'jpg', 'jpeg', 'ico'];
 $n = 1;
 
 foreach ($images as $image) {
     $ext = pathinfo($image, PATHINFO_EXTENSION);
-    if (!in_array($ext, $allowed_exts)) {
+
+    if (! in_array($ext, $allowed_exts)) {
         continue;
     }
-    $template_images[] = array(
+    $template_images[] = [
         'src' => (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/uploads/backgrounds/' . $image,
         'value' => $image,
         'selected' => ($background_image == (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/uploads/backgrounds/' . $image),
         'n' => $n
-    );
+    ];
     $n++;
 }
 
-$image_path = join(DIRECTORY_SEPARATOR, array(ROOT_PATH, 'uploads', 'template_banners'));
+$image_path = join(DIRECTORY_SEPARATOR, [ROOT_PATH, 'uploads', 'template_banners']);
 $images = scandir($image_path);
-$template_banner_images = array();
+$template_banner_images = [];
 
 $n = 1;
 
 foreach ($images as $image) {
     $ext = pathinfo($image, PATHINFO_EXTENSION);
-    if (!in_array($ext, $allowed_exts)) {
+
+    if (! in_array($ext, $allowed_exts)) {
         continue;
     }
-    $template_banner_images[] = array(
+    $template_banner_images[] = [
         'src' => (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/uploads/template_banners/' . $image,
         'value' => $image,
         'selected' => ($banner_image == (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/uploads/template_banners/' . $image),
         'n' => $n
-    );
+    ];
     $n++;
 }
 
-$image_path = join(DIRECTORY_SEPARATOR, array(ROOT_PATH, 'uploads', 'logos'));
+$image_path = join(DIRECTORY_SEPARATOR, [ROOT_PATH, 'uploads', 'logos']);
 $images = scandir($image_path);
-$logo_images = array();
+$logo_images = [];
 
 $n = 1;
 
 foreach ($images as $image) {
     $ext = pathinfo($image, PATHINFO_EXTENSION);
-    if (!in_array($ext, $allowed_exts)) {
+
+    if (! in_array($ext, $allowed_exts)) {
         continue;
     }
-    $logo_images[] = array(
+    $logo_images[] = [
         'src' => (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/uploads/logos/' . $image,
         'value' => $image,
         'selected' => ($logo_image == (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/uploads/logos/' . $image),
         'n' => $n
-    );
+    ];
     $n++;
 }
 
-$image_path = join(DIRECTORY_SEPARATOR, array(ROOT_PATH, 'uploads', 'favicons'));
+$image_path = join(DIRECTORY_SEPARATOR, [ROOT_PATH, 'uploads', 'favicons']);
 $images = scandir($image_path);
-$favicon_images = array();
+$favicon_images = [];
 
 $n = 1;
 
 foreach ($images as $image) {
     $ext = pathinfo($image, PATHINFO_EXTENSION);
-    if (!in_array($ext, $allowed_exts)) {
+
+    if (! in_array($ext, $allowed_exts)) {
         continue;
     }
-    $favicon_images[] = array(
+    $favicon_images[] = [
         'src' => (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/uploads/favicons/' . $image,
         'value' => $image,
         'selected' => ($favicon_image == (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/uploads/favicons/' . $image),
         'n' => $n
-    );
+    ];
     $n++;
 }
 
-if (!is_writable(ROOT_PATH . '/uploads/backgrounds')) {
+if (! is_writable(ROOT_PATH . '/uploads/backgrounds')) {
     $smarty->assign('FAVICONS_DIRECTORY_NOT_WRITABLE', str_replace('{x}', 'uploads/backgrounds', $language->get('admin', 'x_directory_not_writable')));
 }
 
-if (!is_writable(ROOT_PATH . '/uploads/template_banners')) {
+if (! is_writable(ROOT_PATH . '/uploads/template_banners')) {
     $smarty->assign('FAVICONS_DIRECTORY_NOT_WRITABLE', str_replace('{x}', 'uploads/template_banners', $language->get('admin', 'x_directory_not_writable')));
 }
 
-if (!is_writable(ROOT_PATH . '/uploads/logos')) {
+if (! is_writable(ROOT_PATH . '/uploads/logos')) {
     $smarty->assign('FAVICONS_DIRECTORY_NOT_WRITABLE', str_replace('{x}', 'uploads/logos', $language->get('admin', 'x_directory_not_writable')));
 }
 
-if (!is_writable(ROOT_PATH . '/uploads/favicons')) {
+if (! is_writable(ROOT_PATH . '/uploads/favicons')) {
     $smarty->assign('FAVICONS_DIRECTORY_NOT_WRITABLE', str_replace('{x}', 'uploads/favicons', $language->get('admin', 'x_directory_not_writable')));
 }
 
-$smarty->assign(array(
+$smarty->assign([
     'PARENT_PAGE' => PARENT_PAGE,
     'DASHBOARD' => $language->get('admin', 'dashboard'),
     'LAYOUT' => $language->get('admin', 'layout'),
@@ -277,14 +285,14 @@ $smarty->assign(array(
     'ERRORS_TITLE' => $language->get('general', 'error'),
     'INFO' => $language->get('general', 'info'),
     'BACKGROUND_IMAGE_INFO' => $language->get('admin', 'background_image_info')
-));
+]);
 
 $page_load = microtime(true) - $start;
 define('PAGE_LOAD_TIME', str_replace('{x}', round($page_load, 3), $language->get('general', 'page_loaded_in')));
 
 $template->onPageLoad();
 
-require(ROOT_PATH . '/core/templates/panel_navbar.php');
+require (ROOT_PATH . '/core/templates/panel_navbar.php');
 
 // Display template
 $template->displayTemplate('core/images.tpl', $smarty);
diff --git a/modules/Core/pages/panel/index.php b/modules/Core/pages/panel/index.php
index ec9f2c4b0fb42e63f824c25ca9b22d4ced4eda52..6620e2f0abba31264e5b84b0f16d1598e336d490 100644
--- a/modules/Core/pages/panel/index.php
+++ b/modules/Core/pages/panel/index.php
@@ -14,49 +14,51 @@ $user->handlePanelPageLoad();
 define('PAGE', 'panel');
 define('PANEL_PAGE', 'dashboard');
 $page_title = $language->get('admin', 'dashboard');
-require_once(ROOT_PATH . '/core/templates/backend_init.php');
+
+require_once (ROOT_PATH . '/core/templates/backend_init.php');
 
 // Load modules + template
-Module::loadPage($user, $pages, $cache, $smarty, array($navigation, $cc_nav, $mod_nav), $widgets);
+Module::loadPage($user, $pages, $cache, $smarty, [$navigation, $cc_nav, $mod_nav], $widgets);
 
 $dashboard_graphs = Core_Module::getDashboardGraphs();
-$graphs = array();
+$graphs = [];
 
-if(count($dashboard_graphs)){
+if (count($dashboard_graphs)){
     $i = 0;
-    foreach($dashboard_graphs as $key => $dashboard_graph){
-        $graph = array(
+
+    foreach ($dashboard_graphs as $key => $dashboard_graph){
+        $graph = [
             'id' => $i++,
             'title' => $key,
-            'datasets' => array(),
-            'axes' => array(),
-            'keys' => array()
-        );
+            'datasets' => [],
+            'axes' => [],
+            'keys' => []
+        ];
 
-        foreach($dashboard_graph['datasets'] as $dskey => $dataset){
+        foreach ($dashboard_graph['datasets'] as $dskey => $dataset){
             $label = explode('/', $dataset['label']);
             $varname = $label[0];
             $axis = 'y' . (isset($dataset['axis']) ? $dataset['axis'] : 1);
             $axis_side = (isset($dataset['axis_side']) ? $dataset['axis_side'] : 'left');
 
-            $graph['datasets'][$dskey] = array(
+            $graph['datasets'][$dskey] = [
                 'label' => ${$varname}->get($label[1], $label[2]),
                 'axis' => $axis,
                 'colour' => (isset($dataset['colour']) ? $dataset['colour'] : '#000')
-            );
+            ];
 
             $graph['axes'][$axis] = $axis_side;
         }
 
         unset($dashboard_graph['datasets']);
 
-        foreach($dashboard_graph as $date => $values){
+        foreach ($dashboard_graph as $date => $values){
             $date = intval(str_replace('_', '', $date));
 
-            if(!array_key_exists($date, $graph['keys']))
+            if (! array_key_exists($date, $graph['keys']))
                 $graph['keys'][$date] = date('Y-m-d', $date);
 
-            foreach($values as $valuekey => $value){
+            foreach ($values as $valuekey => $value){
                 $graph['datasets'][$valuekey]['data'][date('Y-m-d', $date)] = $value;
             }
         }
@@ -68,30 +70,30 @@ if(count($dashboard_graphs)){
 $dashboard_graphs = null;
 
 $cache->setCache('nameless_news');
-if($cache->isCached('news')){
-    $news = $cache->retrieve('news');
 
+if ($cache->isCached('news')){
+    $news = $cache->retrieve('news');
 } else {
     $news_query = Util::getLatestNews();
     $news_query = json_decode($news_query);
 
-    $news = array();
+    $news = [];
 
-    if(!isset($news_query->error) && count($news_query)){
+    if (! isset($news_query->error) && count($news_query)){
         $timeago = new Timeago();
 
         $i = 0;
 
-        foreach($news_query as $item){
-            $news[] = array(
+        foreach ($news_query as $item){
+            $news[] = [
                 'title' => Output::getClean($item->title),
                 'date' => Output::getClean($item->date),
                 'date_friendly' => $timeago->inWords($item->date, $language->getTimeLanguage()),
                 'author' => Output::getClean($item->author),
                 'url' => Output::getClean($item->url)
-            );
+            ];
 
-            if(++$i == 5)
+            if (++$i == 5)
                 break;
         }
     }
@@ -99,92 +101,100 @@ if($cache->isCached('news')){
     $cache->store('news', $news, 3600);
 }
 
-if(!count($news))
+if (! count($news))
     $smarty->assign('NO_NEWS', $language->get('admin', 'unable_to_retrieve_nameless_news'));
-else
-    $smarty->assign('NEWS', $news);
+else $smarty->assign('NEWS', $news);
 
 // Compatibility
-if($user->hasPermission('admincp.core.debugging')){
-    $compat_success = array();
-    $compat_errors = array();
+if ($user->hasPermission('admincp.core.debugging')){
+    $compat_success = [];
+    $compat_errors = [];
 
-    if(version_compare(phpversion(), '5.4', '<')){
+    if (version_compare(phpversion(), '5.4', '<')){
         $compat_errors[] = 'PHP ' . phpversion();
     } else {
         $compat_success[] = 'PHP ' . phpversion();
     }
-    if(!extension_loaded('gd')){
+
+    if (! extension_loaded('gd')){
         $compat_errors[] = 'PHP GD';
     } else {
         $compat_success[] = 'PHP GD ' . phpversion('gd');
     }
-    if(!extension_loaded('mbstring')){
+
+    if (! extension_loaded('mbstring')){
         $compat_errors[] = 'PHP mbstring';
     } else {
         $compat_success[] = 'PHP mbstring ' . phpversion('mbstring');
     }
-    if(!extension_loaded('PDO')){
+
+    if (! extension_loaded('PDO')){
         $compat_errors[] = 'PHP PDO';
     } else {
         $compat_success[] = 'PHP PDO ' . phpversion('PDO');
     }
-    if(!function_exists('curl_version')){
+
+    if (! function_exists('curl_version')){
         $compat_errors[] = 'PHP cURL';
     } else {
         $compat_success[] = 'PHP cURL ' . phpversion('curl');
     }
-    if(!extension_loaded('xml')){
+
+    if (! extension_loaded('xml')){
         $compat_errors[] = 'PHP XML';
     } else {
         $compat_success[] = 'PHP XML ' . phpversion('xml');
     }
-    if(!function_exists('exif_imagetype')){
+
+    if (! function_exists('exif_imagetype')){
         $compat_errors[] = 'PHP EXIF';
     } else {
         $compat_success[] = 'PHP EXIF ' . phpversion('exif');
     }
-    if(!extension_loaded('mysql') && !extension_loaded('mysqlnd')){
+
+    if (! extension_loaded('mysql') && ! extension_loaded('mysqlnd')){
         $compat_errors[] = 'PHP MySQL';
     } else {
         $compat_success[] = 'PHP MySQL ' . (extension_loaded('mysql') ? phpversion('mysql') : substr(phpversion('mysqlnd'), 0, strpos(phpversion('mysqlnd'), ' - ')));
     }
 
     // Permissions
-    if(!is_writable(ROOT_PATH . '/core/config.php')){
+    if (! is_writable(ROOT_PATH . '/core/config.php')){
         $compat_errors[] = $language->get('installer', 'config_writable');
     } else {
         $compat_success[] = $language->get('installer', 'config_writable');
     }
-    if(!is_writable(ROOT_PATH . '/cache')){
+
+    if (! is_writable(ROOT_PATH . '/cache')){
         $compat_errors[] = $language->get('installer', 'cache_writable');
     } else {
         $compat_success[] = $language->get('installer', 'cache_writable');
     }
-    if(!is_writable(ROOT_PATH . '/cache/templates_c')){
+
+    if (! is_writable(ROOT_PATH . '/cache/templates_c')){
         $compat_errors[] = $language->get('installer', 'template_cache_writable');
     } else {
         $compat_success[] = $language->get('installer', 'template_cache_writable');
     }
 
-    $smarty->assign(array(
+    $smarty->assign([
         'SERVER_COMPATIBILITY' => $language->get('admin', 'server_compatibility'),
         'COMPAT_SUCCESS' => $compat_success,
         'COMPAT_ERRORS' => $compat_errors
-    ));
+    ]);
 }
 
-if(is_dir(ROOT_PATH . '/modules/Core/pages/admin'))
-    $smarty->assign(array(
+if (is_dir(ROOT_PATH . '/modules/Core/pages/admin'))
+    $smarty->assign([
         'DIRECTORY_WARNING' => $language->get('admin', 'admin_dir_still_exists')
-    ));
+    ]);
 
-else if(is_dir(ROOT_PATH . '/modules/Core/pages/mod'))
-    $smarty->assign(array(
+else if (is_dir(ROOT_PATH . '/modules/Core/pages/mod'))
+    $smarty->assign([
         'DIRECTORY_WARNING' => $language->get('admin', 'mod_dir_still_exists')
-    ));
+    ]);
 
-$smarty->assign(array(
+$smarty->assign([
     'DASHBOARD' => $language->get('admin', 'dashboard'),
     'DASHBOARD_STATS' => CollectionManager::getEnabledCollection('dashboard_stats'),
     'PAGE' => PANEL_PAGE,
@@ -199,14 +209,14 @@ $smarty->assign(array(
     'SIDE_ITEMS' => CollectionManager::getEnabledCollection('dashboard_side_items'),
     // TODO: show latest git commit hash?
     'NAMELESS_VERSION' => str_replace('{x}', NAMELESS_VERSION, $language->get('admin', 'running_nameless_version'))
-));
+]);
 
 $page_load = microtime(true) - $start;
 define('PAGE_LOAD_TIME', str_replace('{x}', round($page_load, 3), $language->get('general', 'page_loaded_in')));
 
 $template->onPageLoad();
 
-require(ROOT_PATH . '/core/templates/panel_navbar.php');
+require (ROOT_PATH . '/core/templates/panel_navbar.php');
 
 // Display template
 $template->displayTemplate('index.tpl', $smarty);
diff --git a/modules/Core/pages/panel/minecraft.php b/modules/Core/pages/panel/minecraft.php
index 692af1385dbafe34234ead62b8c20540d62897a3..1c8fc09af1cb73c230b04be0b095990d701604dc 100644
--- a/modules/Core/pages/panel/minecraft.php
+++ b/modules/Core/pages/panel/minecraft.php
@@ -15,50 +15,49 @@ define('PAGE', 'panel');
 define('PARENT_PAGE', 'integrations');
 define('PANEL_PAGE', 'minecraft');
 $page_title = $language->get('admin', 'minecraft');
-require_once(ROOT_PATH . '/core/templates/backend_init.php');
 
-if(Input::exists()){
+require_once (ROOT_PATH . '/core/templates/backend_init.php');
+
+if (Input::exists()){
     // Check token
-    if(Token::check()){
+    if (Token::check()){
         // Valid token
         // Process input
-        if(isset($_POST['enable_minecraft'])){
+        if (isset($_POST['enable_minecraft'])){
             // Either enable or disable Minecraft integration
-            $enable_minecraft_id = $queries->getWhere('settings', array('name', '=', 'mc_integration'));
+            $enable_minecraft_id = $queries->getWhere('settings', ['name', '=', 'mc_integration']);
             $enable_minecraft_id = $enable_minecraft_id[0]->id;
 
-            $queries->update('settings', $enable_minecraft_id, array(
+            $queries->update('settings', $enable_minecraft_id, [
                 'value' => Input::get('enable_minecraft')
-            ));
+            ]);
         }
-
     } else {
         // Invalid token
-        $errors = array($language->get('general', 'invalid_token'));
-
+        $errors = [$language->get('general', 'invalid_token')];
     }
 }
 
 // Load modules + template
-Module::loadPage($user, $pages, $cache, $smarty, array($navigation, $cc_nav, $mod_nav), $widgets);
+Module::loadPage($user, $pages, $cache, $smarty, [$navigation, $cc_nav, $mod_nav], $widgets);
 
-if(isset($success))
-    $smarty->assign(array(
+if (isset($success))
+    $smarty->assign([
         'SUCCESS' => $success,
         'SUCCESS_TITLE' => $language->get('general', 'success')
-    ));
+    ]);
 
-if(isset($errors) && count($errors))
-    $smarty->assign(array(
+if (isset($errors) && count($errors))
+    $smarty->assign([
         'ERRORS' => $errors,
         'ERRORS_TITLE' => $language->get('general', 'error')
-    ));
+    ]);
 
 // Check if Minecraft integration is enabled
-$minecraft_enabled = $queries->getWhere('settings', array('name', '=', 'mc_integration'));
+$minecraft_enabled = $queries->getWhere('settings', ['name', '=', 'mc_integration']);
 $minecraft_enabled = $minecraft_enabled[0]->value;
 
-$smarty->assign(array(
+$smarty->assign([
     'PARENT_PAGE' => PARENT_PAGE,
     'DASHBOARD' => $language->get('admin', 'dashboard'),
     'INTEGRATIONS' => $language->get('admin', 'integrations'),
@@ -68,42 +67,42 @@ $smarty->assign(array(
     'SUBMIT' => $language->get('general', 'submit'),
     'ENABLE_MINECRAFT_INTEGRATION' => $language->get('admin', 'enable_minecraft_integration'),
     'MINECRAFT_ENABLED' => $minecraft_enabled
-));
+]);
 
-if($minecraft_enabled == 1){
-    if($user->hasPermission('admincp.minecraft.authme')){
-        $smarty->assign(array(
+if ($minecraft_enabled == 1){
+    if ($user->hasPermission('admincp.minecraft.authme')){
+        $smarty->assign([
             'AUTHME' => $language->get('admin', 'authme_integration'),
             'AUTHME_LINK' => URL::build('/panel/minecraft/authme')
-        ));
+        ]);
     }
 
-    if($user->hasPermission('admincp.minecraft.verification')){
-        $smarty->assign(array(
+    if ($user->hasPermission('admincp.minecraft.verification')){
+        $smarty->assign([
             'ACCOUNT_VERIFICATION' => $language->get('admin', 'account_verification'),
             'ACCOUNT_VERIFICATION_LINK' => URL::build('/panel/minecraft/account_verification')
-        ));
+        ]);
     }
 
-    if($user->hasPermission('admincp.minecraft.servers')){
-        $smarty->assign(array(
+    if ($user->hasPermission('admincp.minecraft.servers')){
+        $smarty->assign([
             'SERVERS' => $language->get('admin', 'minecraft_servers'),
             'SERVERS_LINK' => URL::build('/panel/minecraft/servers')
-        ));
+        ]);
     }
 
-    if($user->hasPermission('admincp.minecraft.query_errors')){
-        $smarty->assign(array(
+    if ($user->hasPermission('admincp.minecraft.query_errors')){
+        $smarty->assign([
             'QUERY_ERRORS' => $language->get('admin', 'query_errors'),
             'QUERY_ERRORS_LINK' => URL::build('/panel/minecraft/query_errors')
-        ));
+        ]);
     }
 
-    if($user->hasPermission('admincp.minecraft.banners') && function_exists('exif_imagetype')){
-        $smarty->assign(array(
+    if ($user->hasPermission('admincp.minecraft.banners') && function_exists('exif_imagetype')){
+        $smarty->assign([
             'BANNERS' => $language->get('admin', 'server_banners'),
             'BANNERS_LINK' => URL::build('/panel/minecraft/banners')
-        ));
+        ]);
     }
 }
 
@@ -112,7 +111,7 @@ define('PAGE_LOAD_TIME', str_replace('{x}', round($page_load, 3), $language->get
 
 $template->onPageLoad();
 
-require(ROOT_PATH . '/core/templates/panel_navbar.php');
+require (ROOT_PATH . '/core/templates/panel_navbar.php');
 
 // Display template
 $template->displayTemplate('integrations/minecraft/minecraft.tpl', $smarty);
diff --git a/modules/Core/pages/panel/minecraft_account_verification.php b/modules/Core/pages/panel/minecraft_account_verification.php
index 2b7d10e57ce44fa52333876436d76fae2f89e00c..d1b3f8b6f9bf28bed8769f98e856fc3d024bf12f 100644
--- a/modules/Core/pages/panel/minecraft_account_verification.php
+++ b/modules/Core/pages/panel/minecraft_account_verification.php
@@ -16,100 +16,96 @@ define('PARENT_PAGE', 'integrations');
 define('PANEL_PAGE', 'minecraft');
 define('MINECRAFT_PAGE', 'verification');
 $page_title = $language->get('admin', 'account_verification');
-require_once(ROOT_PATH . '/core/templates/backend_init.php');
+
+require_once (ROOT_PATH . '/core/templates/backend_init.php');
 
 // Handle input
-if(Input::exists()){
-    $errors = array();
-    if(Token::check()){
-        if(!isset($_POST['premium'])){
-            $use_mcassoc = $queries->getWhere('settings', array('name', '=', 'verify_accounts'));
+if (Input::exists()){
+    $errors = [];
+
+    if (Token::check()){
+        if (! isset($_POST['premium'])){
+            $use_mcassoc = $queries->getWhere('settings', ['name', '=', 'verify_accounts']);
             $use_mcassoc = $use_mcassoc[0]->id;
 
-            if(isset($_POST['use_mcassoc']) && $_POST['use_mcassoc'] == 'on'){
+            if (isset($_POST['use_mcassoc']) && $_POST['use_mcassoc'] == 'on'){
                 $validate = new Validate();
-                $validation = $validate->check($_POST, array(
-                    'mcassoc_key' => array(
+                $validation = $validate->check($_POST, [
+                    'mcassoc_key' => [
                         'required' => true,
                         'max' => 128
-                    ),
-                    'mcassoc_instance' => array(
+                    ],
+                    'mcassoc_instance' => [
                         'required' => true,
                         'min' => 32,
                         'max' => 32
-                    )
-                ));
+                    ]
+                ]);
 
-                if($validation->passed()){
+                if ($validation->passed()){
                     // Update settings
-                    $mcassoc_key = $queries->getWhere('settings', array('name', '=', 'mcassoc_key'));
+                    $mcassoc_key = $queries->getWhere('settings', ['name', '=', 'mcassoc_key']);
                     $mcassoc_key = $mcassoc_key[0]->id;
 
-                    $mcassoc_instance = $queries->getWhere('settings', array('name', '=', 'mcassoc_instance'));
+                    $mcassoc_instance = $queries->getWhere('settings', ['name', '=', 'mcassoc_instance']);
                     $mcassoc_instance = $mcassoc_instance[0]->id;
 
-                    $queries->update('settings', $use_mcassoc, array('value' => 1));
-                    $queries->update('settings', $mcassoc_key, array('value' => Input::get('mcassoc_key')));
-                    $queries->update('settings', $mcassoc_instance, array('value' => Input::get('mcassoc_instance')));
+                    $queries->update('settings', $use_mcassoc, ['value' => 1]);
+                    $queries->update('settings', $mcassoc_key, ['value' => Input::get('mcassoc_key')]);
+                    $queries->update('settings', $mcassoc_instance, ['value' => Input::get('mcassoc_instance')]);
 
                     $success = $language->get('admin', 'updated_mcassoc_successfully');
-
                 } else {
                     $errors[] = $language->get('admin', 'mcassoc_error');
                 }
-
             } else {
-                $queries->update('settings', $use_mcassoc, array('value' => 0));
+                $queries->update('settings', $use_mcassoc, ['value' => 0]);
                 $success = $language->get('admin', 'updated_mcassoc_successfully');
             }
-
         } else {
-            $uuid_linking = $queries->getWhere('settings', array('name', '=', 'uuid_linking'));
+            $uuid_linking = $queries->getWhere('settings', ['name', '=', 'uuid_linking']);
             $uuid_linking = $uuid_linking[0]->id;
 
-            if(isset($_POST['enable_premium_accounts']) && $_POST['enable_premium_accounts'] == 1)
+            if (isset($_POST['enable_premium_accounts']) && $_POST['enable_premium_accounts'] == 1)
                 $use_premium = 1;
-            else
-                $use_premium = 0;
+            else $use_premium = 0;
 
-            $queries->update('settings', $uuid_linking, array('value' => $use_premium));
+            $queries->update('settings', $uuid_linking, ['value' => $use_premium]);
         }
-
-    } else
-        $errors[] = $language->get('general', 'invalid_token');
+    } else $errors[] = $language->get('general', 'invalid_token');
 }
 
 // Load modules + template
-Module::loadPage($user, $pages, $cache, $smarty, array($navigation, $cc_nav, $mod_nav), $widgets);
+Module::loadPage($user, $pages, $cache, $smarty, [$navigation, $cc_nav, $mod_nav], $widgets);
 
-if(isset($success))
-    $smarty->assign(array(
+if (isset($success))
+    $smarty->assign([
         'SUCCESS' => $success,
         'SUCCESS_TITLE' => $language->get('general', 'success')
-    ));
+    ]);
 
-if(isset($errors) && count($errors))
-    $smarty->assign(array(
+if (isset($errors) && count($errors))
+    $smarty->assign([
         'ERRORS' => $errors,
         'ERRORS_TITLE' => $language->get('general', 'error')
-    ));
+    ]);
 
 // Get UUID linking settings
-$uuid_linking = $queries->getWhere('settings', array('name', '=', 'uuid_linking'));
+$uuid_linking = $queries->getWhere('settings', ['name', '=', 'uuid_linking']);
 $uuid_linking = $uuid_linking[0]->value;
 
-if($uuid_linking == '1'){
+if ($uuid_linking == '1'){
     // Get mcassoc settings
-    $use_mcassoc = $queries->getWhere('settings', array('name', '=', 'verify_accounts'));
+    $use_mcassoc = $queries->getWhere('settings', ['name', '=', 'verify_accounts']);
     $use_mcassoc = $use_mcassoc[0]->value;
 
-    $mcassoc_key = $queries->getWhere('settings', array('name', '=', 'mcassoc_key'));
+    $mcassoc_key = $queries->getWhere('settings', ['name', '=', 'mcassoc_key']);
     $mcassoc_key = Output::getClean($mcassoc_key[0]->value);
 
-    $mcassoc_instance = $queries->getWhere('settings', array('name', '=', 'mcassoc_instance'));
+    $mcassoc_instance = $queries->getWhere('settings', ['name', '=', 'mcassoc_instance']);
     $mcassoc_instance = Output::getClean($mcassoc_instance[0]->value);
 
-    $smarty->assign(array(
+    $smarty->assign([
         'INFO' => $language->get('general', 'info'),
         'MCASSOC_INFO' => $language->get('admin', 'mcassoc_help'),
         'USE_MCASSOC' => $language->get('admin', 'verify_with_mcassoc'),
@@ -119,10 +115,10 @@ if($uuid_linking == '1'){
         'MCASSOC_INSTANCE' => $language->get('admin', 'mcassoc_instance'),
         'MCASSOC_INSTANCE_VALUE' => $mcassoc_instance,
         'MCASSOC_INSTANCE_HELP' => $language->get('admin', 'mcassoc_instance_help')
-    ));
+    ]);
 }
 
-$smarty->assign(array(
+$smarty->assign([
     'PARENT_PAGE' => PARENT_PAGE,
     'DASHBOARD' => $language->get('admin', 'dashboard'),
     'INTEGRATIONS' => $language->get('admin', 'integrations'),
@@ -134,14 +130,14 @@ $smarty->assign(array(
     'ACCOUNT_VERIFICATION' => $language->get('admin', 'account_verification'),
     'FORCE_PREMIUM_ACCOUNTS' => $language->get('admin', 'force_premium_accounts'),
     'FORCE_PREMIUM_ACCOUNTS_VALUE' => ($uuid_linking == '1')
-));
+]);
 
 $page_load = microtime(true) - $start;
 define('PAGE_LOAD_TIME', str_replace('{x}', round($page_load, 3), $language->get('general', 'page_loaded_in')));
 
 $template->onPageLoad();
 
-require(ROOT_PATH . '/core/templates/panel_navbar.php');
+require (ROOT_PATH . '/core/templates/panel_navbar.php');
 
 // Display template
 $template->displayTemplate('integrations/minecraft/minecraft_account_verification.tpl', $smarty);
diff --git a/modules/Core/pages/panel/minecraft_authme.php b/modules/Core/pages/panel/minecraft_authme.php
index 56b676b0eacd6d42a7cbbfc960b37d4c04d51db1..d2f9c309f37311704ec53e3a53bdda31e48a883e 100644
--- a/modules/Core/pages/panel/minecraft_authme.php
+++ b/modules/Core/pages/panel/minecraft_authme.php
@@ -16,80 +16,77 @@ define('PARENT_PAGE', 'integrations');
 define('PANEL_PAGE', 'minecraft');
 define('MINECRAFT_PAGE', 'authme');
 $page_title = $language->get('admin', 'authme_integration');
-require_once(ROOT_PATH . '/core/templates/backend_init.php');
+
+require_once (ROOT_PATH . '/core/templates/backend_init.php');
 
 // Handle input
-if(Input::exists()){
-    $errors = array();
+if (Input::exists()){
+    $errors = [];
 
-    if(Token::check()){
-        if(isset($_POST['enable_authme'])){
+    if (Token::check()){
+        if (isset($_POST['enable_authme'])){
             // Either enable or disable Authme integration
-            $enable_authme_id = $queries->getWhere('settings', array('name', '=', 'authme'));
+            $enable_authme_id = $queries->getWhere('settings', ['name', '=', 'authme']);
             $enable_authme_id = $enable_authme_id[0]->id;
 
-            $queries->update('settings', $enable_authme_id, array(
+            $queries->update('settings', $enable_authme_id, [
                 'value' => Input::get('enable_authme')
-            ));
-
+            ]);
         } else {
             // AuthMe config settings
             $validate = new Validate();
-            $validation = $validate->check($_POST, array(
-                'hashing_algorithm' => array(
+            $validation = $validate->check($_POST, [
+                'hashing_algorithm' => [
                     'required' => true
-                ),
-                'db_address' => array(
+                ],
+                'db_address' => [
                     'required' => true
-                ),
-                'db_name' => array(
+                ],
+                'db_name' => [
                     'required' => true
-                ),
-                'db_username' => array(
+                ],
+                'db_username' => [
                     'required' => true
-                ),
-                'db_table' => array(
+                ],
+                'db_table' => [
                     'required' => true
-                )
-            ));
+                ]
+            ]);
 
-            if($validation->passed()){
-                $authme_db = $queries->getWhere('settings', array('name', '=', 'authme_db'));
+            if ($validation->passed()){
+                $authme_db = $queries->getWhere('settings', ['name', '=', 'authme_db']);
                 $authme_db_id = $authme_db[0]->id;
                 $authme_db = json_decode($authme_db[0]->value);
 
-                if(isset($_POST['db_password'])){
+                if (isset($_POST['db_password'])){
                     $password = $_POST['db_password'];
                 } else {
-                    if(isset($authme_db->password) && !empty($authme_db->password))
+                    if (isset($authme_db->password) && ! empty($authme_db->password))
                         $password = $authme_db->password;
-                    else
-                        $password = '';
+                    else $password = '';
                 }
 
-                $result = array(
+                $result = [
                     'address' => Output::getClean(Input::get('db_address')),
-                    'port' => (isset($_POST['db_port']) && !empty($_POST['db_port']) && is_numeric($_POST['db_port'])) ? $_POST['db_port'] : 3306,
+                    'port' => (isset($_POST['db_port']) && ! empty($_POST['db_port']) && is_numeric($_POST['db_port'])) ? $_POST['db_port'] : 3306,
                     'db' => Output::getClean(Input::get('db_name')),
                     'user' => Output::getClean(Input::get('db_username')),
                     'pass' => $password,
                     'table' => Output::getClean(Input::get('db_table')),
                     'hash' => Output::getClean(Input::get('hashing_algorithm')),
                     'sync' => Input::get('authme_sync')
-                );
+                ];
 
                 $cache->setCache('authme_cache');
                 $cache->store('authme', $result);
 
-                $queries->update('settings', $authme_db_id, array(
+                $queries->update('settings', $authme_db_id, [
                     'value' => json_encode($result)
-                ));
-
+                ]);
             } else {
                 $errors[] = $language->get('admin', 'enter_authme_db_details');
             }
         }
-
     } else {
         // Invalid token
         $errors[] = $language->get('general', 'invalid_token');
@@ -97,31 +94,31 @@ if(Input::exists()){
 }
 
 // Load modules + template
-Module::loadPage($user, $pages, $cache, $smarty, array($navigation, $cc_nav, $mod_nav), $widgets);
+Module::loadPage($user, $pages, $cache, $smarty, [$navigation, $cc_nav, $mod_nav], $widgets);
 
-if(isset($success))
-    $smarty->assign(array(
+if (isset($success))
+    $smarty->assign([
         'SUCCESS' => $success,
         'SUCCESS_TITLE' => $language->get('general', 'success')
-    ));
+    ]);
 
-if(isset($errors) && count($errors))
-    $smarty->assign(array(
+if (isset($errors) && count($errors))
+    $smarty->assign([
         'ERRORS' => $errors,
         'ERRORS_TITLE' => $language->get('general', 'error')
-    ));
+    ]);
 
 // Is Authme enabled?
-$authme_enabled = $queries->getWhere('settings', array('name', '=', 'authme'));
+$authme_enabled = $queries->getWhere('settings', ['name', '=', 'authme']);
 $authme_enabled = $authme_enabled[0]->value;
 
-if($authme_enabled == '1'){
+if ($authme_enabled == '1'){
     // Retrieve Authme database details
-    $authme_db = $queries->getWhere('settings', array('name', '=', 'authme_db'));
+    $authme_db = $queries->getWhere('settings', ['name', '=', 'authme_db']);
     $authme_db = json_decode($authme_db[0]->value);
 
-    $smarty->assign(array(
-        'AUTHME_DB_DETAILS' => ($authme_db ? $authme_db : array()),
+    $smarty->assign([
+        'AUTHME_DB_DETAILS' => ($authme_db ? $authme_db : []),
         'AUTHME_HASH_ALGORITHM' => $language->get('admin', 'authme_hash_algorithm'),
         'AUTHME_DB_ADDRESS' => $language->get('admin', 'authme_db_address'),
         'AUTHME_DB_PORT' => $language->get('admin', 'authme_db_port'),
@@ -132,10 +129,10 @@ if($authme_enabled == '1'){
         'AUTHME_DB_TABLE' => $language->get('admin', 'authme_db_table'),
         'AUTHME_PASSWORD_SYNC' => $language->get('admin', 'authme_password_sync'),
         'AUTHME_PASSWORD_SYNC_HELP' => $language->get('admin', 'authme_password_sync_help')
-    ));
+    ]);
 }
 
-$smarty->assign(array(
+$smarty->assign([
     'PARENT_PAGE' => PARENT_PAGE,
     'DASHBOARD' => $language->get('admin', 'dashboard'),
     'INTEGRATIONS' => $language->get('admin', 'integrations'),
@@ -149,14 +146,14 @@ $smarty->assign(array(
     'ENABLE_AUTHME_VALUE' => ($authme_enabled == '1'),
     'AUTHME' => $language->get('admin', 'authme_integration'),
     'MINECRAFT_LINK' => URL::build('/panel/minecraft')
-));
+]);
 
 $page_load = microtime(true) - $start;
 define('PAGE_LOAD_TIME', str_replace('{x}', round($page_load, 3), $language->get('general', 'page_loaded_in')));
 
 $template->onPageLoad();
 
-require(ROOT_PATH . '/core/templates/panel_navbar.php');
+require (ROOT_PATH . '/core/templates/panel_navbar.php');
 
 // Display template
 $template->displayTemplate('integrations/minecraft/minecraft_authme.tpl', $smarty);
diff --git a/modules/Core/pages/panel/minecraft_query_errors.php b/modules/Core/pages/panel/minecraft_query_errors.php
index f42c620c1c080967667babe2fa99246a0d9cf26e..d8ae96b85e306d3b4f852efe424fdf9f5d55791d 100644
--- a/modules/Core/pages/panel/minecraft_query_errors.php
+++ b/modules/Core/pages/panel/minecraft_query_errors.php
@@ -16,27 +16,30 @@ define('PARENT_PAGE', 'integrations');
 define('PANEL_PAGE', 'minecraft');
 define('MINECRAFT_PAGE', 'query_errors');
 $page_title = $language->get('admin', 'query_errors');
-require_once(ROOT_PATH . '/core/templates/backend_init.php');
 
-if(!isset($_GET['id'])){
-    if(isset($_GET['action']) && $_GET['action'] == 'purge'){
-        $queries->delete('query_errors', array('id', '<>', 0));
+require_once (ROOT_PATH . '/core/templates/backend_init.php');
+
+if (! isset($_GET['id'])){
+    if (isset($_GET['action']) && $_GET['action'] == 'purge'){
+        $queries->delete('query_errors', ['id', '<>', 0]);
         Session::flash('panel_query_errors_success', $language->get('admin', 'query_errors_purged_successfully'));
         Redirect::to(URL::build('/panel/minecraft/query_errors'));
+
         die();
     }
 
     $query_errors = $queries->orderWhere('query_errors', 'id <> 0', 'DATE', 'DESC');
-    if(count($query_errors)){
+
+    if (count($query_errors)){
         // Get page
-        if(isset($_GET['p'])){
-            if(!is_numeric($_GET['p'])){
+        if (isset($_GET['p'])){
+            if (! is_numeric($_GET['p'])){
                 Redirect::to(URL::build('/panel/minecraft/query_errors'));
+
                 die();
-            } else
+            }
                 $p = $_GET['p'];
-
-        } else{
+        } else {
             $p = 1;
         }
 
@@ -45,52 +48,55 @@ if(!isset($_GET['id'])){
         $results = $paginator->getLimited($query_errors, 10, $p, count($query_errors));
         $pagination = $paginator->generate(7, URL::build('/panel/minecraft/query_errors/', true));
 
-        $template_array = array();
+        $template_array = [];
 
-        foreach($results->data as $result){
-            $template_array[] = array(
+        foreach ($results->data as $result){
+            $template_array[] = [
                 'ip' => Output::getClean($result->ip),
                 'port' => Output::getClean($result->port),
                 'date' => date('d M Y, H:i', $result->date),
                 'view_link' => URL::build('/panel/minecraft/query_errors/', 'id=' . Output::getClean($result->id)),
                 'delete_link' => URL::build('/panel/minecraft/query_errors/', 'action=delete&id=' . Output::getClean($result->id))
-            );
+            ];
         }
 
-        $smarty->assign(array(
+        $smarty->assign([
             'PAGINATION' => $pagination,
             'QUERY_ERRORS_ARRAY' => $template_array,
             'SERVER_ADDRESS' => $language->get('admin', 'server_address'),
             'SERVER_PORT' => $language->get('admin', 'server_port'),
             'DATE' => $language->get('general', 'date'),
             'ACTIONS' => $language->get('general', 'actions')
-        ));
+        ]);
     }
 
     $template_file = 'integrations/minecraft/minecraft_query_errors.tpl';
-
 } else {
     // View an error
-    if(!is_numeric($_GET['id'])){
+    if (! is_numeric($_GET['id'])){
         Redirect::to(URL::build('/panel/minecraft/query_errors'));
+
         die();
     }
 
-    $query_error = $queries->getWhere('query_errors', array('id', '=', $_GET['id']));
-    if(!count($query_error)){
+    $query_error = $queries->getWhere('query_errors', ['id', '=', $_GET['id']]);
+
+    if (! count($query_error)){
         Redirect::to(URL::build('/panel/minecraft/query_errors'));
+
         die();
     }
     $query_error = $query_error[0];
 
-    if($_GET['action'] == 'delete'){
-        $queries->delete('query_errors', array('id', '=', $_GET['id']));
+    if ($_GET['action'] == 'delete'){
+        $queries->delete('query_errors', ['id', '=', $_GET['id']]);
         Session::flash('panel_query_errors_success', $language->get('admin', 'query_error_deleted_successfully'));
         Redirect::to(URL::build('/panel/minecraft/query_errors'));
+
         die();
     }
 
-    $smarty->assign(array(
+    $smarty->assign([
         'VIEWING_ERROR' => $language->get('admin', 'viewing_query_error'),
         'BACK' => $language->get('general', 'back'),
         'BACK_LINK' => URL::build('/panel/minecraft/query_errors'),
@@ -107,31 +113,30 @@ if(!isset($_GET['id'])){
         'SERVER_PORT_VALUE' => Output::getClean($query_error->port),
         'DATE_VALUE' => date('d M Y, H:i', $query_error->date),
         'ERROR_MESSAGE' => Output::getClean($query_error->error)
-    ));
+    ]);
 
     $template_file = 'integrations/minecraft/minecraft_query_errors_view.tpl';
-
 }
 
 // Load modules + template
-Module::loadPage($user, $pages, $cache, $smarty, array($navigation, $cc_nav, $mod_nav), $widgets);
+Module::loadPage($user, $pages, $cache, $smarty, [$navigation, $cc_nav, $mod_nav], $widgets);
 
-if(Session::exists('panel_query_errors_success'))
+if (Session::exists('panel_query_errors_success'))
     $success = Session::flash('panel_query_errors_success');
 
-if(isset($success))
-    $smarty->assign(array(
+if (isset($success))
+    $smarty->assign([
         'SUCCESS' => $success,
         'SUCCESS_TITLE' => $language->get('general', 'success')
-    ));
+    ]);
 
-if(isset($errors) && count($errors))
-    $smarty->assign(array(
+if (isset($errors) && count($errors))
+    $smarty->assign([
         'ERRORS' => $errors,
         'ERRORS_TITLE' => $language->get('general', 'error')
-    ));
+    ]);
 
-$smarty->assign(array(
+$smarty->assign([
     'PARENT_PAGE' => PARENT_PAGE,
     'DASHBOARD' => $language->get('admin', 'dashboard'),
     'INTEGRATIONS' => $language->get('admin', 'integrations'),
@@ -151,14 +156,14 @@ $smarty->assign(array(
     'PURGE_QUERY_ERRORS_LINK' => URL::build('/panel/minecraft/query_errors/', 'action=purge'),
     'CONFIRM_PURGE_ERRORS' => $language->get('admin', 'confirm_purge_errors'),
     'NO_QUERY_ERRORS' => $language->get('admin', 'no_query_errors')
-));
+]);
 
 $page_load = microtime(true) - $start;
 define('PAGE_LOAD_TIME', str_replace('{x}', round($page_load, 3), $language->get('general', 'page_loaded_in')));
 
 $template->onPageLoad();
 
-require(ROOT_PATH . '/core/templates/panel_navbar.php');
+require (ROOT_PATH . '/core/templates/panel_navbar.php');
 
 // Display template
 $template->displayTemplate($template_file, $smarty);
diff --git a/modules/Core/pages/panel/minecraft_server_banners.php b/modules/Core/pages/panel/minecraft_server_banners.php
index 457a110ecc06acb572d2cb0d395b4e639e0ca41b..bc2a71ce1325ae02ae0a2c49a99a3412e830a03a 100644
--- a/modules/Core/pages/panel/minecraft_server_banners.php
+++ b/modules/Core/pages/panel/minecraft_server_banners.php
@@ -11,8 +11,9 @@
 
 $user->handlePanelPageLoad('admincp.minecraft.banners');
 
-if (!function_exists('exif_imagetype')) {
-    require_once(ROOT_PATH . '/403.php');
+if (! function_exists('exif_imagetype')) {
+    require_once (ROOT_PATH . '/403.php');
+
     die();
 }
 
@@ -21,142 +22,144 @@ define('PARENT_PAGE', 'integrations');
 define('PANEL_PAGE', 'minecraft');
 define('MINECRAFT_PAGE', 'server_banners');
 $page_title = $language->get('admin', 'server_banners');
-require_once(ROOT_PATH . '/core/templates/backend_init.php');
 
-if(!isset($_GET['server']) && !isset($_GET['edit'])){
-    $servers = $queries->getWhere('mc_servers', array('id', '<>', 0));
-    if(count($servers)){
-        $template_array = array();
+require_once (ROOT_PATH . '/core/templates/backend_init.php');
+
+if (! isset($_GET['server']) && ! isset($_GET['edit'])){
+    $servers = $queries->getWhere('mc_servers', ['id', '<>', 0]);
 
-        foreach($servers as $server){
-            $template_array[] = array(
+    if (count($servers)){
+        $template_array = [];
+
+        foreach ($servers as $server){
+            $template_array[] = [
                 'name' => Output::getClean($server->name),
                 'edit_link' => URL::build('/panel/minecraft/banners/', 'edit=' . Output::getClean($server->id)),
                 'view_link' => URL::build('/panel/minecraft/banners/', 'server=' . Output::getClean($server->id))
-            );
+            ];
         }
 
-        $smarty->assign(array(
+        $smarty->assign([
             'SERVERS' => $template_array,
             'EDIT' => $language->get('general', 'edit'),
             'VIEW' => $language->get('general', 'view')
-        ));
-
+        ]);
     } else {
         $smarty->assign('NO_SERVERS', $language->get('admin', 'no_servers_defined'));
     }
 
     $template_file = 'integrations/minecraft/minecraft_server_banners.tpl';
-
 } else {
-    if(isset($_GET['server'])){
+    if (isset($_GET['server'])){
         // View
         // Get server
-        $server = $queries->getWhere('mc_servers', array('id', '=', $_GET['server']));
-        if(!count($server)){
+        $server = $queries->getWhere('mc_servers', ['id', '=', $_GET['server']]);
+
+        if (! count($server)){
             Redirect::to(URL::build('/panel/minecraft/banners'));
+
             die();
         }
         $server = $server[0];
 
-        $smarty->assign(array(
+        $smarty->assign([
             'BACK' => $language->get('general', 'back'),
             'BACK_LINK' => URL::build('/panel/minecraft/banners'),
             'SERVER_NAME' => Output::getClean($server->name),
-            'BANNER_URL' => Util::getSelfURL() . ltrim(rtrim(URL::build('/banner/'. urlencode($server->name) . '.png'), '/'), '/'),
-            'BANNER_PATH' => rtrim(URL::build('/banner/'. urlencode($server->name) . '.png'), '/')
-        ));
+            'BANNER_URL' => Util::getSelfURL() . ltrim(rtrim(URL::build('/banner/' . urlencode($server->name) . '.png'), '/'), '/'),
+            'BANNER_PATH' => rtrim(URL::build('/banner/' . urlencode($server->name) . '.png'), '/')
+        ]);
 
         $template_file = 'integrations/minecraft/minecraft_server_banners_view.tpl';
-
     } else {
         // Edit
         // Get server
-        $server = $queries->getWhere('mc_servers', array('id', '=', $_GET['edit']));
-        if(!count($server)){
+        $server = $queries->getWhere('mc_servers', ['id', '=', $_GET['edit']]);
+
+        if (! count($server)){
             Redirect::to(URL::build('/panel/minecraft/banners'));
+
             die();
         }
 
-        if(Input::exists()){
+        if (Input::exists()){
             // Check token
-            if(Token::check()){
+            if (Token::check()){
                 // Valid token
                 try {
-                    if(file_exists(ROOT_PATH . '/uploads/banners/' . Input::get('banner'))){
-                        $queries->update('mc_servers', $_GET['edit'], array(
+                    if (file_exists(ROOT_PATH . '/uploads/banners/' . Input::get('banner'))){
+                        $queries->update('mc_servers', $_GET['edit'], [
                             'banner_background' => Output::getClean(Input::get('banner'))
-                        ));
+                        ]);
 
                         $success = $language->get('admin', 'banner_updated_successfully');
                     }
-                } catch(Exception $e){
-                    $errors = array($e->getMessage());
+                } catch (Exception $e){
+                    $errors = [$e->getMessage()];
                 }
-
-
             } else {
                 // Invalid token
-                $errors = array($language->get('general', 'invalid_token'));
+                $errors = [$language->get('general', 'invalid_token')];
             }
 
             // Re-query
-            $server = $queries->getWhere('mc_servers', array('id', '=', $_GET['edit']));
+            $server = $queries->getWhere('mc_servers', ['id', '=', $_GET['edit']]);
         }
 
         $server = $server[0];
 
-        $image_path = join(DIRECTORY_SEPARATOR, array(ROOT_PATH, 'uploads', 'banners'));
+        $image_path = join(DIRECTORY_SEPARATOR, [ROOT_PATH, 'uploads', 'banners']);
         $images = scandir($image_path);
-        $template_images = array();
+        $template_images = [];
 
         // Only display jpeg, png, jpg, gif
-        $allowed_exts = array('gif', 'png', 'jpg', 'jpeg');
+        $allowed_exts = ['gif', 'png', 'jpg', 'jpeg'];
         $n = 1;
 
-        foreach($images as $image){
+        foreach ($images as $image){
             $ext = pathinfo($image, PATHINFO_EXTENSION);
-            if(!in_array($ext, $allowed_exts)){
+
+            if (! in_array($ext, $allowed_exts)){
                 continue;
             }
-            $template_images[] = array(
+            $template_images[] = [
                 'src' => (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/uploads/banners/' . $image,
                 'value' => $image,
                 'selected' => ($server->banner_background == $image),
                 'n' => $n
-            );
+            ];
             $n++;
         }
 
-        $smarty->assign(array(
+        $smarty->assign([
             'BACK' => $language->get('general', 'back'),
             'BACK_LINK' => URL::build('/panel/minecraft/banners'),
             'SERVER_NAME' => Output::getClean($server->name),
             'BANNER_BACKGROUND' => $language->get('admin', 'banner_background'),
             'BANNER_BACKGROUND_VALUE' => Output::getClean($server->banner_background),
             'IMAGES' => $template_images
-        ));
+        ]);
 
         $template_file = 'integrations/minecraft/minecraft_server_banners_edit.tpl';
     }
 }
 
 // Load modules + template
-Module::loadPage($user, $pages, $cache, $smarty, array($navigation, $cc_nav, $mod_nav), $widgets);
+Module::loadPage($user, $pages, $cache, $smarty, [$navigation, $cc_nav, $mod_nav], $widgets);
 
-if(isset($success))
-    $smarty->assign(array(
+if (isset($success))
+    $smarty->assign([
         'SUCCESS' => $success,
         'SUCCESS_TITLE' => $language->get('general', 'success')
-    ));
+    ]);
 
-if(isset($errors) && count($errors))
-    $smarty->assign(array(
+if (isset($errors) && count($errors))
+    $smarty->assign([
         'ERRORS' => $errors,
         'ERRORS_TITLE' => $language->get('general', 'error')
-    ));
+    ]);
 
-$smarty->assign(array(
+$smarty->assign([
     'PARENT_PAGE' => PARENT_PAGE,
     'DASHBOARD' => $language->get('admin', 'dashboard'),
     'INTEGRATIONS' => $language->get('admin', 'integrations'),
@@ -166,14 +169,14 @@ $smarty->assign(array(
     'TOKEN' => Token::get(),
     'SUBMIT' => $language->get('general', 'submit'),
     'SERVER_BANNERS' => $language->get('admin', 'server_banners')
-));
+]);
 
 $page_load = microtime(true) - $start;
 define('PAGE_LOAD_TIME', str_replace('{x}', round($page_load, 3), $language->get('general', 'page_loaded_in')));
 
 $template->onPageLoad();
 
-require(ROOT_PATH . '/core/templates/panel_navbar.php');
+require (ROOT_PATH . '/core/templates/panel_navbar.php');
 
 // Display template
 $template->displayTemplate($template_file, $smarty);
diff --git a/modules/Core/pages/panel/minecraft_servers.php b/modules/Core/pages/panel/minecraft_servers.php
index ca75d4ec786f9c857800c8871282f6159e327462..f47e3c0dc27d8508b95809bc64d9387bfddb9ce1 100644
--- a/modules/Core/pages/panel/minecraft_servers.php
+++ b/modules/Core/pages/panel/minecraft_servers.php
@@ -16,100 +16,94 @@ define('PARENT_PAGE', 'integrations');
 define('PANEL_PAGE', 'minecraft');
 define('MINECRAFT_PAGE', 'servers');
 $page_title = $language->get('admin', 'minecraft_servers');
-require_once(ROOT_PATH . '/core/templates/backend_init.php');
 
-if(isset($_GET['action'])){
+require_once (ROOT_PATH . '/core/templates/backend_init.php');
+
+if (isset($_GET['action'])){
     switch($_GET['action']){
         case 'new':
             // Handle input
-            if(Input::exists()){
-                $errors = array();
+            if (Input::exists()){
+                $errors = [];
 
-                if(Token::check()){
+                if (Token::check()){
                     // Validate input
                     $validate = new Validate();
-                    $validation = $validate->check($_POST, array(
-                        'server_name' => array(
+                    $validation = $validate->check($_POST, [
+                        'server_name' => [
                             'required' => true,
                             'min' => 1,
                             'max' => 20
-                        ),
-                        'server_address' => array(
+                        ],
+                        'server_address' => [
                             'required' => true,
                             'min' => 1,
                             'max' => 64
-                        ),
-                        'server_port' => array(
+                        ],
+                        'server_port' => [
                             'max' => 5
-                        ),
-                        'parent_server' => array(
+                        ],
+                        'parent_server' => [
                             'required' => true
-                        ),
-                        'query_port' => array(
+                        ],
+                        'query_port' => [
                             'max' => 5
-                        )
-                    ));
+                        ]
+                    ]);
 
-                    if($validation->passed()){
+                    if ($validation->passed()){
                         // Handle input
                         try {
                             // BungeeCord selected?
-                            if(isset($_POST['bungee_instance']) && $_POST['bungee_instance'] == 1)
+                            if (isset($_POST['bungee_instance']) && $_POST['bungee_instance'] == 1)
                                 $bungee = 1;
-                            else
-                                $bungee = 0;
+                            else $bungee = 0;
 
                             // Pre 1.7?
-                            if(isset($_POST['pre_17']) && $_POST['pre_17'] == 1)
+                            if (isset($_POST['pre_17']) && $_POST['pre_17'] == 1)
                                 $pre = 1;
-                            else
-                                $pre = 0;
+                            else $pre = 0;
 
                             // Status enabled?
-                            if(isset($_POST['status_query_enabled']) && $_POST['status_query_enabled'] == 1)
+                            if (isset($_POST['status_query_enabled']) && $_POST['status_query_enabled'] == 1)
                                 $status = 1;
-                            else
-                                $status = 0;
+                            else $status = 0;
 
                             // Show IP enabled?
-                            if(isset($_POST['show_ip_enabled']) && $_POST['show_ip_enabled'] == 1)
+                            if (isset($_POST['show_ip_enabled']) && $_POST['show_ip_enabled'] == 1)
                                 $show_ip = 1;
-                            else
-                                $show_ip = 0;
+                            else $show_ip = 0;
 
                             // Player list enabled?
-                            if(isset($_POST['query_enabled']) && $_POST['query_enabled'] == 1)
+                            if (isset($_POST['query_enabled']) && $_POST['query_enabled'] == 1)
                                 $query = 1;
-                            else
-                                $query = 0;
+                            else $query = 0;
 
                             // Parent server
-                            if($_POST['parent_server'] == 'none')
+                            if ($_POST['parent_server'] == 'none')
                                 $parent = 0;
-                            else
-                                $parent = $_POST['parent_server'];
+                            else $parent = $_POST['parent_server'];
 
                             // Validate server port
-                            if(is_numeric(Input::get('server_port')))
+                            if (is_numeric(Input::get('server_port')))
                                 $port = Input::get('server_port');
                             else {
-                                if(!isset($_POST['server_port']) || empty($_POST['server_port']))
+                                if (! isset($_POST['server_port']) || empty($_POST['server_port']))
                                     $port = null;
-                                else
-                                    $port = 25565;
+                                else $port = 25565;
                             }
 
                             // Validate server query port
-                            if(is_numeric(Input::get('query_port')))
+                            if (is_numeric(Input::get('query_port')))
                                 $query_port = Input::get('query_port');
-                            else
-                                $query_port = 25565;
+                            else $query_port = 25565;
                             
                             $last_server_order = DB::getInstance()->query('SELECT `order` FROM nl2_mc_servers ORDER BY `order` DESC LIMIT 1')->results();
+
                             if (count($last_server_order)) $last_server_order = $last_server_order[0]->order;
                             else $last_server_order = 0;
 
-                            $queries->create('mc_servers', array(
+                            $queries->create('mc_servers', [
                                 'ip' => Output::getClean(Input::get('server_address')),
                                 'query_ip' => Output::getClean(Input::get('server_address')),
                                 'name' => Output::getClean(Input::get('server_name')),
@@ -122,80 +116,97 @@ if(isset($_GET['action'])){
                                 'query_port' => $query_port,
                                 'show_ip' => $show_ip,
                                 'order' => $last_server_order + 1
-                            ));
+                            ]);
 
                             Session::flash('admin_mc_servers_success', $language->get('admin', 'server_created'));
                             Redirect::to(URL::build('/panel/minecraft/servers'));
-                            die();
 
-                        } catch(Exception $e){
-                            $errors = array($e->getMessage());
+                            die();
+                        } catch (Exception $e){
+                            $errors = [$e->getMessage()];
                         }
                     } else {
                         // Validation failed
-                        foreach($validation->errors() as $item){
-                            if(strpos($item, 'is required') !== false){
+                        foreach ($validation->errors() as $item){
+                            if (strpos($item, 'is required') !== false){
                                 switch($item){
                                     case (strpos($item, 'server_name') !== false):
                                         $errors[] = $language->get('admin', 'server_name_required');
+
                                         break;
+
                                     case (strpos($item, 'server_address') !== false):
                                         $errors[] = $language->get('admin', 'server_address_required');
+
                                         break;
+
                                     case (strpos($item, 'server_port') !== false):
                                         $errors[] = $language->get('admin', 'server_port_required');
+
                                         break;
+
                                     case (strpos($item, 'parent_server') !== false):
                                         $errors[] = $language->get('admin', 'server_parent_required');
+
                                         break;
                                 }
-                            } else if(strpos($item, 'minimum') !== false){
+                            } else if (strpos($item, 'minimum') !== false){
                                 switch($item){
                                     case (strpos($item, 'server_name') !== false):
                                         $errors[] = $language->get('admin', 'server_name_minimum');
+
                                         break;
+
                                     case (strpos($item, 'server_address') !== false):
                                         $errors[] = $language->get('admin', 'server_address_minimum');
+
                                         break;
+
                                     case (strpos($item, 'server_port') !== false):
                                         $errors[] = $language->get('admin', 'server_port_minimum');
+
                                         break;
                                 }
-                            } else if(strpos($item, 'maximum') !== false){
+                            } else if (strpos($item, 'maximum') !== false){
                                 switch($item){
                                     case (strpos($item, 'server_name') !== false):
                                         $errors[] = $language->get('admin', 'server_name_maximum');
+
                                         break;
+
                                     case (strpos($item, 'server_address') !== false):
                                         $errors[] = $language->get('admin', 'server_address_maximum');
+
                                         break;
+
                                     case (strpos($item, 'server_port') !== false):
                                         $errors[] = $language->get('admin', 'server_port_maximum');
+
                                         break;
+
                                     case (strpos($item, 'query_port') !== false):
                                         $errors[] = $language->get('admin', 'query_port_maximum');
+
                                         break;
                                 }
                             }
                         }
                     }
-
-                } else
-                    // Invalid token
+                } else // Invalid token
                     $errors[] = $language->get('general', 'invalid_token');
             }
 
-            $available_parent_servers = $queries->getWhere('mc_servers', array('parent_server', '=', 0));
+            $available_parent_servers = $queries->getWhere('mc_servers', ['parent_server', '=', 0]);
 
             // Display query information alert only if external query is selected
-            $external_query = $queries->getWhere('settings', array('name', '=', 'external_query'));
+            $external_query = $queries->getWhere('settings', ['name', '=', 'external_query']);
             $external_query = $external_query[0]->value;
 
-            if($external_query == 1){
+            if ($external_query == 1){
                 $smarty->assign('SERVER_QUERY_INFORMATION', $language->get('admin', 'server_query_information'));
             }
 
-            $smarty->assign(array(
+            $smarty->assign([
                 'ADDING_SERVER' => $language->get('admin', 'adding_server'),
                 'CANCEL' => $language->get('general', 'cancel'),
                 'CANCEL_LINK' => URL::build('/panel/minecraft/servers'),
@@ -231,7 +242,7 @@ if(isset($_GET['action'])){
                 'SERVER_QUERY_PORT' => $language->get('admin', 'server_query_port'),
                 'SERVER_QUERY_PORT_INFO' => $language->get('admin', 'server_query_port_help'),
                 'SERVER_QUERY_PORT_VALUE' => Output::getClean(Input::get('query_port'))
-            ));
+            ]);
 
             $template_file = 'integrations/minecraft/minecraft_servers_new.tpl';
 
@@ -239,101 +250,96 @@ if(isset($_GET['action'])){
 
         case 'edit':
             // Get server
-            if(!isset($_GET['id']) || !is_numeric($_GET['id'])){
+            if (! isset($_GET['id']) || ! is_numeric($_GET['id'])){
                 Redirect::to(URL::build('/panel/minecraft/servers'));
+
                 die();
             }
 
-            $server_editing = $queries->getWhere('mc_servers', array('id', '=', $_GET['id']));
-            if(!count($server_editing)){
+            $server_editing = $queries->getWhere('mc_servers', ['id', '=', $_GET['id']]);
+
+            if (! count($server_editing)){
                 Redirect::to(URL::build('/panel/minecraft/servers'));
+
                 die();
             }
             $server_editing = $server_editing[0];
 
             // Handle input
-            if(Input::exists()){
-                if(Token::check()){
+            if (Input::exists()){
+                if (Token::check()){
                     // Validate input
                     $validate = new Validate();
-                    $validation = $validate->check($_POST, array(
-                        'server_name' => array(
+                    $validation = $validate->check($_POST, [
+                        'server_name' => [
                             'required' => true,
                             'min' => 1,
                             'max' => 20
-                        ),
-                        'server_address' => array(
+                        ],
+                        'server_address' => [
                             'required' => true,
                             'min' => 1,
                             'max' => 64
-                        ),
-                        'server_port' => array(
+                        ],
+                        'server_port' => [
                             'max' => 5
-                        ),
-                        'parent_server' => array(
+                        ],
+                        'parent_server' => [
                             'required' => true
-                        ),
-                        'query_port' => array(
+                        ],
+                        'query_port' => [
                             'max' => 5
-                        )
-                    ));
+                        ]
+                    ]);
 
-                    if($validation->passed()){
+                    if ($validation->passed()){
                         // Handle input
                         try {
                             // BungeeCord selected?
-                            if(isset($_POST['bungee_instance']) && $_POST['bungee_instance'] == 1)
+                            if (isset($_POST['bungee_instance']) && $_POST['bungee_instance'] == 1)
                                 $bungee = 1;
-                            else
-                                $bungee = 0;
+                            else $bungee = 0;
 
                             // Pre 1.7?
-                            if(isset($_POST['pre_17']) && $_POST['pre_17'] == 1)
+                            if (isset($_POST['pre_17']) && $_POST['pre_17'] == 1)
                                 $pre = 1;
-                            else
-                                $pre = 0;
+                            else $pre = 0;
 
                             // Status enabled?
-                            if(isset($_POST['status_query_enabled']) && $_POST['status_query_enabled'] == 1)
+                            if (isset($_POST['status_query_enabled']) && $_POST['status_query_enabled'] == 1)
                                 $status = 1;
-                            else
-                                $status = 0;
+                            else $status = 0;
 
                             // Show IP enabled?
-                            if(isset($_POST['show_ip_enabled']) && $_POST['show_ip_enabled'] == 1)
+                            if (isset($_POST['show_ip_enabled']) && $_POST['show_ip_enabled'] == 1)
                                 $show_ip = 1;
-                            else
-                                $show_ip = 0;
+                            else $show_ip = 0;
 
                             // Player list enabled?
-                            if(isset($_POST['query_enabled']) && $_POST['query_enabled'] == 1)
+                            if (isset($_POST['query_enabled']) && $_POST['query_enabled'] == 1)
                                 $query = 1;
-                            else
-                                $query = 0;
+                            else $query = 0;
 
                             // Parent server
-                            if($_POST['parent_server'] == 'none')
+                            if ($_POST['parent_server'] == 'none')
                                 $parent = 0;
-                            else
-                                $parent = $_POST['parent_server'];
+                            else $parent = $_POST['parent_server'];
 
                             // Validate server port
-                            if(is_numeric(Input::get('server_port')))
+                            if (is_numeric(Input::get('server_port')))
                                 $port = Input::get('server_port');
                             else {
-                                if(!isset($_POST['server_port']) || empty($_POST['server_port']))
+                                if (! isset($_POST['server_port']) || empty($_POST['server_port']))
                                     $port = null;
-                                else
-                                    $port = 25565;
+                                else $port = 25565;
                             }
 
                             // Validate server query port
-                            if(is_numeric(Input::get('query_port')))
+                            if (is_numeric(Input::get('query_port')))
                                 $query_port = Input::get('query_port');
-                            else
-                                $query_port = 25565;
+                            else $query_port = 25565;
 
-                            $queries->update('mc_servers', $server_editing->id, array(
+                            $queries->update('mc_servers', $server_editing->id, [
                                 'ip' => Output::getClean(Input::get('server_address')),
                                 'query_ip' => Output::getClean(Input::get('server_address')),
                                 'name' => Output::getClean(Input::get('server_name')),
@@ -345,81 +351,99 @@ if(isset($_GET['action'])){
                                 'port' => $port,
                                 'query_port' => $query_port,
                                 'show_ip' => $show_ip
-                            ));
+                            ]);
 
                             Session::flash('admin_mc_servers_success', $language->get('admin', 'server_updated'));
                             Redirect::to(URL::build('/panel/minecraft/servers/', 'action=edit&id=' . Output::getClean($server_editing->id)));
-                            die();
 
-                        } catch(Exception $e){
-                            $errors = array($e->getMessage());
+                            die();
+                        } catch (Exception $e){
+                            $errors = [$e->getMessage()];
                         }
                     } else {
                         // Validation failed
-                        $errors = array();
-                        foreach($validation->errors() as $item){
-                            if(strpos($item, 'is required') !== false){
+                        $errors = [];
+
+                        foreach ($validation->errors() as $item){
+                            if (strpos($item, 'is required') !== false){
                                 switch($item){
                                     case (strpos($item, 'server_name') !== false):
                                         $errors[] = $language->get('admin', 'server_name_required');
+
                                         break;
+
                                     case (strpos($item, 'server_address') !== false):
                                         $errors[] = $language->get('admin', 'server_address_required');
+
                                         break;
+
                                     case (strpos($item, 'server_port') !== false):
                                         $errors[] = $language->get('admin', 'server_port_required');
+
                                         break;
+
                                     case (strpos($item, 'parent_server') !== false):
                                         $errors[] = $language->get('admin', 'server_parent_required');
+
                                         break;
                                 }
-                            } else if(strpos($item, 'minimum') !== false){
+                            } else if (strpos($item, 'minimum') !== false){
                                 switch($item){
                                     case (strpos($item, 'server_name') !== false):
                                         $errors[] = $language->get('admin', 'server_name_minimum');
+
                                         break;
+
                                     case (strpos($item, 'server_address') !== false):
                                         $errors[] = $language->get('admin', 'server_address_minimum');
+
                                         break;
+
                                     case (strpos($item, 'server_port') !== false):
                                         $errors[] = $language->get('admin', 'server_port_minimum');
+
                                         break;
                                 }
-                            } else if(strpos($item, 'maximum') !== false){
+                            } else if (strpos($item, 'maximum') !== false){
                                 switch($item){
                                     case (strpos($item, 'server_name') !== false):
                                         $errors[] = $language->get('admin', 'server_name_maximum');
+
                                         break;
+
                                     case (strpos($item, 'server_address') !== false):
                                         $errors[] = $language->get('admin', 'server_address_maximum');
+
                                         break;
+
                                     case (strpos($item, 'server_port') !== false):
                                         $errors[] = $language->get('admin', 'server_port_maximum');
+
                                         break;
+
                                     case (strpos($item, 'query_port') !== false):
                                         $errors[] = $language->get('admin', 'query_port_maximum');
+
                                         break;
                                 }
                             }
                         }
                     }
-
-                } else
-                    // Invalid token
-                    $errors = array($language->get('general', 'invalid_token'));
+                } else // Invalid token
+                    $errors = [$language->get('general', 'invalid_token')];
             }
 
-            $available_parent_servers = $queries->getWhere('mc_servers', array('parent_server', '=', 0));
+            $available_parent_servers = $queries->getWhere('mc_servers', ['parent_server', '=', 0]);
 
             // Display query information alert only if external query is selected
-            $external_query = $queries->getWhere('settings', array('name', '=', 'external_query'));
+            $external_query = $queries->getWhere('settings', ['name', '=', 'external_query']);
             $external_query = $external_query[0]->value;
 
-            if($external_query == 1){
+            if ($external_query == 1){
                 $smarty->assign('SERVER_QUERY_INFORMATION', $language->get('admin', 'server_query_information'));
             }
 
-            $smarty->assign(array(
+            $smarty->assign([
                 'EDITING_SERVER' => $language->get('admin', 'editing_server'),
                 'SERVER_ID' => $server_editing->id,
                 'CANCEL' => $language->get('general', 'cancel'),
@@ -461,165 +485,165 @@ if(isset($_GET['action'])){
                 'SERVER_QUERY_PORT' => $language->get('admin', 'server_query_port'),
                 'SERVER_QUERY_PORT_INFO' => $language->get('admin', 'server_query_port_help'),
                 'SERVER_QUERY_PORT_VALUE' => Output::getClean($server_editing->query_port)
-            ));
+            ]);
 
             $template_file = 'integrations/minecraft/minecraft_servers_edit.tpl';
 
             break;
 
         case 'delete':
-            if(isset($_GET['id'])){
-                $queries->delete('mc_servers', array('id', '=', $_GET['id']));
-                $queries->delete('query_results', array('server_id', '=', $_GET['id']));
+            if (isset($_GET['id'])){
+                $queries->delete('mc_servers', ['id', '=', $_GET['id']]);
+                $queries->delete('query_results', ['server_id', '=', $_GET['id']]);
 
                 Session::flash('admin_mc_servers_success', $language->get('admin', 'server_deleted'));
             }
 
             Redirect::to(URL::build('/panel/minecraft/servers'));
+
             die();
 
             break;
+
         case 'order':
             // Get servers
-            if(isset($_GET['servers'])){
+            if (isset($_GET['servers'])){
                 $servers = json_decode($_GET['servers'])->servers;
 
                 $i = 1;
-                foreach($servers as $item){
-                    $queries->update('mc_servers', $item, array(
+
+                foreach ($servers as $item){
+                    $queries->update('mc_servers', $item, [
                         '`order`' => $i
-                    ));
+                    ]);
                     $i++;
                 }
             }
+
             die('Complete');
+
             break;
 
         default:
             Redirect::to(URL::build('/panel/minecraft/servers'));
+
             die();
 
             break;
     }
-
 } else {
     // Handle input
-    if(Input::exists()){
-        $errors = array();
+    if (Input::exists()){
+        $errors = [];
 
-        if(Token::check()){
-            if(isset($_POST['default_server']) && is_numeric($_POST['default_server']))
+        if (Token::check()){
+            if (isset($_POST['default_server']) && is_numeric($_POST['default_server']))
                 $new_default = $_POST['default_server'];
-            else
-                $new_default = 0;
+            else $new_default = 0;
 
-            if(isset($_POST['external_query']) && $_POST['external_query'] == 1)
+            if (isset($_POST['external_query']) && $_POST['external_query'] == 1)
                 $external = 1;
-            else
-                $external = 0;
+            else $external = 0;
 
-            if(isset($_POST['status_page']) && $_POST['status_page'] == 1)
+            if (isset($_POST['status_page']) && $_POST['status_page'] == 1)
                 $status = 1;
-            else
-                $status = 0;
+            else $status = 0;
 
             // Update database and cache
             try {
                 // Default server
-                if($new_default > 0) {
-                    $current_default = $queries->getWhere('mc_servers', array('is_default', '=', 1));
-                    if(count($current_default) && $current_default[0]->id != $new_default)
-                        $queries->update('mc_servers', $current_default[0]->id, array(
+                if ($new_default > 0) {
+                    $current_default = $queries->getWhere('mc_servers', ['is_default', '=', 1]);
+
+                    if (count($current_default) && $current_default[0]->id != $new_default)
+                        $queries->update('mc_servers', $current_default[0]->id, [
                             'is_default' => 0
-                        ));
+                        ]);
 
-                    if(!count($current_default) || count($current_default) && $current_default[0]->id != $new_default)
-                        $queries->update('mc_servers', $new_default, array(
+                    if (! count($current_default) || count($current_default) && $current_default[0]->id != $new_default)
+                        $queries->update('mc_servers', $new_default, [
                             'is_default' => 1
-                        ));
+                        ]);
                 }
 
                 // External query
-                $external_query_id = $queries->getWhere('settings', array('name', '=', 'external_query'));
+                $external_query_id = $queries->getWhere('settings', ['name', '=', 'external_query']);
                 $external_query_id = $external_query_id[0];
 
-                $queries->update('settings', $external_query_id->id, array(
+                $queries->update('settings', $external_query_id->id, [
                     'value' => $external
-                ));
+                ]);
 
                 $cache->setCache('query_cache');
 
-                $cache->store('query', array(
+                $cache->store('query', [
                     'default' => $new_default,
                     'external' => $external
-                ));
+                ]);
 
                 // Status page
-                $status_page_id = $queries->getWhere('settings', array('name', '=', 'status_page'));
+                $status_page_id = $queries->getWhere('settings', ['name', '=', 'status_page']);
                 $status_page_id = $status_page_id[0]->id;
 
-                $queries->update('settings', $status_page_id, array(
+                $queries->update('settings', $status_page_id, [
                     'value' => $status
-                ));
+                ]);
 
                 $cache->setCache('status_page');
                 $cache->store('enabled', $status);
 
                 // Query interval
-                if(isset($_POST['interval']) && is_numeric($_POST['interval']) && $_POST['interval'] <= 60 && $_POST['interval'] >= 5){
+                if (isset($_POST['interval']) && is_numeric($_POST['interval']) && $_POST['interval'] <= 60 && $_POST['interval'] >= 5){
                     $cache->setCache('server_query_cache');
                     $cache->store('query_interval', $_POST['interval']);
                 }
 
                 $success = $language->get('admin', 'minecraft_settings_updated_successfully');
-
-            } catch(Exception $e){
+            } catch (Exception $e){
                 // Error
                 $errors[] = $e->getMessage();
             }
-
-        } else
-            $errors[] = $language->get('general', 'invalid_token');
+        } else $errors[] = $language->get('general', 'invalid_token');
     }
 
     // List servers
     $servers = $queries->orderAll('mc_servers', '`order`', 'ASC');
     $default = 0;
 
-    if(count($servers)){
-        $template_array = array();
+    if (count($servers)){
+        $template_array = [];
 
-        foreach($servers as $server){
-            if($server->is_default == 1)
+        foreach ($servers as $server){
+            if ($server->is_default == 1)
                 $default = $server->id;
 
-            $template_array[] = array(
+            $template_array[] = [
                 'name' => Output::getClean($server->name),
                 'id' => Output::getClean($server->id),
                 'server_id' => str_replace('{x}', Output::getClean($server->id), $language->get('admin', 'server_id_x')),
                 'edit_link' => URL::build('/panel/minecraft/servers/', 'action=edit&id=' . Output::getClean($server->id)),
                 'delete_link' => URL::build('/panel/minecraft/servers/', 'action=delete&id=' . Output::getClean($server->id)),
                 'is_default' => $server->is_default
-            );
+            ];
         }
 
         $smarty->assign('SERVERS', $template_array);
-
-    } else
-        $smarty->assign('NO_SERVERS', $language->get('admin', 'no_servers_defined'));
+    } else $smarty->assign('NO_SERVERS', $language->get('admin', 'no_servers_defined'));
 
     // Query options
-    $external_query = $queries->getWhere('settings', array('name', '=', 'external_query'));
+    $external_query = $queries->getWhere('settings', ['name', '=', 'external_query']);
     $external_query = $external_query[0]->value;
 
-    $status_page = $queries->getWhere('settings', array('name', '=', 'status_page'));
+    $status_page = $queries->getWhere('settings', ['name', '=', 'status_page']);
     $status_page = $status_page[0]->value;
 
     // Query interval
     $cache->setCache('server_query_cache');
-    if($cache->isCached('query_interval')){
+
+    if ($cache->isCached('query_interval')){
         $query_interval = $cache->retrieve('query_interval');
-        if(is_numeric($query_interval) && $query_interval <= 60 && $query_interval >= 5){
+
+        if (is_numeric($query_interval) && $query_interval <= 60 && $query_interval >= 5){
             // Interval ok
         } else {
             // Default to 10
@@ -634,7 +658,7 @@ if(isset($_GET['action'])){
         $cache->store('query_interval', $query_interval);
     }
 
-    $smarty->assign(array(
+    $smarty->assign([
         'NEW_SERVER' => $language->get('admin', 'add_server'),
         'NEW_SERVER_LINK' => URL::build('/panel/minecraft/servers/', 'action=new'),
         'CONFIRM_DELETE_SERVER' => $language->get('admin', 'confirm_delete_server'),
@@ -656,31 +680,30 @@ if(isset($_GET['action'])){
         'STATUS_PAGE' => $language->get('admin', 'status_page'),
         'STATUS_PAGE_VALUE' => ($status_page == '1'),
         'REORDER_DRAG_URL' => URL::build('/panel/minecraft/servers')
-    ));
+    ]);
 
     $template_file = 'integrations/minecraft/minecraft_servers.tpl';
-
 }
 
 // Load modules + template
-Module::loadPage($user, $pages, $cache, $smarty, array($navigation, $cc_nav, $mod_nav), $widgets);
+Module::loadPage($user, $pages, $cache, $smarty, [$navigation, $cc_nav, $mod_nav], $widgets);
 
-if(Session::exists('admin_mc_servers_success'))
+if (Session::exists('admin_mc_servers_success'))
     $success = Session::flash('admin_mc_servers_success');
 
-if(isset($success))
-    $smarty->assign(array(
+if (isset($success))
+    $smarty->assign([
         'SUCCESS' => $success,
         'SUCCESS_TITLE' => $language->get('general', 'success')
-    ));
+    ]);
 
-if(isset($errors) && count($errors))
-    $smarty->assign(array(
+if (isset($errors) && count($errors))
+    $smarty->assign([
         'ERRORS' => $errors,
         'ERRORS_TITLE' => $language->get('general', 'error')
-    ));
+    ]);
 
-$smarty->assign(array(
+$smarty->assign([
     'PARENT_PAGE' => PARENT_PAGE,
     'DASHBOARD' => $language->get('admin', 'dashboard'),
     'INTEGRATIONS' => $language->get('admin', 'integrations'),
@@ -690,14 +713,14 @@ $smarty->assign(array(
     'TOKEN' => Token::get(),
     'SUBMIT' => $language->get('general', 'submit'),
     'MINECRAFT_SERVERS' => $language->get('admin', 'minecraft_servers')
-));
+]);
 
 $page_load = microtime(true) - $start;
 define('PAGE_LOAD_TIME', str_replace('{x}', round($page_load, 3), $language->get('general', 'page_loaded_in')));
 
 $template->onPageLoad();
 
-require(ROOT_PATH . '/core/templates/panel_navbar.php');
+require (ROOT_PATH . '/core/templates/panel_navbar.php');
 
 // Display template
 $template->displayTemplate($template_file, $smarty);
diff --git a/modules/Core/pages/panel/modules.php b/modules/Core/pages/panel/modules.php
index dbfc70967d53b31b9de780b185234186445e279c..5c8aeb50d1f469839a09ac824b441a1edd1d5b96 100644
--- a/modules/Core/pages/panel/modules.php
+++ b/modules/Core/pages/panel/modules.php
@@ -15,55 +15,58 @@ define('PAGE', 'panel');
 define('PARENT_PAGE', 'modules');
 define('PANEL_PAGE', 'modules');
 $page_title = $language->get('admin', 'modules');
-require_once(ROOT_PATH . '/core/templates/backend_init.php');
+
+require_once (ROOT_PATH . '/core/templates/backend_init.php');
 
 // Load modules + template
-Module::loadPage($user, $pages, $cache, $smarty, array($navigation, $cc_nav, $mod_nav), $widgets);
+Module::loadPage($user, $pages, $cache, $smarty, [$navigation, $cc_nav, $mod_nav], $widgets);
 
-if(!isset($_GET['action'])){
+if (! isset($_GET['action'])){
     // Get all modules
-    $modules = $queries->getWhere('modules', array('id', '<>', 0));
+    $modules = $queries->getWhere('modules', ['id', '<>', 0]);
     $enabled_modules = Module::getModules();
 
-    $template_array = array();
+    $template_array = [];
 
-    foreach($modules as $item){
+    foreach ($modules as $item){
         $exists = false;
-        foreach($enabled_modules as $enabled_item){
-            if($enabled_item->getName() == $item->name){
+
+        foreach ($enabled_modules as $enabled_item){
+            if ($enabled_item->getName() == $item->name){
                 $exists = true;
                 $module = $enabled_item;
+
                 break;
             }
         }
 
-        if(!$exists){
-            if(!file_exists(ROOT_PATH . '/modules/' . $item->name . '/init.php'))
+        if (! $exists){
+            if (! file_exists(ROOT_PATH . '/modules/' . $item->name . '/init.php'))
                 continue;
 
-            require_once(ROOT_PATH . '/modules/' . $item->name . '/init.php');
+            require_once (ROOT_PATH . '/modules/' . $item->name . '/init.php');
         }
 
-        $template_array[] = array(
+        $template_array[] = [
             'name' => Output::getClean($module->getName()),
             'version' => Output::getClean($module->getVersion()),
             'nameless_version' => Output::getClean($module->getNamelessVersion()),
             'author' => Output::getPurified($module->getAuthor()),
             'author_x' => str_replace('{x}', Output::getPurified($module->getAuthor()), $language->get('admin', 'author_x')),
-            'version_mismatch' => (($module->getNamelessVersion() != NAMELESS_VERSION) ? str_replace(array('{x}', '{y}'), array(Output::getClean($module->getNamelessVersion()), NAMELESS_VERSION), $language->get('admin', 'module_outdated')) : false),
+            'version_mismatch' => (($module->getNamelessVersion() != NAMELESS_VERSION) ? str_replace(['{x}', '{y}'], [Output::getClean($module->getNamelessVersion()), NAMELESS_VERSION], $language->get('admin', 'module_outdated')) : false),
             'disable_link' => (($module->getName() != 'Core' && $item->enabled) ? URL::build('/panel/core/modules/', 'action=disable&m=' . Output::getClean($item->id)) : null),
-            'enable_link' => (($module->getName() != 'Core' && !$item->enabled) ? URL::build('/panel/core/modules/', 'action=enable&m=' . Output::getClean($item->id)) : null),
+            'enable_link' => (($module->getName() != 'Core' && ! $item->enabled) ? URL::build('/panel/core/modules/', 'action=enable&m=' . Output::getClean($item->id)) : null),
             'enabled' => $item->enabled
-        );
+        ];
     }
 
     // Get templates from Nameless website
     $cache->setCache('all_templates');
-    if($cache->isCached('all_modules')){
-        $all_modules = $cache->retrieve('all_modules');
 
+    if ($cache->isCached('all_modules')){
+        $all_modules = $cache->retrieve('all_modules');
     } else {
-        $all_modules = array();
+        $all_modules = [];
 
         $ch = curl_init();
         curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
@@ -72,21 +75,20 @@ if(!isset($_GET['action'])){
 
         $all_modules_query = curl_exec($ch);
 
-        if(curl_error($ch)){
+        if (curl_error($ch)){
             $all_modules_error = curl_error($ch);
         }
 
         curl_close($ch);
 
-        if(isset($all_modules_error)){
+        if (isset($all_modules_error)){
             $smarty->assign('WEBSITE_MODULES_ERROR', $all_modules_error);
-
         } else {
             $all_modules_query = json_decode($all_modules_query);
             $timeago = new Timeago(TIMEZONE);
 
-            foreach($all_modules_query as $item){
-                $all_modules[] = array(
+            foreach ($all_modules_query as $item){
+                $all_modules[] = [
                     'name' => Output::getClean($item->name),
                     'description' => Output::getPurified($item->description),
                     'description_short' => Util::truncate(Output::getPurified($item->description)),
@@ -105,22 +107,21 @@ if(!isset($_GET['action'])){
                     'rating_full' => str_replace('{x}', Output::getClean($item->rating * 2) . '/100', $language->get('admin', 'rating_x')),
                     'downloads_full' => str_replace('{x}', Output::getClean($item->downloads), $language->get('admin', 'downloads_x')),
                     'views_full' => str_replace('{x}', Output::getClean($item->views), $language->get('admin', 'views_x'))
-                );
+                ];
             }
 
             $cache->store('all_modules', $all_modules, 3600);
         }
-
     }
 
-    if(count($all_modules)){
-        if(count($all_modules) > 3){
+    if (count($all_modules)){
+        if (count($all_modules) > 3){
             $rand_keys = array_rand($all_modules, 3);
-            $all_modules = array($all_modules[$rand_keys[0]], $all_modules[$rand_keys[1]], $all_modules[$rand_keys[2]]);
+            $all_modules = [$all_modules[$rand_keys[0]], $all_modules[$rand_keys[1]], $all_modules[$rand_keys[2]]];
         }
     }
 
-    $smarty->assign(array(
+    $smarty->assign([
         'INSTALL_MODULE' => $language->get('admin', 'install'),
         'INSTALL_MODULE_LINK' => URL::build('/panel/core/modules/', 'action=install'),
         'AUTHOR' => $language->get('admin', 'author'),
@@ -137,44 +138,46 @@ if(!isset($_GET['action'])){
         'STATS' => $language->get('admin', 'stats'),
         'ACTIONS' => $language->get('general', 'actions'),
         'WARNING' => $language->get('general', 'warning')
-    ));
-
+    ]);
 } else {
-    if($_GET['action'] == 'enable'){
+    if ($_GET['action'] == 'enable'){
         // Enable a module
-        if(!isset($_GET['m']) || !is_numeric($_GET['m']) || $_GET['m'] == 1) die('Invalid module!');
+        if (! isset($_GET['m']) || ! is_numeric($_GET['m']) || $_GET['m'] == 1) die('Invalid module!');
 
         // Get module name
-        $name = $queries->getWhere('modules', array('id', '=', $_GET['m']));
-        if(!count($name)){
+        $name = $queries->getWhere('modules', ['id', '=', $_GET['m']]);
+
+        if (! count($name)){
             Redirect::to(URL::build('/panel/modules'));
+
             die();
         }
 
         $name = Output::getClean($name[0]->name);
 
         // Ensure module is valid
-        if(!file_exists(ROOT_PATH . '/modules/' . $name . '/init.php')){
+        if (! file_exists(ROOT_PATH . '/modules/' . $name . '/init.php')){
             Redirect::to(URL::build('/panel/modules'));
+
             die();
         }
 
         $module = null;
 
-        require_once(ROOT_PATH . '/modules/' . $name . '/init.php');
+        require_once (ROOT_PATH . '/modules/' . $name . '/init.php');
 
-        if($module instanceof Module){
+        if ($module instanceof Module){
             // Cache
             $cache->setCache('modulescache');
-            $modules = array();
+            $modules = [];
 
             $order = Module::determineModuleOrder();
 
             foreach ($order['modules'] as $key => $item) {
-                $modules[] = array(
+                $modules[] = [
                     'name' => $item,
                     'priority' => $key
-                );
+                ];
             }
 
             // Store
@@ -183,39 +186,41 @@ if(!isset($_GET['action'])){
             // OK to enable
             $module->onEnable();
 
-            if (!in_array($module->getName(), $order['failed'])) {
-                $queries->update('modules', $_GET['m'], array(
+            if (! in_array($module->getName(), $order['failed'])) {
+                $queries->update('modules', $_GET['m'], [
                     'enabled' => 1
-                ));
+                ]);
                 Session::flash('admin_modules', $language->get('admin', 'module_enabled'));
             } else {
-                $enabled_modules = array();
+                $enabled_modules = [];
 
                 foreach ($modules as $item) {
                     $enabled_modules[] = $item['name'];
                 }
+
                 foreach ($module->getLoadAfter() as $item) {
-                    if (!in_array($item, $enabled_modules)) {
+                    if (! in_array($item, $enabled_modules)) {
                         Session::flash('admin_modules_error', str_replace('{x}', Output::getClean($item), $language->get('admin', 'unable_to_enable_module_dependencies')));
                         Redirect::to(URL::build('/panel/core/modules'));
+
                         die();
                     }
                 }
                 Session::flash('admin_modules_error', $language->get('admin', 'unable_to_enable_module'));
             }
-
-        } else
-            Session::flash('admin_modules_error', $language->get('admin', 'unable_to_enable_module'));
+        } else Session::flash('admin_modules_error', $language->get('admin', 'unable_to_enable_module'));
 
         Redirect::to(URL::build('/panel/core/modules'));
+
         die();
+    }
 
-    } else if($_GET['action'] == 'disable'){
+    if ($_GET['action'] == 'disable'){
         // Disable a module
-        if(!isset($_GET['m']) || !is_numeric($_GET['m']) || $_GET['m'] == 1) die('Invalid module!');
+        if (! isset($_GET['m']) || ! is_numeric($_GET['m']) || $_GET['m'] == 1) die('Invalid module!');
 
         // Get module name
-        $name = $queries->getWhere('modules', array('id', '=', $_GET['m']));
+        $name = $queries->getWhere('modules', ['id', '=', $_GET['m']]);
         $name = Output::getClean($name[0]->name);
 
         foreach (Module::getModules() as $item) {
@@ -223,64 +228,67 @@ if(!isset($_GET['action'])){
                 // Unable to disable module
                 Session::flash('admin_modules_error', str_replace('{x}', Output::getClean($item->getName()), $language->get('admin', 'unable_to_disable_module')));
                 Redirect::to(URL::build('/panel/core/modules'));
+
                 die();
             }
         }
 
-        $queries->update('modules', $_GET['m'], array(
+        $queries->update('modules', $_GET['m'], [
             'enabled' => 0
-        ));
+        ]);
 
         // Cache
         $cache->setCache('modulescache');
-        $modules = array();
+        $modules = [];
 
         $order = Module::determineModuleOrder();
 
         foreach ($order['modules'] as $key => $item) {
             if ($item != $name) {
-                $modules[] = array(
+                $modules[] = [
                     'name' => $item,
                     'priority' => $key
-                );
+                ];
             }
         }
 
         // Store
         $cache->store('enabled_modules', $modules);
 
-        if(file_exists(ROOT_PATH . '/modules/' . $name . '/init.php')){
-            require_once(ROOT_PATH . '/modules/' . $name . '/init.php');
+        if (file_exists(ROOT_PATH . '/modules/' . $name . '/init.php')){
+            require_once (ROOT_PATH . '/modules/' . $name . '/init.php');
             $module->onDisable();
         }
 
         Session::flash('admin_modules', $language->get('admin', 'module_disabled'));
         Redirect::to(URL::build('/panel/core/modules'));
+
         die();
+    }
 
-    } else if($_GET['action'] == 'install'){
+    if ($_GET['action'] == 'install'){
         // Install any new modules
-        $directories = glob(ROOT_PATH . '/modules/*' , GLOB_ONLYDIR);
+        $directories = glob(ROOT_PATH . '/modules/*', GLOB_ONLYDIR);
 
         define('MODULE_INSTALL', true);
 
-        foreach($directories as $directory){
+        foreach ($directories as $directory){
             $folders = explode('/', $directory);
 
-            if(file_exists(ROOT_PATH . '/modules/' . $folders[count($folders) - 1] . '/init.php')){
+            if (file_exists(ROOT_PATH . '/modules/' . $folders[count($folders) - 1] . '/init.php')){
                 // Is it already in the database?
-                $exists = $queries->getWhere('modules', array('name', '=', Output::getClean($folders[count($folders) - 1])));
+                $exists = $queries->getWhere('modules', ['name', '=', Output::getClean($folders[count($folders) - 1])]);
 
-                if(!count($exists)){
+                if (! count($exists)){
                     $module = null;
 
                     // No, add it now
-                    require_once(ROOT_PATH . '/modules/' . $folders[count($folders) - 1] . '/init.php');
+                    require_once (ROOT_PATH . '/modules/' . $folders[count($folders) - 1] . '/init.php');
 
-                    if($module instanceof Module){
-                        $queries->create('modules', array(
+                    if ($module instanceof Module){
+                        $queries->create('modules', [
                             'name' => Output::getClean($folders[count($folders) - 1])
-                        ));
+                        ]);
                         $module->onInstall();
                     }
                 }
@@ -289,43 +297,44 @@ if(!isset($_GET['action'])){
 
         Session::flash('admin_modules', $language->get('admin', 'modules_installed_successfully'));
         Redirect::to(URL::build('/panel/core/modules'));
+
         die();
     }
 }
 
-if(Session::exists('admin_modules'))
+if (Session::exists('admin_modules'))
     $success = Session::flash('admin_modules');
 
-if(Session::exists('admin_modules_error'))
-    $errors = array(Session::flash('admin_modules_error'));
+if (Session::exists('admin_modules_error'))
+    $errors = [Session::flash('admin_modules_error')];
 
-if(isset($success))
-    $smarty->assign(array(
+if (isset($success))
+    $smarty->assign([
         'SUCCESS' => $success,
         'SUCCESS_TITLE' => $language->get('general', 'success')
-    ));
+    ]);
 
-if(isset($errors) && count($errors))
-    $smarty->assign(array(
+if (isset($errors) && count($errors))
+    $smarty->assign([
         'ERRORS' => $errors,
         'ERRORS_TITLE' => $language->get('general', 'error')
-    ));
+    ]);
 
-$smarty->assign(array(
+$smarty->assign([
     'PARENT_PAGE' => PARENT_PAGE,
     'DASHBOARD' => $language->get('admin', 'dashboard'),
     'MODULES' => $language->get('admin', 'modules'),
     'PAGE' => PANEL_PAGE,
     'TOKEN' => Token::get(),
     'SUBMIT' => $language->get('general', 'submit')
-));
+]);
 
 $page_load = microtime(true) - $start;
 define('PAGE_LOAD_TIME', str_replace('{x}', round($page_load, 3), $language->get('general', 'page_loaded_in')));
 
 $template->onPageLoad();
 
-require(ROOT_PATH . '/core/templates/panel_navbar.php');
+require (ROOT_PATH . '/core/templates/panel_navbar.php');
 
 // Display template
 $template->displayTemplate('core/modules.tpl', $smarty);
diff --git a/modules/Core/pages/panel/navigation.php b/modules/Core/pages/panel/navigation.php
index f79edf8bad2f0f962815df70874345c90c235c49..6dbbc38e908707fd91eabde08fab22e794e7bbdf 100644
--- a/modules/Core/pages/panel/navigation.php
+++ b/modules/Core/pages/panel/navigation.php
@@ -15,19 +15,21 @@ define('PAGE', 'panel');
 define('PARENT_PAGE', 'core_configuration');
 define('PANEL_PAGE', 'navigation');
 $page_title = $language->get('admin', 'navigation');
-require_once(ROOT_PATH . '/core/templates/backend_init.php');
+
+require_once (ROOT_PATH . '/core/templates/backend_init.php');
 
 // Deal with input
-if(Input::exists()){
-    $errors = array();
+if (Input::exists()){
+    $errors = [];
 
-    if(Token::check()){
+    if (Token::check()){
         // Valid token
         // Update cache
         $cache->setCache('navbar_order');
-        if(isset($_POST['inputOrder']) && count($_POST['inputOrder'])){
-            foreach($_POST['inputOrder'] as $key => $item){
-                if(is_numeric($item) && $item > 0){
+
+        if (isset($_POST['inputOrder']) && count($_POST['inputOrder'])){
+            foreach ($_POST['inputOrder'] as $key => $item){
+                if (is_numeric($item) && $item > 0){
                     $cache->store($key . '_order', $item);
                 }
             }
@@ -35,15 +37,17 @@ if(Input::exists()){
 
         // Icons
         $cache->setCache('navbar_icons');
-        if(isset($_POST['inputIcon']) && count($_POST['inputIcon'])){
-            foreach($_POST['inputIcon'] as $key => $item){
-                if(is_numeric($key)){
+
+        if (isset($_POST['inputIcon']) && count($_POST['inputIcon'])){
+            foreach ($_POST['inputIcon'] as $key => $item){
+                if (is_numeric($key)){
                     // Custom page?
-                    $custom_page = $queries->getWhere('custom_pages', array('id', '=', $key));
-                    if(count($custom_page)){
-                        $queries->update('custom_pages', $key, array(
+                    $custom_page = $queries->getWhere('custom_pages', ['id', '=', $key]);
+
+                    if (count($custom_page)){
+                        $queries->update('custom_pages', $key, [
                             'icon' => $item
-                        ));
+                        ]);
                     }
                 }
                 $cache->store($key . '_icon', $item);
@@ -55,29 +59,29 @@ if(Input::exists()){
         // Reload to update info
         Session::flash('navigation_success', $language->get('admin', 'navigation_settings_updated_successfully'));
         Redirect::to(URL::build('/panel/core/navigation'));
+
         die();
-    } else {
+    }
         // Invalid token
         $errors[] = $language->get('general', 'invalid_token');
-    }
 }
 
 // Load modules + template
-Module::loadPage($user, $pages, $cache, $smarty, array($navigation, $cc_nav, $mod_nav), $widgets);
+Module::loadPage($user, $pages, $cache, $smarty, [$navigation, $cc_nav, $mod_nav], $widgets);
 
-if(Session::exists('navigation_success'))
-    $smarty->assign(array(
+if (Session::exists('navigation_success'))
+    $smarty->assign([
         'SUCCESS' => Session::flash('navigation_success'),
         'SUCCESS_TITLE' => $language->get('general', 'success')
-    ));
+    ]);
 
-if(isset($errors) && count($errors))
-    $smarty->assign(array(
+if (isset($errors) && count($errors))
+    $smarty->assign([
         'ERRORS' => $errors,
         'ERRORS_TITLE' => $language->get('general', 'error')
-    ));
+    ]);
 
-$smarty->assign(array(
+$smarty->assign([
     'PARENT_PAGE' => PARENT_PAGE,
     'DASHBOARD' => $language->get('admin', 'dashboard'),
     'CONFIGURATION' => $language->get('admin', 'configuration'),
@@ -94,14 +98,14 @@ $smarty->assign(array(
     'DROPDOWN_ITEMS' => $language->get('admin', 'dropdown_items'),
     'DROPDOWN_NAME' => $language->get('admin', 'dropdown_name'),
     'DROPDOWN_NAME_VALUE' => $language->get('general', 'more')
-));
+]);
 
 $page_load = microtime(true) - $start;
 define('PAGE_LOAD_TIME', str_replace('{x}', round($page_load, 3), $language->get('general', 'page_loaded_in')));
 
 $template->onPageLoad();
 
-require(ROOT_PATH . '/core/templates/panel_navbar.php');
+require (ROOT_PATH . '/core/templates/panel_navbar.php');
 
 // Display template
 $template->displayTemplate('core/navigation.tpl', $smarty);
diff --git a/modules/Core/pages/panel/pages.php b/modules/Core/pages/panel/pages.php
index 90d547c4114fdcac4524704478e2ecba1455420e..0253cbd736fb7a8fe3da93471f14b5b4ce7e030e 100644
--- a/modules/Core/pages/panel/pages.php
+++ b/modules/Core/pages/panel/pages.php
@@ -15,26 +15,27 @@ define('PAGE', 'panel');
 define('PARENT_PAGE', 'pages');
 define('PANEL_PAGE', 'custom_pages');
 $page_title = $language->get('admin', 'custom_pages');
-require_once(ROOT_PATH . '/core/templates/backend_init.php');
+
+require_once (ROOT_PATH . '/core/templates/backend_init.php');
 
 // Load modules + template
-Module::loadPage($user, $pages, $cache, $smarty, array($navigation, $cc_nav, $mod_nav), $widgets);
+Module::loadPage($user, $pages, $cache, $smarty, [$navigation, $cc_nav, $mod_nav], $widgets);
 
-if(!isset($_GET['action'])){
-    $custom_pages = $queries->getWhere('custom_pages', array('id', '<>', 0));
-    $template_array = array();
+if (! isset($_GET['action'])){
+    $custom_pages = $queries->getWhere('custom_pages', ['id', '<>', 0]);
+    $template_array = [];
 
-    if(count($custom_pages)){
-        foreach($custom_pages as $custom_page){
-            $template_array[] = array(
+    if (count($custom_pages)){
+        foreach ($custom_pages as $custom_page){
+            $template_array[] = [
                 'edit_link' => URL::build('/panel/core/pages/', 'action=edit&id=' . Output::getClean($custom_page->id)),
                 'title' => Output::getClean($custom_page->title),
                 'delete_link' => URL::build('/panel/core/pages/', 'action=delete&id=' . Output::getClean($custom_page->id))
-            );
+            ];
         }
     }
 
-    $smarty->assign(array(
+    $smarty->assign([
         'NEW_PAGE' => $language->get('admin', 'new_page'),
         'NEW_PAGE_LINK' => URL::build('/panel/core/pages/', 'action=new'),
         'EDIT' => $language->get('general', 'edit'),
@@ -45,78 +46,78 @@ if(!isset($_GET['action'])){
         'CONFIRM_DELETE_PAGE' => $language->get('admin', 'confirm_delete_page'),
         'YES' => $language->get('general', 'yes'),
         'NO' => $language->get('general', 'no')
-    ));
+    ]);
 
     $template_file = 'core/pages.tpl';
-
 } else {
     switch($_GET['action']){
         case 'new':
-            if(Input::exists()){
-                $errors = array();
+            if (Input::exists()){
+                $errors = [];
 
-                if(Token::check()){
+                if (Token::check()){
                     $validate = new Validate();
-                    $validation = $validate->check($_POST, array(
-                        'page_title' => array(
+                    $validation = $validate->check($_POST, [
+                        'page_title' => [
                             'required' => true,
                             'min' => 2,
                             'max' => 30
-                        ),
-                        'page_url' => array(
+                        ],
+                        'page_url' => [
                             'required' => true,
                             'min' => 2,
                             'max' => 20
-                        ),
-                        'content' => array(
+                        ],
+                        'content' => [
                             'max' => 100000
-                        ),
-                        'link_location' => array(
+                        ],
+                        'link_location' => [
                             'required' => true
-                        ),
-                        'redirect_link' => array(
+                        ],
+                        'redirect_link' => [
                             'max' => 512
-                        )
-                    ));
+                        ]
+                    ]);
 
-                    if($validation->passed()){
+                    if ($validation->passed()){
                         try {
                             // Get link location
-                            if(isset($_POST['link_location'])){
+                            if (isset($_POST['link_location'])){
                                 switch($_POST['link_location']){
                                     case 1:
                                     case 2:
                                     case 3:
                                     case 4:
                                         $location = $_POST['link_location'];
+
                                         break;
+
                                     default:
                                         $location = 1;
                                 }
-                            } else
-                                $location = 1;
+                            } else $location = 1;
 
-                            if(isset($_POST['redirect_page']) && $_POST['redirect_page'] == 'on') $redirect = 1;
+                            if (isset($_POST['redirect_page']) && $_POST['redirect_page'] == 'on') $redirect = 1;
                             else $redirect = 0;
 
-                            if(isset($_POST['target']) && $_POST['target'] == 'on') $target = 1;
+                            if (isset($_POST['target']) && $_POST['target'] == 'on') $target = 1;
                             else $target = 0;
 
-                            if(isset($_POST['redirect_link'])) $link = $_POST['redirect_link'];
+                            if (isset($_POST['redirect_link'])) $link = $_POST['redirect_link'];
                             else $link = '';
 
-                            if(isset($_POST['unsafe_html']) && $_POST['unsafe_html'] == 'on') $unsafe = 1;
+                            if (isset($_POST['unsafe_html']) && $_POST['unsafe_html'] == 'on') $unsafe = 1;
                             else $unsafe = 0;
 
-                            if(isset($_POST['sitemap']) && $_POST['sitemap'] == 'on') $sitemap = 1;
+                            if (isset($_POST['sitemap']) && $_POST['sitemap'] == 'on') $sitemap = 1;
                             else $sitemap = 0;
 
-                            if(isset($_POST['basic']) && $_POST['basic'] == 'on') $basic = 1;
+                            if (isset($_POST['basic']) && $_POST['basic'] == 'on') $basic = 1;
                             else $basic = 0;
 
                             $page_url = Output::getClean(rtrim(Input::get('page_url'), '/'));
 
-                            $queries->create('custom_pages', array(
+                            $queries->create('custom_pages', [
                                 'url' => $page_url,
                                 'title' => Output::getClean(Input::get('page_title')),
                                 'content' => Output::getClean(Input::get('content')),
@@ -127,91 +128,87 @@ if(!isset($_GET['action'])){
                                 'all_html' => ($unsafe == 1) ? 1 : 0,
                                 'sitemap' => ($sitemap == 1) ? 1 : 0,
                                 'basic' => ($basic == 1) ? 1 : 0,
-                            ));
+                            ]);
 
                             $last_id = $queries->getLastId();
 
                             // Permissions
-                            $perms = array();
-                            if(isset($_POST['perm-view-0']) && $_POST['perm-view-0'] == 1)
+                            $perms = [];
+
+                            if (isset($_POST['perm-view-0']) && $_POST['perm-view-0'] == 1)
                                 $perms[0] = 1;
-                            else
-                                $perms[0] = 0;
+                            else $perms[0] = 0;
 
-                            $groups = $queries->getWhere('groups', array('id', '<>', 0));
-                            foreach($groups as $group){
-                                if(isset($_POST['perm-view-' . $group->id]) && $_POST['perm-view-' . $group->id] == 1)
+                            $groups = $queries->getWhere('groups', ['id', '<>', 0]);
+
+                            foreach ($groups as $group){
+                                if (isset($_POST['perm-view-' . $group->id]) && $_POST['perm-view-' . $group->id] == 1)
                                     $perms[$group->id] = 1;
-                                else
-                                    $perms[$group->id] = 0;
+                                else $perms[$group->id] = 0;
                             }
 
-                            foreach($perms as $key => $perm){
-                                $queries->create('custom_pages_permissions', array(
+                            foreach ($perms as $key => $perm){
+                                $queries->create('custom_pages_permissions', [
                                     'page_id' => $last_id,
                                     'group_id' => $key,
                                     'view' => $perm
-                                ));
+                                ]);
                             }
 
                             Session::flash('admin_pages', $language->get('admin', 'page_created_successfully'));
                             Redirect::to(URL::build('/panel/core/pages'));
-                            die();
 
-                        } catch(Exception $e){
+                            die();
+                        } catch (Exception $e){
                             $errors[] = $e->getMessage();
                         }
-
                     } else {
-                        foreach($validation->errors() as $item){
-                            if(strpos($item, 'is required') !== false){
-                                if(strpos($item, 'page_title') !== false)
+                        foreach ($validation->errors() as $item){
+                            if (strpos($item, 'is required') !== false){
+                                if (strpos($item, 'page_title') !== false)
                                     $errors[] = $language->get('admin', 'page_title_required');
 
-                                else if(strpos($item, 'page_url') !== false)
+                                else if (strpos($item, 'page_url') !== false)
                                     $errors[] = $language->get('admin', 'page_url_required');
 
-                                else if(strpos($item, 'link_location') !== false)
+                                else if (strpos($item, 'link_location') !== false)
                                     $errors[] = $language->get('admin', 'link_location_required');
-
-                            } else if(strpos($item, 'minimum') !== false){
-                                if(strpos($item, 'page_title') !== false)
+                            } else if (strpos($item, 'minimum') !== false){
+                                if (strpos($item, 'page_title') !== false)
                                     $errors[] = $language->get('admin', 'page_title_minimum_2');
 
-                                else if(strpos($item, 'page_url') !== false)
+                                else if (strpos($item, 'page_url') !== false)
                                     $errors[] = $language->get('admin', 'page_url_minimum_2');
-
-                            } else if(strpos($item, 'maximum') !== false){
-                                if(strpos($item, 'page_title') !== false)
+                            } else if (strpos($item, 'maximum') !== false){
+                                if (strpos($item, 'page_title') !== false)
                                     $errors[] = $language->get('admin', 'page_title_maximum_30');
 
-                                else if(strpos($item, 'page_url') !== false)
+                                else if (strpos($item, 'page_url') !== false)
                                     $errors[] = $language->get('admin', 'page_url_maximum_20');
 
-                                else if(strpos($item, 'content') !== false)
+                                else if (strpos($item, 'content') !== false)
                                     $errors[] = $language->get('admin', 'page_content_maximum_100000');
 
-                                else if(strpos($item, 'redirect_link') !== false)
+                                else if (strpos($item, 'redirect_link') !== false)
                                     $errors[] = $language->get('admin', 'page_redirect_link_maximum_512');
-
                             }
                         }
                     }
-                } else
-                    $errors[] = $language->get('general', 'invalid_token');
+                } else $errors[] = $language->get('general', 'invalid_token');
             }
 
             $groups = DB::getInstance()->query('SELECT * FROM nl2_groups ORDER BY `order`')->results();
-            $template_array = array();
-            foreach($groups as $group){
-                $template_array[Output::getClean($group->id)] = array(
+            $template_array = [];
+
+            foreach ($groups as $group){
+                $template_array[Output::getClean($group->id)] = [
                     'id' => Output::getClean($group->id),
                     'name' => Output::getClean($group->name),
                     'html' => $group->group_html
-                );
+                ];
             }
 
-            $smarty->assign(array(
+            $smarty->assign([
                 'CANCEL' => $language->get('general', 'cancel'),
                 'CANCEL_LINK' => URL::build('/panel/core/pages'),
                 'ARE_YOU_SURE' => $language->get('general', 'are_you_sure'),
@@ -243,7 +240,7 @@ if(!isset($_GET['action'])){
                 'VIEW_PAGE' => $language->get('admin', 'view_page'),
                 'GUESTS' => $language->get('user', 'guests'),
                 'GROUPS' => $template_array
-            ));
+            ]);
 
             $template_file = 'core/pages_new.tpl';
 
@@ -251,83 +248,87 @@ if(!isset($_GET['action'])){
 
         case 'edit':
             // Get page
-            if(!isset($_GET['id']) || !is_numeric($_GET['id'])){
+            if (! isset($_GET['id']) || ! is_numeric($_GET['id'])){
                 Redirect::to(URL::build('/panel/core/pages'));
+
                 die();
             }
-            $page = $queries->getWhere('custom_pages', array('id', '=', $_GET['id']));
-            if(!count($page)){
+            $page = $queries->getWhere('custom_pages', ['id', '=', $_GET['id']]);
+
+            if (! count($page)){
                 Redirect::to(URL::build('/panel/core/pages'));
+
                 die();
             }
             $page = $page[0];
 
             // Handle input
-            if(Input::exists()){
-                $errors = array();
+            if (Input::exists()){
+                $errors = [];
 
-                if(Token::check()){
+                if (Token::check()){
                     $validate = new Validate();
-                    $validation = $validate->check($_POST, array(
-                        'page_title' => array(
+                    $validation = $validate->check($_POST, [
+                        'page_title' => [
                             'required' => true,
                             'min' => 2,
                             'max' => 30
-                        ),
-                        'page_url' => array(
+                        ],
+                        'page_url' => [
                             'required' => true,
                             'min' => 2,
                             'max' => 20
-                        ),
-                        'content' => array(
+                        ],
+                        'content' => [
                             'max' => 100000
-                        ),
-                        'link_location' => array(
+                        ],
+                        'link_location' => [
                             'required' => true
-                        ),
-                        'redirect_link' => array(
+                        ],
+                        'redirect_link' => [
                             'max' => 512
-                        )
-                    ));
+                        ]
+                    ]);
 
-                    if($validation->passed()){
+                    if ($validation->passed()){
                         try {
                             // Get link location
-                            if(isset($_POST['link_location'])){
+                            if (isset($_POST['link_location'])){
                                 switch($_POST['link_location']){
                                     case 1:
                                     case 2:
                                     case 3:
                                     case 4:
                                         $location = $_POST['link_location'];
+
                                         break;
+
                                     default:
                                         $location = 1;
                                 }
-                            } else
-                                $location = 1;
+                            } else $location = 1;
 
-                            if(isset($_POST['redirect_page']) && $_POST['redirect_page'] == 'on') $redirect = 1;
+                            if (isset($_POST['redirect_page']) && $_POST['redirect_page'] == 'on') $redirect = 1;
                             else $redirect = 0;
 
-                            if(isset($_POST['target']) && $_POST['target'] == 'on') $target = 1;
+                            if (isset($_POST['target']) && $_POST['target'] == 'on') $target = 1;
                             else $target = 0;
 
-                            if(isset($_POST['redirect_link'])) $link = $_POST['redirect_link'];
+                            if (isset($_POST['redirect_link'])) $link = $_POST['redirect_link'];
                             else $link = '';
 
-                            if(isset($_POST['unsafe_html']) && $_POST['unsafe_html'] == 'on') $unsafe = 1;
+                            if (isset($_POST['unsafe_html']) && $_POST['unsafe_html'] == 'on') $unsafe = 1;
                             else $unsafe = 0;
 
-                            if(isset($_POST['sitemap']) && $_POST['sitemap'] == 'on') $sitemap = 1;
+                            if (isset($_POST['sitemap']) && $_POST['sitemap'] == 'on') $sitemap = 1;
                             else $sitemap = 0;
 
-                            if(isset($_POST['basic']) && $_POST['basic'] == 'on') $basic = 1;
+                            if (isset($_POST['basic']) && $_POST['basic'] == 'on') $basic = 1;
                             else $basic = 0;
 
                             $page_url = Output::getClean(rtrim(Input::get('page_url'), '/'));
                             
-                            $queries->update('custom_pages', $page->id, array(
+                            $queries->update('custom_pages', $page->id, [
                                 'url' => $page_url,
                                 'title' => Output::getClean(Input::get('page_title')),
                                 'content' => Output::getClean(Input::get('content')),
@@ -338,33 +339,37 @@ if(!isset($_GET['action'])){
                                 'all_html' => ($unsafe == 1) ? 1 : 0,
                                 'sitemap' => ($sitemap == 1) ? 1 : 0,
                                 'basic' => ($basic == 1) ? 1 : 0
-                            ));
+                            ]);
 
                             // Update all widget and announcement page arrays with the custom pages' new name
-                            $widget_query = $queries->getWhere('widgets', array('id', '<>', 0));
+                            $widget_query = $queries->getWhere('widgets', ['id', '<>', 0]);
+
                             if (count($widget_query)) {
                                 foreach ($widget_query as $widget_row) {
                                     $pages = json_decode($widget_row->pages, true);
-                                    $new_pages = array();
+                                    $new_pages = [];
+
                                     if (is_array($pages) && count($pages)) {
-                                        foreach($pages as $widget_page) {
+                                        foreach ($pages as $widget_page) {
                                             if ($page->title == $widget_page) {
                                                 $new_pages[] = Output::getClean(Input::get('page_title'));
                                             } else {
                                                 $new_pages[] = $widget_page;
                                             }
                                         }
-                                        $queries->update('widgets', $widget_row->id, array(
+                                        $queries->update('widgets', $widget_row->id, [
                                             'pages' => json_encode($new_pages)
-                                        ));
+                                        ]);
                                     }
                                 }
                             }
-                            $announcement_query = $queries->getWhere('custom_announcements', array('id', '<>', 0));
+                            $announcement_query = $queries->getWhere('custom_announcements', ['id', '<>', 0]);
+
                             if (count($announcement_query)) {
                                 foreach ($announcement_query as $announcement_row) {
                                     $pages = json_decode($announcement_row->pages, true);
-                                    $new_pages = array();
+                                    $new_pages = [];
+
                                     if (count($pages)) {
                                         foreach ($pages as $announcement_page) {
                                             if ($page->title == $announcement_page) {
@@ -373,9 +378,9 @@ if(!isset($_GET['action'])){
                                                 $new_pages[] = $announcement_page;
                                             }
                                         }
-                                        $queries->update('custom_announcements', $announcement_row->id, array(
+                                        $queries->update('custom_announcements', $announcement_row->id, [
                                             'pages' => json_encode($new_pages)
-                                        ));
+                                        ]);
                                     }
                                 }
                             }
@@ -384,144 +389,143 @@ if(!isset($_GET['action'])){
                             // Guest first
                             $view = Input::get('perm-view-0');
 
-                            if(!($view)) $view = 0;
+                            if (! ($view)) $view = 0;
 
                             $page_perm_exists = 0;
 
-                            $page_perm_query = $queries->getWhere('custom_pages_permissions', array('page_id', '=', $page->id));
-                            if(count($page_perm_query)){
-                                foreach($page_perm_query as $query){
-                                    if($query->group_id == 0){
+                            $page_perm_query = $queries->getWhere('custom_pages_permissions', ['page_id', '=', $page->id]);
+
+                            if (count($page_perm_query)){
+                                foreach ($page_perm_query as $query){
+                                    if ($query->group_id == 0){
                                         $page_perm_exists = 1;
                                         $update_id = $query->id;
+
                                         break;
                                     }
                                 }
                             }
 
                             try {
-                                if($page_perm_exists != 0){ // Permission already exists, update
+                                if ($page_perm_exists != 0){ // Permission already exists, update
                                     // Update the category
-                                    $queries->update('custom_pages_permissions', $update_id, array(
+                                    $queries->update('custom_pages_permissions', $update_id, [
                                         'view' => $view
-                                    ));
+                                    ]);
                                 } else { // Permission doesn't exist, create
-                                    $queries->create('custom_pages_permissions', array(
+                                    $queries->create('custom_pages_permissions', [
                                         'group_id' => 0,
                                         'page_id' => $page->id,
                                         'view' => $view
-                                    ));
+                                    ]);
                                 }
-
-                            } catch(Exception $e) {
+                            } catch (Exception $e) {
                                 $errors[] = $e->getMessage();
                             }
 
                             // Group category permissions
-                            $groups = $queries->getWhere('groups', array('id', '<>', 0));
-                            foreach($groups as $group){
+                            $groups = $queries->getWhere('groups', ['id', '<>', 0]);
+
+                            foreach ($groups as $group){
                                 $view = Input::get('perm-view-' . $group->id);
 
-                                if(!($view)) $view = 0;
+                                if (! ($view)) $view = 0;
 
                                 $page_perm_exists = 0;
 
-                                if(count($page_perm_query)){
-                                    foreach($page_perm_query as $query){
-                                        if($query->group_id == $group->id){
+                                if (count($page_perm_query)){
+                                    foreach ($page_perm_query as $query){
+                                        if ($query->group_id == $group->id){
                                             $page_perm_exists = 1;
                                             $update_id = $query->id;
+
                                             break;
                                         }
                                     }
                                 }
 
                                 try {
-                                    if($page_perm_exists != 0){ // Permission already exists, update
+                                    if ($page_perm_exists != 0){ // Permission already exists, update
                                         // Update the category
-                                        $queries->update('custom_pages_permissions', $update_id, array(
+                                        $queries->update('custom_pages_permissions', $update_id, [
                                             'view' => $view
-                                        ));
+                                        ]);
                                     } else { // Permission doesn't exist, create
-                                        $queries->create('custom_pages_permissions', array(
+                                        $queries->create('custom_pages_permissions', [
                                             'group_id' => $group->id,
                                             'page_id' => $page->id,
                                             'view' => $view
-                                        ));
+                                        ]);
                                     }
-
-                                } catch(Exception $e) {
+                                } catch (Exception $e) {
                                     $errors[] = $e->getMessage();
                                 }
                             }
 
                             Session::flash('admin_pages', $language->get('admin', 'page_updated_successfully'));
                             Redirect::to(URL::build('/panel/core/pages'));
-                            die();
 
-                        } catch(Exception $e){
+                            die();
+                        } catch (Exception $e){
                             $errors[] = $e->getMessage();
                         }
-
                     } else {
-                        foreach($validation->errors() as $item){
-                            if(strpos($item, 'is required') !== false){
-                                if(strpos($item, 'page_title') !== false)
+                        foreach ($validation->errors() as $item){
+                            if (strpos($item, 'is required') !== false){
+                                if (strpos($item, 'page_title') !== false)
                                     $errors[] = $language->get('admin', 'page_title_required');
 
-                                else if(strpos($item, 'page_url') !== false)
+                                else if (strpos($item, 'page_url') !== false)
                                     $errors[] = $language->get('admin', 'page_url_required');
 
-                                else if(strpos($item, 'link_location') !== false)
+                                else if (strpos($item, 'link_location') !== false)
                                     $errors[] = $language->get('admin', 'link_location_required');
-
-                            } else if(strpos($item, 'minimum') !== false){
-                                if(strpos($item, 'page_title') !== false)
+                            } else if (strpos($item, 'minimum') !== false){
+                                if (strpos($item, 'page_title') !== false)
                                     $errors[] = $language->get('admin', 'page_title_minimum_2');
 
-                                else if(strpos($item, 'page_url') !== false)
+                                else if (strpos($item, 'page_url') !== false)
                                     $errors[] = $language->get('admin', 'page_url_minimum_2');
-
-                            } else if(strpos($item, 'maximum') !== false){
-                                if(strpos($item, 'page_title') !== false)
+                            } else if (strpos($item, 'maximum') !== false){
+                                if (strpos($item, 'page_title') !== false)
                                     $errors[] = $language->get('admin', 'page_title_maximum_30');
 
-                                else if(strpos($item, 'page_url') !== false)
+                                else if (strpos($item, 'page_url') !== false)
                                     $errors[] = $language->get('admin', 'page_url_maximum_20');
 
-                                else if(strpos($item, 'content') !== false)
+                                else if (strpos($item, 'content') !== false)
                                     $errors[] = $language->get('admin', 'page_content_maximum_100000');
 
-                                else if(strpos($item, 'redirect_link') !== false)
+                                else if (strpos($item, 'redirect_link') !== false)
                                     $errors[] = $language->get('admin', 'page_redirect_link_maximum_512');
-
                             }
                         }
                     }
-                } else
-                    $errors[] = $language->get('general', 'invalid_token');
+                } else $errors[] = $language->get('general', 'invalid_token');
             }
 
-            $group_permissions = DB::getInstance()->query('SELECT id, `name`, group_html, subquery.view AS `view` FROM nl2_groups LEFT JOIN (SELECT `view`, group_id FROM nl2_custom_pages_permissions WHERE page_id = ?) AS subquery ON nl2_groups.id = subquery.group_id ORDER BY `order`', array($page->id))->results();
-            $template_array = array();
-            foreach($group_permissions as $group){
-                $template_array[Output::getClean($group->id)] = array(
+            $group_permissions = DB::getInstance()->query('SELECT id, `name`, group_html, subquery.view AS `view` FROM nl2_groups LEFT JOIN (SELECT `view`, group_id FROM nl2_custom_pages_permissions WHERE page_id = ?) AS subquery ON nl2_groups.id = subquery.group_id ORDER BY `order`', [$page->id])->results();
+            $template_array = [];
+
+            foreach ($group_permissions as $group){
+                $template_array[Output::getClean($group->id)] = [
                     'id' => Output::getClean($group->id),
                     'name' => Output::getClean($group->name),
                     'html' => $group->group_html,
                     'view' => $group->view
-                );
+                ];
             }
 
-            $guest_permissions = DB::getInstance()->query('SELECT `view` FROM nl2_custom_pages_permissions WHERE group_id = 0 AND page_id = ?', array($page->id))->results();
+            $guest_permissions = DB::getInstance()->query('SELECT `view` FROM nl2_custom_pages_permissions WHERE group_id = 0 AND page_id = ?', [$page->id])->results();
             $guest_can_view = 0;
-            if(count($guest_permissions)){
-                if($guest_permissions[0]->view == 1){
+
+            if (count($guest_permissions)){
+                if ($guest_permissions[0]->view == 1){
                     $guest_can_view = 1;
                 }
             }
 
-            $smarty->assign(array(
+            $smarty->assign([
                 'CANCEL' => $language->get('general', 'cancel'),
                 'CANCEL_LINK' => URL::build('/panel/core/pages'),
                 'ARE_YOU_SURE' => $language->get('general', 'are_you_sure'),
@@ -560,24 +564,24 @@ if(!isset($_GET['action'])){
                 'GUESTS' => $language->get('user', 'guests'),
                 'GROUPS' => $template_array,
                 'GUEST_PERMS' => $guest_can_view
-            ));
+            ]);
 
             $template_file = 'core/pages_edit.tpl';
 
             break;
 
         case 'delete':
-            if(isset($_GET['id']) && is_numeric($_GET['id'])){
+            if (isset($_GET['id']) && is_numeric($_GET['id'])){
                 try {
-                    $queries->delete('custom_pages', array('id', '=', $_GET['id']));
-                    $queries->delete('custom_pages_permissions', array('page_id', '=', $_GET['id']));
-
-                } catch(Exception $e){
+                    $queries->delete('custom_pages', ['id', '=', $_GET['id']]);
+                    $queries->delete('custom_pages_permissions', ['page_id', '=', $_GET['id']]);
+                } catch (Exception $e){
                     die($e->getMessage());
                 }
 
                 Session::flash('admin_pages', $language->get('admin', 'page_deleted_successfully'));
                 Redirect::to(URL::build('/panel/core/pages'));
+
                 die();
             }
 
@@ -585,28 +589,29 @@ if(!isset($_GET['action'])){
 
         default:
             Redirect::to(URL::build('/panel/core/pages'));
+
             die();
 
             break;
     }
 }
 
-if(Session::exists('admin_pages'))
+if (Session::exists('admin_pages'))
     $success = Session::flash('admin_pages');
 
-if(isset($success))
-    $smarty->assign(array(
+if (isset($success))
+    $smarty->assign([
         'SUCCESS' => $success,
         'SUCCESS_TITLE' => $language->get('general', 'success')
-    ));
+    ]);
 
-if(isset($errors) && count($errors))
-    $smarty->assign(array(
+if (isset($errors) && count($errors))
+    $smarty->assign([
         'ERRORS' => $errors,
         'ERRORS_TITLE' => $language->get('general', 'error')
-    ));
+    ]);
 
-$smarty->assign(array(
+$smarty->assign([
     'PARENT_PAGE' => PARENT_PAGE,
     'DASHBOARD' => $language->get('admin', 'dashboard'),
     'PAGES' => $language->get('admin', 'pages'),
@@ -614,14 +619,14 @@ $smarty->assign(array(
     'PAGE' => PANEL_PAGE,
     'TOKEN' => Token::get(),
     'SUBMIT' => $language->get('general', 'submit')
-));
+]);
 
 $page_load = microtime(true) - $start;
 define('PAGE_LOAD_TIME', str_replace('{x}', round($page_load, 3), $language->get('general', 'page_loaded_in')));
 
 $template->onPageLoad();
 
-require(ROOT_PATH . '/core/templates/panel_navbar.php');
+require (ROOT_PATH . '/core/templates/panel_navbar.php');
 
 // Display template
 $template->displayTemplate($template_file, $smarty);
diff --git a/modules/Core/pages/panel/panel_templates.php b/modules/Core/pages/panel/panel_templates.php
index 723c699c1c004ec62993177732ae0fec4fbc1e6e..433bcad3113cd74eab1e549790bb22a7a540bed5 100644
--- a/modules/Core/pages/panel/panel_templates.php
+++ b/modules/Core/pages/panel/panel_templates.php
@@ -15,54 +15,55 @@ define('PAGE', 'panel');
 define('PARENT_PAGE', 'layout');
 define('PANEL_PAGE', 'panel_templates');
 $page_title = $language->get('admin', 'panel_templates');
-require_once(ROOT_PATH . '/core/templates/backend_init.php');
 
-if(!isset($_GET['action'])){
+require_once (ROOT_PATH . '/core/templates/backend_init.php');
+
+if (! isset($_GET['action'])){
     // Get all templates
-    $templates = $queries->getWhere('panel_templates', array('id', '<>', 0));
+    $templates = $queries->getWhere('panel_templates', ['id', '<>', 0]);
 
     // Get all active templates
-    $active_templates = $queries->getWhere('panel_templates', array('enabled', '=', 1));
+    $active_templates = $queries->getWhere('panel_templates', ['enabled', '=', 1]);
 
     $current_template = $template;
 
-    $templates_template = array();
+    $templates_template = [];
 
-    foreach($templates as $item){
-        $template_path = join(DIRECTORY_SEPARATOR, array(ROOT_PATH, 'custom', 'panel_templates', htmlspecialchars($item->name), 'template.php'));
+    foreach ($templates as $item){
+        $template_path = join(DIRECTORY_SEPARATOR, [ROOT_PATH, 'custom', 'panel_templates', htmlspecialchars($item->name), 'template.php']);
 
-        if(file_exists($template_path))
-            require($template_path);
+        if (file_exists($template_path))
+            require ($template_path);
         else {
-            $queries->delete('panel_templates', array('id', '=', $item->id));
+            $queries->delete('panel_templates', ['id', '=', $item->id]);
+
             continue;
         }
 
-        $templates_template[] = array(
+        $templates_template[] = [
             'name' => Output::getClean($item->name),
             'version' => Output::getClean($template->getVersion()),
             'author' => $template->getAuthor(),
             'author_x' => str_replace('{x}', $template->getAuthor(), $language->get('admin', 'author_x')),
-            'version_mismatch' => (($template->getNamelessVersion() != NAMELESS_VERSION) ? str_replace(array('{x}', '{y}'), array(Output::getClean($template->getNamelessVersion()), NAMELESS_VERSION), $language->get('admin', 'template_outdated')) : false),
+            'version_mismatch' => (($template->getNamelessVersion() != NAMELESS_VERSION) ? str_replace(['{x}', '{y}'], [Output::getClean($template->getNamelessVersion()), NAMELESS_VERSION], $language->get('admin', 'template_outdated')) : false),
             'enabled' => $item->enabled,
             'activate_link' => (($item->enabled) ? null : URL::build('/panel/core/panel_templates/', 'action=activate&template=' . Output::getClean($item->id))),
             'delete_link' => (($item->id == 1 || $item->enabled) ? null : URL::build('/panel/core/panel_templates/', 'action=delete&template=' . Output::getClean($item->id))),
             'default' => $item->is_default,
-            'deactivate_link' => (($item->enabled && count($active_templates) > 1 && !$item->is_default) ? URL::build('/panel/core/panel_templates/', 'action=deactivate&template=' . Output::getClean($item->id)) : null),
-            'default_link' => (($item->enabled && !$item->is_default) ? URL::build('/panel/core/panel_templates/', 'action=make_default&template=' . Output::getClean($item->id)) : null)
-        );
-
+            'deactivate_link' => (($item->enabled && count($active_templates) > 1 && ! $item->is_default) ? URL::build('/panel/core/panel_templates/', 'action=deactivate&template=' . Output::getClean($item->id)) : null),
+            'default_link' => (($item->enabled && ! $item->is_default) ? URL::build('/panel/core/panel_templates/', 'action=make_default&template=' . Output::getClean($item->id)) : null)
+        ];
     }
 
     $template = $current_template;
 
     // Get templates from Nameless website
     $cache->setCache('all_templates');
-    if($cache->isCached('all_panel_templates')){
-        $all_templates = $cache->retrieve('all_panel_templates');
 
+    if ($cache->isCached('all_panel_templates')){
+        $all_templates = $cache->retrieve('all_panel_templates');
     } else {
-        $all_templates = array();
+        $all_templates = [];
 
         $ch = curl_init();
         curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
@@ -71,21 +72,20 @@ if(!isset($_GET['action'])){
 
         $all_templates_query = curl_exec($ch);
 
-        if(curl_error($ch)){
+        if (curl_error($ch)){
             $all_templates_error = curl_error($ch);
         }
 
         curl_close($ch);
 
-        if(isset($all_templates_error)){
+        if (isset($all_templates_error)){
             $smarty->assign('WEBSITE_TEMPLATES_ERROR', $all_templates_error);
-
         } else {
             $all_templates_query = json_decode($all_templates_query);
             $timeago = new Timeago(TIMEZONE);
 
-            foreach($all_templates_query as $item){
-                $all_templates[] = array(
+            foreach ($all_templates_query as $item){
+                $all_templates[] = [
                     'name' => Output::getClean($item->name),
                     'description' => Output::getPurified($item->description),
                     'description_short' => Util::truncate(Output::getPurified($item->description)),
@@ -104,22 +104,21 @@ if(!isset($_GET['action'])){
                     'rating_full' => str_replace('{x}', Output::getClean($item->rating * 2) . '/100', $language->get('admin', 'rating_x')),
                     'downloads_full' => str_replace('{x}', Output::getClean($item->downloads), $language->get('admin', 'downloads_x')),
                     'views_full' => str_replace('{x}', Output::getClean($item->views), $language->get('admin', 'views_x'))
-                );
+                ];
             }
 
             $cache->store('all_panel_templates', $all_templates, 3600);
         }
-
     }
 
-    if(count($all_templates)){
-        if(count($all_templates) > 3){
+    if (count($all_templates)){
+        if (count($all_templates) > 3){
             $rand_keys = array_rand($all_templates, 3);
-            $all_templates = array($all_templates[$rand_keys[0]], $all_templates[$rand_keys[1]], $all_templates[$rand_keys[2]]);
+            $all_templates = [$all_templates[$rand_keys[0]], $all_templates[$rand_keys[1]], $all_templates[$rand_keys[2]]];
         }
     }
 
-    $smarty->assign(array(
+    $smarty->assign([
         'WARNING' => $language->get('admin', 'warning'),
         'ACTIVATE' => $language->get('admin', 'activate'),
         'DEACTIVATE' => $language->get('admin', 'deactivate'),
@@ -147,36 +146,39 @@ if(!isset($_GET['action'])){
         'TEMPLATE' => $language->get('admin', 'template'),
         'STATS' => $language->get('admin', 'stats'),
         'ACTIONS' => $language->get('general', 'actions')
-    ));
+    ]);
 
     $template_file = 'core/panel_templates.tpl';
-
 } else {
     switch($_GET['action']){
         case 'install':
             // Install new template
             // Scan template directory for new templates
-            $directories = glob(ROOT_PATH . DIRECTORY_SEPARATOR . 'custom' . DIRECTORY_SEPARATOR . 'panel_templates' . DIRECTORY_SEPARATOR . '*' , GLOB_ONLYDIR);
-            foreach($directories as $directory){
+            $directories = glob(ROOT_PATH . DIRECTORY_SEPARATOR . 'custom' . DIRECTORY_SEPARATOR . 'panel_templates' . DIRECTORY_SEPARATOR . '*', GLOB_ONLYDIR);
+
+            foreach ($directories as $directory){
                 $folders = explode(DIRECTORY_SEPARATOR, $directory);
 
                 // Is it already in the database?
-                $exists = $queries->getWhere('panel_templates', array('name', '=', htmlspecialchars($folders[count($folders) - 1])));
-                if(!count($exists) && file_exists(ROOT_PATH . DIRECTORY_SEPARATOR . 'custom' . DIRECTORY_SEPARATOR . 'panel_templates' . DIRECTORY_SEPARATOR . str_replace(array('../', '/', '..'), '', $folders[count($folders) - 1]) . DIRECTORY_SEPARATOR . 'template.php')){
+                $exists = $queries->getWhere('panel_templates', ['name', '=', htmlspecialchars($folders[count($folders) - 1])]);
+
+                if (! count($exists) && file_exists(ROOT_PATH . DIRECTORY_SEPARATOR . 'custom' . DIRECTORY_SEPARATOR . 'panel_templates' . DIRECTORY_SEPARATOR . str_replace(['../', '/', '..'], '', $folders[count($folders) - 1]) . DIRECTORY_SEPARATOR . 'template.php')){
                     $template = null;
-                    require_once(ROOT_PATH . DIRECTORY_SEPARATOR . 'custom' . DIRECTORY_SEPARATOR . 'panel_templates' . DIRECTORY_SEPARATOR . str_replace(array('../', '/', '..'), '', $folders[count($folders) - 1]) . DIRECTORY_SEPARATOR . 'template.php');
 
-                    if($template instanceof TemplateBase){
+                    require_once (ROOT_PATH . DIRECTORY_SEPARATOR . 'custom' . DIRECTORY_SEPARATOR . 'panel_templates' . DIRECTORY_SEPARATOR . str_replace(['../', '/', '..'], '', $folders[count($folders) - 1]) . DIRECTORY_SEPARATOR . 'template.php');
+
+                    if ($template instanceof TemplateBase){
                         // No, add it now
-                        $queries->create('panel_templates', array(
+                        $queries->create('panel_templates', [
                             'name' => htmlspecialchars($folders[count($folders) - 1])
-                        ));
+                        ]);
                     }
                 }
             }
 
             Session::flash('admin_templates', $language->get('admin', 'templates_installed_successfully'));
             Redirect::to(URL::build('/panel/core/panel_templates'));
+
             die();
 
             break;
@@ -184,29 +186,30 @@ if(!isset($_GET['action'])){
         case 'activate':
             // Activate a template
             // Ensure it exists
-            $template = $queries->getWhere('panel_templates', array('id', '=', $_GET['template']));
-            if(!count($template)){
+            $template = $queries->getWhere('panel_templates', ['id', '=', $_GET['template']]);
+
+            if (! count($template)){
                 // Doesn't exist
                 Redirect::to(URL::build('/panel/core/panel_templates/'));
+
                 die();
             }
-            $name = str_replace(array('../', '/', '..'), '', $template[0]->name);
+            $name = str_replace(['../', '/', '..'], '', $template[0]->name);
 
-            if(file_exists(ROOT_PATH . DIRECTORY_SEPARATOR . 'custom' . DIRECTORY_SEPARATOR . 'panel_templates' . DIRECTORY_SEPARATOR . $name . DIRECTORY_SEPARATOR . 'template.php')){
+            if (file_exists(ROOT_PATH . DIRECTORY_SEPARATOR . 'custom' . DIRECTORY_SEPARATOR . 'panel_templates' . DIRECTORY_SEPARATOR . $name . DIRECTORY_SEPARATOR . 'template.php')){
                 $id = $template[0]->id;
                 $template = null;
 
-                require(ROOT_PATH . DIRECTORY_SEPARATOR . 'custom' . DIRECTORY_SEPARATOR . 'panel_templates' . DIRECTORY_SEPARATOR . $name . DIRECTORY_SEPARATOR . 'template.php');
+                require (ROOT_PATH . DIRECTORY_SEPARATOR . 'custom' . DIRECTORY_SEPARATOR . 'panel_templates' . DIRECTORY_SEPARATOR . $name . DIRECTORY_SEPARATOR . 'template.php');
 
-                if($template instanceof TemplateBase){
+                if ($template instanceof TemplateBase){
                     // Activate the template
-                    $queries->update('panel_templates', $id, array(
+                    $queries->update('panel_templates', $id, [
                         'enabled' => 1
-                    ));
+                    ]);
 
                     // Session
                     Session::flash('admin_templates', $language->get('admin', 'template_activated'));
-
                 } else {
                     // Session
                     Session::flash('admin_templates_error', $language->get('admin', 'unable_to_enable_template'));
@@ -214,6 +217,7 @@ if(!isset($_GET['action'])){
             }
 
             Redirect::to(URL::build('/panel/core/panel_templates/'));
+
             die();
 
             break;
@@ -221,30 +225,34 @@ if(!isset($_GET['action'])){
         case 'deactivate':
             // Deactivate a template
             // Ensure it exists
-            $template = $queries->getWhere('panel_templates', array('id', '=', $_GET['template']));
-            if(!count($template)){
+            $template = $queries->getWhere('panel_templates', ['id', '=', $_GET['template']]);
+
+            if (! count($template)){
                 // Doesn't exist
                 Redirect::to(URL::build('/panel/core/panel_templates/'));
+
                 die();
             }
 
             $template = $template[0]->id;
 
             // Deactivate the template
-            $queries->update('panel_templates', $template, array(
+            $queries->update('panel_templates', $template, [
                 'enabled' => 0
-            ));
+            ]);
 
             // Session
             Session::flash('admin_templates', $language->get('admin', 'template_deactivated'));
             Redirect::to(URL::build('/panel/core/panel_templates'));
+
             die();
 
             break;
 
         case 'delete':
-            if(!isset($_GET['template'])){
+            if (! isset($_GET['template'])){
                 Redirect::to('/panel/core/panel_templates');
+
                 die();
             }
 
@@ -252,33 +260,37 @@ if(!isset($_GET['action'])){
 
             try {
                 // Ensure template is not default or active
-                $template = $queries->getWhere('panel_templates', array('id', '=', $item));
-                if(count($template)){
+                $template = $queries->getWhere('panel_templates', ['id', '=', $item]);
+
+                if (count($template)){
                     $template = $template[0];
-                    if($template->name == 'Default' || $template->id == 1 || $template->enabled == 1 || $template->is_default == 1){
+
+                    if ($template->name == 'Default' || $template->id == 1 || $template->enabled == 1 || $template->is_default == 1){
                         Redirect::to(URL::build('/panel/core/panel_templates'));
+
                         die();
                     }
 
                     $item = $template->name;
                 } else {
                     Redirect::to(URL::build('/panel/core/panel_templates'));
+
                     die();
                 }
 
-                if(!Util::recursiveRemoveDirectory(ROOT_PATH . '/custom/panel_templates/' . $item))
+                if (! Util::recursiveRemoveDirectory(ROOT_PATH . '/custom/panel_templates/' . $item))
                     Session::flash('admin_templates_error', $language->get('admin', 'unable_to_delete_template'));
-                else
-                    Session::flash('admin_templates', $language->get('admin', 'template_deleted_successfully'));
+                else Session::flash('admin_templates', $language->get('admin', 'template_deleted_successfully'));
 
                 // Delete from database
-                $queries->delete('templates', array('name', '=', $item));
+                $queries->delete('templates', ['name', '=', $item]);
                 Redirect::to(URL::build('/panel/core/panel_templates'));
-                die();
 
-            } catch(Exception $e){
+                die();
+            } catch (Exception $e){
                 Session::flash('admin_templates_error', $e->getMessage());
                 Redirect::to(URL::build('/panel/core/panel_templates'));
+
                 die();
             }
 
@@ -287,30 +299,32 @@ if(!isset($_GET['action'])){
         case 'make_default':
             // Make a template default
             // Ensure it exists
-            $new_default = $queries->getWhere('panel_templates', array('id', '=', $_GET['template']));
-            if(!count($new_default)){
+            $new_default = $queries->getWhere('panel_templates', ['id', '=', $_GET['template']]);
+
+            if (! count($new_default)){
                 // Doesn't exist
                 Redirect::to(URL::build('/panel/core/panel_templates/'));
+
                 die();
-            } else {
+            }
                 $new_default_template = $new_default[0]->name;
                 $new_default = $new_default[0]->id;
-            }
-
+            
             // Get current default template
-            $current_default = $queries->getWhere('panel_templates', array('is_default', '=', 1));
-            if(count($current_default)){
+            $current_default = $queries->getWhere('panel_templates', ['is_default', '=', 1]);
+
+            if (count($current_default)){
                 $current_default = $current_default[0]->id;
                 // No longer default
-                $queries->update('panel_templates', $current_default, array(
+                $queries->update('panel_templates', $current_default, [
                     'is_default' => 0
-                ));
+                ]);
             }
 
             // Make selected template default
-            $queries->update('panel_templates', $new_default, array(
+            $queries->update('panel_templates', $new_default, [
                 'is_default' => 1
-            ));
+            ]);
 
             // Cache
             $cache->setCache('templatecache');
@@ -319,6 +333,7 @@ if(!isset($_GET['action'])){
             // Session
             Session::flash('admin_templates', str_replace('{x}', Output::getClean($new_default_template), $language->get('admin', 'default_template_set')));
             Redirect::to(URL::build('/panel/core/panel_templates/'));
+
             die();
 
             break;
@@ -327,38 +342,42 @@ if(!isset($_GET['action'])){
             $smarty->clearAllCache();
             Session::flash('admin_templates', $language->get('admin', 'cache_cleared'));
             Redirect::to(URL::build('/panel/core/panel_templates/'));
+
             die();
+
             break;
 
         default:
             Redirect::to(URL::build('/panel/core/panel_templates'));
+
             die();
+
             break;
     }
 }
 
 // Load modules + template
-Module::loadPage($user, $pages, $cache, $smarty, array($navigation, $cc_nav, $mod_nav), $widgets);
+Module::loadPage($user, $pages, $cache, $smarty, [$navigation, $cc_nav, $mod_nav], $widgets);
 
-if(Session::exists('admin_templates'))
+if (Session::exists('admin_templates'))
     $success = Session::flash('admin_templates');
 
-if(Session::exists('admin_templates_error'))
-    $errors = array(Session::flash('admin_templates_error'));
+if (Session::exists('admin_templates_error'))
+    $errors = [Session::flash('admin_templates_error')];
 
-if(isset($success))
-    $smarty->assign(array(
+if (isset($success))
+    $smarty->assign([
         'SUCCESS' => $success,
         'SUCCESS_TITLE' => $language->get('general', 'success')
-    ));
+    ]);
 
-if(isset($errors) && count($errors))
-    $smarty->assign(array(
+if (isset($errors) && count($errors))
+    $smarty->assign([
         'ERRORS' => $errors,
         'ERRORS_TITLE' => $language->get('general', 'error')
-    ));
+    ]);
 
-$smarty->assign(array(
+$smarty->assign([
     'PARENT_PAGE' => PARENT_PAGE,
     'DASHBOARD' => $language->get('admin', 'dashboard'),
     'LAYOUT' => $language->get('admin', 'layout'),
@@ -366,14 +385,14 @@ $smarty->assign(array(
     'PAGE' => PANEL_PAGE,
     'TOKEN' => Token::get(),
     'SUBMIT' => $language->get('general', 'submit')
-));
+]);
 
 $page_load = microtime(true) - $start;
 define('PAGE_LOAD_TIME', str_replace('{x}', round($page_load, 3), $language->get('general', 'page_loaded_in')));
 
 $template->onPageLoad();
 
-require(ROOT_PATH . '/core/templates/panel_navbar.php');
+require (ROOT_PATH . '/core/templates/panel_navbar.php');
 
 // Display template
 $template->displayTemplate($template_file, $smarty);
diff --git a/modules/Core/pages/panel/privacy_and_terms.php b/modules/Core/pages/panel/privacy_and_terms.php
index 97f7a8348a28b95a5d7dc3afb759e013f98c2acd..9cf06eee20c1da952d9a06ab2b3794759b74baaa 100644
--- a/modules/Core/pages/panel/privacy_and_terms.php
+++ b/modules/Core/pages/panel/privacy_and_terms.php
@@ -15,52 +15,55 @@ define('PAGE', 'panel');
 define('PARENT_PAGE', 'core_configuration');
 define('PANEL_PAGE', 'privacy_and_terms');
 $page_title = $language->get('admin', 'privacy_and_terms');
-require_once(ROOT_PATH . '/core/templates/backend_init.php');
+
+require_once (ROOT_PATH . '/core/templates/backend_init.php');
 
 if (Input::exists()) {
-    $errors = array();
+    $errors = [];
 
     if (Token::check()) {
         $validate = new Validate();
-        $validation = $validate->check($_POST, array(
-            'privacy' => array(
+        $validation = $validate->check($_POST, [
+            'privacy' => [
                 'required' => true,
                 'max' => 100000
-            ),
-            'terms' => array(
+            ],
+            'terms' => [
                 'required' => true,
                 'max' => 100000
-            )
-        ));
+            ]
+        ]);
 
         if ($validation->passed()) {
             try {
-                $privacy_id = $queries->getWhere('privacy_terms', array('name', '=', 'privacy'));
+                $privacy_id = $queries->getWhere('privacy_terms', ['name', '=', 'privacy']);
+
                 if (count($privacy_id)) {
                     $privacy_id = $privacy_id[0]->id;
 
-                    $queries->update('privacy_terms', $privacy_id, array(
+                    $queries->update('privacy_terms', $privacy_id, [
                         'value' => Input::get('privacy')
-                    ));
+                    ]);
                 } else {
-                    $queries->create('privacy_terms', array(
+                    $queries->create('privacy_terms', [
                         'name' => 'privacy',
                         'value' => Input::get('privacy')
-                    ));
+                    ]);
                 }
 
-                $terms_id = $queries->getWhere('privacy_terms', array('name', '=', 'terms'));
+                $terms_id = $queries->getWhere('privacy_terms', ['name', '=', 'terms']);
+
                 if (count($terms_id)) {
                     $terms_id = $terms_id[0]->id;
 
-                    $queries->update('privacy_terms', $terms_id, array(
+                    $queries->update('privacy_terms', $terms_id, [
                         'value' => Input::get('terms')
-                    ));
+                    ]);
                 } else {
-                    $queries->create('privacy_terms', array(
+                    $queries->create('privacy_terms', [
                         'name' => 'terms',
                         'value' => Input::get('terms')
-                    ));
+                    ]);
                 }
 
                 $success = $language->get('admin', 'terms_updated');
@@ -76,39 +79,40 @@ if (Input::exists()) {
                 }
             }
         }
-    } else
-        $errors[] = $language->get('general', 'invalid_token');
+    } else $errors[] = $language->get('general', 'invalid_token');
 }
 
 // Load modules + template
-Module::loadPage($user, $pages, $cache, $smarty, array($navigation, $cc_nav, $mod_nav), $widgets);
+Module::loadPage($user, $pages, $cache, $smarty, [$navigation, $cc_nav, $mod_nav], $widgets);
 
 if (isset($success))
-    $smarty->assign(array(
+    $smarty->assign([
         'SUCCESS' => $success,
         'SUCCESS_TITLE' => $language->get('general', 'success')
-    ));
+    ]);
 
 if (isset($errors) && count($errors))
-    $smarty->assign(array(
+    $smarty->assign([
         'ERRORS' => $errors,
         'ERRORS_TITLE' => $language->get('general', 'error')
-    ));
+    ]);
 
 // Get privacy policy + terms
-$site_terms = $queries->getWhere('privacy_terms', array('name', '=', 'terms'));
-if (!count($site_terms)) {
-    $site_terms = $queries->getWhere('settings', array('name', '=', 't_and_c_site'));
+$site_terms = $queries->getWhere('privacy_terms', ['name', '=', 'terms']);
+
+if (! count($site_terms)) {
+    $site_terms = $queries->getWhere('settings', ['name', '=', 't_and_c_site']);
 }
 $site_terms = $site_terms[0]->value;
 
-$site_privacy = $queries->getWhere('privacy_terms', array('name', '=', 'privacy'));
-if (!count($site_privacy)) {
-    $site_privacy = $queries->getWhere('settings', array('name', '=', 'privacy_policy'));
+$site_privacy = $queries->getWhere('privacy_terms', ['name', '=', 'privacy']);
+
+if (! count($site_privacy)) {
+    $site_privacy = $queries->getWhere('settings', ['name', '=', 'privacy_policy']);
 }
 $site_privacy = $site_privacy[0]->value;
 
-$smarty->assign(array(
+$smarty->assign([
     'PARENT_PAGE' => PARENT_PAGE,
     'DASHBOARD' => $language->get('admin', 'dashboard'),
     'CONFIGURATION' => $language->get('admin', 'configuration'),
@@ -120,14 +124,14 @@ $smarty->assign(array(
     'PRIVACY_POLICY_VALUE' => Output::getPurified($site_privacy),
     'TERMS_AND_CONDITIONS' => $language->get('user', 'terms_and_conditions'),
     'TERMS_AND_CONDITIONS_VALUE' => Output::getPurified($site_terms)
-));
+]);
 
 $page_load = microtime(true) - $start;
 define('PAGE_LOAD_TIME', str_replace('{x}', round($page_load, 3), $language->get('general', 'page_loaded_in')));
 
 $template->onPageLoad();
 
-require(ROOT_PATH . '/core/templates/panel_navbar.php');
+require (ROOT_PATH . '/core/templates/panel_navbar.php');
 
 // Display template
 $template->displayTemplate('core/privacy_and_terms.tpl', $smarty);
diff --git a/modules/Core/pages/panel/profile_fields.php b/modules/Core/pages/panel/profile_fields.php
index 16a223b4b00d936787cdeda85d742a9d434f6d4d..5eb5967f598f9406accc8d6c5058c792181c1a7b 100644
--- a/modules/Core/pages/panel/profile_fields.php
+++ b/modules/Core/pages/panel/profile_fields.php
@@ -15,31 +15,35 @@ define('PAGE', 'panel');
 define('PARENT_PAGE', 'core_configuration');
 define('PANEL_PAGE', 'custom_profile_fields');
 $page_title = $language->get('admin', 'custom_fields');
-require_once(ROOT_PATH . '/core/templates/backend_init.php');
+
+require_once (ROOT_PATH . '/core/templates/backend_init.php');
 
 // Load modules + template
-Module::loadPage($user, $pages, $cache, $smarty, array($navigation, $cc_nav, $mod_nav), $widgets);
+Module::loadPage($user, $pages, $cache, $smarty, [$navigation, $cc_nav, $mod_nav], $widgets);
 
-if (!isset($_GET['id']) && !isset($_GET['action'])) {
-    $profile_fields = $queries->getWhere('profile_fields', array('id', '<>', 0));
-    $template_fields = array();
+if (! isset($_GET['id']) && ! isset($_GET['action'])) {
+    $profile_fields = $queries->getWhere('profile_fields', ['id', '<>', 0]);
+    $template_fields = [];
 
     foreach ($profile_fields as $field) {
         switch ($field->type) {
             case 1:
                 $type = $language->get('admin', 'text');
+
                 break;
 
             case 2:
                 $type = $language->get('admin', 'textarea');
+
                 break;
 
             case 3:
                 $type = $language->get('admin', 'date');
+
                 break;
         }
 
-        $template_fields[] = array(
+        $template_fields[] = [
             'edit_link' => URL::build('/panel/core/profile_fields/', 'id=' . Output::getClean($field->id)),
             'name' => Output::getClean($field->name),
             'type' => $type,
@@ -47,10 +51,10 @@ if (!isset($_GET['id']) && !isset($_GET['action'])) {
             'editable' => $field->editable,
             'public' => $field->public,
             'forum_posts' => $field->forum_posts
-        );
+        ];
     }
 
-    $smarty->assign(array(
+    $smarty->assign([
         'FIELDS' => $template_fields,
         'NO_FIELDS' => $language->get('admin', 'no_custom_fields'),
         'NEW_FIELD' => $language->get('admin', 'new_field'),
@@ -61,36 +65,37 @@ if (!isset($_GET['id']) && !isset($_GET['action'])) {
         'EDITABLE' => $language->get('admin', 'editable'),
         'PUBLIC' => $language->get('admin', 'public'),
         'FORUM_POSTS' => $language->get('admin', 'forum_posts')
-    ));
+    ]);
 } else {
-    if (isset($_GET['id']) && !isset($_GET['action'])) {
+    if (isset($_GET['id']) && ! isset($_GET['action'])) {
         $id = intval($_GET['id']);
 
-        $field = $queries->getWhere('profile_fields', array('id', '=', $id));
+        $field = $queries->getWhere('profile_fields', ['id', '=', $id]);
 
-        if (!count($field)) {
+        if (! count($field)) {
             Redirect::to(URL::build('/panel/core/profile_fields'));
+
             die();
         }
         $field = $field[0];
 
         if (Input::exists()) {
-            $errors = array();
+            $errors = [];
 
             if (Token::check()) {
                 // Validate input
                 $validate = new Validate();
 
-                $validation = $validate->check($_POST, array(
-                    'name' => array(
+                $validation = $validate->check($_POST, [
+                    'name' => [
                         'required' => true,
                         'min' => 2,
                         'max' => 16
-                    ),
-                    'type' => array(
+                    ],
+                    'type' => [
                         'required' => true
-                    )
-                ));
+                    ]
+                ]);
 
                 if ($validation->passed()) {
                     // Update database
@@ -109,7 +114,7 @@ if (!isset($_GET['id']) && !isset($_GET['action'])) {
                         else $editable = 0;
 
                         // Update database
-                        $queries->update('profile_fields', $field->id, array(
+                        $queries->update('profile_fields', $field->id, [
                             'name' => Output::getClean(Input::get('name')),
                             'type' => Input::get('type'),
                             'public' => $public,
@@ -117,13 +122,14 @@ if (!isset($_GET['id']) && !isset($_GET['action'])) {
                             'description' => Output::getClean(Input::get('description')),
                             'forum_posts' => $forum_posts,
                             'editable' => $editable
-                        ));
+                        ]);
 
                         //Log::getInstance()->log(Log::Action('admin/core/profile/update'), Output::getClean(Input::get('name')));
 
                         // Redirect
                         Session::flash('profile_field_success', $language->get('admin', 'profile_field_updated_successfully'));
                         Redirect::to(URL::build('/panel/core/profile_fields'));
+
                         die();
                     } catch (Exception $e) {
                         $errors[] = $e->getMessage();
@@ -137,7 +143,7 @@ if (!isset($_GET['id']) && !isset($_GET['action'])) {
             }
         }
 
-        $smarty->assign(array(
+        $smarty->assign([
             'EDITING_PROFILE_FIELD' => $language->get('admin', 'editing_profile_field'),
             'CANCEL' => $language->get('general', 'cancel'),
             'DELETE' => $language->get('general', 'delete'),
@@ -153,7 +159,7 @@ if (!isset($_GET['id']) && !isset($_GET['action'])) {
             'FIELD_NAME' => $language->get('admin', 'field_name'),
             'FIELD_NAME_VALUE' => Output::getClean($field->name),
             'TYPE' => $language->get('admin', 'type'),
-            'TYPES' => array(1 => $language->get('admin', 'text'), 2 => $language->get('admin', 'textarea'), 3 => $language->get('admin', 'date')),
+            'TYPES' => [1 => $language->get('admin', 'text'), 2 => $language->get('admin', 'textarea'), 3 => $language->get('admin', 'date')],
             'TYPE_VALUE' => $field->type,
             'DESCRIPTION' => $language->get('admin', 'description'),
             'DESCRIPTION_VALUE' => Output::getPurified($field->description),
@@ -170,34 +176,35 @@ if (!isset($_GET['id']) && !isset($_GET['action'])) {
             'REQUIRED_HELP' => $language->get('admin', 'profile_field_required_help'),
             'PUBLIC_HELP' => $language->get('admin', 'profile_field_public_help'),
             'DISPLAY_FIELD_ON_FORUM_HELP' => $language->get('admin', 'profile_field_forum_help')
-        ));
+        ]);
     } else {
-        if (isset($_GET['id']) && isset($_GET['action']) && $_GET['action'] == 'delete') {
+        if (isset($_GET['id'], $_GET['action']) && $_GET['action'] == 'delete') {
             // Delete field
-            $queries->delete('profile_fields', array('id', '=', intval($_GET['id'])));
+            $queries->delete('profile_fields', ['id', '=', intval($_GET['id'])]);
 
             Session::flash('profile_field_success', $language->get('admin', 'profile_field_deleted_successfully'));
             Redirect::to(URL::build('/panel/core/profile_fields'));
+
             die();
-        } else {
+        }
             // New field
             if (Input::exists()) {
-                $errors = array();
+                $errors = [];
 
                 if (Token::check()) {
                     // Validate input
                     $validate = new Validate();
 
-                    $validation = $validate->check($_POST, array(
-                        'name' => array(
+                    $validation = $validate->check($_POST, [
+                        'name' => [
                             'required' => true,
                             'min' => 2,
                             'max' => 16
-                        ),
-                        'type' => array(
+                        ],
+                        'type' => [
                             'required' => true
-                        )
-                    ));
+                        ]
+                    ]);
 
                     if ($validation->passed()) {
                         // Input into database
@@ -216,7 +223,7 @@ if (!isset($_GET['id']) && !isset($_GET['action'])) {
                             else $editable = 0;
 
                             // Insert into database
-                            $queries->create('profile_fields', array(
+                            $queries->create('profile_fields', [
                                 'name' => Output::getClean(Input::get('name')),
                                 'type' => Input::get('type'),
                                 'public' => $public,
@@ -224,13 +231,14 @@ if (!isset($_GET['id']) && !isset($_GET['action'])) {
                                 'description' => Output::getClean(Input::get('description')),
                                 'forum_posts' => $forum_posts,
                                 'editable' => $editable
-                            ));
+                            ]);
 
                             //Log::getInstance()->log(Log::Action('admin/core/profile/new'), Output::getClean(Input::get('name')));
 
                             // Redirect
                             Session::flash('profile_field_success', $language->get('admin', 'profile_field_created_successfully'));
                             Redirect::to(URL::build('/panel/core/profile_fields'));
+
                             die();
                         } catch (Exception $e) {
                             $errors[] = $e->getMessage();
@@ -245,7 +253,7 @@ if (!isset($_GET['id']) && !isset($_GET['action'])) {
                 }
             }
 
-            $smarty->assign(array(
+            $smarty->assign([
                 'CREATING_PROFILE_FIELD' => $language->get('admin', 'creating_profile_field'),
                 'CANCEL' => $language->get('general', 'cancel'),
                 'ARE_YOU_SURE' => $language->get('general', 'are_you_sure'),
@@ -257,7 +265,7 @@ if (!isset($_GET['id']) && !isset($_GET['action'])) {
                 'SUBMIT' => $language->get('general', 'submit'),
                 'FIELD_NAME' => $language->get('admin', 'field_name'),
                 'TYPE' => $language->get('admin', 'type'),
-                'TYPES' => array(1 => $language->get('admin', 'text'), 2 => $language->get('admin', 'textarea'), 3 => $language->get('admin', 'date')),
+                'TYPES' => [1 => $language->get('admin', 'text'), 2 => $language->get('admin', 'textarea'), 3 => $language->get('admin', 'date')],
                 'DESCRIPTION' => $language->get('admin', 'description'),
                 'REQUIRED' => $language->get('admin', 'required'),
                 'EDITABLE' => $language->get('admin', 'editable'),
@@ -268,8 +276,7 @@ if (!isset($_GET['id']) && !isset($_GET['action'])) {
                 'REQUIRED_HELP' => $language->get('admin', 'profile_field_required_help'),
                 'PUBLIC_HELP' => $language->get('admin', 'profile_field_public_help'),
                 'DISPLAY_FIELD_ON_FORUM_HELP' => $language->get('admin', 'profile_field_forum_help')
-            ));
-        }
+            ]);
     }
 }
 
@@ -277,38 +284,38 @@ if (Session::exists('profile_field_success'))
     $success = Session::flash('profile_field_success');
 
 if (isset($success))
-    $smarty->assign(array(
+    $smarty->assign([
         'SUCCESS' => $success,
         'SUCCESS_TITLE' => $language->get('general', 'success')
-    ));
+    ]);
 
 if (isset($errors) && count($errors))
-    $smarty->assign(array(
+    $smarty->assign([
         'ERRORS' => $errors,
         'ERRORS_TITLE' => $language->get('general', 'error')
-    ));
+    ]);
 
-$smarty->assign(array(
+$smarty->assign([
     'PARENT_PAGE' => PARENT_PAGE,
     'DASHBOARD' => $language->get('admin', 'dashboard'),
     'CONFIGURATION' => $language->get('admin', 'configuration'),
     'PROFILE_FIELDS' => $language->get('admin', 'custom_fields'),
     'PAGE' => PANEL_PAGE
-));
+]);
 
 $page_load = microtime(true) - $start;
 define('PAGE_LOAD_TIME', str_replace('{x}', round($page_load, 3), $language->get('general', 'page_loaded_in')));
 
 $template->onPageLoad();
 
-require(ROOT_PATH . '/core/templates/panel_navbar.php');
+require (ROOT_PATH . '/core/templates/panel_navbar.php');
 
 // Display template
-if (!isset($_GET['id']) && !isset($_GET['action']))
+if (! isset($_GET['id']) && ! isset($_GET['action']))
     $template->displayTemplate('core/profile_fields.tpl', $smarty);
 
 else {
-    if (isset($_GET['id']) && !isset($_GET['action']))
+    if (isset($_GET['id']) && ! isset($_GET['action']))
         $template->displayTemplate('core/profile_fields_edit.tpl', $smarty);
     else if (isset($_GET['action']) && $_GET['action'] == 'new')
         $template->displayTemplate('core/profile_fields_create.tpl', $smarty);
diff --git a/modules/Core/pages/panel/reactions.php b/modules/Core/pages/panel/reactions.php
index 7960a1f2d7e7f044fe0e2aa46b35102c7e2c3673..6f9f8089ee1d6bdbf986b40a748b1800726fba56 100644
--- a/modules/Core/pages/panel/reactions.php
+++ b/modules/Core/pages/panel/reactions.php
@@ -15,50 +15,55 @@ define('PAGE', 'panel');
 define('PARENT_PAGE', 'core_configuration');
 define('PANEL_PAGE', 'reactions');
 $page_title = $language->get('user', 'reactions');
-require_once(ROOT_PATH . '/core/templates/backend_init.php');
+
+require_once (ROOT_PATH . '/core/templates/backend_init.php');
 
 // Load modules + template
-Module::loadPage($user, $pages, $cache, $smarty, array($navigation, $cc_nav, $mod_nav), $widgets);
+Module::loadPage($user, $pages, $cache, $smarty, [$navigation, $cc_nav, $mod_nav], $widgets);
 
 if (Session::exists('api_reactions'))
-    $smarty->assign(array(
+    $smarty->assign([
         'SUCCESS' => Session::flash('api_reactions'),
         'SUCCESS_TITLE' => $language->get('general', 'success')
-    ));
+    ]);
 
-if (!isset($_GET['id']) && !isset($_GET['action'])) {
+if (! isset($_GET['id']) && ! isset($_GET['action'])) {
     // Get all reactions
-    $reactions = $queries->getWhere('reactions', array('id', '<>', 0));
+    $reactions = $queries->getWhere('reactions', ['id', '<>', 0]);
+
+    $template_reactions = [];
 
-    $template_reactions = array();
     if (count($reactions)) {
         foreach ($reactions as $reaction) {
             switch ($reaction->type) {
                 case 1:
                     $type = $language->get('admin', 'neutral');
+
                     break;
 
                 case 2:
                     $type = $language->get('admin', 'positive');
+
                     break;
 
                 default:
                     $type = $language->get('admin', 'negative');
+
                     break;
             }
 
-            $template_reactions[] = array(
+            $template_reactions[] = [
                 'edit_link' => URL::build('/panel/core/reactions/', 'id=' . Output::getClean($reaction->id)),
                 'name' => Output::getClean($reaction->name),
                 'html' => $reaction->html,
                 'type_id' => $reaction->type,
                 'type' => $type,
                 'enabled' => $reaction->enabled
-            );
+            ];
         }
     }
 
-    $smarty->assign(array(
+    $smarty->assign([
         'NEW_REACTION' => $language->get('admin', 'new_reaction'),
         'NEW_REACTION_LINK' => URL::build('/panel/core/reactions/', 'action=new'),
         'NAME' => $language->get('admin', 'name'),
@@ -67,7 +72,7 @@ if (!isset($_GET['id']) && !isset($_GET['action'])) {
         'ENABLED' => $language->get('admin', 'enabled'),
         'REACTIONS_LIST' => $template_reactions,
         'NO_REACTIONS' => $language->get('admin', 'no_reactions')
-    ));
+    ]);
 
     $template_file = 'core/reactions.tpl';
 } else {
@@ -75,25 +80,26 @@ if (!isset($_GET['id']) && !isset($_GET['action'])) {
         switch ($_GET['action']) {
             case 'new':
                 if (Input::exists()) {
-                    $errors = array();
+                    $errors = [];
+
                     if (Token::check()) {
                         // Validate input
                         $validate = new Validate();
-                        $validation = $validate->check($_POST, array(
-                            'name' => array(
+                        $validation = $validate->check($_POST, [
+                            'name' => [
                                 'required' => true,
                                 'min' => 1,
                                 'max' => 16
-                            ),
-                            'html' => array(
+                            ],
+                            'html' => [
                                 'required' => true,
                                 'min' => 1,
                                 'max' => 255
-                            ),
-                            'type' => array(
+                            ],
+                            'type' => [
                                 'required' => true
-                            )
-                        ));
+                            ]
+                        ]);
 
                         if ($validation->passed()) {
                             // Check enabled status
@@ -103,27 +109,33 @@ if (!isset($_GET['id']) && !isset($_GET['action'])) {
                             switch (Input::get('type')) {
                                 case 1:
                                     $type = 1;
+
                                     break;
+
                                 case 2:
                                     $type = 2;
+
                                     break;
+
                                 default:
                                     $type = 0;
+
                                     break;
                             }
 
                             // Update database
-                            $queries->create('reactions', array(
+                            $queries->create('reactions', [
                                 'name' => Output::getClean(Input::get('name')),
                                 'html' => Output::getPurified(htmlspecialchars_decode(Input::get('html'))),
                                 'type' => $type,
                                 'enabled' => $enabled
-                            ));
+                            ]);
 
                             Session::flash('api_reactions', $language->get('admin', 'reaction_created_successfully'));
                             Redirect::to(URL::build('/panel/core/reactions'));
+
                             die();
-                        } else {
+                        }
                             // Validation error
                             foreach ($validation->errors() as $error) {
                                 if (strpos($error, 'required') !== false) {
@@ -149,14 +161,13 @@ if (!isset($_GET['id']) && !isset($_GET['action'])) {
                                     }
                                 }
                             }
-                        }
                     } else {
                         // Invalid token
                         $errors[] = $language->get('general', 'token');
                     }
                 }
 
-                $smarty->assign(array(
+                $smarty->assign([
                     'CANCEL' => $language->get('general', 'cancel'),
                     'CANCEL_LINK' => URL::build('/panel/core/reactions'),
                     'ARE_YOU_SURE' => $language->get('general', 'are_you_sure'),
@@ -173,7 +184,7 @@ if (!isset($_GET['id']) && !isset($_GET['action'])) {
                     'NEGATIVE' => $language->get('admin', 'negative'),
                     'NEUTRAL' => $language->get('admin', 'neutral'),
                     'ENABLED' => $language->get('admin', 'enabled')
-                ));
+                ]);
 
                 $template_file = 'core/reactions_new.tpl';
 
@@ -181,58 +192,63 @@ if (!isset($_GET['id']) && !isset($_GET['action'])) {
 
             case 'delete':
                 // Check reaction is specified
-                if (!isset($_GET['reaction']) || !is_numeric($_GET['reaction'])) {
+                if (! isset($_GET['reaction']) || ! is_numeric($_GET['reaction'])) {
                     Redirect::to(URL::build('/panel/core/reactions'));
+
                     die();
                 }
 
                 // Delete reaction
-                $queries->delete('reactions', array('id', '=', $_GET['reaction']));
+                $queries->delete('reactions', ['id', '=', $_GET['reaction']]);
 
                 // Redirect
                 Session::flash('api_reactions', $language->get('admin', 'reaction_deleted_successfully'));
                 Redirect::to(URL::build('/panel/core/reactions'));
+
                 die();
 
                 break;
 
             default:
                 Redirect::to(URL::build('/panel/core/reactions'));
+
                 die();
 
                 break;
         }
     } else {
         // Get reaction
-        $reaction = $queries->getWhere('reactions', array('id', '=', $_GET['id']));
-        if (!count($reaction)) {
+        $reaction = $queries->getWhere('reactions', ['id', '=', $_GET['id']]);
+
+        if (! count($reaction)) {
             // Reaction doesn't exist
             Redirect::to(URL::build('/panel/core/reactions'));
+
             die();
-        } else $reaction = $reaction[0];
+        }  $reaction = $reaction[0];
 
         // Deal with input
         if (Input::exists()) {
-            $errors = array();
+            $errors = [];
 
             if (Token::check()) {
                 // Validate input
                 $validate = new Validate();
-                $validation = $validate->check($_POST, array(
-                    'name' => array(
+                $validation = $validate->check($_POST, [
+                    'name' => [
                         'required' => true,
                         'min' => 1,
                         'max' => 16
-                    ),
-                    'html' => array(
+                    ],
+                    'html' => [
                         'required' => true,
                         'min' => 1,
                         'max' => 255
-                    ),
-                    'type' => array(
+                    ],
+                    'type' => [
                         'required' => true
-                    )
-                ));
+                    ]
+                ]);
 
                 if ($validation->passed()) {
                     // Check enabled status
@@ -242,27 +258,33 @@ if (!isset($_GET['id']) && !isset($_GET['action'])) {
                     switch (Input::get('type')) {
                         case 1:
                             $type = 1;
+
                             break;
+
                         case 2:
                             $type = 2;
+
                             break;
+
                         default:
                             $type = 0;
+
                             break;
                     }
 
                     // Update database
-                    $queries->update('reactions', $_GET['id'], array(
+                    $queries->update('reactions', $_GET['id'], [
                         'name' => Output::getClean(Input::get('name')),
                         'html' => Output::getPurified(Output::getDecoded(Input::get('html'))),
                         'type' => $type,
                         'enabled' => $enabled
-                    ));
+                    ]);
 
                     Session::flash('api_reactions', $language->get('admin', 'reaction_edited_successfully'));
                     Redirect::to(URL::build('/panel/core/reactions'));
+
                     die();
-                } else {
+                }
                     // Validation error
                     foreach ($validation->errors() as $error) {
                         if (strpos($error, 'required') !== false) {
@@ -288,14 +310,13 @@ if (!isset($_GET['id']) && !isset($_GET['action'])) {
                             }
                         }
                     }
-                }
             } else {
                 // Invalid token
                 $errors[] = $language->get('general', 'invalid_token');
             }
         }
 
-        $smarty->assign(array(
+        $smarty->assign([
             'CANCEL' => $language->get('general', 'cancel'),
             'CANCEL_LINK' => URL::build('/panel/core/reactions'),
             'ARE_YOU_SURE' => $language->get('general', 'are_you_sure'),
@@ -317,19 +338,19 @@ if (!isset($_GET['id']) && !isset($_GET['action'])) {
             'TYPE_VALUE' => $reaction->type,
             'ENABLED' => $language->get('admin', 'enabled'),
             'ENABLED_VALUE' => $reaction->enabled
-        ));
+        ]);
 
         $template_file = 'core/reactions_edit.tpl';
     }
 }
 
 if (isset($errors) && count($errors))
-    $smarty->assign(array(
+    $smarty->assign([
         'ERRORS' => $errors,
         'ERRORS_TITLE' => $language->get('general', 'error')
-    ));
+    ]);
 
-$smarty->assign(array(
+$smarty->assign([
     'PARENT_PAGE' => PARENT_PAGE,
     'DASHBOARD' => $language->get('admin', 'dashboard'),
     'CONFIGURATION' => $language->get('admin', 'configuration'),
@@ -337,14 +358,14 @@ $smarty->assign(array(
     'PAGE' => PANEL_PAGE,
     'TOKEN' => Token::get(),
     'SUBMIT' => $language->get('general', 'submit')
-));
+]);
 
 $page_load = microtime(true) - $start;
 define('PAGE_LOAD_TIME', str_replace('{x}', round($page_load, 3), $language->get('general', 'page_loaded_in')));
 
 $template->onPageLoad();
 
-require(ROOT_PATH . '/core/templates/panel_navbar.php');
+require (ROOT_PATH . '/core/templates/panel_navbar.php');
 
 // Display template
 $template->displayTemplate($template_file, $smarty);
diff --git a/modules/Core/pages/panel/registration.php b/modules/Core/pages/panel/registration.php
index 96d791d4d18354dd43122a067f648e08cc11a63a..3203f530ec5b96fcf5048f009d3f7ea8320fc1ff 100644
--- a/modules/Core/pages/panel/registration.php
+++ b/modules/Core/pages/panel/registration.php
@@ -15,11 +15,12 @@ define('PAGE', 'panel');
 define('PARENT_PAGE', 'core_configuration');
 define('PANEL_PAGE', 'registration');
 $page_title = $language->get('admin', 'registration');
-require_once(ROOT_PATH . '/core/templates/backend_init.php');
+
+require_once (ROOT_PATH . '/core/templates/backend_init.php');
 
 // Deal with input
 if (Input::exists()) {
-    $errors = array();
+    $errors = [];
 
     // Check token
     if (Token::check()) {
@@ -27,20 +28,19 @@ if (Input::exists()) {
         // Process input
         if (isset($_POST['enable_registration'])) {
             // Either enable or disable registration
-            $enable_registration_id = $queries->getWhere('settings', array('name', '=', 'registration_enabled'));
+            $enable_registration_id = $queries->getWhere('settings', ['name', '=', 'registration_enabled']);
             $enable_registration_id = $enable_registration_id[0]->id;
 
-            $queries->update('settings', $enable_registration_id, array(
+            $queries->update('settings', $enable_registration_id, [
                 'value' => Input::get('enable_registration')
-            ));
+            ]);
         } else {
             // Registration settings
             if (isset($_POST['verification']) && $_POST['verification'] == 'on')
                 $verification = 1;
-            else
-                $verification = 0;
+            else $verification = 0;
 
-            $verification_id = $queries->getWhere('settings', array('name', '=', 'email_verification'));
+            $verification_id = $queries->getWhere('settings', ['name', '=', 'email_verification']);
             $verification_id = $verification_id[0]->id;
 
             // reCAPTCHA enabled?
@@ -49,11 +49,11 @@ if (Input::exists()) {
             } else {
                 $captcha = 'false';
             }
-            $captcha_id = $queries->getWhere('settings', array('name', '=', 'recaptcha'));
+            $captcha_id = $queries->getWhere('settings', ['name', '=', 'recaptcha']);
             $captcha_id = $captcha_id[0]->id;
-            $queries->update('settings', $captcha_id, array(
+            $queries->update('settings', $captcha_id, [
                 'value' => $captcha
-            ));
+            ]);
 
             // Login reCAPTCHA enabled?
             if (Input::get('enable_recaptcha_login') == 1) {
@@ -61,80 +61,81 @@ if (Input::exists()) {
             } else {
                 $captcha = 'false';
             }
-            $captcha_login = $queries->getWhere('settings', array('name', '=', 'recaptcha_login'));
+            $captcha_login = $queries->getWhere('settings', ['name', '=', 'recaptcha_login']);
             $captcha_login = $captcha_login[0]->id;
-            $queries->update('settings', $captcha_login, array(
+            $queries->update('settings', $captcha_login, [
                 'value' => $captcha
-            ));
+            ]);
 
             // reCAPTCHA type
-            $captcha_type = $queries->getWhere('settings', array('name', '=', 'recaptcha_type'));
-            if (!count($captcha_type)) {
-                $queries->create('settings', array(
+            $captcha_type = $queries->getWhere('settings', ['name', '=', 'recaptcha_type']);
+
+            if (! count($captcha_type)) {
+                $queries->create('settings', [
                     'name' => 'recaptcha_type',
                     'value' => Input::get('captcha_type')
-                ));
+                ]);
             } else {
                 $captcha_type = $captcha_type[0]->id;
-                $queries->update('settings', $captcha_type, array(
+                $queries->update('settings', $captcha_type, [
                     'value' => Input::get('captcha_type')
-                ));
+                ]);
             }
 
             // reCAPTCHA key
-            $captcha_id = $queries->getWhere('settings', array('name', '=', 'recaptcha_key'));
+            $captcha_id = $queries->getWhere('settings', ['name', '=', 'recaptcha_key']);
             $captcha_id = $captcha_id[0]->id;
-            $queries->update('settings', $captcha_id, array(
+            $queries->update('settings', $captcha_id, [
                 'value' => htmlspecialchars(Input::get('recaptcha'))
-            ));
+            ]);
 
             // reCAPTCHA secret key
-            $captcha_secret_id = $queries->getWhere('settings', array('name', '=', 'recaptcha_secret'));
+            $captcha_secret_id = $queries->getWhere('settings', ['name', '=', 'recaptcha_secret']);
             $captcha_secret_id = $captcha_secret_id[0]->id;
-            $queries->update('settings', $captcha_secret_id, array(
+            $queries->update('settings', $captcha_secret_id, [
                 'value' => htmlspecialchars(Input::get('recaptcha_secret'))
-            ));
+            ]);
 
             // Registration disabled message
-            $registration_disabled_id = $queries->getWhere('settings', array('name', '=', 'registration_disabled_message'));
+            $registration_disabled_id = $queries->getWhere('settings', ['name', '=', 'registration_disabled_message']);
             $registration_disabled_id = $registration_disabled_id[0]->id;
-            $queries->update('settings', $registration_disabled_id, array(
+            $queries->update('settings', $registration_disabled_id, [
                 'value' => htmlspecialchars(Input::get('message'))
-            ));
+            ]);
 
             try {
-                $queries->update('settings', $verification_id, array(
+                $queries->update('settings', $verification_id, [
                     'value' => $verification
-                ));
+                ]);
             } catch (Exception $e) {
                 $errors[] = $e->getMessage();
             }
 
             // Validation group
-            $validation_group_id = $queries->getWhere('settings', array('name', '=', 'validate_user_action'));
+            $validation_group_id = $queries->getWhere('settings', ['name', '=', 'validate_user_action']);
             $validation_action = $validation_group_id[0]->value;
             $validation_action = json_decode($validation_action, true);
+
             if (isset($validation_action['action']))
                 $validation_action = $validation_action['action'];
-            else
-                $validation_action = 'promote';
+            else $validation_action = 'promote';
             $validation_group_id = $validation_group_id[0]->id;
 
-            $new_value = json_encode(array('action' => $validation_action, 'group' => $_POST['promote_group']));
+            $new_value = json_encode(['action' => $validation_action, 'group' => $_POST['promote_group']]);
 
             try {
-                $queries->update('settings', $validation_group_id, array(
+                $queries->update('settings', $validation_group_id, [
                     'value' => $new_value
-                ));
+                ]);
             } catch (Exception $e) {
                 $errors[] = $e->getMessage();
             }
 
             $cache->setCache('validate_action');
-            $cache->store('validate_action', array('action' => $validation_action, 'group' => $_POST['promote_group']));
+            $cache->store('validate_action', ['action' => $validation_action, 'group' => $_POST['promote_group']]);
         }
 
-        if (!count($errors)) {
+        if (! count($errors)) {
             $success = $language->get('admin', 'registration_settings_updated');
         }
     } else {
@@ -144,46 +145,46 @@ if (Input::exists()) {
 }
 
 // Load modules + template
-Module::loadPage($user, $pages, $cache, $smarty, array($navigation, $cc_nav, $mod_nav), $widgets);
+Module::loadPage($user, $pages, $cache, $smarty, [$navigation, $cc_nav, $mod_nav], $widgets);
 
 if (isset($success))
-    $smarty->assign(array(
+    $smarty->assign([
         'SUCCESS' => $success,
         'SUCCESS_TITLE' => $language->get('general', 'success')
-    ));
+    ]);
 
 if (isset($errors) && count($errors))
-    $smarty->assign(array(
+    $smarty->assign([
         'ERRORS' => $errors,
         'ERRORS_TITLE' => $language->get('general', 'error')
-    ));
+    ]);
 
 // Check if registration is enabled
-$registration_enabled = $queries->getWhere('settings', array('name', '=', 'registration_enabled'));
+$registration_enabled = $queries->getWhere('settings', ['name', '=', 'registration_enabled']);
 $registration_enabled = $registration_enabled[0]->value;
 
 // Is email verification enabled
-$emails = $queries->getWhere('settings', array('name', '=', 'email_verification'));
+$emails = $queries->getWhere('settings', ['name', '=', 'email_verification']);
 $emails = $emails[0]->value;
 
 // Recaptcha
-$captcha_id = $queries->getWhere('settings', array('name', '=', 'recaptcha'));
-$captcha_login = $queries->getWhere('settings', array('name', '=', 'recaptcha_login'));
-$captcha_type = $queries->getWhere('settings', array('name', '=', 'recaptcha_type'));
-$captcha_key = $queries->getWhere('settings', array('name', '=', 'recaptcha_key'));
-$captcha_secret = $queries->getWhere('settings', array('name', '=', 'recaptcha_secret'));
-$registration_disabled_message = $queries->getWhere('settings', array('name', '=', 'registration_disabled_message'));
+$captcha_id = $queries->getWhere('settings', ['name', '=', 'recaptcha']);
+$captcha_login = $queries->getWhere('settings', ['name', '=', 'recaptcha_login']);
+$captcha_type = $queries->getWhere('settings', ['name', '=', 'recaptcha_type']);
+$captcha_key = $queries->getWhere('settings', ['name', '=', 'recaptcha_key']);
+$captcha_secret = $queries->getWhere('settings', ['name', '=', 'recaptcha_secret']);
+$registration_disabled_message = $queries->getWhere('settings', ['name', '=', 'registration_disabled_message']);
 
 // Validation group
-$validation_group = $queries->getWhere('settings', array('name', '=', 'validate_user_action'));
+$validation_group = $queries->getWhere('settings', ['name', '=', 'validate_user_action']);
 $validation_group = $validation_group[0]->value;
 $validation_group = json_decode($validation_group, true);
+
 if (isset($validation_group['group']))
     $validation_group = $validation_group['group'];
-else
-    $validation_group = 1;
+else $validation_group = 1;
 
-$smarty->assign(array(
+$smarty->assign([
     'EMAIL_VERIFICATION' => $language->get('admin', 'email_verification'),
     'EMAIL_VERIFICATION_VALUE' => $emails,
     'CAPTCHA_GENERAL' => $language->get('admin', 'captcha_general'),
@@ -201,11 +202,11 @@ $smarty->assign(array(
     'VALIDATE_PROMOTE_GROUP' => $language->get('admin', 'validation_promote_group'),
     'VALIDATE_PROMOTE_GROUP_INFO' => $language->get('admin', 'validation_promote_group_info'),
     'INFO' => $language->get('general', 'info'),
-    'GROUPS' => $queries->getWhere('groups', array('staff', '=', 0)),
+    'GROUPS' => $queries->getWhere('groups', ['staff', '=', 0]),
     'VALIDATION_GROUP' => $validation_group
-));
+]);
 
-$smarty->assign(array(
+$smarty->assign([
     'PARENT_PAGE' => PARENT_PAGE,
     'DASHBOARD' => $language->get('admin', 'dashboard'),
     'CONFIGURATION' => $language->get('admin', 'configuration'),
@@ -215,14 +216,14 @@ $smarty->assign(array(
     'SUBMIT' => $language->get('general', 'submit'),
     'ENABLE_REGISTRATION' => $language->get('admin', 'enable_registration'),
     'REGISTRATION_ENABLED' => $registration_enabled
-));
+]);
 
 $page_load = microtime(true) - $start;
 define('PAGE_LOAD_TIME', str_replace('{x}', round($page_load, 3), $language->get('general', 'page_loaded_in')));
 
 $template->onPageLoad();
 
-require(ROOT_PATH . '/core/templates/panel_navbar.php');
+require (ROOT_PATH . '/core/templates/panel_navbar.php');
 
 // Display template
 $template->displayTemplate('core/registration.tpl', $smarty);
diff --git a/modules/Core/pages/panel/security.php b/modules/Core/pages/panel/security.php
index 0eb88ea9b37c165de24e81e26b7a2ee2053ba884..c741200718129c022730c838180e2f05b7358fb4 100644
--- a/modules/Core/pages/panel/security.php
+++ b/modules/Core/pages/panel/security.php
@@ -17,57 +17,59 @@ define('PANEL_PAGE', 'security');
 // Define the sort column #, as for group_sync we dont show IP (since its from MC server or Discord bot)
 define('SORT', (isset($_GET['view']) && $_GET['view'] == 'group_sync') ? 1 : 2);
 $page_title = $language->get('admin', 'security');
-require_once(ROOT_PATH . '/core/templates/backend_init.php');
 
-if (!isset($_GET['view'])) {
-    $links = array();
+require_once (ROOT_PATH . '/core/templates/backend_init.php');
+
+if (! isset($_GET['view'])) {
+    $links = [];
 
     if ($user->hasPermission('admincp.security.acp_logins')) {
-        $links[] = array(
+        $links[] = [
             'link' => URL::build('/panel/security/', 'view=acp_logins'),
             'title' => $language->get('admin', 'acp_logins')
-        );
+        ];
     }
 
     if ($user->hasPermission('admincp.security.emails')) {
-        $links[] = array(
+        $links[] = [
             'link' => URL::build('/panel/security/', 'view=emails'),
             'title' => $language->get('admin', 'email_logs')
-        );
+        ];
     }
 
     if ($user->hasPermission('admincp.security.group_sync')) {
-        $links[] = array(
+        $links[] = [
             'link' => URL::build('/panel/security/', 'view=group_sync'),
             'title' => $language->get('admin', 'group_sync_logs')
-        );
+        ];
     }
 
     if ($user->hasPermission('admincp.security.template')) {
-        $links[] = array(
+        $links[] = [
             'link' => URL::build('/panel/security/', 'view=template_changes'),
             'title' => $language->get('admin', 'template_changes')
-        );
+        ];
     }
 
     if ($user->hasPermission('admincp.security.all')) {
-        $links[] = array(
+        $links[] = [
             'link' => URL::build('/panel/security/', 'view=all'),
             'title' => $language->get('admin', 'all_logs')
-        );
+        ];
     }
 
-    $smarty->assign(array(
+    $smarty->assign([
         'PLEASE_SELECT_LOGS' => $language->get('admin', 'please_select_logs'),
         'LINKS' => $links
-    ));
+    ]);
 
     $template_file = 'core/security.tpl';
 } else {
     switch ($_GET['view']) {
         case 'acp_logins':
-            if (!$user->hasPermission('admincp.security.acp_logins')) {
+            if (! $user->hasPermission('admincp.security.acp_logins')) {
                 Redirect::to(URL::build('/panel/security'));
+
                 die();
             }
 
@@ -75,35 +77,36 @@ if (!isset($_GET['view'])) {
             $logs = $queries->orderWhere('logs', 'action = \'acp_login\'', 'time', 'DESC');
 
             $cols = 3;
-            $col_titles = array(
+            $col_titles = [
                 $language->get('user', 'username'),
                 $language->get('admin', 'ip_address'),
                 $language->get('general', 'date')
-            );
-            $rows = array();
+            ];
+            $rows = [];
 
             foreach ($logs as $log) {
                 $target_user = new User($log->user_id);
-				
-                $rows[] = array(
-                    0 => array(
+                
+                $rows[] = [
+                    0 => [
                         'content' => '<a style="' . $target_user->getGroupClass() . '" href="' . URL::build('/panel/user/' . Output::getClean($log->user_id . '-' . $target_user->getDisplayname(true))) . '">' . $target_user->getDisplayname() . '</a>'
-                    ),
-                    1 => array(
+                    ],
+                    1 => [
                         'content' => '<a href="' . URL::build('/panel/users/ip_lookup/', 'ip=' . Output::getClean($log->ip)) . '">' . Output::getClean($log->ip) . '</a>'
-                    ),
-                    2 => array(
+                    ],
+                    2 => [
                         'content' => date('d M Y, H:i', $log->time),
                         'order' => Output::getClean($log->time)
-                    )
-                );
+                    ]
+                ];
             }
 
             break;
 
         case 'template_changes':
-            if (!$user->hasPermission('admincp.security.template')) {
+            if (! $user->hasPermission('admincp.security.template')) {
                 Redirect::to(URL::build('/panel/security'));
+
                 die();
             }
 
@@ -111,39 +114,40 @@ if (!isset($_GET['view'])) {
             $logs = $queries->orderWhere('logs', 'action = \'acp_template_update\'', 'time', 'DESC');
 
             $cols = 4;
-            $col_titles = array(
+            $col_titles = [
                 $language->get('user', 'username'),
                 $language->get('admin', 'ip_address'),
                 $language->get('general', 'date'),
                 $language->get('admin', 'file_changed')
-            );
-            $rows = array();
+            ];
+            $rows = [];
 
             foreach ($logs as $log) {
                 $target_user = new User($log->user_id);
-				
-                $rows[] = array(
-                    0 => array(
+                
+                $rows[] = [
+                    0 => [
                         'content' => '<a style="' . $target_user->getGroupClass() . '" href="' . URL::build('/panel/user/' . Output::getClean($log->user_id . '-' . $target_user->getDisplayname(true))) . '">' . $target_user->getDisplayname() . '</a>'
-                    ),
-                    1 => array(
+                    ],
+                    1 => [
                         'content' => '<a href="' . URL::build('/panel/users/ip_lookup/', 'ip=' . Output::getClean($log->ip)) . '">' . Output::getClean($log->ip) . '</a>'
-                    ),
-                    2 => array(
+                    ],
+                    2 => [
                         'content' => date('d M Y, H:i', $log->time),
                         'order' => Output::getClean($log->time)
-                    ),
-                    3 => array(
+                    ],
+                    3 => [
                         'content' => Output::getClean($log->info)
-                    )
-                );
+                    ]
+                ];
             }
 
             break;
 
         case 'emails':
-            if (!$user->hasPermission('admincp.security.emails')) {
+            if (! $user->hasPermission('admincp.security.emails')) {
                 Redirect::to(URL::build('/panel/security'));
+
                 die();
             }
 
@@ -151,34 +155,36 @@ if (!isset($_GET['view'])) {
             $logs = $queries->orderWhere('logs', 'action = \'acp_email_mass_message\'', 'time', 'DESC');
 
             $cols = 3;
-            $col_titles = array(
+            $col_titles = [
                 $language->get('user', 'username'),
                 $language->get('admin', 'ip_address'),
                 $language->get('general', 'date'),
-            );
-            $rows = array();
+            ];
+            $rows = [];
 
             foreach ($logs as $log) {
                 $target_user = new User($log->user_id);
-				
-                $rows[] = array(
-                    0 => array(
+                
+                $rows[] = [
+                    0 => [
                         'content' => '<a style="' . $target_user->getGroupClass() . '" href="' . URL::build('/panel/user/' . Output::getClean($log->user_id . '-' . $target_user->getDisplayname(true))) . '">' . $target_user->getDisplayname() . '</a>'
-                    ),
-                    1 => array(
+                    ],
+                    1 => [
                         'content' => '<a href="' . URL::build('/panel/users/ip_lookup/', 'ip=' . Output::getClean($log->ip)) . '">' . Output::getClean($log->ip) . '</a>'
-                    ),
-                    2 => array(
+                    ],
+                    2 => [
                         'content' => date('d M Y, H:i', $log->time),
                         'order' => Output::getClean($log->time)
-                    ),
-                );
+                    ],
+                ];
             }
+
             break;
 
         case 'group_sync':
-            if (!$user->hasPermission('admincp.security.group_sync')) {
+            if (! $user->hasPermission('admincp.security.group_sync')) {
                 Redirect::to(URL::build('/panel/security'));
+
                 die();
             }
             
@@ -186,56 +192,60 @@ if (!isset($_GET['view'])) {
             $logs_set = $queries->orderWhere('logs', 'action = \'discord_role_set\' OR action = \'mc_group_sync_set\' ', 'time', 'DESC');
 
             $cols = 5;
-            $col_titles = array(
+            $col_titles = [
                 $language->get('user', 'username'),
                 $language->get('general', 'date'),
                 $language->get('admin', 'action'),
                 $language->get('admin', 'groups_removed'),
                 $language->get('admin', 'groups_added')
-            );
-            $rows = array();
+            ];
+            $rows = [];
 
             foreach ($logs_set as $log) {
                 $target_user = new User($log->user_id);
 
                 $removed = '';
+
                 foreach (json_decode($log->info, true)['removed'] as $r) {
                     $removed .= $r . ', ';
                 }
                 $removed = rtrim($removed, ', ');
 
                 $added = '';
+
                 foreach (json_decode($log->info, true)['added'] as $a) {
                     $added .= $a . ', ';
                 }
                 $added = rtrim($added, ', ');
 
-                $rows[] = array(
-                    0 => array(
+                $rows[] = [
+                    0 => [
                         'content' => '<a style="' . $target_user->getGroupClass() . '" href="' . URL::build('/panel/user/' . Output::getClean($log->user_id . '-' . $target_user->getDisplayname(true))) . '">' . $target_user->getDisplayname() . '</a>'
-                    ),
-                    1 => array(
+                    ],
+                    1 => [
                         'content' => date('d M Y, H:i', $log->time),
                         'order' => Output::getClean($log->time)
-                    ),
-                    2 => array(
+                    ],
+                    2 => [
                         'content' => Output::getClean($log->action)
-                    ),
-                    3 => array(
+                    ],
+                    3 => [
                         'content' => Output::getClean($removed)
-                    ),
-                    4 => array(
+                    ],
+                    4 => [
                         'content' => Output::getClean($added)
-                    )
-                );
+                    ]
+                ];
             }
+
             break;
 
             // TODO: Forums section - get all records which action starts with "forum_"
 
         case 'all':
-            if (!$user->hasPermission('admincp.security.all')) {
+            if (! $user->hasPermission('admincp.security.all')) {
                 Redirect::to(URL::build('/panel/security'));
+
                 die();
             }
 
@@ -243,88 +253,90 @@ if (!isset($_GET['view'])) {
             $logs = $queries->orderWhere('logs', 'id <> 0', 'time', 'DESC');
 
             $cols = 5;
-            $col_titles = array(
+            $col_titles = [
                 $language->get('user', 'username'),
                 $language->get('admin', 'ip_address'),
                 $language->get('general', 'date'),
                 $language->get('admin', 'action'),
                 $language->get('admin', 'action_info')
-            );
-            $rows = array();
+            ];
+            $rows = [];
 
             foreach ($logs as $log) {
                 $target_user = new User($log->user_id);
-				
-                $rows[] = array(
-                    0 => array(
+                
+                $rows[] = [
+                    0 => [
                         'content' => '<a style="' . $target_user->getGroupClass() . '" href="' . URL::build('/panel/user/' . Output::getClean($log->user_id . '-' . $target_user->getDisplayname(true))) . '">' . $target_user->getDisplayname() . '</a>'
-                    ),
-                    1 => array(
+                    ],
+                    1 => [
                         'content' => '<a href="' . URL::build('/panel/users/ip_lookup/', 'ip=' . Output::getClean($log->ip)) . '">' . Output::getClean($log->ip) . '</a>'
-                    ),
-                    2 => array(
+                    ],
+                    2 => [
                         'content' => date('d M Y, H:i', $log->time),
                         'order' => Output::getClean($log->time)
-                    ),
-                    3 => array(
+                    ],
+                    3 => [
                         'content' => Output::getClean($log->action)
-                    ),
-                    4 => array(
+                    ],
+                    4 => [
                         'content' => Output::getClean($log->info)
-                    )
-                );
+                    ]
+                ];
             }
 
             break;
 
         default:
             Redirect::to(URL::build('/panel/security'));
+
             die();
+
             break;
     }
 
-    $smarty->assign(array(
+    $smarty->assign([
         'BACK' => $language->get('general', 'back'),
         'BACK_LINK' => URL::build('/panel/security'),
         'LOG_TITLE' => $log_title,
         'COLS' => $cols,
         'COL_TITLES' => $col_titles,
         'ROWS' => $rows
-    ));
+    ]);
 
     $template_file = 'core/security_view.tpl';
 }
 
 // Load modules + template
-Module::loadPage($user, $pages, $cache, $smarty, array($navigation, $cc_nav, $mod_nav), $widgets);
+Module::loadPage($user, $pages, $cache, $smarty, [$navigation, $cc_nav, $mod_nav], $widgets);
 
 if (isset($success))
-    $smarty->assign(array(
+    $smarty->assign([
         'SUCCESS' => $success,
         'SUCCESS_TITLE' => $language->get('general', 'success')
-    ));
+    ]);
 
 if (isset($errors) && count($errors))
-    $smarty->assign(array(
+    $smarty->assign([
         'ERRORS' => $errors,
         'ERRORS_TITLE' => $language->get('general', 'error')
-    ));
+    ]);
 
-$smarty->assign(array(
+$smarty->assign([
     'PARENT_PAGE' => PARENT_PAGE,
     'DASHBOARD' => $language->get('admin', 'dashboard'),
     'SECURITY' => $language->get('admin', 'security'),
     'PAGE' => PANEL_PAGE,
     'TOKEN' => Token::get(),
     'SUBMIT' => $language->get('general', 'submit')
-));
+]);
 
 $page_load = microtime(true) - $start;
 define('PAGE_LOAD_TIME', str_replace('{x}', round($page_load, 3), $language->get('general', 'page_loaded_in')));
 
 $template->onPageLoad();
 
-require(ROOT_PATH . '/core/templates/panel_navbar.php');
+require (ROOT_PATH . '/core/templates/panel_navbar.php');
 
 // Display template
 $template->displayTemplate($template_file, $smarty);
diff --git a/modules/Core/pages/panel/seo.php b/modules/Core/pages/panel/seo.php
index 1bf8fc90f0b9f6ac4df0108ad30363244b982146..c4c165c069233a73ffb1b6d5acc5034da9f616a1 100644
--- a/modules/Core/pages/panel/seo.php
+++ b/modules/Core/pages/panel/seo.php
@@ -15,16 +15,18 @@ define('PAGE', 'panel');
 define('PARENT_PAGE', 'core_configuration');
 define('PANEL_PAGE', 'seo');
 $page_title = $language->get('admin', 'seo');
-require_once(ROOT_PATH . '/core/templates/backend_init.php');
+
+require_once (ROOT_PATH . '/core/templates/backend_init.php');
 
 $timeago = new Timeago(TIMEZONE);
 
 // Load modules + template
-Module::loadPage($user, $pages, $cache, $smarty, array($navigation, $cc_nav, $mod_nav), $widgets);
+Module::loadPage($user, $pages, $cache, $smarty, [$navigation, $cc_nav, $mod_nav], $widgets);
+
+$errors = [];
 
-$errors = array();
-if (!is_dir(ROOT_PATH . '/cache/sitemaps')) {
-    if (!is_writable(ROOT_PATH . '/cache')) {
+if (! is_dir(ROOT_PATH . '/cache/sitemaps')) {
+    if (! is_writable(ROOT_PATH . '/cache')) {
         $errors[] = $language->get('admin', 'cache_not_writable');
     } else {
         mkdir(ROOT_PATH . '/cache/sitemaps');
@@ -32,25 +34,24 @@ if (!is_dir(ROOT_PATH . '/cache/sitemaps')) {
     }
 }
 
-if(!isset($_GET['metadata'])){
+if (! isset($_GET['metadata'])){
     // Deal with input
-    if(Input::exists()){
-        if(Token::check(Input::get('token'))){
-            if(Input::get('type') == 'sitemap') {
-                require_once(ROOT_PATH . '/core/includes/sitemapphp/Sitemap.php');
+    if (Input::exists()){
+        if (Token::check(Input::get('token'))){
+            if (Input::get('type') == 'sitemap') {
+                require_once (ROOT_PATH . '/core/includes/sitemapphp/Sitemap.php');
                 $sitemap = new SitemapPHP\Sitemap(rtrim(Util::getSelfURL(), '/'));
                 $sitemap->setPath(ROOT_PATH . '/cache/sitemaps/');
 
                 $methods = $pages->getSitemapMethods();
-                if(count($methods)){
-                    foreach($methods as $file => $method){
-                        if(file_exists($file)){
-                            require_once($file);
 
-                            call_user_func($method, $sitemap, $cache);
+                if (count($methods)){
+                    foreach ($methods as $file => $method){
+                        if (file_exists($file)){
+                            require_once ($file);
 
-                        } else
-                            $errors[] = str_replace('{x}', Output::getClean($file), $language->get('admin', 'unable_to_load_sitemap_file_x'));
+                            call_user_func($method, $sitemap, $cache);
+                        } else $errors[] = str_replace('{x}', Output::getClean($file), $language->get('admin', 'unable_to_load_sitemap_file_x'));
                     }
                 }
 
@@ -60,7 +61,7 @@ if(!isset($_GET['metadata'])){
                 $cache->store('updated', date('d M Y, H:i'));
 
                 $success = $language->get('admin', 'sitemap_generated');
-            } else if(Input::get('type') == 'google_analytics') {
+            } else if (Input::get('type') == 'google_analytics') {
                 $configuration->set('Core', 'ga_script', Input::get('analyticsid'));
 
                 $success = $language->get('admin', 'settings_updated_successfully');
@@ -70,25 +71,24 @@ if(!isset($_GET['metadata'])){
         }
     }
 
-    if (!is_writable(ROOT_PATH . '/cache/sitemaps')) {
+    if (! is_writable(ROOT_PATH . '/cache/sitemaps')) {
         $errors[] = $language->get('admin', 'sitemap_not_writable');
     } else {
         if (file_exists(ROOT_PATH . '/cache/sitemaps/sitemap-index.xml')) {
             $cache->setCache('sitemap_cache');
-            if($cache->isCached('updated')){
+
+            if ($cache->isCached('updated')){
                 $updated = $cache->retrieve('updated');
                 $updated = $timeago->inWords($updated, $language->getTimeLanguage());
-            } else
-                $updated = $language->get('admin', 'unknown');
+            } else $updated = $language->get('admin', 'unknown');
 
-            $smarty->assign(array(
+            $smarty->assign([
                 'SITEMAP_LAST_GENERATED' => str_replace('{x}', $updated, $language->get('admin', 'sitemap_last_generated_x')),
                 'SITEMAP_LINK' => (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/cache/sitemaps/sitemap-index.xml',
                 'SITEMAP_FULL_LINK' => rtrim(Util::getSelfURL(), '/') . (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/cache/sitemaps/sitemap-index.xml',
                 'DOWNLOAD_SITEMAP' => $language->get('admin', 'download_sitemap'),
                 'LINK' => $language->get('admin', 'sitemap_link')
-            ));
-
+            ]);
         } else {
             $smarty->assign('SITEMAP_NOT_GENERATED', $language->get('admin', 'sitemap_not_generated_yet'));
         }
@@ -97,55 +97,53 @@ if(!isset($_GET['metadata'])){
     $template_file = 'core/seo.tpl';
 } else {
     $page = $pages->getPageById($_GET['metadata']);
-    if(is_null($page)){
+
+    if (is_null($page)){
         Redirect::to(URL::build('/panel/core/seo'));
+
         die();
     }
 
-    $page_metadata = $queries->getWhere('page_descriptions', array('page', '=', $page['key']));
-    if(Input::exists()){
-        if(Token::check(Input::get('token'))){
-            if(isset($_POST['description'])){
-                if(strlen($_POST['description']) > 500){
+    $page_metadata = $queries->getWhere('page_descriptions', ['page', '=', $page['key']]);
+
+    if (Input::exists()){
+        if (Token::check(Input::get('token'))){
+            if (isset($_POST['description'])){
+                if (strlen($_POST['description']) > 500){
                     $errors[] = $language->get('admin', 'description_max_500');
                 } else {
                     $description = $_POST['description'];
                 }
-            } else
-                $description = null;
+            } else $description = null;
 
-            if(isset($_POST['keywords']))
+            if (isset($_POST['keywords']))
                 $keywords = $_POST['keywords'];
-            else
-                $keywords = null;
+            else $keywords = null;
 
-            if(!count($errors)){
-                if(count($page_metadata)){
+            if (! count($errors)){
+                if (count($page_metadata)){
                     $page_id = $page_metadata[0]->id;
 
-                    $queries->update('page_descriptions', $page_id, array(
+                    $queries->update('page_descriptions', $page_id, [
                         'description' => $description,
                         'tags' => $keywords
-                    ));
-
+                    ]);
                 } else {
-                    $queries->create('page_descriptions', array(
+                    $queries->create('page_descriptions', [
                         'page' => $page['key'],
                         'description' => $description,
                         'tags' => $keywords
-                    ));
+                    ]);
                 }
 
-                $page_metadata = $queries->getWhere('page_descriptions', array('page', '=', $page['key']));
+                $page_metadata = $queries->getWhere('page_descriptions', ['page', '=', $page['key']]);
 
                 $success = $language->get('admin', 'metadata_updated_successfully');
-
             }
-        } else
-            $errors[] = $language->get('general', 'invalid_token');
+        } else $errors[] = $language->get('general', 'invalid_token');
     }
 
-    if(count($page_metadata)){
+    if (count($page_metadata)){
         $description = Output::getClean($page_metadata[0]->description);
         $tags = Output::getClean($page_metadata[0]->tags);
     } else {
@@ -153,7 +151,7 @@ if(!isset($_GET['metadata'])){
         $tags = '';
     }
 
-    $smarty->assign(array(
+    $smarty->assign([
         'BACK' => $language->get('general', 'back'),
         'BACK_LINK' => URL::build('/panel/core/seo'),
         'EDITING_PAGE' => str_replace('{x}', Output::getClean($page['key']), $language->get('admin', 'editing_page_x')),
@@ -161,24 +159,24 @@ if(!isset($_GET['metadata'])){
         'DESCRIPTION_VALUE' => $description,
         'KEYWORDS' => $language->get('admin', 'keywords'),
         'KEYWORDS_VALUE' => $tags
-    ));
+    ]);
 
     $template_file = 'core/seo_metadata_edit.tpl';
 }
 
-if(isset($success))
-    $smarty->assign(array(
+if (isset($success))
+    $smarty->assign([
         'SUCCESS' => $success,
         'SUCCESS_TITLE' => $language->get('general', 'success')
-    ));
+    ]);
 
-if(isset($errors) && count($errors))
-    $smarty->assign(array(
+if (isset($errors) && count($errors))
+    $smarty->assign([
         'ERRORS' => $errors,
         'ERRORS_TITLE' => $language->get('general', 'error')
-    ));
+    ]);
 
-$smarty->assign(array(
+$smarty->assign([
     'PARENT_PAGE' => PARENT_PAGE,
     'DASHBOARD' => $language->get('admin', 'dashboard'),
     'CONFIGURATION' => $language->get('admin', 'configuration'),
@@ -196,14 +194,14 @@ $smarty->assign(array(
     'SUBMIT' => $language->get('general', 'submit'),
     'SITEMAP' => $language->get('admin', 'sitemap'),
     'PAGE_METADATA' => $language->get('admin', 'page_metadata'),
-));
+]);
 
 $page_load = microtime(true) - $start;
 define('PAGE_LOAD_TIME', str_replace('{x}', round($page_load, 3), $language->get('general', 'page_loaded_in')));
 
 $template->onPageLoad();
 
-require(ROOT_PATH . '/core/templates/panel_navbar.php');
+require (ROOT_PATH . '/core/templates/panel_navbar.php');
 
 // Display template
 $template->displayTemplate($template_file, $smarty);
diff --git a/modules/Core/pages/panel/social_media.php b/modules/Core/pages/panel/social_media.php
index 89098e50f39b284d8d3ab8e2f71953ae94a11650..33e03eefa8f6b2f174f2df02b80b435f431e6810 100644
--- a/modules/Core/pages/panel/social_media.php
+++ b/modules/Core/pages/panel/social_media.php
@@ -15,65 +15,66 @@ define('PAGE', 'panel');
 define('PARENT_PAGE', 'core_configuration');
 define('PANEL_PAGE', 'social_media');
 $page_title = $language->get('admin', 'social_media');
-require_once(ROOT_PATH . '/core/templates/backend_init.php');
+
+require_once (ROOT_PATH . '/core/templates/backend_init.php');
 
 // Deal with input
 if (Input::exists()) {
-    $errors = array();
+    $errors = [];
 
     if (Token::check()) {
         // Update database values
         // Youtube URL
-        $youtube_url_id = $queries->getWhere('settings', array('name', '=', 'youtube_url'));
+        $youtube_url_id = $queries->getWhere('settings', ['name', '=', 'youtube_url']);
         $youtube_url_id = $youtube_url_id[0]->id;
 
-        $queries->update('settings', $youtube_url_id, array(
+        $queries->update('settings', $youtube_url_id, [
             'value' => Output::getClean(Input::get('youtubeurl'))
-        ));
+        ]);
 
         // Update cache
         $cache->setCache('social_media');
         $cache->store('youtube', Output::getClean(Input::get('youtubeurl')));
 
         // Twitter URL
-        $twitter_url_id = $queries->getWhere('settings', array('name', '=', 'twitter_url'));
+        $twitter_url_id = $queries->getWhere('settings', ['name', '=', 'twitter_url']);
         $twitter_url_id = $twitter_url_id[0]->id;
 
-        $queries->update('settings', $twitter_url_id, array(
+        $queries->update('settings', $twitter_url_id, [
             'value' => Output::getClean(Input::get('twitterurl'))
-        ));
+        ]);
 
         $cache->store('twitter', Output::getClean(Input::get('twitterurl')));
 
         // Twitter dark theme
-        $twitter_dark_theme = $queries->getWhere('settings', array('name', '=', 'twitter_style'));
+        $twitter_dark_theme = $queries->getWhere('settings', ['name', '=', 'twitter_style']);
         $twitter_dark_theme = $twitter_dark_theme[0]->id;
 
         if (isset($_POST['twitter_dark_theme']) && $_POST['twitter_dark_theme'] == 1) $theme = 'dark';
         else $theme = 'light';
 
-        $queries->update('settings', $twitter_dark_theme, array(
+        $queries->update('settings', $twitter_dark_theme, [
             'value' => $theme
-        ));
+        ]);
 
         $cache->store('twitter_theme', $theme);
 
         // Discord ID
-        $discord_id = $queries->getWhere('settings', array('name', '=', 'discord'));
+        $discord_id = $queries->getWhere('settings', ['name', '=', 'discord']);
         $discord_id = $discord_id[0]->id;
 
-        $queries->update('settings', $discord_id, array(
+        $queries->update('settings', $discord_id, [
             'value' => Output::getClean(Input::get('discordid'))
-        ));
+        ]);
 
         $cache->store('discord', Output::getClean(Input::get('discordid')));
 
         // Facebook URL
-        $fb_url_id = $queries->getWhere('settings', array('name', '=', 'fb_url'));
+        $fb_url_id = $queries->getWhere('settings', ['name', '=', 'fb_url']);
         $fb_url_id = $fb_url_id[0]->id;
-        $queries->update('settings', $fb_url_id, array(
+        $queries->update('settings', $fb_url_id, [
             'value' => Output::getClean(Input::get('fburl'))
-        ));
+        ]);
 
         $cache->store('facebook', Output::getClean(Input::get('fburl')));
 
@@ -85,28 +86,28 @@ if (Input::exists()) {
 }
 
 // Load modules + template
-Module::loadPage($user, $pages, $cache, $smarty, array($navigation, $cc_nav, $mod_nav), $widgets);
+Module::loadPage($user, $pages, $cache, $smarty, [$navigation, $cc_nav, $mod_nav], $widgets);
 
 if (isset($success))
-    $smarty->assign(array(
+    $smarty->assign([
         'SUCCESS' => $success,
         'SUCCESS_TITLE' => $language->get('general', 'success')
-    ));
+    ]);
 
 if (isset($errors) && count($errors))
-    $smarty->assign(array(
+    $smarty->assign([
         'ERRORS' => $errors,
         'ERRORS_TITLE' => $language->get('general', 'error')
-    ));
+    ]);
 
 // Get values from database
-$youtube_url = $queries->getWhere('settings', array('name', '=', 'youtube_url'));
-$twitter_url = $queries->getWhere('settings', array('name', '=', 'twitter_url'));
-$twitter_style = $queries->getWhere('settings', array('name', '=', 'twitter_style'));
-$discord = $queries->getWhere('settings', array('name', '=', 'discord'));
-$fb_url = $queries->getWhere('settings', array('name', '=', 'fb_url'));
+$youtube_url = $queries->getWhere('settings', ['name', '=', 'youtube_url']);
+$twitter_url = $queries->getWhere('settings', ['name', '=', 'twitter_url']);
+$twitter_style = $queries->getWhere('settings', ['name', '=', 'twitter_style']);
+$discord = $queries->getWhere('settings', ['name', '=', 'discord']);
+$fb_url = $queries->getWhere('settings', ['name', '=', 'fb_url']);
 
-$smarty->assign(array(
+$smarty->assign([
     'PARENT_PAGE' => PARENT_PAGE,
     'DASHBOARD' => $language->get('admin', 'dashboard'),
     'CONFIGURATION' => $language->get('admin', 'configuration'),
@@ -124,14 +125,14 @@ $smarty->assign(array(
     'DISCORD_SERVER_ID_VALUE' => Output::getClean($discord[0]->value),
     'FACEBOOK_URL' => $language->get('admin', 'facebook_url'),
     'FACEBOOK_URL_VALUE' => Output::getClean($fb_url[0]->value),
-));
+]);
 
 $page_load = microtime(true) - $start;
 define('PAGE_LOAD_TIME', str_replace('{x}', round($page_load, 3), $language->get('general', 'page_loaded_in')));
 
 $template->onPageLoad();
 
-require(ROOT_PATH . '/core/templates/panel_navbar.php');
+require (ROOT_PATH . '/core/templates/panel_navbar.php');
 
 // Display template
 $template->displayTemplate('core/social_media.tpl', $smarty);
diff --git a/modules/Core/pages/panel/templates.php b/modules/Core/pages/panel/templates.php
index d469eb668353ee5f43365cf03cb50bd0ccd866cb..5b224c3429aad063d4437214a583ee4234e430f6 100644
--- a/modules/Core/pages/panel/templates.php
+++ b/modules/Core/pages/panel/templates.php
@@ -15,63 +15,67 @@ define('PAGE', 'panel');
 define('PARENT_PAGE', 'layout');
 define('PANEL_PAGE', 'template');
 $page_title = $language->get('admin', 'templates');
-require_once(ROOT_PATH . '/core/templates/backend_init.php');
 
-if (!isset($_GET['action'])) {
+require_once (ROOT_PATH . '/core/templates/backend_init.php');
+
+if (! isset($_GET['action'])) {
     // Get all templates
-    $templates = $queries->getWhere('templates', array('id', '<>', 0));
+    $templates = $queries->getWhere('templates', ['id', '<>', 0]);
 
     // Get all active templates
-    $active_templates = $queries->getWhere('templates', array('enabled', '=', 1));
+    $active_templates = $queries->getWhere('templates', ['enabled', '=', 1]);
 
     $current_template = $template;
 
-    $templates_template = array();
+    $templates_template = [];
 
-    $loaded_templates = array();
+    $loaded_templates = [];
 
     foreach ($templates as $item) {
         // Prevent the white screen error and delete template with duplicate name
         if (in_array($item->name, $loaded_templates)) {
-            $queries->delete('templates', array('id', '=', $item->id));
+            $queries->delete('templates', ['id', '=', $item->id]);
+
             continue;
-        } else $loaded_templates[] = $item->name;
+        }  $loaded_templates[] = $item->name;
 
-        $template_path = join(DIRECTORY_SEPARATOR, array(ROOT_PATH, 'custom', 'templates', htmlspecialchars($item->name), 'template.php'));
+        $template_path = join(DIRECTORY_SEPARATOR, [ROOT_PATH, 'custom', 'templates', htmlspecialchars($item->name), 'template.php']);
 
         if (file_exists($template_path))
-            require($template_path);
+            require ($template_path);
         else {
-            $queries->delete('templates', array('id', '=', $item->id));
+            $queries->delete('templates', ['id', '=', $item->id]);
+
             continue;
         }
 
-        $templates_template[] = array(
+        $templates_template[] = [
             'name' => Output::getClean($item->name),
             'version' => Output::getClean($template->getVersion()),
             'author' => $template->getAuthor(),
             'author_x' => str_replace('{x}', $template->getAuthor(), $language->get('admin', 'author_x')),
-            'version_mismatch' => (($template->getNamelessVersion() != NAMELESS_VERSION) ? str_replace(array('{x}', '{y}'), array(Output::getClean($template->getNamelessVersion()), NAMELESS_VERSION), $language->get('admin', 'template_outdated')) : false),
+            'version_mismatch' => (($template->getNamelessVersion() != NAMELESS_VERSION) ? str_replace(['{x}', '{y}'], [Output::getClean($template->getNamelessVersion()), NAMELESS_VERSION], $language->get('admin', 'template_outdated')) : false),
             'enabled' => $item->enabled,
             'default_warning' => (Output::getClean($item->name) == 'Default') ? $language->get('admin', 'template_not_supported') : null,
             'activate_link' => (($item->enabled) ? null : URL::build('/panel/core/templates/', 'action=activate&template=' . Output::getClean($item->id))),
-            'delete_link' => ((!$user->hasPermission('admincp.styles.templates.edit') || $item->id == 1 || $item->enabled) ? null : URL::build('/panel/core/templates/', 'action=delete&template=' . Output::getClean($item->id))),
+            'delete_link' => ((! $user->hasPermission('admincp.styles.templates.edit') || $item->id == 1 || $item->enabled) ? null : URL::build('/panel/core/templates/', 'action=delete&template=' . Output::getClean($item->id))),
             'default' => $item->is_default,
-            'deactivate_link' => (($item->enabled && count($active_templates) > 1 && !$item->is_default) ? URL::build('/panel/core/templates/', 'action=deactivate&template=' . Output::getClean($item->id)) : null),
-            'default_link' => (($item->enabled && !$item->is_default) ? URL::build('/panel/core/templates/', 'action=make_default&template=' . Output::getClean($item->id)) : null),
+            'deactivate_link' => (($item->enabled && count($active_templates) > 1 && ! $item->is_default) ? URL::build('/panel/core/templates/', 'action=deactivate&template=' . Output::getClean($item->id)) : null),
+            'default_link' => (($item->enabled && ! $item->is_default) ? URL::build('/panel/core/templates/', 'action=make_default&template=' . Output::getClean($item->id)) : null),
             'edit_link' => ($user->hasPermission('admincp.styles.templates.edit') ? URL::build('/panel/core/templates/', 'action=edit&template=' . Output::getClean($item->id)) : null),
             'settings_link' => ($template->getSettings() && $user->hasPermission('admincp.styles.templates.edit') ? URL::build('/panel/core/templates/', 'action=settings&template=' . Output::getClean($item->id)) : null)
-        );
+        ];
     }
 
     $template = $current_template;
 
     // Get templates from Nameless website
     $cache->setCache('all_templates');
+
     if ($cache->isCached('all_templates')) {
         $all_templates = $cache->retrieve('all_templates');
     } else {
-        $all_templates = array();
+        $all_templates = [];
 
         $ch = curl_init();
         curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
@@ -93,7 +97,7 @@ if (!isset($_GET['action'])) {
             $timeago = new Timeago(TIMEZONE);
 
             foreach ($all_templates_query as $item) {
-                $all_templates[] = array(
+                $all_templates[] = [
                     'name' => Output::getClean($item->name),
                     'description' => Output::getPurified($item->description),
                     'description_short' => Util::truncate(Output::getPurified($item->description)),
@@ -112,7 +116,7 @@ if (!isset($_GET['action'])) {
                     'rating_full' => str_replace('{x}', Output::getClean($item->rating * 2) . '/100', $language->get('admin', 'rating_x')),
                     'downloads_full' => str_replace('{x}', Output::getClean($item->downloads), $language->get('admin', 'downloads_x')),
                     'views_full' => str_replace('{x}', Output::getClean($item->views), $language->get('admin', 'views_x'))
-                );
+                ];
             }
 
             $cache->store('all_templates', $all_templates, 3600);
@@ -122,11 +126,11 @@ if (!isset($_GET['action'])) {
     if (count($all_templates)) {
         if (count($all_templates) > 3) {
             $rand_keys = array_rand($all_templates, 3);
-            $all_templates = array($all_templates[$rand_keys[0]], $all_templates[$rand_keys[1]], $all_templates[$rand_keys[2]]);
+            $all_templates = [$all_templates[$rand_keys[0]], $all_templates[$rand_keys[1]], $all_templates[$rand_keys[2]]];
         }
     }
 
-    $smarty->assign(array(
+    $smarty->assign([
         'WARNING' => $language->get('admin', 'warning'),
         'ACTIVATE' => $language->get('admin', 'activate'),
         'DEACTIVATE' => $language->get('admin', 'deactivate'),
@@ -152,7 +156,7 @@ if (!isset($_GET['action'])) {
         'TEMPLATE' => $language->get('admin', 'template'),
         'STATS' => $language->get('admin', 'stats'),
         'ACTIONS' => $language->get('general', 'actions')
-    ));
+    ]);
 
     $template_file = 'core/templates.tpl';
 } else {
@@ -161,26 +165,30 @@ if (!isset($_GET['action'])) {
             // Install new template
             // Scan template directory for new templates
             $directories = glob(ROOT_PATH . DIRECTORY_SEPARATOR . 'custom' . DIRECTORY_SEPARATOR . 'templates' . DIRECTORY_SEPARATOR . '*', GLOB_ONLYDIR);
+
             foreach ($directories as $directory) {
                 $folders = explode(DIRECTORY_SEPARATOR, $directory);
 
                 // Is it already in the database?
-                $exists = $queries->getWhere('templates', array('name', '=', htmlspecialchars($folders[count($folders) - 1])));
-                if (!count($exists) && file_exists(ROOT_PATH . DIRECTORY_SEPARATOR . 'custom' . DIRECTORY_SEPARATOR . 'templates' . DIRECTORY_SEPARATOR . str_replace(array('../', '/', '..'), '', $folders[count($folders) - 1]) . DIRECTORY_SEPARATOR . 'template.php')) {
+                $exists = $queries->getWhere('templates', ['name', '=', htmlspecialchars($folders[count($folders) - 1])]);
+
+                if (! count($exists) && file_exists(ROOT_PATH . DIRECTORY_SEPARATOR . 'custom' . DIRECTORY_SEPARATOR . 'templates' . DIRECTORY_SEPARATOR . str_replace(['../', '/', '..'], '', $folders[count($folders) - 1]) . DIRECTORY_SEPARATOR . 'template.php')) {
                     $template = null;
-                    require_once(ROOT_PATH . DIRECTORY_SEPARATOR . 'custom' . DIRECTORY_SEPARATOR . 'templates' . DIRECTORY_SEPARATOR . str_replace(array('../', '/', '..'), '', $folders[count($folders) - 1]) . DIRECTORY_SEPARATOR . 'template.php');
+
+                    require_once (ROOT_PATH . DIRECTORY_SEPARATOR . 'custom' . DIRECTORY_SEPARATOR . 'templates' . DIRECTORY_SEPARATOR . str_replace(['../', '/', '..'], '', $folders[count($folders) - 1]) . DIRECTORY_SEPARATOR . 'template.php');
 
                     if ($template instanceof TemplateBase) {
                         // No, add it now
-                        $queries->create('templates', array(
+                        $queries->create('templates', [
                             'name' => htmlspecialchars($folders[count($folders) - 1])
-                        ));
+                        ]);
                     }
                 }
             }
 
             Session::flash('admin_templates', $language->get('admin', 'templates_installed_successfully'));
             Redirect::to(URL::build('/panel/core/templates'));
+
             die();
 
             break;
@@ -188,25 +196,27 @@ if (!isset($_GET['action'])) {
         case 'activate':
             // Activate a template
             // Ensure it exists
-            $template = $queries->getWhere('templates', array('id', '=', $_GET['template']));
-            if (!count($template)) {
+            $template = $queries->getWhere('templates', ['id', '=', $_GET['template']]);
+
+            if (! count($template)) {
                 // Doesn't exist
                 Redirect::to(URL::build('/panel/core/templates/'));
+
                 die();
             }
-            $name = str_replace(array('../', '/', '..'), '', $template[0]->name);
+            $name = str_replace(['../', '/', '..'], '', $template[0]->name);
 
             if (file_exists(ROOT_PATH . DIRECTORY_SEPARATOR . 'custom' . DIRECTORY_SEPARATOR . 'templates' . DIRECTORY_SEPARATOR . $name . DIRECTORY_SEPARATOR . 'template.php')) {
                 $id = $template[0]->id;
                 $template = null;
 
-                require_once(ROOT_PATH . DIRECTORY_SEPARATOR . 'custom' . DIRECTORY_SEPARATOR . 'templates' . DIRECTORY_SEPARATOR . $name . DIRECTORY_SEPARATOR . 'template.php');
+                require_once (ROOT_PATH . DIRECTORY_SEPARATOR . 'custom' . DIRECTORY_SEPARATOR . 'templates' . DIRECTORY_SEPARATOR . $name . DIRECTORY_SEPARATOR . 'template.php');
 
                 if ($template instanceof TemplateBase) {
                     // Activate the template
-                    $queries->update('templates', $id, array(
+                    $queries->update('templates', $id, [
                         'enabled' => 1
-                    ));
+                    ]);
 
                     // Session
                     Session::flash('admin_templates', $language->get('admin', 'template_activated'));
@@ -217,6 +227,7 @@ if (!isset($_GET['action'])) {
             }
 
             Redirect::to(URL::build('/panel/core/templates/'));
+
             die();
 
             break;
@@ -224,30 +235,34 @@ if (!isset($_GET['action'])) {
         case 'deactivate':
             // Deactivate a template
             // Ensure it exists
-            $template = $queries->getWhere('templates', array('id', '=', $_GET['template']));
-            if (!count($template)) {
+            $template = $queries->getWhere('templates', ['id', '=', $_GET['template']]);
+
+            if (! count($template)) {
                 // Doesn't exist
                 Redirect::to(URL::build('/panel/core/templates/'));
+
                 die();
             }
 
             $template = $template[0]->id;
 
             // Deactivate the template
-            $queries->update('templates', $template, array(
+            $queries->update('templates', $template, [
                 'enabled' => 0
-            ));
+            ]);
 
             // Session
             Session::flash('admin_templates', $language->get('admin', 'template_deactivated'));
             Redirect::to(URL::build('/panel/core/templates'));
+
             die();
 
             break;
 
         case 'delete':
-            if (!isset($_GET['template'])) {
+            if (! isset($_GET['template'])) {
                 Redirect::to('/panel/core/templates');
+
                 die();
             }
 
@@ -255,32 +270,37 @@ if (!isset($_GET['action'])) {
 
             try {
                 // Ensure template is not default or active
-                $template = $queries->getWhere('templates', array('id', '=', $item));
+                $template = $queries->getWhere('templates', ['id', '=', $item]);
+
                 if (count($template)) {
                     $template = $template[0];
+
                     if ($template->name == 'DefaultRevamp' || $template->id == 1 || $template->enabled == 1 || $template->is_default == 1) {
                         Redirect::to(URL::build('/panel/core/templates'));
+
                         die();
                     }
 
                     $item = $template->name;
                 } else {
                     Redirect::to(URL::build('/panel/core/templates'));
+
                     die();
                 }
 
-                if (!Util::recursiveRemoveDirectory(ROOT_PATH . '/custom/templates/' . $item))
+                if (! Util::recursiveRemoveDirectory(ROOT_PATH . '/custom/templates/' . $item))
                     Session::flash('admin_templates_error', $language->get('admin', 'unable_to_delete_template'));
-                else
-                    Session::flash('admin_templates', $language->get('admin', 'template_deleted_successfully'));
+                else Session::flash('admin_templates', $language->get('admin', 'template_deleted_successfully'));
 
                 // Delete from database
-                $queries->delete('templates', array('name', '=', $item));
+                $queries->delete('templates', ['name', '=', $item]);
                 Redirect::to(URL::build('/panel/core/templates'));
+
                 die();
             } catch (Exception $e) {
                 Session::flash('admin_templates_error', $e->getMessage());
                 Redirect::to(URL::build('/panel/core/templates'));
+
                 die();
             }
 
@@ -289,30 +309,32 @@ if (!isset($_GET['action'])) {
         case 'make_default':
             // Make a template default
             // Ensure it exists
-            $new_default = $queries->getWhere('templates', array('id', '=', $_GET['template']));
-            if (!count($new_default)) {
+            $new_default = $queries->getWhere('templates', ['id', '=', $_GET['template']]);
+
+            if (! count($new_default)) {
                 // Doesn't exist
                 Redirect::to(URL::build('/panel/core/templates/'));
+
                 die();
-            } else {
+            }
                 $new_default_template = $new_default[0]->name;
                 $new_default = $new_default[0]->id;
-            }
-
+            
             // Get current default template
-            $current_default = $queries->getWhere('templates', array('is_default', '=', 1));
+            $current_default = $queries->getWhere('templates', ['is_default', '=', 1]);
+
             if (count($current_default)) {
                 $current_default = $current_default[0]->id;
                 // No longer default
-                $queries->update('templates', $current_default, array(
+                $queries->update('templates', $current_default, [
                     'is_default' => 0
-                ));
+                ]);
             }
 
             // Make selected template default
-            $queries->update('templates', $new_default, array(
+            $queries->update('templates', $new_default, [
                 'is_default' => 1
-            ));
+            ]);
 
             // Cache
             $cache->setCache('templatecache');
@@ -321,49 +343,55 @@ if (!isset($_GET['action'])) {
             // Session
             Session::flash('admin_templates', str_replace('{x}', Output::getClean($new_default_template), $language->get('admin', 'default_template_set')));
             Redirect::to(URL::build('/panel/core/templates/'));
+
             die();
 
             break;
 
         case 'settings':
             // Editing template settings
-            if (!$user->hasPermission('admincp.styles.templates.edit')) {
+            if (! $user->hasPermission('admincp.styles.templates.edit')) {
                 Redirect::to(URL::build('/panel/core/templates'));
+
                 die();
             }
 
             $current_template = $template;
 
             // Get the template
-            $template_query = $queries->getWhere('templates', array('id', '=', $_GET['template']));
+            $template_query = $queries->getWhere('templates', ['id', '=', $_GET['template']]);
+
             if (count($template_query)) {
                 $template_query = $template_query[0];
             } else {
                 Redirect::to(URL::build('/panel/core/templates'));
+
                 die();
             }
 
-            require_once(ROOT_PATH . DIRECTORY_SEPARATOR . 'custom' . DIRECTORY_SEPARATOR . 'templates' . DIRECTORY_SEPARATOR . str_replace(array('../', '/', '..'), '', $template_query->name) . DIRECTORY_SEPARATOR . 'template.php');
+            require_once (ROOT_PATH . DIRECTORY_SEPARATOR . 'custom' . DIRECTORY_SEPARATOR . 'templates' . DIRECTORY_SEPARATOR . str_replace(['../', '/', '..'], '', $template_query->name) . DIRECTORY_SEPARATOR . 'template.php');
 
             if ($template && $template instanceof TemplateBase) {
                 if ($template->getSettings()) {
-                    require_once($template->getSettings());
+                    require_once ($template->getSettings());
 
-                    $smarty->assign(array(
+                    $smarty->assign([
                         'EDITING_TEMPLATE' => str_replace('{x}', Output::getClean($template_query->name), $language->get('admin', 'editing_template_x')),
                         'BACK' => $language->get('general', 'back'),
                         'BACK_LINK' => URL::build('/panel/core/templates'),
                         'PERMISSIONS' => $language->get('admin', 'permissions'),
                         'PERMISSIONS_LINK' => $user->hasPermission('admincp.groups') ? URL::build('/panel/core/templates/', 'template=' . Output::getClean($template_query->id) . '&action=permissions') : null,
-                    ));
+                    ]);
 
                     $template_file = 'core/template_settings.tpl';
                 } else {
                     Redirect::to(URL::build('/panel/core/templates'));
+
                     die();
                 }
             } else {
                 Redirect::to(URL::build('/panel/core/templates'));
+
                 die();
             }
 
@@ -373,22 +401,25 @@ if (!isset($_GET['action'])) {
 
         case 'permissions':
             // Template permissions
-            if (!$user->hasPermission('admincp.groups')) {
+            if (! $user->hasPermission('admincp.groups')) {
                 Redirect::to(URL::build('/panel/core/templates'));
+
                 die();
             }
 
             // Get the template
-            $template_query = $queries->getWhere('templates', array('id', '=', $_GET['template']));
+            $template_query = $queries->getWhere('templates', ['id', '=', $_GET['template']]);
+
             if (count($template_query)) {
                 $template_query = $template_query[0];
             } else {
                 Redirect::to(URL::build('/panel/core/templates'));
+
                 die();
             }
 
             // Get groups
-            $groups = $queries->getWhere('groups', array('id', '<>', 0));
+            $groups = $queries->getWhere('groups', ['id', '<>', 0]);
 
             // Handle input
             if (Input::exists()) {
@@ -396,16 +427,18 @@ if (!isset($_GET['action'])) {
                     // Guest template permissions
                     $can_use_template = Input::get('perm-use-0');
 
-                    if (!($can_use_template)) $can_use_template = 0;
+                    if (! ($can_use_template)) $can_use_template = 0;
 
                     $perm_exists = 0;
 
-                    $perm_query = $queries->getWhere('groups_templates', array('template_id', '=', $template_query->id));
+                    $perm_query = $queries->getWhere('groups_templates', ['template_id', '=', $template_query->id]);
+
                     if (count($perm_query)) {
                         foreach ($perm_query as $query) {
                             if ($query->group_id == 0) {
                                 $perm_exists = 1;
                                 $update_id = $query->id;
+
                                 break;
                             }
                         }
@@ -414,15 +447,15 @@ if (!isset($_GET['action'])) {
                     try {
                         if ($perm_exists != 0) { // Permission already exists, update
                             // Update the permission
-                            $queries->update('groups_templates', $update_id, array(
+                            $queries->update('groups_templates', $update_id, [
                                 'can_use_template' => $can_use_template
-                            ));
+                            ]);
                         } else { // Permission doesn't exist, create
-                            $queries->create('groups_templates', array(
+                            $queries->create('groups_templates', [
                                 'group_id' => 0,
                                 'template_id' => $template_query->id,
                                 'can_use_template' => $can_use_template,
-                            ));
+                            ]);
                         }
                     } catch (Exception $e) {
                         $errors[] = $e->getMessage();
@@ -432,7 +465,7 @@ if (!isset($_GET['action'])) {
                     foreach ($groups as $group) {
                         $can_use_template = Input::get('perm-use-' . $group->id);
 
-                        if (!($can_use_template)) $can_use_template = 0;
+                        if (! ($can_use_template)) $can_use_template = 0;
 
                         $perm_exists = 0;
 
@@ -441,6 +474,7 @@ if (!isset($_GET['action'])) {
                                 if ($query->group_id == $group->id) {
                                     $perm_exists = 1;
                                     $update_id = $query->id;
+
                                     break;
                                 }
                             }
@@ -449,15 +483,15 @@ if (!isset($_GET['action'])) {
                         try {
                             if ($perm_exists != 0) { // Permission already exists, update
                                 // Update the permission
-                                $queries->update('groups_templates', $update_id, array(
+                                $queries->update('groups_templates', $update_id, [
                                     'can_use_template' => $can_use_template,
-                                ));
+                                ]);
                             } else { // Permission doesn't exist, create
-                                $queries->create('groups_templates', array(
+                                $queries->create('groups_templates', [
                                     'group_id' => $group->id,
                                     'template_id' => $template_query->id,
                                     'can_use_template' => $can_use_template,
-                                ));
+                                ]);
                             }
                         } catch (Exception $e) {
                             $errors[] = $e->getMessage();
@@ -466,27 +500,27 @@ if (!isset($_GET['action'])) {
 
                     $success = $language->get('admin', 'successfully_updated');
                 } else {
-                    $errors = array($language->get('general', 'invalid_token'));
+                    $errors = [$language->get('general', 'invalid_token')];
                 }
             }
 
             // Get permissions
-            $guest_query = DB::getInstance()->query('SELECT 0 AS id, can_use_template FROM nl2_groups_templates WHERE group_id = 0 AND template_id = ?', array($template_query->id))->results();
-            $group_query = DB::getInstance()->query('SELECT id, `name`, can_use_template FROM nl2_groups A LEFT JOIN (SELECT group_id, can_use_template FROM nl2_groups_templates WHERE template_id = ?) B ON A.id = B.group_id ORDER BY `order` ASC', array($template_query->id))->results();
+            $guest_query = DB::getInstance()->query('SELECT 0 AS id, can_use_template FROM nl2_groups_templates WHERE group_id = 0 AND template_id = ?', [$template_query->id])->results();
+            $group_query = DB::getInstance()->query('SELECT id, `name`, can_use_template FROM nl2_groups A LEFT JOIN (SELECT group_id, can_use_template FROM nl2_groups_templates WHERE template_id = ?) B ON A.id = B.group_id ORDER BY `order` ASC', [$template_query->id])->results();
 
-            $smarty->assign(array(
+            $smarty->assign([
                 'EDITING_TEMPLATE' => str_replace('{x}', Output::getClean($template_query->name), $language->get('admin', 'editing_template_x')),
                 'BACK' => $language->get('general', 'back'),
                 'BACK_LINK' => URL::build('/panel/core/templates'),
                 'PERMISSIONS' => $language->get('admin', 'permissions'),
                 'GUESTS' => $language->get('user', 'guests'),
-                'GUEST_PERMISSIONS' => (count($guest_query) ? $guest_query[0] : array()),
+                'GUEST_PERMISSIONS' => (count($guest_query) ? $guest_query[0] : []),
                 'GROUP_PERMISSIONS' => $group_query,
                 'GROUP' => $language->get('admin', 'group'),
                 'CAN_USE_TEMPLATE' => $language->get('admin', 'can_use_template'),
                 'SELECT_ALL' => $language->get('admin', 'select_all'),
                 'DESELECT_ALL' => $language->get('admin', 'deselect_all')
-            ));
+            ]);
 
             $template_file = 'core/template_permissions.tpl';
 
@@ -494,16 +528,19 @@ if (!isset($_GET['action'])) {
 
         case 'edit':
             // Editing template
-            if (!$user->hasPermission('admincp.styles.templates.edit')) {
+            if (! $user->hasPermission('admincp.styles.templates.edit')) {
                 Redirect::to(URL::build('/panel/core/templates'));
+
                 die();
             }
             // Get the template
-            $template_query = $queries->getWhere('templates', array('id', '=', $_GET['template']));
+            $template_query = $queries->getWhere('templates', ['id', '=', $_GET['template']]);
+
             if (count($template_query)) {
                 $template_query = $template_query[0];
             } else {
                 Redirect::to(URL::build('/panel/core/templates'));
+
                 die();
             }
 
@@ -511,31 +548,30 @@ if (!isset($_GET['action'])) {
                 $smarty->assign('DEFAULT_TEMPLATE_WARNING', $language->get('admin', 'warning_editing_default_template'));
             }
 
-            if (!isset($_GET['file']) && !isset($_GET['dir'])) {
+            if (! isset($_GET['file']) && ! isset($_GET['dir'])) {
                 // Get all files
                 // Build path to template folder
-                $template_path = join(DIRECTORY_SEPARATOR, array(ROOT_PATH, 'custom', 'templates', htmlspecialchars($template_query->name)));
+                $template_path = join(DIRECTORY_SEPARATOR, [ROOT_PATH, 'custom', 'templates', htmlspecialchars($template_query->name)]);
                 $files = scandir($template_path);
 
-                $template_files = array();
-                $template_dirs = array();
+                $template_files = [];
+                $template_dirs = [];
 
                 foreach ($files as $file) {
                     if ($file != '.' && $file != '..' && (is_dir($template_path . DIRECTORY_SEPARATOR . $file) || pathinfo($file, PATHINFO_EXTENSION) == 'tpl' || pathinfo($file, PATHINFO_EXTENSION) == 'css' || pathinfo($file, PATHINFO_EXTENSION) == 'js' || pathinfo($file, PATHINFO_EXTENSION) == 'conf')) {
-                        if (!is_dir($template_path . DIRECTORY_SEPARATOR . $file))
-                            $template_files[] = array(
+                        if (! is_dir($template_path . DIRECTORY_SEPARATOR . $file))
+                            $template_files[] = [
                                 'link' => URL::build('/panel/core/templates/', 'action=edit&template=' . Output::getClean($template_query->id) . '&file=' . htmlspecialchars($file)),
                                 'name' => Output::getClean($file)
-                            );
-                        else
-                            $template_dirs[] = array(
+                            ];
+                        else $template_dirs[] = [
                                 'link' => URL::build('/panel/core/templates/', 'action=edit&template=' . Output::getClean($template_query->id) . '&dir=' . htmlspecialchars($file)),
                                 'name' => Output::getClean($file)
-                            );
+                            ];
                     }
                 }
 
-                $smarty->assign(array(
+                $smarty->assign([
                     'BACK' => $language->get('general', 'back'),
                     'BACK_LINK' => URL::build('/panel/core/templates/'),
                     'TEMPLATE_FILES' => $template_files,
@@ -544,42 +580,43 @@ if (!isset($_GET['action'])) {
                     'EDIT' => $language->get('general', 'edit'),
                     'PERMISSIONS' => $language->get('admin', 'permissions'),
                     'PERMISSIONS_LINK' => $user->hasPermission('admincp.groups') ? URL::build('/panel/core/templates/', 'template=' . Output::getClean($template_query->id) . '&action=permissions') : null,
-                ));
+                ]);
 
                 $template_file = 'core/templates_list_files.tpl';
-            } else if (isset($_GET['dir']) && !isset($_GET['file'])) {
+            } else if (isset($_GET['dir']) && ! isset($_GET['file'])) {
                 // List files in dir
-                $realdir = realpath(join(DIRECTORY_SEPARATOR, array(ROOT_PATH, 'custom', 'templates', htmlspecialchars($template_query->name), htmlspecialchars($_GET['dir']))));
+                $realdir = realpath(join(DIRECTORY_SEPARATOR, [ROOT_PATH, 'custom', 'templates', htmlspecialchars($template_query->name), htmlspecialchars($_GET['dir'])]));
                 $dir = ltrim(explode('custom' . DIRECTORY_SEPARATOR . 'templates' . DIRECTORY_SEPARATOR . $template_query->name, $realdir)[1], '/');
 
-                if (!isset($dir) || !is_dir(join(DIRECTORY_SEPARATOR, array(ROOT_PATH, 'custom', 'templates', htmlspecialchars($template_query->name), $dir)))) {
+                if (! isset($dir) || ! is_dir(join(DIRECTORY_SEPARATOR, [ROOT_PATH, 'custom', 'templates', htmlspecialchars($template_query->name), $dir]))) {
                     Redirect::to(URL::build('/panel/core/templates'));
+
                     die();
                 }
 
-                $template_path = join(DIRECTORY_SEPARATOR, array(ROOT_PATH, 'custom', 'templates', htmlspecialchars($template_query->name), $dir));
+                $template_path = join(DIRECTORY_SEPARATOR, [ROOT_PATH, 'custom', 'templates', htmlspecialchars($template_query->name), $dir]);
                 $files = scandir($template_path);
 
-                $template_files = array();
-                $template_dirs = array();
+                $template_files = [];
+                $template_dirs = [];
 
                 foreach ($files as $file) {
                     if ($file != '.' && $file != '..' && (is_dir($template_path . DIRECTORY_SEPARATOR . $file) || pathinfo($file, PATHINFO_EXTENSION) == 'tpl' || pathinfo($file, PATHINFO_EXTENSION) == 'css' || pathinfo($file, PATHINFO_EXTENSION) == 'js' || pathinfo($file, PATHINFO_EXTENSION) == 'conf')) {
-                        if (!is_dir($template_path . DIRECTORY_SEPARATOR . $file))
-                            $template_files[] = array(
+                        if (! is_dir($template_path . DIRECTORY_SEPARATOR . $file))
+                            $template_files[] = [
                                 'link' => URL::build('/panel/core/templates/', 'action=edit&template=' . Output::getClean($template_query->id) . '&dir=' . htmlspecialchars($dir) . '&file=' . htmlspecialchars($file)),
                                 'name' => Output::getClean($file)
-                            );
-                        else
-                            $template_dirs[] = array(
+                            ];
+                        else $template_dirs[] = [
                                 'link' => URL::build('/panel/core/templates/', 'action=edit&template=' . Output::getClean($template_query->id) . '&dir=' . htmlspecialchars($dir) . DIRECTORY_SEPARATOR . htmlspecialchars($file)),
                                 'name' => Output::getClean($file)
-                            );
+                            ];
                     }
                 }
 
                 // Get back link
                 $dirs = explode('/', $_GET['dir']);
+
                 if (count($dirs) > 1) {
                     unset($dirs[count($dirs) - 1]);
                     $new_dir = implode('/', $dirs);
@@ -588,7 +625,7 @@ if (!isset($_GET['action'])) {
                     $back_link = URL::build('/panel/core/templates/', 'action=edit&template=' . Output::getClean($template_query->id));
                 }
 
-                $smarty->assign(array(
+                $smarty->assign([
                     'BACK' => $language->get('general', 'back'),
                     'BACK_LINK' => $back_link,
                     'TEMPLATE_FILES' => $template_files,
@@ -597,27 +634,28 @@ if (!isset($_GET['action'])) {
                     'EDIT' => $language->get('general', 'edit'),
                     'PERMISSIONS' => $language->get('admin', 'permissions'),
                     'PERMISSIONS_LINK' => $user->hasPermission('admincp.groups') ? '/panel/core/templates/?template=' . Output::getClean($template_query->id) . '&action=permissions' : null,
-                ));
+                ]);
 
                 $template_file = 'core/templates_list_files.tpl';
             } else if (isset($_GET['file'])) {
-                $file = basename(join(DIRECTORY_SEPARATOR, array(ROOT_PATH, 'custom', 'templates', htmlspecialchars($template_query->name), htmlspecialchars($_GET['file']))));
+                $file = basename(join(DIRECTORY_SEPARATOR, [ROOT_PATH, 'custom', 'templates', htmlspecialchars($template_query->name), htmlspecialchars($_GET['file'])]));
 
                 if (isset($_GET['dir'])) {
-                    $realdir = realpath(join(DIRECTORY_SEPARATOR, array(ROOT_PATH, 'custom', 'templates', htmlspecialchars($template_query->name), htmlspecialchars($_GET['dir']))));
+                    $realdir = realpath(join(DIRECTORY_SEPARATOR, [ROOT_PATH, 'custom', 'templates', htmlspecialchars($template_query->name), htmlspecialchars($_GET['dir'])]));
                     $dir = ltrim(explode('custom' . DIRECTORY_SEPARATOR . 'templates' . DIRECTORY_SEPARATOR . $template_query->name, $realdir)[1], '/');
 
-                    if (!isset($dir) || !is_dir(join(DIRECTORY_SEPARATOR, array(ROOT_PATH, 'custom', 'templates', htmlspecialchars($template_query->name), $dir)))) {
+                    if (! isset($dir) || ! is_dir(join(DIRECTORY_SEPARATOR, [ROOT_PATH, 'custom', 'templates', htmlspecialchars($template_query->name), $dir]))) {
                         Redirect::to(URL::build('/panel/core/templates'));
+
                         die();
                     }
 
-                    $file_path = join(DIRECTORY_SEPARATOR, array(ROOT_PATH, 'custom', 'templates', htmlspecialchars($template_query->name), $dir, $file));
-                } else
-                    $file_path = join(DIRECTORY_SEPARATOR, array(ROOT_PATH, 'custom', 'templates', htmlspecialchars($template_query->name), $file));
+                    $file_path = join(DIRECTORY_SEPARATOR, [ROOT_PATH, 'custom', 'templates', htmlspecialchars($template_query->name), $dir, $file]);
+                } else $file_path = join(DIRECTORY_SEPARATOR, [ROOT_PATH, 'custom', 'templates', htmlspecialchars($template_query->name), $file]);
 
-                if (!file_exists($file_path) || !(pathinfo($file, PATHINFO_EXTENSION) == 'tpl' || pathinfo($file, PATHINFO_EXTENSION) == 'css' || pathinfo($file, PATHINFO_EXTENSION) == 'js'|| pathinfo($file, PATHINFO_EXTENSION) == 'conf')) {
+                if (! file_exists($file_path) || ! (pathinfo($file, PATHINFO_EXTENSION) == 'tpl' || pathinfo($file, PATHINFO_EXTENSION) == 'css' || pathinfo($file, PATHINFO_EXTENSION) == 'js' || pathinfo($file, PATHINFO_EXTENSION) == 'conf')) {
                     Redirect::to(URL::build('/panel/core/templates'));
+
                     die();
                 }
 
@@ -649,31 +687,28 @@ if (!isset($_GET['action'])) {
                             // Redirect to refresh page
                             if (isset($_GET['dir']))
                                 Redirect::to(URL::build('/panel/core/templates/', 'action=edit&template=' . $_GET['template'] . '&dir=' . Output::getClean($_GET['dir']) . '&file=' . Output::getClean($_GET['file'])));
-                            else
-                                Redirect::to(URL::build('/panel/core/templates/', 'action=edit&template=' . $_GET['template'] . '&file=' . Output::getClean($_GET['file'])));
+                            else Redirect::to(URL::build('/panel/core/templates/', 'action=edit&template=' . $_GET['template'] . '&file=' . Output::getClean($_GET['file'])));
+
                             die();
-                        } else {
-                            // No write permission
-                            $errors = array($language->get('admin', 'cant_write_to_template'));
                         }
+                            // No write permission
+                            $errors = [$language->get('admin', 'cant_write_to_template')];
                     } else {
                         // Invalid token
-                        $errors = array($language->get('general', 'invalid_token'));
+                        $errors = [$language->get('general', 'invalid_token')];
                     }
                 }
 
                 if (isset($_GET['dir']))
                     $cancel_link = URL::build('/panel/core/templates/', 'action=edit&template=' . Output::getClean($_GET['template']) . '&dir=' . Output::getClean($_GET['dir']));
-                else
-                    $cancel_link = URL::build('/panel/core/templates/', 'action=edit&template=' . Output::getClean($_GET['template']));
+                else $cancel_link = URL::build('/panel/core/templates/', 'action=edit&template=' . Output::getClean($_GET['template']));
 
                 if (isset($_GET['dir']))
                     $template_path = Output::getClean($_GET['dir'] . DIRECTORY_SEPARATOR . $_GET['file']);
-                else
-                    $template_path = Output::getClean($_GET['file']);
+                else $template_path = Output::getClean($_GET['file']);
 
-                $smarty->assign(array(
-                    'EDITING_FILE' => str_replace(array('{x}', '{y}'), array($template_path, Output::getClean($template_query->name)), $language->get('admin', 'editing_template_file_in_template')),
+                $smarty->assign([
+                    'EDITING_FILE' => str_replace(['{x}', '{y}'], [$template_path, Output::getClean($template_query->name)], $language->get('admin', 'editing_template_file_in_template')),
                     'CANCEL' => $language->get('general', 'cancel'),
                     'ARE_YOU_SURE' => $language->get('general', 'are_you_sure'),
                     'CONFIRM_CANCEL' => $language->get('general', 'confirm_cancel'),
@@ -682,46 +717,48 @@ if (!isset($_GET['action'])) {
                     'CANCEL_LINK' => $cancel_link,
                     'FILE_CONTENTS' => Output::getClean(file_get_contents($file_path)),
                     'FILE_TYPE' => $file_type
-                ));
+                ]);
 
                 $template_file = 'core/templates_edit.tpl';
             }
 
-            $smarty->assign(array(
+            $smarty->assign([
                 'EDITING_TEMPLATE' => str_replace('{x}', Output::getClean($template_query->name), $language->get('admin', 'editing_template_x'))
-            ));
+            ]);
 
             break;
 
         default:
             Redirect::to(URL::build('/panel/core/templates'));
+
             die();
+
             break;
     }
 }
 
 // Load modules + template
-Module::loadPage($user, $pages, $cache, $smarty, array($navigation, $cc_nav, $mod_nav), $widgets);
+Module::loadPage($user, $pages, $cache, $smarty, [$navigation, $cc_nav, $mod_nav], $widgets);
 
 if (Session::exists('admin_templates'))
     $success = Session::flash('admin_templates');
 
 if (Session::exists('admin_templates_error'))
-    $errors = array(Session::flash('admin_templates_error'));
+    $errors = [Session::flash('admin_templates_error')];
 
 if (isset($success))
-    $smarty->assign(array(
+    $smarty->assign([
         'SUCCESS' => $success,
         'SUCCESS_TITLE' => $language->get('general', 'success')
-    ));
+    ]);
 
 if (isset($errors) && count($errors))
-    $smarty->assign(array(
+    $smarty->assign([
         'ERRORS' => $errors,
         'ERRORS_TITLE' => $language->get('general', 'error')
-    ));
+    ]);
 
-$smarty->assign(array(
+$smarty->assign([
     'PARENT_PAGE' => PARENT_PAGE,
     'DASHBOARD' => $language->get('admin', 'dashboard'),
     'LAYOUT' => $language->get('admin', 'layout'),
@@ -729,14 +766,14 @@ $smarty->assign(array(
     'PAGE' => PANEL_PAGE,
     'TOKEN' => Token::get(),
     'SUBMIT' => $language->get('general', 'submit')
-));
+]);
 
 $page_load = microtime(true) - $start;
 define('PAGE_LOAD_TIME', str_replace('{x}', round($page_load, 3), $language->get('general', 'page_loaded_in')));
 
 $template->onPageLoad();
 
-require(ROOT_PATH . '/core/templates/panel_navbar.php');
+require (ROOT_PATH . '/core/templates/panel_navbar.php');
 
 // Display template
 $template->displayTemplate($template_file, $smarty);
diff --git a/modules/Core/pages/panel/update.php b/modules/Core/pages/panel/update.php
index 2211e21e6402d254d434819a7b63ed55f838b6ea..1fbf965a4e599d0cd3a4f0f1f37c17348b50871b 100644
--- a/modules/Core/pages/panel/update.php
+++ b/modules/Core/pages/panel/update.php
@@ -13,11 +13,13 @@ $user->handlePanelPageLoad('admincp.update');
 
 if (isset($_GET['recheck'])) {
     $cache->setCache('update_check');
+
     if ($cache->isCached('update_check')) {
         $cache->erase('update_check');
     }
 
     Redirect::to(URL::build('/panel/update'));
+
     die();
 }
 
@@ -25,24 +27,26 @@ define('PAGE', 'panel');
 define('PARENT_PAGE', 'update');
 define('PANEL_PAGE', 'update');
 $page_title = $language->get('admin', 'update');
-require_once(ROOT_PATH . '/core/templates/backend_init.php');
+
+require_once (ROOT_PATH . '/core/templates/backend_init.php');
 
 // Load modules + template
-Module::loadPage($user, $pages, $cache, $smarty, array($navigation, $cc_nav, $mod_nav), $widgets);
+Module::loadPage($user, $pages, $cache, $smarty, [$navigation, $cc_nav, $mod_nav], $widgets);
 
 if (isset($success))
-    $smarty->assign(array(
+    $smarty->assign([
         'SUCCESS' => $success,
         'SUCCESS_TITLE' => $language->get('general', 'success')
-    ));
+    ]);
 
 if (isset($errors) && count($errors))
-    $smarty->assign(array(
+    $smarty->assign([
         'ERRORS' => $errors,
         'ERRORS_TITLE' => $language->get('general', 'error')
-    ));
+    ]);
 
 $cache->setCache('update_check');
+
 if ($cache->isCached('update_check')) {
     $update_check = $cache->retrieve('update_check');
 } else {
@@ -52,12 +56,12 @@ if ($cache->isCached('update_check')) {
 
 $update_check = json_decode($update_check);
 
-if (!isset($update_check->error) && !isset($update_check->no_update) && isset($update_check->new_version)) {
+if (! isset($update_check->error) && ! isset($update_check->no_update) && isset($update_check->new_version)) {
     // Unique ID + current version
-    $uid = $queries->getWhere('settings', array('name', '=', 'unique_id'));
+    $uid = $queries->getWhere('settings', ['name', '=', 'unique_id']);
     $uid = $uid[0]->value;
 
-    $current_version = $queries->getWhere('settings', array('name', '=', 'nameless_version'));
+    $current_version = $queries->getWhere('settings', ['name', '=', 'nameless_version']);
     $current_version = $current_version[0]->value;
 
     // Get instructions
@@ -78,13 +82,13 @@ if (!isset($update_check->error) && !isset($update_check->no_update) && isset($u
 
     curl_close($ch);
 
-    $smarty->assign(array(
+    $smarty->assign([
         'INSTRUCTIONS' => $language->get('admin', 'instructions'),
         'INSTRUCTIONS_VALUE' => Output::getPurified($instructions)
-    ));
+    ]);
 }
 
-$smarty->assign(array(
+$smarty->assign([
     'PARENT_PAGE' => PARENT_PAGE,
     'DASHBOARD' => $language->get('admin', 'dashboard'),
     'UPDATE' => $language->get('admin', 'update'),
@@ -95,19 +99,19 @@ $smarty->assign(array(
     'CHECK_AGAIN' => $language->get('admin', 'check_again'),
     'CHECK_AGAIN_LINK' => URL::build('/panel/update/', 'recheck=true'),
     'UPGRADE_LINK' => URL::build('/panel/upgrade'),
-    'DOWNLOAD_LINK' => 'https://namelessmc.com/nl_core/nl2/updates/' . str_replace(array('.', '-'), '', Output::getClean($update_check->new_version)) . '.zip',
+    'DOWNLOAD_LINK' => 'https://namelessmc.com/nl_core/nl2/updates/' . str_replace(['.', '-'], '', Output::getClean($update_check->new_version)) . '.zip',
     'DOWNLOAD' => $language->get('admin', 'download'),
     'WARNING' => $language->get('general', 'warning'),
     'CANCEL' => $language->get('general', 'cancel'),
     'INSTALL_CONFIRM' => $language->get('admin', 'install_confirm')
-));
+]);
 
 $page_load = microtime(true) - $start;
 define('PAGE_LOAD_TIME', str_replace('{x}', round($page_load, 3), $language->get('general', 'page_loaded_in')));
 
 $template->onPageLoad();
 
-require(ROOT_PATH . '/core/templates/panel_navbar.php');
+require (ROOT_PATH . '/core/templates/panel_navbar.php');
 
 // Display template
 $template->displayTemplate('core/update.tpl', $smarty);
diff --git a/modules/Core/pages/panel/upgrade.php b/modules/Core/pages/panel/upgrade.php
index e6a54655cfbcedbe039c76ad062689b828db6460..44ce744b0d0831aec73aba233d69f8b206ba91ae 100644
--- a/modules/Core/pages/panel/upgrade.php
+++ b/modules/Core/pages/panel/upgrade.php
@@ -9,31 +9,34 @@
  *  Panel update execute page
  */
 
-$queries =  new Queries();
+$queries = new Queries();
 
 // Ensure an update is needed
-$update_needed = $queries->getWhere('settings', array('name', '=', 'version_update'));
+$update_needed = $queries->getWhere('settings', ['name', '=', 'version_update']);
 $update_needed = $update_needed[0]->value;
 
 if ($update_needed != 'true' && $update_needed != 'urgent') {
     Redirect::to(URL::build('/panel/update'));
+
     die();
 }
 
-$cache = new Cache(array('name' => 'nameless', 'extension' => '.cache', 'path' => ROOT_PATH . '/cache/'));
+$cache = new Cache(['name' => 'nameless', 'extension' => '.cache', 'path' => ROOT_PATH . '/cache/']);
 
 // Get the current version
-$current_version = $queries->getWhere('settings', array('name', '=', 'nameless_version'));
+$current_version = $queries->getWhere('settings', ['name', '=', 'nameless_version']);
 $current_version = $current_version[0]->value;
 
 // Perform the update
 if (is_file('core/includes/updates/' . str_replace('.', '', $current_version) . '.php'))
-    require(ROOT_PATH . '/core/includes/updates/' . str_replace('.', '', $current_version) . '.php');
+    require (ROOT_PATH . '/core/includes/updates/' . str_replace('.', '', $current_version) . '.php');
 
 $cache->setCache('update_check');
+
 if ($cache->isCached('update_check')) {
     $cache->erase('update_check');
 }
 
 Redirect::to(URL::build('/panel/update'));
+
 die();
diff --git a/modules/Core/pages/panel/user.php b/modules/Core/pages/panel/user.php
index 67c1a23a0d1ac92ce06d2ec0b7aef42f93a1c467..0ed6dfdf570178e797c4dbddf7080d3654bb521b 100644
--- a/modules/Core/pages/panel/user.php
+++ b/modules/Core/pages/panel/user.php
@@ -14,21 +14,26 @@ $user->handlePanelPageLoad();
 $uid = explode('/', $route);
 $uid = $uid[count($uid) - 1];
 
-if (!strlen($uid)) {
+if (! strlen($uid)) {
     Redirect::to(URL::build('/panel'));
+
     die();
 }
 
 $uid = explode('-', $uid);
-if (!is_numeric($uid[0])) {
+
+if (! is_numeric($uid[0])) {
     Redirect::to(URL::build('/panel'));
+
     die();
 }
 $uid = $uid[0];
 
 $view_user = new User($uid);
-if (!$view_user->data()) {
+
+if (! $view_user->data()) {
     Redirect::to(URL::build('/panel'));
+
     die();
 }
 $user_query = $view_user->data();
@@ -39,43 +44,44 @@ define('PAGE', 'panel');
 define('PANEL_PAGE', 'users');
 define('PARENT_PAGE', 'users');
 $page_title = Output::getClean($user_query->username);
-require_once(ROOT_PATH . '/core/templates/backend_init.php');
+
+require_once (ROOT_PATH . '/core/templates/backend_init.php');
 
 // Load modules + template
-Module::loadPage($user, $pages, $cache, $smarty, array($navigation, $cc_nav, $mod_nav), $widgets);
+Module::loadPage($user, $pages, $cache, $smarty, [$navigation, $cc_nav, $mod_nav], $widgets);
 
 if (isset($success))
-    $smarty->assign(array(
+    $smarty->assign([
         'SUCCESS' => $success,
         'SUCCESS_TITLE' => $language->get('general', 'success')
-    ));
+    ]);
 
 if (isset($errors) && count($errors))
-    $smarty->assign(array(
+    $smarty->assign([
         'ERRORS' => $errors,
         'ERRORS_TITLE' => $language->get('general', 'error')
-    ));
+    ]);
 
-$user_language = $queries->getWhere('languages', array('id', '=', $user_query->language_id));
+$user_language = $queries->getWhere('languages', ['id', '=', $user_query->language_id]);
 $user_language = $user_language[0]->name;
 
 if ($user->hasPermission('admincp.users.edit')) {
     // Email address
-    $smarty->assign(array(
+    $smarty->assign([
         'EMAIL_ADDRESS' => Output::getClean($user_query->email),
         'EMAIL_ADDRESS_LABEL' => $language->get('user', 'email_address')
-    ));
+    ]);
 }
 
 if ($user->hasPermission('modcp.ip_lookup')) {
     // Last IP
-    $smarty->assign(array(
+    $smarty->assign([
         'LAST_IP' => Output::getClean($user_query->lastip),
         'LAST_IP_LABEL' => $language->get('admin', 'ip_address')
-    ));
+    ]);
 }
 
-$smarty->assign(array(
+$smarty->assign([
     'PARENT_PAGE' => PARENT_PAGE,
     'DASHBOARD' => $language->get('admin', 'dashboard'),
     'PAGE' => PANEL_PAGE,
@@ -105,14 +111,14 @@ $smarty->assign(array(
     'UUID_LABEL' => $language->get('admin', 'uuid'),
     'LANGUAGE_LABEL' => $language->get('user', 'active_language'),
     'TIMEZONE_LABEL' => $language->get('user', 'timezone')
-));
+]);
 
 $page_load = microtime(true) - $start;
 define('PAGE_LOAD_TIME', str_replace('{x}', round($page_load, 3), $language->get('general', 'page_loaded_in')));
 
 $template->onPageLoad();
 
-require(ROOT_PATH . '/core/templates/panel_navbar.php');
+require (ROOT_PATH . '/core/templates/panel_navbar.php');
 
 // Display template
 $template->displayTemplate('core/user.tpl', $smarty);
diff --git a/modules/Core/pages/panel/users.php b/modules/Core/pages/panel/users.php
index ced83b0801fa0d798dd57720234ecdd84dacdc26..5d55d33006a3840732a8be91c33e9adba5928322 100644
--- a/modules/Core/pages/panel/users.php
+++ b/modules/Core/pages/panel/users.php
@@ -15,10 +15,11 @@ define('PAGE', 'panel');
 define('PARENT_PAGE', 'users');
 define('PANEL_PAGE', 'users');
 $page_title = $language->get('admin', 'users');
-require_once(ROOT_PATH . '/core/templates/backend_init.php');
+
+require_once (ROOT_PATH . '/core/templates/backend_init.php');
 
 // Load modules + template
-Module::loadPage($user, $pages, $cache, $smarty, array($navigation, $cc_nav, $mod_nav), $widgets);
+Module::loadPage($user, $pages, $cache, $smarty, [$navigation, $cc_nav, $mod_nav], $widgets);
 
 if (Session::exists('users_session')) {
     $success = Session::flash('users_session');
@@ -26,30 +27,32 @@ if (Session::exists('users_session')) {
 
 if (isset($success)) {
     $smarty->assign(
-        array(
+        [
             'SUCCESS' => $success,
             'SUCCESS_TITLE' => $language->get('general', 'success')
-        )
+        ]
     );
 }
 
 if (isset($errors) && count($errors)) {
     $smarty->assign(
-        array(
+        [
             'ERRORS' => $errors,
             'ERRORS_TITLE' => $language->get('general', 'error')
-        )
+        ]
     );
 }
 
-$output = array();
-if (!defined('PANEL_TEMPLATE_STAFF_USERS_AJAX')) {
+$output = [];
+
+if (! defined('PANEL_TEMPLATE_STAFF_USERS_AJAX')) {
     // Get all users
-    $users = $queries->getWhere('users', array('id', '<>', 0));
+    $users = $queries->getWhere('users', ['id', '<>', 0]);
+
     foreach ($users as $item) {
         $target_user = new User($item->id);
 
-        $output[] = array(
+        $output[] = [
             'id' => Output::getClean($item->id),
             'username' => $target_user->getDisplayname(true),
             'nickname' => $target_user->getDisplayname(),
@@ -61,12 +64,12 @@ if (!defined('PANEL_TEMPLATE_STAFF_USERS_AJAX')) {
             'all_groups' => $target_user->getAllGroups(true),
             'registered' => date('d M Y', $item->joined),
             'registered_unix' => Output::getClean($item->joined)
-        );
+        ];
     }
 }
 
 $smarty->assign(
-    array(
+    [
         'PARENT_PAGE' => PARENT_PAGE,
         'DASHBOARD' => $language->get('admin', 'dashboard'),
         'USER_MANAGEMENT' => $language->get('admin', 'user_management'),
@@ -81,7 +84,7 @@ $smarty->assign(
         'ACTIONS' => $language->get('general', 'actions'),
         'ACTIONS_LIST' => Core_Module::getUserActions(),
         'ALL_USERS' => $output
-    )
+    ]
 );
 
 $page_load = microtime(true) - $start;
@@ -89,7 +92,7 @@ define('PAGE_LOAD_TIME', str_replace('{x}', round($page_load, 3), $language->get
 
 $template->onPageLoad();
 
-require(ROOT_PATH . '/core/templates/panel_navbar.php');
+require (ROOT_PATH . '/core/templates/panel_navbar.php');
 
 // Display template
 $template->displayTemplate('core/users.tpl', $smarty);
diff --git a/modules/Core/pages/panel/users_edit.php b/modules/Core/pages/panel/users_edit.php
index 80dc482c27a735d7cc4d1943f6cadccfe6ced116..79a0473de79627312323af07333fa5666de1248b 100644
--- a/modules/Core/pages/panel/users_edit.php
+++ b/modules/Core/pages/panel/users_edit.php
@@ -11,14 +11,17 @@
 
 $user->handlePanelPageLoad('admincp.users.edit');
 
-if (!isset($_GET['id']) || !is_numeric($_GET['id'])) {
+if (! isset($_GET['id']) || ! is_numeric($_GET['id'])) {
     Redirect::to(URL::build('/panel/users'));
+
     die();
 }
 
 $view_user = new User($_GET['id']);
-if (!$view_user->data()) {
+
+if (! $view_user->data()) {
     Redirect::to('/panel/users');
+
     die();
 }
 $user_query = $view_user->data();
@@ -28,33 +31,35 @@ define('PARENT_PAGE', 'users');
 define('PANEL_PAGE', 'users');
 define('EDITING_USER', true);
 $page_title = $language->get('admin', 'users');
-require_once(ROOT_PATH . '/core/templates/backend_init.php');
-require_once(ROOT_PATH . '/core/includes/markdown/tohtml/Markdown.inc.php');
+
+require_once (ROOT_PATH . '/core/templates/backend_init.php');
+
+require_once (ROOT_PATH . '/core/includes/markdown/tohtml/Markdown.inc.php');
 
 // Load modules + template
-Module::loadPage($user, $pages, $cache, $smarty, array($navigation, $cc_nav, $mod_nav), $widgets);
+Module::loadPage($user, $pages, $cache, $smarty, [$navigation, $cc_nav, $mod_nav], $widgets);
 
 if (isset($_GET['action'])) {
     if ($_GET['action'] == 'validate') {
         // Validate the user
         if ($user_query->active == 0) {
-            $queries->update('users', $user_query->id, array(
+            $queries->update('users', $user_query->id, [
                 'active' => 1,
                 'reset_code' => ''
-            ));
+            ]);
 
-            HookHandler::executeEvent('validateUser', array(
+            HookHandler::executeEvent('validateUser', [
                 'event' => 'validateUser',
                 'user_id' => $user_query->id,
                 'username' => Output::getClean($user_query->username),
                 'uuid' => Output::getClean($user_query->uuid),
                 'language' => $language
-            ));
+            ]);
 
             Session::flash('edit_user_success', $language->get('admin', 'user_validated_successfully'));
         }
     } else if ($_GET['action'] == 'update_mcname') {
-        require_once(ROOT_PATH . '/core/integration/uuid.php');
+        require_once (ROOT_PATH . '/core/integration/uuid.php');
         $uuid = $user_query->uuid;
 
         $profile = ProfileUtils::getProfile($uuid);
@@ -62,39 +67,40 @@ if (isset($_GET['action'])) {
         if ($profile) {
             $result = $profile->getUsername();
 
-            if (!empty($result)) {
+            if (! empty($result)) {
                 if ($user_query->username == $user_query->nickname) {
-                    $queries->update('users', $user_query->id, array(
+                    $queries->update('users', $user_query->id, [
                         'username' => Output::getClean($result),
                         'nickname' => Output::getClean($result)
-                    ));
+                    ]);
                 } else {
-                    $queries->update('users', $user_query->id, array(
+                    $queries->update('users', $user_query->id, [
                         'username' => Output::getClean($result)
-                    ));
+                    ]);
                 }
 
                 Session::flash('edit_user_success', $language->get('admin', 'user_updated_successfully'));
             }
         }
     } else if ($_GET['action'] == 'update_uuid') {
-        require_once(ROOT_PATH . '/core/integration/uuid.php');
+        require_once (ROOT_PATH . '/core/integration/uuid.php');
 
         $profile = ProfileUtils::getProfile($user_query->username);
 
-        if (!empty($profile)) {
+        if (! empty($profile)) {
             $result = $profile->getProfileAsArray();
 
-            if (isset($result['uuid']) && !empty($result['uuid'])) {
-                $queries->update('users', $user_query->id, array(
+            if (isset($result['uuid']) && ! empty($result['uuid'])) {
+                $queries->update('users', $user_query->id, [
                     'uuid' => Output::getClean($result['uuid'])
-                ));
+                ]);
 
                 Session::flash('edit_user_success', $language->get('admin', 'user_updated_successfully'));
             }
         }
     } else if ($_GET['action'] == 'resend_email' && $user_query->active == 0) {
-        require_once(ROOT_PATH . '/modules/Core/includes/emails/register.php');
+        require_once (ROOT_PATH . '/modules/Core/includes/emails/register.php');
+
         if (sendRegisterEmail($queries, $language, $user_query->email, $user_query->username, $user_query->id, $user_query->reset_code)) {
             Session::flash('edit_user_success', $language->get('admin', 'email_resent_successfully'));
         } else {
@@ -103,11 +109,12 @@ if (isset($_GET['action'])) {
     }
 
     Redirect::to(URL::build('/panel/users/edit/', 'id=' . Output::getClean($user_query->id)));
+
     die();
 }
 
 if (Input::exists()) {
-    $errors = array();
+    $errors = [];
 
     if (Token::check()) {
         if (Input::get('action') === 'update') {
@@ -117,38 +124,39 @@ if (Input::exists()) {
 
             $validate = new Validate();
 
-            $to_validation = array(
-                'email' => array(
+            $to_validation = [
+                'email' => [
                     'required' => true,
                     'min' => 4,
                     'max' => 50
-                ),
-                'UUID' => array(
+                ],
+                'UUID' => [
                     'max' => 32
-                ),
-                'signature' => array(
+                ],
+                'signature' => [
                     'max' => 900
-                ),
-                'ip' => array(
+                ],
+                'ip' => [
                     'max' => 256
-                ),
-                'title' => array(
+                ],
+                'title' => [
                     'max' => 64
-                ),
-                'username' => array(
+                ],
+                'username' => [
                     'required' => true,
                     'min' => 3,
                     'max' => 20
-                ),
-                'nickname' => array(
+                ],
+                'nickname' => [
                     'required' => true,
                     'min' => 3,
                     'max' => 20
-                )
-            );
+                ]
+            ];
 
             // Does user have any groups selected
             $passed = false;
+
             if ($view_user->data()->id == 1 || (isset($_POST['groups']) && count($_POST['groups']))) {
                 $passed = true;
             } else {
@@ -156,6 +164,7 @@ if (Input::exists()) {
             }
 
             $validation = $validate->check($_POST, $to_validation);
+
             if ($validation->passed() && $passed) {
                 try {
                     // Signature from Markdown -> HTML if needed
@@ -169,7 +178,7 @@ if (Input::exists()) {
                         $signature = Output::getClean($signature);
                     }
 
-                    $private_profile_active = $queries->getWhere('settings', array('name', '=', 'private_profile'));
+                    $private_profile_active = $queries->getWhere('settings', ['name', '=', 'private_profile']);
                     $private_profile_active = $private_profile_active[0]->value == 1;
                     $private_profile = 0;
 
@@ -178,13 +187,13 @@ if (Input::exists()) {
                     }
 
                     // Template
-                    $new_template = $queries->getWhere('templates', array('id', '=', Input::get('template')));
+                    $new_template = $queries->getWhere('templates', ['id', '=', Input::get('template')]);
 
                     if (count($new_template)) $new_template = $new_template[0]->id;
                     else $new_template = $user_query->theme_id;
 
                     // Nicknames?
-                    $displaynames = $queries->getWhere('settings', array('name', '=', 'displaynames'));
+                    $displaynames = $queries->getWhere('settings', ['name', '=', 'displaynames']);
                     $displaynames = $displaynames[0]->value;
 
                     if ($displaynames == 'true') {
@@ -195,7 +204,7 @@ if (Input::exists()) {
                         $nickname = Input::get('username');
                     }
 
-                    $queries->update('users', $user_query->id, array(
+                    $queries->update('users', $user_query->id, [
                         'nickname' => Output::getClean($nickname),
                         'email' => Output::getClean(Input::get('email')),
                         'username' => Output::getClean($username),
@@ -204,10 +213,11 @@ if (Input::exists()) {
                         'signature' => $signature,
                         'private_profile' => $private_profile,
                         'theme_id' => $new_template
-                    ));
+                    ]);
 
                     // Get current group ids
-                    $user_groups = array();
+                    $user_groups = [];
+
                     foreach ($view_user->getGroups() as $group) {
                         $user_groups[$group->id] = $group->id;
                     }
@@ -217,7 +227,7 @@ if (Input::exists()) {
                         if ($view_user->data()->id == 1 || (isset($_POST['groups']) && count($_POST['groups']))) {
                             // Any new groups?
                             foreach ($_POST['groups'] as $group) {
-                                if (!in_array($group, $user_groups)) {
+                                if (! in_array($group, $user_groups)) {
                                     $view_user->addGroup($group);
                                     Discord::addDiscordRole($view_user, $group, $language);
                                 }
@@ -225,7 +235,7 @@ if (Input::exists()) {
 
                             // Any groups to remove?
                             foreach ($view_user->getGroups() as $group) {
-                                if (!in_array($group->id, $_POST['groups'])) {
+                                if (! in_array($group->id, $_POST['groups'])) {
                                     // be sure root user keep the root group
                                     if ($group->id == 2 && $view_user->data()->id == 1) {
                                         continue;
@@ -240,6 +250,7 @@ if (Input::exists()) {
 
                     Session::flash('edit_user_success', $language->get('admin', 'user_updated_successfully'));
                     Redirect::to(URL::build('/panel/users/edit/', 'id=' . Output::getClean($user_query->id)));
+
                     die();
                 } catch (Exception $e) {
                     $errors[] = $e->getMessage();
@@ -251,12 +262,17 @@ if (Input::exists()) {
                         switch ($error) {
                             case (strpos($error, 'nickname') !== false):
                                 $errors[] = $language->get('user', 'username_required');
+
                                 break;
+
                             case (strpos($error, 'email') !== false):
                                 $errors[] = $language->get('user', 'email_required');
+
                                 break;
+
                             case (strpos($error, 'username') !== false):
                                 $errors[] = $language->get('user', 'mcname_required');
+
                                 break;
                         }
                     } else if (strpos($error, 'minimum') !== false) {
@@ -264,9 +280,12 @@ if (Input::exists()) {
                         switch ($error) {
                             case (strpos($error, 'nickname') !== false):
                                 $errors[] = $language->get('user', 'username_minimum_3');
+
                                 break;
+
                             case (strpos($error, 'username') !== false):
                                 $errors[] = $language->get('user', 'mcname_minimum_3');
+
                                 break;
                         }
                     } else if (strpos($error, 'maximum') !== false) {
@@ -274,15 +293,22 @@ if (Input::exists()) {
                         switch ($error) {
                             case (strpos($error, 'nickname') !== false):
                                 $errors[] = $language->get('user', 'username_maximum_20');
+
                                 break;
+
                             case (strpos($error, 'username') !== false):
                                 $errors[] = $language->get('user', 'mcname_maximum_20');
+
                                 break;
+
                             case (strpos($error, 'UUID') !== false):
                                 $errors[] = $language->get('admin', 'uuid_max_32');
+
                                 break;
+
                             case (strpos($error, 'title') !== false):
                                 $errors[] = $language->get('admin', 'title_max_64');
+
                                 break;
                         }
                     }
@@ -290,21 +316,21 @@ if (Input::exists()) {
             }
         } else if (Input::get('action') == 'delete') {
             if ($user_query->id > 1) {
-                HookHandler::executeEvent('deleteUser', array(
+                HookHandler::executeEvent('deleteUser', [
                     'user_id' => $user_query->id,
                     'username' => Output::getClean($user_query->username),
                     'uuid' => Output::getClean($user_query->uuid),
                     'email_address' => Output::getClean($user_query->email)
-                ));
+                ]);
 
                 Session::flash('users_session', $language->get('admin', 'user_deleted'));
             }
 
             Redirect::to(URL::build('/panel/users'));
+
             die();
         }
-    } else
-        $errors[] = $language->get('general', 'invalid_token');
+    } else $errors[] = $language->get('general', 'invalid_token');
 }
 
 if (Session::exists('edit_user_success'))
@@ -317,87 +343,89 @@ if (Session::exists('edit_user_warnings'))
     $warnings = Session::flash('edit_user_warnings');
 
 if (isset($success))
-    $smarty->assign(array(
+    $smarty->assign([
         'SUCCESS' => $success,
         'SUCCESS_TITLE' => $language->get('general', 'success')
-    ));
+    ]);
 
 if (isset($errors) && count($errors))
-    $smarty->assign(array(
+    $smarty->assign([
         'ERRORS' => $errors,
         'ERRORS_TITLE' => $language->get('general', 'error')
-    ));
+    ]);
 
 if (isset($warnings) && count($warnings)) {
-    $smarty->assign(array(
+    $smarty->assign([
         'WARNINGS' => $warnings,
         'WARNINGS_TITLE' => $language->get('admin', 'warning')
-    ));
+    ]);
 }
 
 if ($user_query->active == 0) {
-    $smarty->assign(array(
+    $smarty->assign([
         'VALIDATE_USER' => $language->get('admin', 'validate_user'),
         'VALIDATE_USER_LINK' => URL::build('/panel/users/edit/', 'id=' . Output::getClean($user_query->id) . '&action=validate'),
         'RESEND_ACTIVATION_EMAIL' => $language->get('admin', 'resend_activation_email'),
         'RESEND_ACTIVATION_EMAIL_LINK' => URL::build('/panel/users/edit/', 'id=' . Output::getClean($user_query->id) . '&action=resend_email')
-    ));
+    ]);
 }
 
 if (defined('MINECRAFT') && MINECRAFT === true) {
-    $smarty->assign(array(
+    $smarty->assign([
         'UPDATE_MINECRAFT_USERNAME' => $language->get('admin', 'update_mc_name'),
         'UPDATE_MINECRAFT_USERNAME_LINK' => URL::build('/panel/users/edit/', 'id=' . Output::getClean($user_query->id) . '&action=update_mcname'),
         'UPDATE_UUID' => $language->get('admin', 'update_uuid'),
         'UPDATE_UUID_LINK' => URL::build('/panel/users/edit/', 'id=' . Output::getClean($user_query->id) . '&action=update_uuid')
-    ));
+    ]);
 }
 
-if ($user_query->id != 1 && !$view_user->canViewACP()) {
-    $smarty->assign(array(
+if ($user_query->id != 1 && ! $view_user->canViewACP()) {
+    $smarty->assign([
         'DELETE_USER' => $language->get('admin', 'delete_user'),
         'ARE_YOU_SURE' => $language->get('general', 'are_you_sure'),
         'CONFIRM_DELETE_USER' => str_replace('{x}', Output::getClean($user_query->nickname), $language->get('admin', 'confirm_user_deletion')),
         'YES' => $language->get('general', 'yes'),
         'NO' => $language->get('general', 'no')
-    ));
+    ]);
 }
 
 $limit_groups = false;
-if ($user_query->id == 1 || ($user_query->id == $user->data()->id && !$user->hasPermission('admincp.groups.self'))) {
-    $smarty->assign(array(
+
+if ($user_query->id == 1 || ($user_query->id == $user->data()->id && ! $user->hasPermission('admincp.groups.self'))) {
+    $smarty->assign([
         'CANT_EDIT_GROUP' => $language->get('admin', 'cant_modify_root_user')
-    ));
+    ]);
     $limit_groups = true;
 }
 
-$displaynames = $queries->getWhere('settings', array('name', '=', 'displaynames'));
+$displaynames = $queries->getWhere('settings', ['name', '=', 'displaynames']);
 $displaynames = $displaynames[0]->value;
 
-$uuid_linking = $queries->getWhere('settings', array('name', '=', 'uuid_linking'));
+$uuid_linking = $queries->getWhere('settings', ['name', '=', 'uuid_linking']);
 $uuid_linking = $uuid_linking[0]->value;
 
-$private_profile = $queries->getWhere('settings', array('name', '=', 'private_profile'));
+$private_profile = $queries->getWhere('settings', ['name', '=', 'private_profile']);
 $private_profile = $private_profile[0]->value;
 
-$templates = array();
-$templates_query = $queries->getWhere('templates', array('id', '<>', 0));
+$templates = [];
+$templates_query = $queries->getWhere('templates', ['id', '<>', 0]);
 
 foreach ($templates_query as $item) {
-    $templates[] = array(
+    $templates[] = [
         'id' => Output::getClean($item->id),
         'name' => Output::getClean($item->name),
         'active' => $item->id === $user_query->theme_id
-    );
+    ];
 }
 
 $groups = $queries->orderAll('groups', '`order`', 'ASC');
-$filtered_groups = array();
+$filtered_groups = [];
+
 foreach ($groups as $group) {
     // Only show groups whose ID is not their main group and whose order is HIGHER than their main group. A main group simply means this $user's group with LOWEST order
     // TODO: Probably can make this into the mysql query
     if ($limit_groups) {
-        if ((!($group->id == $view_user->getMainGroup()->id)) && ($view_user->getMainGroup()->order < $group->order)) {
+        if ((! ($group->id == $view_user->getMainGroup()->id)) && ($view_user->getMainGroup()->order < $group->order)) {
             $filtered_groups[] = $group;
         }
     } else {
@@ -410,8 +438,8 @@ $cache->setCache('post_formatting');
 $formatting = $cache->retrieve('formatting');
 
 if ($formatting == 'markdown') {
-    require(ROOT_PATH . '/core/includes/markdown/tomarkdown/autoload.php');
-    $converter = new League\HTMLToMarkdown\HtmlConverter(array('strip_tags' => true));
+    require (ROOT_PATH . '/core/includes/markdown/tomarkdown/autoload.php');
+    $converter = new League\HTMLToMarkdown\HtmlConverter(['strip_tags' => true]);
 
     $signature = $converter->convert(Output::getDecoded($user_query->signature));
     $signature = Output::getPurified($signature);
@@ -419,12 +447,13 @@ if ($formatting == 'markdown') {
     $signature = Output::getPurified(Output::getDecoded($user_query->signature));
 }
 
-$user_groups = array();
+$user_groups = [];
+
 foreach ($view_user->getGroups() as $group) {
     $user_groups[$group->id] = $group->id;
 }
 
-$smarty->assign(array(
+$smarty->assign([
     'PARENT_PAGE' => PARENT_PAGE,
     'DASHBOARD' => $language->get('admin', 'dashboard'),
     'USER_MANAGEMENT' => $language->get('admin', 'user_management'),
@@ -465,24 +494,25 @@ $smarty->assign(array(
     'INFO' => $language->get('general', 'info'),
     'ACTIVE_TEMPLATE' => $language->get('user', 'active_template'),
     'TEMPLATES' => $templates
-));
+]);
 
 $discord_id = $user_query->discord_id;
 
 if ($discord_id != null && $discord_id != 010) {
-    $smarty->assign(array(
+    $smarty->assign([
         'DISCORD_ID' => $language->get('user', 'discord_id'),
         'DISCORD_ID_VALUE' => $discord_id
-    ));
+    ]);
 }
 
 $cache->setCache('post_formatting');
 $formatting = $cache->retrieve('formatting');
+
 if ($formatting == 'markdown') {
-    $template->addJSFiles(array(
-        (defined('CONFIG_PATH' ? CONFIG_PATH : '')) . '/core/assets/plugins/emoji/js/emojione.min.js' => array(),
-        (defined('CONFIG_PATH' ? CONFIG_PATH : '')) . '/core/assets/plugins/emojionearea/js/emojionearea.min.js' => array()
-    ));
+    $template->addJSFiles([
+        (defined('CONFIG_PATH' ? CONFIG_PATH : '')) . '/core/assets/plugins/emoji/js/emojione.min.js' => [],
+        (defined('CONFIG_PATH' ? CONFIG_PATH : '')) . '/core/assets/plugins/emojionearea/js/emojionearea.min.js' => []
+    ]);
 
     $template->addJSScript('
             $(document).ready(function() {
@@ -492,29 +522,29 @@ if ($formatting == 'markdown') {
             });
         ');
 } else {
-    $template->addJSFiles(array(
-        (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/emoji/js/emojione.min.js' => array(),
-        (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/ckeditor/ckeditor.js' => array(),
-        (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/ckeditor/ckeditor.js' => array(),
-        (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/ckeditor/plugins/emojione/dialogs/emojione.json' => array()
-    ));
+    $template->addJSFiles([
+        (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/emoji/js/emojione.min.js' => [],
+        (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/ckeditor/ckeditor.js' => [],
+        (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/ckeditor/ckeditor.js' => [],
+        (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/ckeditor/plugins/emojione/dialogs/emojione.json' => []
+    ]);
 
     $template->addJSScript(Input::createEditor('InputSignature'));
 }
 
-$template->addCSSFiles(array(
-    (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/ckeditor/plugins/spoiler/css/spoiler.css' => array(),
-    (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/emoji/css/emojione.min.css' => array(),
-    (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/emoji/css/emojione.sprites.css' => array(),
-    (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/emojionearea/css/emojionearea.min.css' => array(),
-));
+$template->addCSSFiles([
+    (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/ckeditor/plugins/spoiler/css/spoiler.css' => [],
+    (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/emoji/css/emojione.min.css' => [],
+    (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/emoji/css/emojione.sprites.css' => [],
+    (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/emojionearea/css/emojionearea.min.css' => [],
+]);
 
 $page_load = microtime(true) - $start;
 define('PAGE_LOAD_TIME', str_replace('{x}', round($page_load, 3), $language->get('general', 'page_loaded_in')));
 
 $template->onPageLoad();
 
-require(ROOT_PATH . '/core/templates/panel_navbar.php');
+require (ROOT_PATH . '/core/templates/panel_navbar.php');
 
 // Display template
 $template->displayTemplate('core/users_edit.tpl', $smarty);
diff --git a/modules/Core/pages/panel/users_ip_lookup.php b/modules/Core/pages/panel/users_ip_lookup.php
index f48b6381000535cd8064abd9526efdde2ff46a7e..a5367d079fa4a8f70765e1198a0fb58ee4907161 100644
--- a/modules/Core/pages/panel/users_ip_lookup.php
+++ b/modules/Core/pages/panel/users_ip_lookup.php
@@ -15,89 +15,90 @@ define('PAGE', 'panel');
 define('PARENT_PAGE', 'users');
 define('PANEL_PAGE', 'ip_lookup');
 $page_title = $language->get('moderator', 'ip_lookup');
-require_once(ROOT_PATH . '/core/templates/backend_init.php');
+
+require_once (ROOT_PATH . '/core/templates/backend_init.php');
 
 // Load modules + template
-Module::loadPage($user, $pages, $cache, $smarty, array($navigation, $cc_nav, $mod_nav), $widgets);
+Module::loadPage($user, $pages, $cache, $smarty, [$navigation, $cc_nav, $mod_nav], $widgets);
 
 if (isset($_GET['uid'])) {
     $user_id = intval($_GET['uid']);
 
-    $user_query = $queries->getWhere('users', array('id', '=', $user_id));
-    if (!count($user_query)) {
+    $user_query = $queries->getWhere('users', ['id', '=', $user_id]);
+
+    if (! count($user_query)) {
         Redirect::to(URL::build('/panel/users'));
+
         die();
     }
     $user_query = $user_query[0];
 
     // Search by user ID
-    $user_ips = $queries->getWhere('users_ips', array('user_id', '=', $user_id));
+    $user_ips = $queries->getWhere('users_ips', ['user_id', '=', $user_id]);
 
     if (count($user_ips)) {
-        $accounts = array();
+        $accounts = [];
 
         foreach ($user_ips as $account) {
-            $accounts[] = array(
+            $accounts[] = [
                 'ip' => Output::getClean($account->ip),
                 'link' => URL::build('/panel/users/ip_lookup/', 'ip=' . Output::getClean($account->ip))
-            );
+            ];
         }
 
         if (count($user_ips) == 1)
             $count_accounts = str_replace('{y}', Output::getClean($user_query->username), $language->get('moderator', '1_ip_with_name'));
-        else
-            $count_accounts = str_replace(array('{x}', '{y}'), array(count($user_ips), Output::getClean($user_query->username)), $language->get('moderator', 'count_ips_with_name'));
+        else $count_accounts = str_replace(['{x}', '{y}'], [count($user_ips), Output::getClean($user_query->username)], $language->get('moderator', 'count_ips_with_name'));
 
-        $smarty->assign(array(
+        $smarty->assign([
             'ACCOUNTS' => $accounts,
             'COUNT_ACCOUNTS' => $count_accounts,
             'BACK' => $language->get('general', 'back'),
             'BACK_LINK' => URL::build('/panel/users/ip_lookup')
-        ));
+        ]);
 
         $template_file = 'core/users_ip_lookup_results.tpl';
     } else {
-        $errors = array($language->get('moderator', 'no_ips_with_username'));
+        $errors = [$language->get('moderator', 'no_ips_with_username')];
 
         $template_file = 'core/users_ip_lookup.tpl';
     }
 } else if (isset($_GET['ip'])) {
     // IP has been specified
     // Get accounts with this IP
-    $ip_accounts = $queries->getWhere('users_ips', array('ip', '=', Output::getClean($_GET['ip'])));
+    $ip_accounts = $queries->getWhere('users_ips', ['ip', '=', Output::getClean($_GET['ip'])]);
 
-    if (!count($ip_accounts)) {
-        $errors = array($language->get('moderator', 'no_accounts_with_that_ip'));
+    if (! count($ip_accounts)) {
+        $errors = [$language->get('moderator', 'no_accounts_with_that_ip')];
 
         $template_file = 'core/users_ip_lookup.tpl';
     } else {
-        $accounts = array();
+        $accounts = [];
 
         foreach ($ip_accounts as $account) {
-            $username = $queries->getWhere('users', array('id', '=', $account->user_id));
+            $username = $queries->getWhere('users', ['id', '=', $account->user_id]);
 
             if (count($username))
-                $accounts[] = array(
+                $accounts[] = [
                     'username' => Output::getClean($username[0]->username),
                     'nickname' => Output::getClean($username[0]->nickname),
                     'profile' => URL::build('/panel/user/' . Output::getClean($username[0]->id . '-' . $username[0]->username)),
                     'account_ips' => URL::build('/panel/users/ip_lookup/', 'uid=' . $account->user_id),
                     'style' => $user->getGroupClass($username[0]->id)
-                );
+                ];
         }
 
         if (count($ip_accounts) == 1)
             $count_accounts = str_replace('{y}', Output::getClean($_GET['ip']), $language->get('moderator', '1_account_with_ip'));
-        else
-            $count_accounts = str_replace(array('{x}', '{y}'), array(count($ip_accounts), Output::getClean($_GET['ip'])), $language->get('moderator', 'count_accounts_with_ip'));
+        else $count_accounts = str_replace(['{x}', '{y}'], [count($ip_accounts), Output::getClean($_GET['ip'])], $language->get('moderator', 'count_accounts_with_ip'));
 
-        $smarty->assign(array(
+        $smarty->assign([
             'IP_SEARCH' => true,
             'ACCOUNTS' => $accounts,
             'COUNT_ACCOUNTS' => $count_accounts,
             'BACK' => $language->get('general', 'back'),
             'BACK_LINK' => URL::build('/panel/users/ip_lookup')
-        ));
+        ]);
 
         $template_file = 'core/users_ip_lookup_results.tpl';
     }
@@ -106,29 +107,31 @@ if (isset($_GET['uid'])) {
         // Check token
         if (Token::check()) {
             // Search
-            $query = $queries->getWhere('users', array('username', '=', Output::getClean(Input::get('search'))));
+            $query = $queries->getWhere('users', ['username', '=', Output::getClean(Input::get('search'))]);
 
-            if (!count($query)) {
+            if (! count($query)) {
                 // Try nickname
-                $query = $queries->getWhere('users', array('nickname', '=', Output::getClean(Input::get('search'))));
+                $query = $queries->getWhere('users', ['nickname', '=', Output::getClean(Input::get('search'))]);
             }
 
             if (count($query)) {
                 Redirect::to(URL::build('/panel/users/ip_lookup/', 'uid=' . Output::getClean($query[0]->id)));
+
                 die();
             }
 
             // Try searching IPs
-            $query = $queries->getWhere('users_ips', array('ip', '=', Output::getClean(Input::get('search'))));
+            $query = $queries->getWhere('users_ips', ['ip', '=', Output::getClean(Input::get('search'))]);
 
             if (count($query)) {
                 Redirect::to(URL::build('/panel/users/ip_lookup/', 'ip=' . Output::getClean(Input::get('search'))));
+
                 die();
             }
 
-            $errors = array($language->get('moderator', 'no_users_or_ips_found'));
+            $errors = [$language->get('moderator', 'no_users_or_ips_found')];
         } else {
-            $errors = array($language->get('general', 'invalid_token'));
+            $errors = [$language->get('general', 'invalid_token')];
         }
     }
 
@@ -136,18 +139,18 @@ if (isset($_GET['uid'])) {
 }
 
 if (isset($success))
-    $smarty->assign(array(
+    $smarty->assign([
         'SUCCESS' => $success,
         'SUCCESS_TITLE' => $language->get('general', 'success')
-    ));
+    ]);
 
 if (isset($errors) && count($errors))
-    $smarty->assign(array(
+    $smarty->assign([
         'ERRORS' => $errors,
         'ERRORS_TITLE' => $language->get('general', 'error')
-    ));
+    ]);
 
-$smarty->assign(array(
+$smarty->assign([
     'PARENT_PAGE' => PARENT_PAGE,
     'DASHBOARD' => $language->get('admin', 'dashboard'),
     'USER_MANAGEMENT' => $language->get('admin', 'user_management'),
@@ -156,14 +159,14 @@ $smarty->assign(array(
     'PAGE' => PANEL_PAGE,
     'TOKEN' => Token::get(),
     'SUBMIT' => $language->get('general', 'submit')
-));
+]);
 
 $page_load = microtime(true) - $start;
 define('PAGE_LOAD_TIME', str_replace('{x}', round($page_load, 3), $language->get('general', 'page_loaded_in')));
 
 $template->onPageLoad();
 
-require(ROOT_PATH . '/core/templates/panel_navbar.php');
+require (ROOT_PATH . '/core/templates/panel_navbar.php');
 
 // Display template
 $template->displayTemplate($template_file, $smarty);
diff --git a/modules/Core/pages/panel/users_punishments.php b/modules/Core/pages/panel/users_punishments.php
index 537cf00bdfca9567b7b6cf4c848400d3b68cc125..0f748d1354906b5df8675af57d025b5b23c3ff9d 100644
--- a/modules/Core/pages/panel/users_punishments.php
+++ b/modules/Core/pages/panel/users_punishments.php
@@ -17,24 +17,29 @@ define('PAGE', 'panel');
 define('PARENT_PAGE', 'users');
 define('PANEL_PAGE', 'punishments');
 $page_title = $language->get('moderator', 'punishments');
-require_once(ROOT_PATH . '/core/templates/backend_init.php');
+
+require_once (ROOT_PATH . '/core/templates/backend_init.php');
 
 // Load modules + template
-Module::loadPage($user, $pages, $cache, $smarty, array($navigation, $cc_nav, $mod_nav), $widgets);
+Module::loadPage($user, $pages, $cache, $smarty, [$navigation, $cc_nav, $mod_nav], $widgets);
 
 if (isset($_GET['user'])) {
     // Viewing a certain user
     $view_user = new User($_GET['user']);
-    if (!$view_user->data()) {
+
+    if (! $view_user->data()) {
         Redirect::to(URL::build('/panel/users/punishments'));
+
         die();
     }
     $query = $view_user->data();
 
     if (isset($_GET['do']) && $_GET['do'] == 'revoke' && isset($_GET['id']) && is_numeric($_GET['id'])) {
-        $infraction = $queries->getWhere('infractions', array('id', '=', $_GET['id']));
-        if (!$user->hasPermission('modcp.punishments.revoke') || !count($infraction) || (count($infraction) && $infraction[0]->punished != $query->id)) {
+        $infraction = $queries->getWhere('infractions', ['id', '=', $_GET['id']]);
+
+        if (! $user->hasPermission('modcp.punishments.revoke') || ! count($infraction) || (count($infraction) && $infraction[0]->punished != $query->id)) {
             Redirect::to(URL::build('/panel/users/punishments/', 'user=' . $query->id));
+
             die();
         }
         $infraction = $infraction[0];
@@ -44,86 +49,95 @@ if (isset($_GET['user'])) {
         if ($infraction->type == 1) {
             // Unban user
             try {
-                $queries->update('users', $query->id, array(
+                $queries->update('users', $query->id, [
                     'isbanned' => 0,
                     'active' => 1
-                ));
+                ]);
             } catch (Exception $e) {
                 // Error
-                $errors = array($e->getMessage());
+                $errors = [$e->getMessage()];
             }
         } else if ($infraction->type == 3) {
             // Unban IP
             try {
-                $queries->update('users', $query->id, array(
+                $queries->update('users', $query->id, [
                     'isbanned' => 0,
                     'active' => 1
-                ));
+                ]);
 
-                $queries->delete('ip_bans', array('ip', '=', $query->lastip));
+                $queries->delete('ip_bans', ['ip', '=', $query->lastip]);
             } catch (Exception $e) {
                 // Error
-                $errors = array($e->getMessage());
+                $errors = [$e->getMessage()];
             }
         }
 
         try {
-            $queries->update('infractions', $infraction->id, array(
+            $queries->update('infractions', $infraction->id, [
                 'acknowledged' => 1,
                 'revoked' => 1,
                 'revoked_by' => $user->data()->id,
                 'revoked_at' => date('U')
-            ));
+            ]);
         } catch (Exception $e) {
             // Error
-            $errors = array($e->getMessage());
+            $errors = [$e->getMessage()];
         }
 
         Session::flash('user_punishment_success', $language->get('moderator', 'punishment_revoked'));
         Redirect::to(URL::build('/panel/users/punishments/', 'user=' . $query->id));
+
         die();
     }
 
     if (Input::exists()) {
-        $errors = array();
+        $errors = [];
 
         if (Token::check()) {
             if (isset($_POST['type'])) {
                 switch ($_POST['type']) {
                     case 'reset_avatar':
                         // Reset Avatar
-                        if (!$user->hasPermission('modcp.punishments.reset_avatar')) {
+                        if (! $user->hasPermission('modcp.punishments.reset_avatar')) {
                             Redirect::to(URL::build('/panel/users/punishments'));
+
                             die();
                         }
                         $type = 4;
+
                         break;
 
                     case 'ban':
                         // Ban
-                        if (!$user->hasPermission('modcp.punishments.ban')) {
+                        if (! $user->hasPermission('modcp.punishments.ban')) {
                             Redirect::to(URL::build('/panel/users/punishments'));
+
                             die();
                         }
                         $type = 1;
+
                         break;
 
                     case 'ban_ip':
                         // Ban IP
-                        if (!$user->hasPermission('modcp.punishments.banip')) {
+                        if (! $user->hasPermission('modcp.punishments.banip')) {
                             Redirect::to(URL::build('/panel/users/punishments'));
+
                             die();
                         }
                         $type = 3;
+
                         break;
 
                     default:
                         // Warn
-                        if (!$user->hasPermission('modcp.punishments.warn')) {
+                        if (! $user->hasPermission('modcp.punishments.warn')) {
                             Redirect::to(URL::build('/panel/users/punishments'));
+
                             die();
                         }
                         $type = 2;
+
                         break;
                 }
 
@@ -135,8 +149,8 @@ if (isset($_GET['user'])) {
                         $is_admin = $banned_user->canViewACP();
 
                         // Ensure user is not admin
-                        if (!$is_admin) {
-                            $queries->create('infractions', array(
+                        if (! $is_admin) {
+                            $queries->create('infractions', [
                                 'type' => $type,
                                 'punished' => $query->id,
                                 'staff' => $user->data()->id,
@@ -144,31 +158,31 @@ if (isset($_GET['user'])) {
                                 'infraction_date' => date('Y-m-d H:i:s'),
                                 'created' => date('U'),
                                 'acknowledged' => (($type == 2) ? 0 : 1)
-                            ));
+                            ]);
 
                             if ($type == 1 || $type == 3) {
                                 // Ban the user
-                                $queries->update('users', $query->id, array(
+                                $queries->update('users', $query->id, [
                                     'isbanned' => 1,
                                     'active' => 0
-                                ));
+                                ]);
 
                                 $banned_user_ip = $banned_user->data()->lastip;
 
-                                $queries->delete('users_session', array('user_id', '=', $query->id));
+                                $queries->delete('users_session', ['user_id', '=', $query->id]);
 
                                 if ($type == 3) {
                                     // Ban IP
-                                    $queries->create('ip_bans', array(
+                                    $queries->create('ip_bans', [
                                         'ip' => $banned_user_ip,
                                         'banned_by' => $user->data()->id,
                                         'banned_at' => date('U'),
                                         'reason' => $_POST['reason']
-                                    ));
+                                    ]);
                                 }
                             } else if ($type == 4) {
                                 // Need to delete any other avatars
-                                $diff_str = implode(',', array('jpg', 'png', 'jpeg', 'gif'));
+                                $diff_str = implode(',', ['jpg', 'png', 'jpeg', 'gif']);
 
                                 $to_remove = glob(ROOT_PATH . '/uploads/avatars/' . $query->id . '.{' . $diff_str . '}', GLOB_BRACE);
 
@@ -178,18 +192,20 @@ if (isset($_GET['user'])) {
                                     }
                                 }
 
-                                $queries->update('users', $query->id, array(
+                                $queries->update('users', $query->id, [
                                     'has_avatar' => 0,
                                     'avatar_updated' => date('U')
-                                ));
+                                ]);
                             }
 
                             // Send alerts
                             $groups_query = DB::getInstance()->query('SELECT id FROM nl2_groups WHERE permissions LIKE \'%"modcp.punishments":1%\'');
+
                             if ($groups_query->count()) {
                                 $groups_query = $groups_query->results();
 
                                 $groups = '(';
+
                                 foreach ($groups_query as $group) {
                                     if (is_numeric($group->id)) {
                                         $groups .= ((int) $group->id) . ',';
@@ -205,48 +221,53 @@ if (isset($_GET['user'])) {
 
                                     foreach ($users as $item) {
                                         // Send alert
-                                        Alert::create($item->id, 'punishment', array('path' => 'core', 'file' => 'moderator', 'term' => 'user_punished_alert', 'replace' => array('{x}', '{y}'), 'replace_with' => array(Output::getClean($user->data()->nickname), Output::getClean($query->nickname))), array('path' => 'core', 'file' => 'moderator', 'term' => 'user_punished_alert', 'replace' => array('{x}', '{y}'), 'replace_with' => array(Output::getClean($user->data()->nickname), Output::getClean($query->nickname))), URL::build('/panel/users/punishments/', 'user=' . Output::getClean($query->id)));
+                                        Alert::create($item->id, 'punishment', ['path' => 'core', 'file' => 'moderator', 'term' => 'user_punished_alert', 'replace' => ['{x}', '{y}'], 'replace_with' => [Output::getClean($user->data()->nickname), Output::getClean($query->nickname)]], ['path' => 'core', 'file' => 'moderator', 'term' => 'user_punished_alert', 'replace' => ['{x}', '{y}'], 'replace_with' => [Output::getClean($user->data()->nickname), Output::getClean($query->nickname)]], URL::build('/panel/users/punishments/', 'user=' . Output::getClean($query->id)));
                                     }
                                 }
                             }
-                        } else
-                            $errors[] = $language->get('moderator', 'cant_punish_admin');
+                        } else $errors[] = $language->get('moderator', 'cant_punish_admin');
                     } catch (Exception $e) {
                         $errors[] = $e->getMessage();
                     }
-                } else
-                    $errors[] = $language->get('moderator', 'enter_valid_punishment_reason');
+                } else $errors[] = $language->get('moderator', 'enter_valid_punishment_reason');
             }
-        } else
-            $errors[] = $language->get('general', 'invalid_token');
+        } else $errors[] = $language->get('general', 'invalid_token');
     }
 
     // Get any previous punishments
     $previous_punishments = $queries->orderWhere('infractions', 'punished = ' . $query->id, 'created', 'DESC');
-    $previous_punishments_array = array();
+    $previous_punishments_array = [];
+
     if (count($previous_punishments)) {
         foreach ($previous_punishments as $punishment) {
             switch ($punishment->type) {
                 case 1:
                     // Ban
                     $type = $language->get('moderator', 'ban');
+
                     break;
+
                 case 2:
                     // Warning
                     $type = $language->get('moderator', 'warning');
+
                     break;
+
                 case 4:
                     // Reset Avatar
                     $type = $language->get('moderator', 'reset_avatar');
+
                     break;
+
                 default:
                     // IP Ban
                     $type = $language->get('moderator', 'ip_ban');
+
                     break;
             }
 
             $issued_by_user = new User($punishment->staff);
-            $previous_punishments_array[] = array(
+            $previous_punishments_array[] = [
                 'type' => $type,
                 'type_numeric' => $punishment->type,
                 'revoked' => $punishment->revoked,
@@ -260,7 +281,7 @@ if (isset($_GET['user'])) {
                 'date_friendly' => ($punishment->created ? $timeago->inWords(date('Y-m-d H:i:s', $punishment->created), $language->getTimeLanguage()) : $timeago->inWords($punishment->infraction_date, $language->getTimeLanguage())),
                 'revoke_link' => (($user->hasPermission('modcp.punishments.revoke') && $punishment->type != 4) ? URL::build('/panel/users/punishments/', 'user=' . $query->id . '&do=revoke&id=' . $punishment->id) : 'none'),
                 'confirm_revoke_punishment' => (($punishment->type == 2) ? $language->get('moderator', 'confirm_revoke_warning') : $language->get('moderator', 'confirm_revoke_ban'))
-            );
+            ];
         }
     }
 
@@ -279,7 +300,7 @@ if (isset($_GET['user'])) {
     if ($user->hasPermission('modcp.punishments.revoke'))
         $smarty->assign('REVOKE_PERMISSION', true);
 
-    $smarty->assign(array(
+    $smarty->assign([
         'HAS_AVATAR' => $query->has_avatar,
         'BACK_LINK' => URL::build('/panel/users/punishments'),
         'BACK' => $language->get('general', 'back'),
@@ -301,24 +322,24 @@ if (isset($_GET['user'])) {
         'ARE_YOU_SURE' => $language->get('general', 'are_you_sure'),
         'YES' => $language->get('general', 'yes'),
         'NO' => $language->get('general', 'no')
-    ));
+    ]);
 
     $template_file = 'core/users_punishments_user.tpl';
 } else {
     if (Input::exists() && isset($_POST['username'])) {
         if (Token::check()) {
-            $check = DB::getInstance()->query('SELECT id FROM nl2_users WHERE username = ? OR nickname = ?', array($_POST['username'], $_POST['username']));
+            $check = DB::getInstance()->query('SELECT id FROM nl2_users WHERE username = ? OR nickname = ?', [$_POST['username'], $_POST['username']]);
 
             if ($check->count()) {
                 $check = $check->first();
 
                 Redirect::to(URL::build('/panel/users/punishments/', 'user=' . Output::getClean($check->id)));
+
                 die();
-            } else {
-                $errors = array($language->get('user', 'couldnt_find_that_user'));
             }
+                $errors = [$language->get('user', 'couldnt_find_that_user')];
         } else {
-            $errors = array($language->get('general', 'invalid_token'));
+            $errors = [$language->get('general', 'invalid_token')];
         }
     }
 
@@ -329,46 +350,54 @@ if (isset($_GET['user'])) {
         // Pagination
         // Get page
         if (isset($_GET['p'])) {
-            if (!is_numeric($_GET['p'])) {
+            if (! is_numeric($_GET['p'])) {
                 Redirect::to(URL::build('/panel/users/punishments'));
+
                 die();
-            } else {
+            }
+
                 if ($_GET['p'] == 1) {
                     // Avoid bug in pagination class
                     Redirect::to(URL::build('/panel/users/punishments'));
+
                     die();
                 }
                 $p = $_GET['p'];
-            }
         } else {
             $p = 1;
         }
 
-        $paginator = new Paginator((isset($template_pagination) ? $template_pagination : array()));
+        $paginator = new Paginator((isset($template_pagination) ? $template_pagination : []));
         $results = $paginator->getLimited($punishments, 10, $p, count($punishments));
         $pagination = $paginator->generate(7, URL::build('/panel/users/punishments/', true));
 
-        $smarty_results = array();
+        $smarty_results = [];
+
         foreach ($results->data as $result) {
             switch ($result->type) {
                 case 1:
                     // Ban
                     $type = $language->get('moderator', 'ban');
+
                     break;
+
                 case 2:
                     // Warning
                     $type = $language->get('moderator', 'warning');
+
                     break;
+
                 default:
                     // IP Ban
                     $type = $language->get('moderator', 'ip_ban');
+
                     break;
             }
 
             $target_user = new User($result->punished);
             $staff_user = new User($result->staff);
 
-            $smarty_results[] = array(
+            $smarty_results[] = [
                 'username' => $target_user->getDisplayname(true),
                 'nickname' => $target_user->getDisplayname(),
                 'profile' => URL::build('/panel/user/' . Output::getClean($result->punished . '-' . $target_user->data()->username)),
@@ -386,10 +415,10 @@ if (isset($_GET['user'])) {
                 'time_full' => ($result->created ? date('d M Y, H:i', $result->created) : date('d M Y, H:i', strtotime($result->infraction_date))),
                 'time' => ($result->created ? $timeago->inWords(date('Y-m-d H:i:s', $result->created), $language->getTimeLanguage()) : $timeago->inWords($result->infraction_date, $language->getTimeLanguage())),
                 'link' => URL::build('/panel/users/punishments/', 'user=' . $result->punished)
-            );
+            ];
         }
 
-        $smarty->assign(array(
+        $smarty->assign([
             'PAGINATION' => $pagination,
             'STAFF' => $language->get('moderator', 'staff'),
             'ACTIONS' => $language->get('moderator', 'actions'),
@@ -399,16 +428,16 @@ if (isset($_GET['user'])) {
             'RESULTS' => $smarty_results,
             'ACKNOWLEDGED' => $language->get('moderator', 'acknowledged'),
             'REVOKED' => $language->get('moderator', 'revoked')
-        ));
+        ]);
     } else {
         $smarty->assign('NO_PUNISHMENTS', $language->get('moderator', 'no_punishments_found'));
     }
 
-    $smarty->assign(array(
+    $smarty->assign([
         'USERNAME' => $language->get('user', 'username'),
         'SEARCH' => $language->get('general', 'search'),
         'CANCEL' => $language->get('general', 'cancel')
-    ));
+    ]);
 
     $template_file = 'core/users_punishments.tpl';
 }
@@ -417,18 +446,18 @@ if (Session::exists('user_punishment_success'))
     $success = Session::flash('user_punishment_success');
 
 if (isset($success))
-    $smarty->assign(array(
+    $smarty->assign([
         'SUCCESS' => $success,
         'SUCCESS_TITLE' => $language->get('general', 'success')
-    ));
+    ]);
 
 if (isset($errors) && count($errors))
-    $smarty->assign(array(
+    $smarty->assign([
         'ERRORS' => $errors,
         'ERRORS_TITLE' => $language->get('general', 'error')
-    ));
+    ]);
 
-$smarty->assign(array(
+$smarty->assign([
     'PARENT_PAGE' => PARENT_PAGE,
     'DASHBOARD' => $language->get('admin', 'dashboard'),
     'USER_MANAGEMENT' => $language->get('admin', 'user_management'),
@@ -436,14 +465,14 @@ $smarty->assign(array(
     'PAGE' => PANEL_PAGE,
     'TOKEN' => Token::get(),
     'SUBMIT' => $language->get('general', 'submit')
-));
+]);
 
 $page_load = microtime(true) - $start;
 define('PAGE_LOAD_TIME', str_replace('{x}', round($page_load, 3), $language->get('general', 'page_loaded_in')));
 
 $template->onPageLoad();
 
-require(ROOT_PATH . '/core/templates/panel_navbar.php');
+require (ROOT_PATH . '/core/templates/panel_navbar.php');
 
 // Display template
 $template->displayTemplate($template_file, $smarty);
diff --git a/modules/Core/pages/panel/users_reports.php b/modules/Core/pages/panel/users_reports.php
index 4f9b78cb342436f7496917aa00a125fe17ec0c09..81e4185ede83120abb195b0d23072a34f6073252 100644
--- a/modules/Core/pages/panel/users_reports.php
+++ b/modules/Core/pages/panel/users_reports.php
@@ -15,73 +15,76 @@ define('PAGE', 'panel');
 define('PARENT_PAGE', 'users');
 define('PANEL_PAGE', 'reports');
 $page_title = $language->get('moderator', 'reports');
-require_once(ROOT_PATH . '/core/templates/backend_init.php');
+
+require_once (ROOT_PATH . '/core/templates/backend_init.php');
 
 $timeago = new Timeago(TIMEZONE);
 
-if (!isset($_GET['id'])) {
+if (! isset($_GET['id'])) {
     // Get all reports
-    $reports = array();
+    $reports = [];
 
-    if (!isset($_GET['view'])) {
+    if (! isset($_GET['view'])) {
         // Get open reports
-        if (!isset($_GET['uid'])) {
+        if (! isset($_GET['uid'])) {
             $report_query = DB::getInstance()->query('SELECT * FROM nl2_reports WHERE status = 0 ORDER BY date_updated DESC')->results();
             $url = URL::build('/panel/users/reports/', true);
             $change_view_link = URL::build('/panel/users/reports/', 'view=closed');
         } else {
-            $report_query = DB::getInstance()->query('SELECT * FROM nl2_reports WHERE status = 0 AND reported_id = ? ORDER BY date_updated DESC', array(intval($_GET['uid'])))->results();
+            $report_query = DB::getInstance()->query('SELECT * FROM nl2_reports WHERE status = 0 AND reported_id = ? ORDER BY date_updated DESC', [intval($_GET['uid'])])->results();
             $url = URL::build('/panel/users/reports/', 'uid=' . intval(Output::getClean($_GET['uid'])) . '&');
             $change_view_link = URL::build('/panel/users/reports/', 'view=closed&uid=' . intval(Output::getClean($_GET['uid'])));
         }
 
-        $smarty->assign(array(
+        $smarty->assign([
             'CHANGE_VIEW' => $language->get('moderator', 'view_closed'),
             'CHANGE_VIEW_LINK' => $change_view_link
-        ));
+        ]);
     } else {
         // Get closed reports
-        if (!isset($_GET['uid'])) {
+        if (! isset($_GET['uid'])) {
             $report_query = DB::getInstance()->query('SELECT * FROM nl2_reports WHERE status = 1 ORDER BY date_updated DESC')->results();
             $url = URL::build('/panel/users/reports/', 'view=closed&');
             $change_view_link = URL::build('/panel/users/reports');
         } else {
-            $report_query = DB::getInstance()->query('SELECT * FROM nl2_reports WHERE status = 1 AND reported_id = ? ORDER BY date_updated DESC', array(intval($_GET['uid'])))->results();
+            $report_query = DB::getInstance()->query('SELECT * FROM nl2_reports WHERE status = 1 AND reported_id = ? ORDER BY date_updated DESC', [intval($_GET['uid'])])->results();
             $url = URL::build('/panel/users/reports/', 'view=closed&uid=' . intval(Output::getClean($_GET['uid'])) . '&');
             $change_view_link = URL::build('/panel/users/reports/', 'uid=' . intval(Output::getClean($_GET['uid'])));
         }
 
-        $smarty->assign(array(
+        $smarty->assign([
             'CHANGE_VIEW' => $language->get('moderator', 'view_open'),
             'CHANGE_VIEW_LINK' => $change_view_link
-        ));
+        ]);
     }
 
     if (count($report_query)) {
         // Get page
         if (isset($_GET['p'])) {
-            if (!is_numeric($_GET['p'])) {
+            if (! is_numeric($_GET['p'])) {
                 Redirect::to($url);
+
                 die();
-            } else {
+            }
+
                 if ($_GET['p'] == 1) {
                     // Avoid bug in pagination class
                     Redirect::to($url);
+
                     die();
                 }
                 $p = $_GET['p'];
-            }
         } else {
             $p = 1;
         }
 
-        $paginator = new Paginator((isset($template_pagination) ? $template_pagination : array()));
+        $paginator = new Paginator((isset($template_pagination) ? $template_pagination : []));
         $results = $paginator->getLimited($report_query, 10, $p, count($report_query));
         $pagination = $paginator->generate(7, $url);
 
         foreach ($results->data as $report) {
             // Get comments count
-            $comments = $queries->getWhere('reports_comments', array('report_id', '=', $report->id));
+            $comments = $queries->getWhere('reports_comments', ['report_id', '=', $report->id]);
             $comments = count($comments);
 
             $target_user = new User($report->reported_id);
@@ -102,7 +105,7 @@ if (!isset($_GET['id'])) {
 
             $updated_by_user = new User($report->updated_by);
 
-            $reports[] = array(
+            $reports[] = [
                 'id' => $report->id,
                 'user_reported' => $user_reported,
                 'user_profile' => $user_profile,
@@ -118,12 +121,12 @@ if (!isset($_GET['id'])) {
                 'updated_at' => ($report->updated ? $timeago->inWords(date('Y-m-d H:i:s', $report->updated), $language->getTimeLanguage()) : $timeago->inWords($report->date_updated, $language->getTimeLanguage())),
                 'updated_at_full' => ($report->updated ? date('d M Y, H:i', $report->updated) : date('d M Y, H:i', strtotime($report->date_updated))),
                 'comments' => $comments
-            );
+            ];
         }
 
         $smarty->assign('PAGINATION', $pagination);
     } else {
-        if (!isset($_GET['view'])) {
+        if (! isset($_GET['view'])) {
             $smarty->assign('NO_REPORTS', $language->get('moderator', 'no_open_reports'));
         } else {
             $smarty->assign('NO_REPORTS', $language->get('moderator', 'no_closed_reports'));
@@ -135,57 +138,59 @@ if (!isset($_GET['id'])) {
     }
 
     // Smarty variables
-    $smarty->assign(array(
+    $smarty->assign([
         'ALL_REPORTS' => $reports,
         'VIEW' => $language->get('general', 'view'),
         'USER_REPORTED' => $language->get('moderator', 'user_reported'),
         'COMMENTS' => $language->get('moderator', 'comments'),
         'UPDATED_BY' => $language->get('moderator', 'updated_by'),
         'ACTIONS' => $language->get('moderator', 'actions')
-    ));
+    ]);
 
     $template_file = 'core/users_reports.tpl';
 } else {
     // Get report by ID
-    if (!isset($_GET['action'])) {
-        $report = $queries->getWhere('reports', array('id', '=', $_GET['id']));
-        if (!count($report)) {
+    if (! isset($_GET['action'])) {
+        $report = $queries->getWhere('reports', ['id', '=', $_GET['id']]);
+
+        if (! count($report)) {
             Redirect::to(URL::build('/panel/users/reports'));
+
             die();
         }
         $report = $report[0];
 
         // Check input
         if (Input::exists()) {
-            $errors = array();
+            $errors = [];
 
             // Check token
             if (Token::check()) {
                 // Valid token
                 $validate = new Validate();
 
-                $validation = $validate->check($_POST, array(
-                    'content' => array(
+                $validation = $validate->check($_POST, [
+                    'content' => [
                         'required' => true,
                         'min' => 1,
                         'max' => 10000
-                    )
-                ));
+                    ]
+                ]);
 
                 if ($validation->passed()) {
-                    $queries->create('reports_comments', array(
+                    $queries->create('reports_comments', [
                         'report_id' => $report->id,
                         'commenter_id' => $user->data()->id,
                         'comment_date' => date('Y-m-d H:i:s'),
                         'comment_content' => Output::getClean(Input::get('content')),
                         'date' => date('U')
-                    ));
+                    ]);
 
-                    $queries->update('reports', $report->id, array(
+                    $queries->update('reports', $report->id, [
                         'updated_by' => $user->data()->id,
                         'updated' => date('U'),
                         'date_updated' => date('Y-m-d H:i:s')
-                    ));
+                    ]);
 
                     $success = $language->get('moderator', 'comment_created');
                 } else {
@@ -199,12 +204,13 @@ if (!isset($_GET['id'])) {
         }
 
         // Get comments
-        $comments = $queries->getWhere('reports_comments', array('report_id', '=', $report->id));
-        $smarty_comments = array();
+        $comments = $queries->getWhere('reports_comments', ['report_id', '=', $report->id]);
+        $smarty_comments = [];
+
         foreach ($comments as $comment) {
             $comment_user = new User($comment->commenter_id);
 
-            $smarty_comments[] = array(
+            $smarty_comments[] = [
                 'username' => $comment_user->getDisplayname(),
                 'profile' => URL::build('/panel/user/' . Output::getClean($comment->commenter_id . '-' . $comment_user->data()->username)),
                 'style' => $comment_user->getGroupClass(),
@@ -212,11 +218,12 @@ if (!isset($_GET['id'])) {
                 'content' => Output::getPurified(Output::getDecoded($comment->comment_content)),
                 'date' => ($comment->date ? date('d M Y, H:i', $comment->date) : date('d M Y, H:i', strtotime($comment->comment_date))),
                 'date_friendly' => ($comment->date ? $timeago->inWords(date('Y-m-d H:i:s', $comment->date), $language->getTimeLanguage()) : $timeago->inWords($comment->comment_date, $language->getTimeLanguage()))
-            );
+            ];
         }
 
-        if (!$report->reported_id) {
+        if (! $report->reported_id) {
             $reported_user = new User($report->reported_uuid, 'uuid');
+
             if ($reported_user->data()) {
                 $reported_user_profile = URL::build('/panel/user/' . Output::getClean($reported_user->data()->id . '-' . $reported_user->data()->username));
                 $reported_user_style = $reported_user->getGroupClass();
@@ -240,7 +247,7 @@ if (!isset($_GET['id'])) {
         $reporter_user = new User($report->reporter_id);
 
         // Smarty variables
-        $smarty->assign(array(
+        $smarty->assign([
             'REPORTS_LINK' => URL::build('/panel/users/reports'),
             'VIEWING_REPORT' => $language->get('moderator', 'viewing_report'),
             'BACK' => $language->get('general', 'back'),
@@ -262,19 +269,19 @@ if (!isset($_GET['id'])) {
             'NO_COMMENTS' => $language->get('moderator', 'no_comments'),
             'NEW_COMMENT' => $language->get('moderator', 'new_comment'),
             'TYPE' => $report->type
-        ));
+        ]);
 
         // Close/reopen link
         if ($report->status == 0) {
-            $smarty->assign(array(
+            $smarty->assign([
                 'CLOSE_LINK' => URL::build('/panel/users/reports/', 'action=close&id=' . $report->id),
                 'CLOSE_REPORT' => $language->get('moderator', 'close_report')
-            ));
+            ]);
         } else {
-            $smarty->assign(array(
+            $smarty->assign([
                 'REOPEN_LINK' => URL::build('/panel/users/reports/', 'action=open&id=' . $report->id),
                 'REOPEN_REPORT' => $language->get('moderator', 'reopen_report')
-            ));
+            ]);
         }
 
         $template_file = 'core/users_reports_view.tpl';
@@ -283,86 +290,94 @@ if (!isset($_GET['id'])) {
             // Close report
             if (is_numeric($_GET['id'])) {
                 // Get report
-                $report = $queries->getWhere('reports', array('id', '=', $_GET['id']));
+                $report = $queries->getWhere('reports', ['id', '=', $_GET['id']]);
+
                 if (count($report)) {
-                    $queries->update('reports', $report[0]->id, array(
+                    $queries->update('reports', $report[0]->id, [
                         'status' => 1,
                         'date_updated' => date('Y-m-d H:i:s'),
                         'updated' => date('U'),
                         'updated_by' => $user->data()->id
-                    ));
+                    ]);
 
-                    $queries->create('reports_comments', array(
+                    $queries->create('reports_comments', [
                         'report_id' => $report[0]->id,
                         'commenter_id' => $user->data()->id,
                         'comment_date' => date('Y-m-d H:i:s'),
                         'date' => date('U'),
                         'comment_content' => str_replace('{x}', Output::getClean($user->data()->username), $language->get('moderator', 'x_closed_report'))
-                    ));
+                    ]);
                 }
 
                 Session::flash('report_success', $language->get('moderator', 'report_closed'));
                 Redirect::to(URL::build('/panel/users/reports/', 'id=' . Output::getClean($report[0]->id)));
+
                 die();
             }
 
             Redirect::to(URL::build('/panel/users/reports'));
+
             die();
-        } else if ($_GET['action'] == 'open') {
+        }
+
+        if ($_GET['action'] == 'open') {
             // Reopen report
             if (is_numeric($_GET['id'])) {
                 // Get report
-                $report = $queries->getWhere('reports', array('id', '=', $_GET['id']));
+                $report = $queries->getWhere('reports', ['id', '=', $_GET['id']]);
+
                 if (count($report)) {
-                    $queries->update('reports', $report[0]->id, array(
+                    $queries->update('reports', $report[0]->id, [
                         'status' => 0,
                         'date_updated' => date('Y-m-d H:i:s'),
                         'updated' => date('U'),
                         'updated_by' => $user->data()->id
-                    ));
+                    ]);
 
-                    $queries->create('reports_comments', array(
+                    $queries->create('reports_comments', [
                         'report_id' => $report[0]->id,
                         'commenter_id' => $user->data()->id,
                         'comment_date' => date('Y-m-d H:i:s'),
                         'date' => date('U'),
                         'comment_content' => str_replace('{x}', Output::getClean($user->data()->username), $language->get('moderator', 'x_reopened_report'))
-                    ));
+                    ]);
                 }
 
                 Session::flash('report_success', $language->get('moderator', 'report_reopened'));
                 Redirect::to(URL::build('/panel/users/reports/', 'id=' . Output::getClean($report[0]->id)));
+
                 die();
             }
 
             Redirect::to(URL::build('/panel/users/reports'));
+
             die();
-        } else {
+        }
             Redirect::to(URL::build('/panel/users/reports'));
+
             die();
-        }
     }
 }
 
 // Load modules + template
-Module::loadPage($user, $pages, $cache, $smarty, array($navigation, $cc_nav, $mod_nav), $widgets);
+Module::loadPage($user, $pages, $cache, $smarty, [$navigation, $cc_nav, $mod_nav], $widgets);
 
 if (Session::exists('report_success'))
     $success = Session::flash('report_success');
 
 if (isset($success))
-    $smarty->assign(array(
+    $smarty->assign([
         'SUCCESS' => $success,
         'SUCCESS_TITLE' => $language->get('general', 'success')
-    ));
+    ]);
 
 if (isset($errors) && count($errors))
-    $smarty->assign(array(
+    $smarty->assign([
         'ERRORS' => $errors,
         'ERRORS_TITLE' => $language->get('general', 'error')
-    ));
+    ]);
 
-$smarty->assign(array(
+$smarty->assign([
     'PARENT_PAGE' => PARENT_PAGE,
     'DASHBOARD' => $language->get('admin', 'dashboard'),
     'USER_MANAGEMENT' => $language->get('admin', 'user_management'),
@@ -370,14 +385,14 @@ $smarty->assign(array(
     'PAGE' => PANEL_PAGE,
     'TOKEN' => Token::get(),
     'SUBMIT' => $language->get('general', 'submit')
-));
+]);
 
 $page_load = microtime(true) - $start;
 define('PAGE_LOAD_TIME', str_replace('{x}', round($page_load, 3), $language->get('general', 'page_loaded_in')));
 
 $template->onPageLoad();
 
-require(ROOT_PATH . '/core/templates/panel_navbar.php');
+require (ROOT_PATH . '/core/templates/panel_navbar.php');
 
 // Display template
 $template->displayTemplate($template_file, $smarty);
diff --git a/modules/Core/pages/panel/widgets.php b/modules/Core/pages/panel/widgets.php
index 0b5c9ac32d275ddd57d4b22772e03a6551123b0d..5fa85677450c26982a2552972d13a638c45b93a5 100644
--- a/modules/Core/pages/panel/widgets.php
+++ b/modules/Core/pages/panel/widgets.php
@@ -15,68 +15,69 @@ define('PAGE', 'panel');
 define('PARENT_PAGE', 'layout');
 define('PANEL_PAGE', 'widgets');
 $page_title = $language->get('admin', 'widgets');
-require_once(ROOT_PATH . '/core/templates/backend_init.php');
+
+require_once (ROOT_PATH . '/core/templates/backend_init.php');
 
 // Load modules + template
-Module::loadPage($user, $pages, $cache, $smarty, array($navigation, $cc_nav, $mod_nav), $widgets);
+Module::loadPage($user, $pages, $cache, $smarty, [$navigation, $cc_nav, $mod_nav], $widgets);
 
-if (!isset($_GET['action'])) {
-    $template_array = array();
+if (! isset($_GET['action'])) {
+    $template_array = [];
 
     // List widgets
     foreach ($widgets->getAll() as $widget) {
-        $widget_query = $queries->getWhere('widgets', array('name', '=', $widget->getName()));
-        if (!count($widget_query)) {
+        $widget_query = $queries->getWhere('widgets', ['name', '=', $widget->getName()]);
+
+        if (! count($widget_query)) {
             $queries->create(
                 'widgets',
-                array(
+                [
                     'name' => $widget->getName()
-                )
+                ]
             );
             $widget_query = $queries->getLastId();
-        } else
-            $widget_query = $widget_query[0]->id;
+        } else $widget_query = $widget_query[0]->id;
 
-        $template_array[] = array(
+        $template_array[] = [
             'name' => Output::getClean($widget->getName()),
             'module' => str_replace('{x}', Output::getClean($widget->getModule()), $language->get('admin', 'module_x')),
             'description' => Output::getClean($widget->getDescription()),
             'enabled' => $widgets->isEnabled($widget),
             'disable_link' => (($widgets->isEnabled($widget)) ? URL::build('/panel/core/widgets/', 'action=disable&w=' . Output::getClean($widget_query)) : null),
-            'enable_link' => ((!$widgets->isEnabled($widget)) ? URL::build('/panel/core/widgets/', 'action=enable&w=' . Output::getClean($widget_query)) : null),
+            'enable_link' => ((! $widgets->isEnabled($widget)) ? URL::build('/panel/core/widgets/', 'action=enable&w=' . Output::getClean($widget_query)) : null),
             'settings_link' => (($widgets->isEnabled($widget)) ? URL::build('/panel/core/widgets/', 'action=edit&w=' . Output::getClean($widget_query)) : null)
-        );
+        ];
     }
 
     $smarty->assign(
-        array(
+        [
             'ENABLE' => $language->get('admin', 'enable'),
             'DISABLE' => $language->get('admin', 'disable'),
             'EDIT' => $language->get('general', 'edit'),
             'WIDGETS_LIST' => $template_array
-        )
+        ]
     );
 
     $template_file = 'core/widgets.tpl';
 } else {
     if ($_GET['action'] == 'enable') {
         // Enable a widget
-        if (!isset($_GET['w']) || !is_numeric($_GET['w'])) die('Invalid widget!');
+        if (! isset($_GET['w']) || ! is_numeric($_GET['w'])) die('Invalid widget!');
 
         // Get widget name
-        $name = $queries->getWhere('widgets', array('id', '=', $_GET['w']));
+        $name = $queries->getWhere('widgets', ['id', '=', $_GET['w']]);
 
         if (count($name)) {
             $name = Output::getClean($name[0]->name);
             $widget = $widgets->getWidget($name);
 
-            if (!is_null($widget)) {
+            if (! is_null($widget)) {
                 $queries->update(
                     'widgets',
                     $_GET['w'],
-                    array(
+                    [
                         'enabled' => 1
-                    )
+                    ]
                 );
 
                 $widgets->enable($widget);
@@ -86,26 +87,30 @@ if (!isset($_GET['action'])) {
         }
 
         Redirect::to(URL::build('/panel/core/widgets'));
+
         die();
-    } else if ($_GET['action'] == 'disable') {
+    }
+
+    if ($_GET['action'] == 'disable') {
         // Disable a widget
-        if (!isset($_GET['w']) || !is_numeric($_GET['w'])) {
+        if (! isset($_GET['w']) || ! is_numeric($_GET['w'])) {
             die('Invalid widget!');
         }
 
         // Get widget name
-        $name = $queries->getWhere('widgets', array('id', '=', $_GET['w']));
+        $name = $queries->getWhere('widgets', ['id', '=', $_GET['w']]);
+
         if (count($name)) {
             $name = Output::getClean($name[0]->name);
             $widget = $widgets->getWidget($name);
 
-            if (!is_null($widget)) {
+            if (! is_null($widget)) {
                 $queries->update(
                     'widgets',
                     $_GET['w'],
-                    array(
+                    [
                         'enabled' => 0
-                    )
+                    ]
                 );
 
                 $widgets->disable($widget);
@@ -115,17 +120,23 @@ if (!isset($_GET['action'])) {
         }
 
         Redirect::to(URL::build('/panel/core/widgets'));
+
         die();
-    } else if ($_GET['action'] == 'edit') {
+    }
+
+    if ($_GET['action'] == 'edit') {
         // Ensure widget exists
-        if (!isset($_GET['w']) || !is_numeric($_GET['w'])) {
+        if (! isset($_GET['w']) || ! is_numeric($_GET['w'])) {
             Redirect::to(URL::build('/panel/core/widgets'));
+
             die();
         }
 
-        $widget = $queries->getWhere('widgets', array('id', '=', $_GET['w']));
-        if (!count($widget)) {
+        $widget = $queries->getWhere('widgets', ['id', '=', $_GET['w']]);
+
+        if (! count($widget)) {
             Redirect::to(URL::build('/panel/core/widgets'));
+
             die();
         }
         $widget = $widget[0];
@@ -139,54 +150,57 @@ if (!isset($_GET['action'])) {
                     // Updated pages list
                     if (isset($_POST['pages']) && count($_POST['pages']))
                         $active_pages = $_POST['pages'];
-                    else
-                        $active_pages = array();
+                    else $active_pages = [];
 
                     $active_pages_string = json_encode($active_pages);
 
                     $order = (isset($_POST['order']) ? $_POST['order'] : 10);
 
                     $location = Input::get('location');
-                    if (!in_array($location, array('left', 'right'))) $location = 'right';
 
-                    $queries->update('widgets', $widget->id, array('pages' => $active_pages_string, '`order`' => $order, '`location`' => $location));
+                    if (! in_array($location, ['left', 'right'])) $location = 'right';
+
+                    $queries->update('widgets', $widget->id, ['pages' => $active_pages_string, '`order`' => $order, '`location`' => $location]);
 
                     Session::flash('admin_widgets', $language->get('admin', 'widget_updated'));
                     Redirect::to(URL::build('/panel/core/widgets/', 'action=edit&w=' . $widget->id));
+
                     die();
                 } catch (Exception $e) {
-                    $errors = array($e->getMessage());
+                    $errors = [$e->getMessage()];
                 }
             } else {
-                $errors = array($language->get('general', 'invalid_token'));
+                $errors = [$language->get('general', 'invalid_token')];
             }
         }
 
         if (is_null($active_pages)) {
-            $active_pages = array();
+            $active_pages = [];
         }
 
         if ($widgets->getWidget($widget->name)->getSettings() != null) {
             $smarty->assign(
-                array(
+                [
                     'SETTINGS' => $language->get('admin', 'settings'),
                     'SETTINGS_LINK' => URL::build('/panel/core/widgets/', 'action=settings&w=' . $widget->id)
-                )
+                ]
             );
         }
 
         $order = Output::getClean($widgets->getWidget($widget->name)->getOrder());
-        if (!$order) {
+
+        if (! $order) {
             $order = 10;
         }
 
         $location = Output::getClean($widgets->getWidget($widget->name)->getLocation());
-        if (!in_array($location, array('left', 'right'))) {
+
+        if (! in_array($location, ['left', 'right'])) {
             $location = 'right';
         }
 
         $smarty->assign(
-            array(
+            [
                 'EDITING_WIDGET' => str_replace('{x}', Output::getClean($widget->name), $language->get('admin', 'editing_widget_x')),
                 'BACK' => $language->get('general', 'back'),
                 'BACK_LINK' => URL::build('/panel/core/widgets'),
@@ -199,46 +213,51 @@ if (!isset($_GET['action'])) {
                 'ACTIVE_PAGES' => $active_pages,
                 'POSSIBLE_PAGES' => $pages->returnWidgetPages(),
                 'MODULE' => $language->get('admin', 'module'),
-                'MODULE_SEPERATOR' => "&raquo"
-            )
+                'MODULE_SEPERATOR' => '&raquo'
+            ]
         );
 
         $template_file = 'core/widgets_edit.tpl';
     } else if ($_GET['action'] == 'settings') {
         // Ensure widget exists
-        if (!isset($_GET['w']) || !is_numeric($_GET['w'])) {
+        if (! isset($_GET['w']) || ! is_numeric($_GET['w'])) {
             Redirect::to(URL::build('/panel/core/widgets'));
+
             die();
         }
 
-        $widget = $queries->getWhere('widgets', array('id', '=', $_GET['w']));
-        if (!count($widget)) {
+        $widget = $queries->getWhere('widgets', ['id', '=', $_GET['w']]);
+
+        if (! count($widget)) {
             Redirect::to(URL::build('/panel/core/widgets'));
+
             die();
         }
         $widget = $widget[0];
 
         if (
             $widgets->getWidget($widget->name)->getSettings() == null
-            || !file_exists($widgets->getWidget($widget->name)->getSettings())
+            || ! file_exists($widgets->getWidget($widget->name)->getSettings())
         ) {
             Redirect::to(URL::build('/admin/widgets'));
+
             die();
-        } else {
-            require_once($widgets->getWidget($widget->name)->getSettings());
         }
 
+            require_once ($widgets->getWidget($widget->name)->getSettings());
+        
         $smarty->assign(
-            array(
+            [
                 'EDITING_WIDGET' => str_replace('{x}', Output::getClean($widget->name), $language->get('admin', 'editing_widget_x')),
                 'BACK' => $language->get('general', 'back'),
                 'BACK_LINK' => URL::build('/panel/core/widgets/', 'action=edit&w=' . $widget->id)
-            )
+            ]
         );
 
         $template_file = 'core/widget_settings.tpl';
     } else {
         Redirect::to('/panel/core/widgets');
+
         die();
     }
 }
@@ -249,24 +268,24 @@ if (Session::exists('admin_widgets')) {
 
 if (isset($success)) {
     $smarty->assign(
-        array(
+        [
             'SUCCESS' => $success,
             'SUCCESS_TITLE' => $language->get('general', 'success')
-        )
+        ]
     );
 }
 
 if (isset($errors) && count($errors)) {
     $smarty->assign(
-        array(
+        [
             'ERRORS' => $errors,
             'ERRORS_TITLE' => $language->get('general', 'error')
-        )
+        ]
     );
 }
 
 $smarty->assign(
-    array(
+    [
         'PARENT_PAGE' => PARENT_PAGE,
         'DASHBOARD' => $language->get('admin', 'dashboard'),
         'LAYOUT' => $language->get('admin', 'layout'),
@@ -274,7 +293,7 @@ $smarty->assign(
         'PAGE' => PANEL_PAGE,
         'TOKEN' => Token::get(),
         'SUBMIT' => $language->get('general', 'submit')
-    )
+    ]
 );
 
 $page_load = microtime(true) - $start;
@@ -282,7 +301,7 @@ define('PAGE_LOAD_TIME', str_replace('{x}', round($page_load, 3), $language->get
 
 $template->onPageLoad();
 
-require(ROOT_PATH . '/core/templates/panel_navbar.php');
+require (ROOT_PATH . '/core/templates/panel_navbar.php');
 
 // Display template
 $template->displayTemplate($template_file, $smarty);
diff --git a/modules/Core/pages/portal.php b/modules/Core/pages/portal.php
index 5365d3dc10e817f34c6c4a8db65b7c4cef3709c1..75953fb56aa3d0c3a0f2434d3e3b6cb42ecaafb0 100644
--- a/modules/Core/pages/portal.php
+++ b/modules/Core/pages/portal.php
@@ -12,18 +12,20 @@
 // Always define page name
 define('PAGE', 'portal');
 $page_title = $language->get('general', 'home');
-require_once(ROOT_PATH . '/core/templates/frontend_init.php');
+
+require_once (ROOT_PATH . '/core/templates/frontend_init.php');
 
 // Load modules + template
-Module::loadPage($user, $pages, $cache, $smarty, array($navigation, $cc_nav, $mod_nav), $widgets, $template);
+Module::loadPage($user, $pages, $cache, $smarty, [$navigation, $cc_nav, $mod_nav], $widgets, $template);
 
 $page_load = microtime(true) - $start;
 define('PAGE_LOAD_TIME', str_replace('{x}', round($page_load, 3), $language->get('general', 'page_loaded_in')));
 
 $template->onPageLoad();
 
-require(ROOT_PATH . '/core/templates/navbar.php');
-require(ROOT_PATH . '/core/templates/footer.php');
+require (ROOT_PATH . '/core/templates/navbar.php');
+
+require (ROOT_PATH . '/core/templates/footer.php');
 
 // Display template
-$template->displayTemplate('portal.tpl', $smarty);
\ No newline at end of file
+$template->displayTemplate('portal.tpl', $smarty);
diff --git a/modules/Core/pages/privacy.php b/modules/Core/pages/privacy.php
index 94e895d56188959ea8025548d93be543fc8a17cb..5174a34030f48164c27372e22f4b7f49cb54c52d 100644
--- a/modules/Core/pages/privacy.php
+++ b/modules/Core/pages/privacy.php
@@ -12,38 +12,41 @@
 // Always define page name
 define('PAGE', 'privacy');
 $page_title = $language->get('general', 'privacy_policy');
-require_once(ROOT_PATH . '/core/templates/frontend_init.php');
 
-$template->addCSSFiles(array(
-	(defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/ckeditor/plugins/spoiler/css/spoiler.css' => array()
-));
+require_once (ROOT_PATH . '/core/templates/frontend_init.php');
 
-$template->addJSFiles(array(
-	(defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/ckeditor/plugins/spoiler/js/spoiler.js' => array()
-));
+$template->addCSSFiles([
+    (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/ckeditor/plugins/spoiler/css/spoiler.css' => []
+]);
+
+$template->addJSFiles([
+    (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/ckeditor/plugins/spoiler/js/spoiler.js' => []
+]);
 
 // Retrieve privacy policy from database
-$policy = $queries->getWhere('privacy_terms', array('name', '=', 'privacy'));
-if(!count($policy)){
-	$policy = $queries->getWhere('settings', array('name', '=', 'privacy_policy'));
+$policy = $queries->getWhere('privacy_terms', ['name', '=', 'privacy']);
+
+if (! count($policy)){
+    $policy = $queries->getWhere('settings', ['name', '=', 'privacy_policy']);
 }
 $policy = Output::getPurified($policy[0]->value);
 
-$smarty->assign(array(
-	'PRIVACY_POLICY' => $language->get('general', 'privacy_policy'),
-	'POLICY' => $policy
-));
+$smarty->assign([
+    'PRIVACY_POLICY' => $language->get('general', 'privacy_policy'),
+    'POLICY' => $policy
+]);
 
 // Load modules + template
-Module::loadPage($user, $pages, $cache, $smarty, array($navigation, $cc_nav, $mod_nav), $widgets, $template);
+Module::loadPage($user, $pages, $cache, $smarty, [$navigation, $cc_nav, $mod_nav], $widgets, $template);
 
 $page_load = microtime(true) - $start;
 define('PAGE_LOAD_TIME', str_replace('{x}', round($page_load, 3), $language->get('general', 'page_loaded_in')));
 
 $template->onPageLoad();
 
-require(ROOT_PATH . '/core/templates/navbar.php');
-require(ROOT_PATH . '/core/templates/footer.php');
+require (ROOT_PATH . '/core/templates/navbar.php');
+
+require (ROOT_PATH . '/core/templates/footer.php');
 
 // Display template
-$template->displayTemplate('privacy.tpl', $smarty);
\ No newline at end of file
+$template->displayTemplate('privacy.tpl', $smarty);
diff --git a/modules/Core/pages/profile.php b/modules/Core/pages/profile.php
index 9034560304d1d69d9112f5a32b8d08e1b1696640..94173811ce8c51afec3d098d4ae98e5a42397054 100644
--- a/modules/Core/pages/profile.php
+++ b/modules/Core/pages/profile.php
@@ -14,39 +14,40 @@ define('PAGE', 'profile');
 
 $timeago = new Timeago(TIMEZONE);
 
-require(ROOT_PATH . '/core/includes/emojione/autoload.php'); // Emojione
+require (ROOT_PATH . '/core/includes/emojione/autoload.php'); // Emojione
 $emojione = new Emojione\Client(new Emojione\Ruleset());
 
 $profile = explode('/', rtrim($_GET['route'], '/'));
-if (count($profile) >= 3 && ($profile[count($profile) - 1] != 'profile' || $profile[count($profile) - 2] == 'profile') && !isset($_GET['error'])) {
+
+if (count($profile) >= 3 && ($profile[count($profile) - 1] != 'profile' || $profile[count($profile) - 2] == 'profile') && ! isset($_GET['error'])) {
     // User specified
     $md_profile = $profile[count($profile) - 1];
 
-    $page_metadata = $queries->getWhere('page_descriptions', array('page', '=', '/profile'));
+    $page_metadata = $queries->getWhere('page_descriptions', ['page', '=', '/profile']);
+
     if (count($page_metadata)) {
-        define('PAGE_DESCRIPTION', str_replace(array('{site}', '{profile}'), array(SITE_NAME, Output::getClean($md_profile)), $page_metadata[0]->description));
+        define('PAGE_DESCRIPTION', str_replace(['{site}', '{profile}'], [SITE_NAME, Output::getClean($md_profile)], $page_metadata[0]->description));
         define('PAGE_KEYWORDS', $page_metadata[0]->tags);
     }
 
     $page_title = $language->get('user', 'profile') . ' - ' . Output::getClean($md_profile);
-} else
-    $page_title = $language->get('user', 'profile');
+} else $page_title = $language->get('user', 'profile');
 
-require_once(ROOT_PATH . '/core/templates/frontend_init.php');
+require_once (ROOT_PATH . '/core/templates/frontend_init.php');
 
 $template->addCSSFiles(
-    array(
-        (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/image-picker/image-picker.css' => array(),
-        (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/prism/prism.css' => array(),
-        (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/tinymce/plugins/spoiler/css/spoiler.css' => array()
-    )
+    [
+        (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/image-picker/image-picker.css' => [],
+        (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/prism/prism.css' => [],
+        (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/tinymce/plugins/spoiler/css/spoiler.css' => []
+    ]
 );
 
 $template->addJSFiles(
-    array(
-        (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/prism/prism.js' => array(),
-        (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/tinymce/plugins/spoiler/js/spoiler.js' => array()
-    )
+    [
+        (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/prism/prism.js' => [],
+        (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/tinymce/plugins/spoiler/js/spoiler.js' => []
+    ]
 );
 
 $template->addCSSStyle(
@@ -55,13 +56,15 @@ $template->addCSSStyle(
     }'
 );
 
-if (count($profile) >= 3 && ($profile[count($profile) - 1] != 'profile' || $profile[count($profile) - 2] == 'profile') && !isset($_GET['error'])) {
+if (count($profile) >= 3 && ($profile[count($profile) - 1] != 'profile' || $profile[count($profile) - 2] == 'profile') && ! isset($_GET['error'])) {
     // User specified
     $profile = $profile[count($profile) - 1];
 
     $profile_user = new User($profile, 'username');
-    if (!$profile_user->data()) {
+
+    if (! $profile_user->data()) {
         Redirect::to(URL::build('/profile/?error=not_exist'));
+
         die();
     }
     $query = $profile_user->data();
@@ -77,15 +80,15 @@ if (count($profile) >= 3 && ($profile[count($profile) - 1] != 'profile' || $prof
                             // Update banner
                             if (isset($_POST['banner'])) {
                                 // Check image specified actually exists
-                                if (is_file(join(DIRECTORY_SEPARATOR, array(ROOT_PATH, 'uploads', 'profile_images', $_POST['banner'])))) {
+                                if (is_file(join(DIRECTORY_SEPARATOR, [ROOT_PATH, 'uploads', 'profile_images', $_POST['banner']]))) {
                                     // Exists
                                     // Is it an image file?
-                                    if (in_array(pathinfo(join(DIRECTORY_SEPARATOR, array(ROOT_PATH, 'uploads', 'profile_images', $_POST['banner'])), PATHINFO_EXTENSION), array('gif', 'png', 'jpg', 'jpeg'))) {
+                                    if (in_array(pathinfo(join(DIRECTORY_SEPARATOR, [ROOT_PATH, 'uploads', 'profile_images', $_POST['banner']]), PATHINFO_EXTENSION), ['gif', 'png', 'jpg', 'jpeg'])) {
                                         // Yes, update settings
                                         $user->update(
-                                            array(
+                                            [
                                                 'banner' => Output::getClean($_POST['banner'])
-                                            )
+                                            ]
                                         );
 
                                         // Requery to update banner
@@ -97,6 +100,7 @@ if (count($profile) >= 3 && ($profile[count($profile) - 1] != 'profile' || $prof
                             }
                         }
                     }
+
                     break;
 
                 case 'new_post':
@@ -106,13 +110,13 @@ if (count($profile) >= 3 && ($profile[count($profile) - 1] != 'profile' || $prof
 
                         $validation = $validate->check(
                             $_POST,
-                            array(
-                                'post' => array(
+                            [
+                                'post' => [
                                     'required' => true,
                                     'min' => 1,
                                     'max' => 10000
-                                )
-                            )
+                                ]
+                            ]
                         );
 
                         if ($validation->passed()) {
@@ -120,17 +124,17 @@ if (count($profile) >= 3 && ($profile[count($profile) - 1] != 'profile' || $prof
                             // Input into database
                             $queries->create(
                                 'user_profile_wall_posts',
-                                array(
+                                [
                                     'user_id' => $query->id,
                                     'author_id' => $user->data()->id,
                                     'time' => date('U'),
                                     'content' => Output::getClean(Input::get('post'))
-                                )
+                                ]
                             );
 
                             if ($query->id !== $user->data()->id) {
                                 // Alert user
-                                Alert::create($query->id, 'profile_post', array('path' => 'core', 'file' => 'user', 'term' => 'new_wall_post', 'replace' => '{x}', 'replace_with' => $user->getDisplayname()), array('path' => 'core', 'file' => 'user', 'term' => 'new_wall_post', 'replace' => '{x}', 'replace_with' => $user->getDisplayname()), URL::build('/profile/' . $profile_user->getDisplayname(true) . '/#post-' . $queries->getLastId()));
+                                Alert::create($query->id, 'profile_post', ['path' => 'core', 'file' => 'user', 'term' => 'new_wall_post', 'replace' => '{x}', 'replace_with' => $user->getDisplayname()], ['path' => 'core', 'file' => 'user', 'term' => 'new_wall_post', 'replace' => '{x}', 'replace_with' => $user->getDisplayname()], URL::build('/profile/' . $profile_user->getDisplayname(true) . '/#post-' . $queries->getLastId()));
                             }
 
                             $cache->setCache('profile_posts_widget');
@@ -138,14 +142,15 @@ if (count($profile) >= 3 && ($profile[count($profile) - 1] != 'profile' || $prof
 
                             // Redirect to clear input
                             Redirect::to($profile_user->getProfileURL());
+
                             die();
-                        } else {
+                        }
                             // Validation failed
                             $error = $language->get('user', 'invalid_wall_post');
-                        }
                     } else {
                         $error = $language->get('general', 'invalid_token');
                     }
+
                     break;
 
                 case 'reply':
@@ -155,130 +160,140 @@ if (count($profile) >= 3 && ($profile[count($profile) - 1] != 'profile' || $prof
 
                         $validation = $validate->check(
                             $_POST,
-                            array(
-                                'reply' => array(
+                            [
+                                'reply' => [
                                     'required' => true,
                                     'min' => 1,
                                     'max' => 10000
-                                ),
-                                'post' => array(
+                                ],
+                                'post' => [
                                     'required' => true
-                                )
-                            )
+                                ]
+                            ]
                         );
 
                         if ($validation->passed()) {
                             // Validation successful
 
                             // Ensure post exists
-                            $post = $queries->getWhere('user_profile_wall_posts', array('id', '=', $_POST['post']));
-                            if (!count($post)) {
+                            $post = $queries->getWhere('user_profile_wall_posts', ['id', '=', $_POST['post']]);
+
+                            if (! count($post)) {
                                 Redirect::to($profile_user->getProfileURL());
+
                                 die();
                             }
 
                             // Input into database
                             $queries->create(
                                 'user_profile_wall_posts_replies',
-                                array(
+                                [
                                     'post_id' => $_POST['post'],
                                     'author_id' => $user->data()->id,
                                     'time' => date('U'),
                                     'content' => Output::getClean(Input::get('reply'))
-                                )
+                                ]
                             );
 
                             if ($post[0]->author_id != $query->id && $query->id != $user->data()->id) {
-                                Alert::create($query->id, 'profile_post', array('path' => 'core', 'file' => 'user', 'term' => 'new_wall_post', 'replace' => '{x}', 'replace_with' => $user->getDisplayname()), array('path' => 'core', 'file' => 'user', 'term' => 'new_wall_post', 'replace' => '{x}', 'replace_with' => $user->getDisplayname()), URL::build('/profile/' . $profile_user->getDisplayname(true) . '/#post-' . $_POST['post']));
+                                Alert::create($query->id, 'profile_post', ['path' => 'core', 'file' => 'user', 'term' => 'new_wall_post', 'replace' => '{x}', 'replace_with' => $user->getDisplayname()], ['path' => 'core', 'file' => 'user', 'term' => 'new_wall_post', 'replace' => '{x}', 'replace_with' => $user->getDisplayname()], URL::build('/profile/' . $profile_user->getDisplayname(true) . '/#post-' . $_POST['post']));
                             } else if ($post[0]->author_id != $user->data()->id) {
                                 // Alert post author
                                 if ($post[0]->author_id == $query->id) {
-                                    Alert::create($query->id, 'profile_post_reply', array('path' => 'core', 'file' => 'user', 'term' => 'new_wall_post_reply_your_profile', 'replace' => '{x}', 'replace_with' => $user->getDisplayname()), array('path' => 'core', 'file' => 'user', 'term' => 'new_wall_post_reply_your_profile', 'replace' => '{x}', 'replace_with' => $user->getDisplayname), URL::build('/profile/' . $profile_user->getDisplayname(true) . '/#post-' . $_POST['post']));
+                                    Alert::create($query->id, 'profile_post_reply', ['path' => 'core', 'file' => 'user', 'term' => 'new_wall_post_reply_your_profile', 'replace' => '{x}', 'replace_with' => $user->getDisplayname()], ['path' => 'core', 'file' => 'user', 'term' => 'new_wall_post_reply_your_profile', 'replace' => '{x}', 'replace_with' => $user->getDisplayname], URL::build('/profile/' . $profile_user->getDisplayname(true) . '/#post-' . $_POST['post']));
                                 } else {
-                                    Alert::create($post[0]->author_id, 'profile_post_reply', array('path' => 'core', 'file' => 'user', 'term' => 'new_wall_post_reply', 'replace' => array('{x}', '{y}'), 'replace_with' => array($user->getDisplayname(), $profile_user->getDisplayname())), array('path' => 'core', 'file' => 'user', 'term' => 'new_wall_post_reply', 'replace' => array('{x}', '{y}'), 'replace_with' => array($user->getDisplayname(), $profile_user->getDisplayname())), URL::build('/profile/' . $profile_user->getDisplayname(true) . '/#post-' . $_POST['post']));
+                                    Alert::create($post[0]->author_id, 'profile_post_reply', ['path' => 'core', 'file' => 'user', 'term' => 'new_wall_post_reply', 'replace' => ['{x}', '{y}'], 'replace_with' => [$user->getDisplayname(), $profile_user->getDisplayname()]], ['path' => 'core', 'file' => 'user', 'term' => 'new_wall_post_reply', 'replace' => ['{x}', '{y}'], 'replace_with' => [$user->getDisplayname(), $profile_user->getDisplayname()]], URL::build('/profile/' . $profile_user->getDisplayname(true) . '/#post-' . $_POST['post']));
                                 }
                             }
 
                             // Redirect to clear input
                             Redirect::to($profile_user->getProfileURL());
+
                             die();
-                        } else {
+                        }
                             // Validation failed
                             $error = $language->get('user', 'invalid_wall_post');
-                        }
                     } else {
                         $error = $language->get('general', 'invalid_token');
                     }
+
                     break;
 
                 case 'block':
                     if (Token::check()) {
                         if ($user->isBlocked($user->data()->id, $query->id)) {
                             // Unblock
-                            $blocked_id = $queries->getWhere('blocked_users', array('user_id', '=', $user->data()->id));
+                            $blocked_id = $queries->getWhere('blocked_users', ['user_id', '=', $user->data()->id]);
+
                             if (count($blocked_id)) {
                                 foreach ($blocked_id as $id) {
                                     if ($id->user_blocked_id == $query->id) {
                                         $blocked_id = $id->id;
+
                                         break;
                                     }
                                 }
 
                                 if (is_numeric($blocked_id)) {
-                                    $queries->delete('blocked_users', array('id', '=', $blocked_id));
+                                    $queries->delete('blocked_users', ['id', '=', $blocked_id]);
                                     $success = $language->get('user', 'user_unblocked');
                                 }
                             }
                         } else {
                             // Block
-                            $queries->create('blocked_users', array(
+                            $queries->create('blocked_users', [
                                 'user_id' => $user->data()->id,
                                 'user_blocked_id' => $query->id
-                            ));
+                            ]);
                             $success = $language->get('user', 'user_blocked');
                         }
                     } else {
                         $error = $language->get('general', 'invalid_token');
                     }
+
                     break;
 
                 case 'edit':
                     // Ensure user is mod or owner of post
                     if (Token::check()) {
                         if (isset($_POST['post_id']) && is_numeric($_POST['post_id'])) {
-                            $post = $queries->getWhere('user_profile_wall_posts', array('id', '=', $_POST['post_id']));
+                            $post = $queries->getWhere('user_profile_wall_posts', ['id', '=', $_POST['post_id']]);
+
                             if (count($post)) {
                                 $post = $post[0];
+
                                 if ($user->canViewACP() || $post->author_id == $user->data()->id) {
                                     if (isset($_POST['content']) && strlen($_POST['content']) < 10000 && strlen($_POST['content']) >= 1) {
                                         try {
-                                            $queries->update('user_profile_wall_posts', $_POST['post_id'], array(
+                                            $queries->update('user_profile_wall_posts', $_POST['post_id'], [
                                                 'content' => Output::getClean($_POST['content'])
-                                            ));
+                                            ]);
                                         } catch (Exception $e) {
                                             $error = $e->getMessage();
                                         }
-                                    } else
-                                        $error = $language->get('user', 'invalid_wall_post');
+                                    } else $error = $language->get('user', 'invalid_wall_post');
                                 }
                             }
                         }
                     } else {
                         $error = $language->get('general', 'invalid_token');
                     }
+
                     break;
 
                 case 'delete':
                     // Ensure user is mod or owner of post
                     if (Token::check()) {
                         if (isset($_POST['post_id']) && is_numeric($_POST['post_id'])) {
-                            $post = $queries->getWhere('user_profile_wall_posts', array('id', '=', $_POST['post_id']));
+                            $post = $queries->getWhere('user_profile_wall_posts', ['id', '=', $_POST['post_id']]);
+
                             if (count($post)) {
                                 $post = $post[0];
+
                                 if ($user->canViewACP() || $post->author_id == $user->data()->id) {
                                     try {
-                                        $queries->delete('user_profile_wall_posts', array('id', '=', $_POST['post_id']));
-                                        $queries->delete('user_profile_wall_posts_replies', array('post_id', '=', $_POST['post_id']));
+                                        $queries->delete('user_profile_wall_posts', ['id', '=', $_POST['post_id']]);
+                                        $queries->delete('user_profile_wall_posts_replies', ['post_id', '=', $_POST['post_id']]);
                                     } catch (Exception $e) {
                                         $error = $e->getMessage();
                                     }
@@ -288,18 +303,21 @@ if (count($profile) >= 3 && ($profile[count($profile) - 1] != 'profile' || $prof
                     } else {
                         $error = $language->get('general', 'invalid_token');
                     }
+
                     break;
 
                 case 'deleteReply':
                     // Ensure user is mod or owner of reply
                     if (Token::check()) {
                         if (isset($_POST['post_id']) && is_numeric($_POST['post_id'])) {
-                            $post = $queries->getWhere('user_profile_wall_posts_replies', array('id', '=', $_POST['post_id']));
+                            $post = $queries->getWhere('user_profile_wall_posts_replies', ['id', '=', $_POST['post_id']]);
+
                             if (count($post)) {
                                 $post = $post[0];
+
                                 if ($user->canViewACP() || $post->author_id == $user->data()->id) {
                                     try {
-                                        $queries->delete('user_profile_wall_posts_replies', array('id', '=', $_POST['post_id']));
+                                        $queries->delete('user_profile_wall_posts_replies', ['id', '=', $_POST['post_id']]);
                                     } catch (Exception $e) {
                                         $error = $e->getMessage();
                                     }
@@ -309,6 +327,7 @@ if (count($profile) >= 3 && ($profile[count($profile) - 1] != 'profile' || $prof
                     } else {
                         $error = $language->get('general', 'invalid_token');
                     }
+
                     break;
                 }
             }
@@ -319,31 +338,37 @@ if (count($profile) >= 3 && ($profile[count($profile) - 1] != 'profile' || $prof
         if (isset($_GET['action'])) {
             switch ($_GET['action']) {
             case 'react':
-                if (!isset($_GET['post']) || !is_numeric($_GET['post'])) {
+                if (! isset($_GET['post']) || ! is_numeric($_GET['post'])) {
                     // Post ID required
                     Redirect::to($profile_user->getProfileURL());
+
                     die();
                 }
 
                 // Does the post exist?
-                $post = $queries->getWhere('user_profile_wall_posts', array('id', '=', $_GET['post']));
-                if (!count($post)) {
+                $post = $queries->getWhere('user_profile_wall_posts', ['id', '=', $_GET['post']]);
+
+                if (! count($post)) {
                     Redirect::to($profile_user->getProfileURL());
+
                     die();
                 }
 
                 // Can't like our own post
                 if ($post[0]->author_id == $user->data()->id) {
                     Redirect::to($profile_user->getProfileURL());
+
                     die();
                 }
 
                 // Liking or unliking?
-                $post_likes = $queries->getWhere('user_profile_wall_posts_reactions', array('post_id', '=', $_GET['post']));
+                $post_likes = $queries->getWhere('user_profile_wall_posts_reactions', ['post_id', '=', $_GET['post']]);
+
                 if (count($post_likes)) {
                     foreach ($post_likes as $like) {
                         if ($like->user_id == $user->data()->id) {
                             $has_liked = $like->id;
+
                             break;
                         }
                     }
@@ -351,31 +376,33 @@ if (count($profile) >= 3 && ($profile[count($profile) - 1] != 'profile' || $prof
 
                 if (isset($has_liked)) {
                     // Unlike
-                    $queries->delete('user_profile_wall_posts_reactions', array('id', '=', $has_liked));
+                    $queries->delete('user_profile_wall_posts_reactions', ['id', '=', $has_liked]);
                 } else {
                     // Like
-                    $queries->create('user_profile_wall_posts_reactions', array(
+                    $queries->create('user_profile_wall_posts_reactions', [
                         'user_id' => $user->data()->id,
                         'post_id' => $_GET['post'],
                         'reaction_id' => 1,
                         'time' => date('U')
-                    ));
+                    ]);
                 }
 
                 // Redirect
                 Redirect::to($profile_user->getProfileURL());
+
                 die();
 
                 break;
 
             case 'reset_banner':
                 if ($user->hasPermission('modcp.profile_banner_reset')) {
-                    $queries->update('users', $query->id, array(
+                    $queries->update('users', $query->id, [
                         'banner' => null
-                    ));
+                    ]);
                 }
 
                 Redirect::to($profile_user->getProfileURL());
+
                 break;
             }
         }
@@ -383,17 +410,19 @@ if (count($profile) >= 3 && ($profile[count($profile) - 1] != 'profile' || $prof
 
     // Get page
     if (isset($_GET['p'])) {
-        if (!is_numeric($_GET['p'])) {
+        if (! is_numeric($_GET['p'])) {
             Redirect::to($profile_user->getProfileURL());
+
             die();
-        } else {
+        }
+
             if ($_GET['p'] == 1) {
                 // Avoid bug in pagination class
                 Redirect::to($profile_user->getProfileURL());
+
                 die();
             }
             $p = $_GET['p'];
-        }
     } else {
         $p = 1;
     }
@@ -402,139 +431,141 @@ if (count($profile) >= 3 && ($profile[count($profile) - 1] != 'profile' || $prof
     // Check if user is logged in and the viewer is not the owner of this profile.
     if (($user->isLoggedIn() && $user->data()->id != $query->id)
         // If no one is logged in check if they have accepted the cookies.
-        || (!$user->isLoggedIn() && Cookie::exists('alert-box'))
+        || (! $user->isLoggedIn() && Cookie::exists('alert-box'))
     ) {
-        if (!Cookie::exists('nl-profile-' . $query->id)) {
-            $queries->increment("users", $query->id, "profile_views");
-            Cookie::put("nl-profile-" . $query->id, "true", 3600);
+        if (! Cookie::exists('nl-profile-' . $query->id)) {
+            $queries->increment('users', $query->id, 'profile_views');
+            Cookie::put('nl-profile-' . $query->id, 'true', 3600);
         }
-    } else if (!Session::exists('nl-profile-' . $query->id)) {
-        $queries->increment("users", $query->id, "profile_views");
-        Session::put("nl-profile-" . $query->id, "true");
+    } else if (! Session::exists('nl-profile-' . $query->id)) {
+        $queries->increment('users', $query->id, 'profile_views');
+        Session::put('nl-profile-' . $query->id, 'true');
     }
 
     // Set Can view
     if ($user->isPrivateProfile() && $user->canPrivateProfile()) {
-        $smarty->assign(array(
+        $smarty->assign([
             'PRIVATE_PROFILE' => $language->get('user', 'private_profile_page'),
             'CAN_VIEW' => false
-        ));
+        ]);
     } else {
-        $smarty->assign(array(
+        $smarty->assign([
             'CAN_VIEW' => true
-        ));
+        ]);
     }
 
     // Generate Smarty variables to pass to template
     if ($user->isLoggedIn()) {
         // Form token
-        $smarty->assign(array(
+        $smarty->assign([
             'TOKEN' => Token::get(),
             'LOGGED_IN' => true,
             'SUBMIT' => $language->get('general', 'submit'),
             'CANCEL' => $language->get('general', 'cancel'),
             'CAN_MODERATE' => $user->canViewACP()
-        ));
+        ]);
 
         if ($user->hasPermission('profile.private.bypass')) {
-            $smarty->assign(array(
+            $smarty->assign([
                 'CAN_VIEW' => true
-            ));
+            ]);
         }
 
         if ($user->data()->id == $query->id) {
             // Custom profile banners
-            $banners = array();
+            $banners = [];
 
-            $image_path = join(DIRECTORY_SEPARATOR, array(ROOT_PATH, 'uploads', 'profile_images'));
+            $image_path = join(DIRECTORY_SEPARATOR, [ROOT_PATH, 'uploads', 'profile_images']);
             $images = scandir($image_path);
 
             // Only display jpeg, png, jpg, gif
-            $allowed_exts = array('gif', 'png', 'jpg', 'jpeg');
+            $allowed_exts = ['gif', 'png', 'jpg', 'jpeg'];
 
             foreach ($images as $image) {
                 $ext = pathinfo($image, PATHINFO_EXTENSION);
-                if (!in_array($ext, $allowed_exts)) {
+
+                if (! in_array($ext, $allowed_exts)) {
                     continue;
                 }
 
-                $banners[] = array(
+                $banners[] = [
                     'src' => ((defined('CONFIG_PATH')) ? CONFIG_PATH . '/' : '/') . 'uploads/profile_images/' . Output::getClean($image),
                     'name' => Output::getClean($image),
                     'active' => ($user->data()->banner == $image) ? true : false
-                );
+                ];
             }
 
-            $image_path = join(DIRECTORY_SEPARATOR, array(ROOT_PATH, 'uploads', 'profile_images', $user->data()->id));
+            $image_path = join(DIRECTORY_SEPARATOR, [ROOT_PATH, 'uploads', 'profile_images', $user->data()->id]);
 
             if (is_dir($image_path)) {
                 $images = scandir($image_path);
 
                 foreach ($images as $image) {
                     $ext = pathinfo($image, PATHINFO_EXTENSION);
-                    if (!in_array($ext, $allowed_exts)) {
+
+                    if (! in_array($ext, $allowed_exts)) {
                         continue;
                     }
 
-                    $banners[] = array(
+                    $banners[] = [
                         'src' => ((defined('CONFIG_PATH')) ? CONFIG_PATH . '/' : '/') . 'uploads/profile_images/' . Output::getClean($user->data()->id) . '/' . Output::getClean($image),
                         'name' => Output::getClean($user->data()->id) . '/' . Output::getClean($image),
                         'active' => ($user->data()->banner == $image) ? true : false
-                    );
+                    ];
                 }
             }
 
-            $smarty->assign(array(
+            $smarty->assign([
                 'SELF' => true,
                 'SETTINGS_LINK' => URL::build('/user/settings'),
                 'CHANGE_BANNER' => $language->get('user', 'change_banner'),
                 'BANNERS' => $banners,
                 'CAN_VIEW' => true,
-            ));
+            ]);
 
             if ($user->hasPermission('usercp.profile_banner')) {
-                $smarty->assign(array(
+                $smarty->assign([
                     'UPLOAD_PROFILE_BANNER' => $language->get('user', 'upload_profile_banner'),
                     'PROFILE_BANNER' => $language->get('user', 'profile_banner'),
                     'BROWSE' => $language->get('general', 'browse'),
                     'UPLOAD' => $language->get('user', 'upload'),
                     'UPLOAD_BANNER_URL' => ((defined('CONFIG_PATH')) ? CONFIG_PATH . '/' : '/') . 'core/includes/image_upload.php'
-                ));
+                ]);
             }
         } else {
-            $smarty->assign(array(
+            $smarty->assign([
                 'MESSAGE_LINK' => URL::build('/user/messaging/', 'action=new&amp;uid=' . $query->id),
                 'FOLLOW_LINK' => URL::build('/user/follow/', 'user=' . $query->id),
                 'CONFIRM' => $language->get('general', 'confirm'),
                 'MOD_OR_ADMIN' => $profile_user->canViewACP()
-            ));
+            ]);
 
             // Is the user blocked?
             if ($user->isBlocked($user->data()->id, $query->id)) {
-                $smarty->assign(array(
+                $smarty->assign([
                     'UNBLOCK_USER' => $language->get('user', 'unblock_user'),
                     'CONFIRM_UNBLOCK_USER' => $language->get('user', 'confirm_unblock_user')
-                ));
+                ]);
             } else {
-                $smarty->assign(array(
+                $smarty->assign([
                     'BLOCK_USER' => $language->get('user', 'block_user'),
                     'CONFIRM_BLOCK_USER' => $language->get('user', 'confirm_block_user')
-                ));
+                ]);
             }
 
             if ($user->hasPermission('modcp.profile_banner_reset')) {
-                $smarty->assign(array(
+                $smarty->assign([
                     'RESET_PROFILE_BANNER' => $language->get('moderator', 'reset_profile_banner'),
                     'RESET_PROFILE_BANNER_LINK' => URL::build('/profile/' . Output::getClean($query->username) . '/', 'action=reset_banner')
-                ));
+                ]);
             }
         }
     }
 
-    $smarty->assign(array(
+    $smarty->assign([
         'NICKNAME' => $profile_user->getDisplayname(true),
         'USERNAME' => $profile_user->getDisplayname(),
-        'GROUPS' => (isset($query) ? $profile_user->getAllGroups('true') : array(Output::getPurified($group))),
+        'GROUPS' => (isset($query) ? $profile_user->getAllGroups('true') : [Output::getPurified($group)]),
         'USERNAME_COLOUR' => $profile_user->getGroupClass(),
         'USER_TITLE' => Output::getClean($query->user_title),
         'FOLLOW' => $language->get('user', 'follow'),
@@ -557,15 +588,15 @@ if (count($profile) >= 3 && ($profile[count($profile) - 1] != 'profile' || $prof
         'REPLY' => $language->get('user', 'reply'),
         'EDIT_POST' => $language->get('general', 'edit'),
         'VIEWER_ID' => $user->data()->id
-    ));
+    ]);
 
     // Wall posts
-    $wall_posts = array();
+    $wall_posts = [];
     $wall_posts_query = $queries->orderWhere('user_profile_wall_posts', 'user_id = ' . $query->id, 'time', 'DESC');
 
     if (count($wall_posts_query)) {
         // Pagination
-        $paginator = new Paginator((isset($template_pagination) ? $template_pagination : array()));
+        $paginator = new Paginator((isset($template_pagination) ? $template_pagination : []));
         $results = $paginator->getLimited($wall_posts_query, 10, $p, count($wall_posts_query));
         $pagination = $paginator->generate(7, URL::build('/profile/' . Output::getClean($query->username) . '/', true));
 
@@ -573,20 +604,20 @@ if (count($profile) >= 3 && ($profile[count($profile) - 1] != 'profile' || $prof
 
         // Display the correct number of posts
         for ($n = 0; $n < count($results->data); $n++) {
-            $post_user = $queries->getWhere('users', array('id', '=', $results->data[$n]->author_id));
+            $post_user = $queries->getWhere('users', ['id', '=', $results->data[$n]->author_id]);
 
-            if (!count($post_user)) continue;
+            if (! count($post_user)) continue;
 
             // Get reactions/replies
-            $reactions = array();
-            $replies = array();
+            $reactions = [];
+            $replies = [];
+
+            $reactions_query = $queries->getWhere('user_profile_wall_posts_reactions', ['post_id', '=', $results->data[$n]->id]);
 
-            $reactions_query = $queries->getWhere('user_profile_wall_posts_reactions', array('post_id', '=', $results->data[$n]->id));
             if (count($reactions_query)) {
                 if (count($reactions_query) == 1)
                     $reactions['count'] = $language->get('user', '1_like');
-                else
-                    $reactions['count'] = str_replace('{x}', count($reactions_query), $language->get('user', 'x_likes'));
+                else $reactions['count'] = str_replace('{x}', count($reactions_query), $language->get('user', 'x_likes'));
 
                 foreach ($reactions_query as $reaction) {
                     // Get reaction name and icon
@@ -600,7 +631,7 @@ if (count($profile) >= 3 && ($profile[count($profile) - 1] != 'profile' || $prof
                     */
 
                     $target_user = new User($reaction->user_id);
-                    $reactions['reactions'][] = array(
+                    $reactions['reactions'][] = [
                         'user_id' => Output::getClean($reaction->user_id),
                         'username' => $target_user->getDisplayname(true),
                         'nickname' => $target_user->getDisplayname(),
@@ -609,21 +640,21 @@ if (count($profile) >= 3 && ($profile[count($profile) - 1] != 'profile' || $prof
                         'avatar' => $target_user->getAvatar('../', 500),
                         //'reaction_name' => $reaction_name,
                         //'reaction_html' => $reaction_html
-                    );
+                    ];
                 }
             } else $reactions['count'] = str_replace('{x}', 0, $language->get('user', 'x_likes'));
             $reactions_query = null;
 
             $replies_query = $queries->orderWhere('user_profile_wall_posts_replies', 'post_id = ' . $results->data[$n]->id, 'time', 'ASC');
+
             if (count($replies_query)) {
                 if (count($replies_query) == 1)
                     $replies['count'] = $language->get('user', '1_reply');
-                else
-                    $replies['count'] = str_replace('{x}', count($replies_query), $language->get('user', 'x_replies'));
+                else $replies['count'] = str_replace('{x}', count($replies_query), $language->get('user', 'x_replies'));
 
                 foreach ($replies_query as $reply) {
                     $target_user = new User($reply->author_id);
-                    $replies['replies'][] = array(
+                    $replies['replies'][] = [
                         'user_id' => Output::getClean($reply->author_id),
                         'username' => $target_user->getDisplayname(true),
                         'nickname' => $target_user->getDisplayname(),
@@ -635,13 +666,13 @@ if (count($profile) >= 3 && ($profile[count($profile) - 1] != 'profile' || $prof
                         'content' => Output::getPurified($reply->content),
                         'self' => (($user->isLoggedIn() && $user->data()->id == $reply->author_id) ? 1 : 0),
                         'id' => $reply->id
-                    );
+                    ];
                 }
             } else $replies['count'] = str_replace('{x}', 0, $language->get('user', 'x_replies'));
             $replies_query = null;
 
             $target_user = new User($post_user[0]->id);
-            $wall_posts[] = array(
+            $wall_posts[] = [
                 'id' => $results->data[$n]->id,
                 'user_id' => Output::getClean($post_user[0]->id),
                 'username' => $target_user->getDisplayname(true),
@@ -656,7 +687,7 @@ if (count($profile) >= 3 && ($profile[count($profile) - 1] != 'profile' || $prof
                 'replies' => $replies,
                 'self' => (($user->isLoggedIn() && $user->data()->id == $results->data[$n]->author_id) ? true : false),
                 'reactions_link' => ($user->isLoggedIn() && ($post_user[0]->id != $user->data()->id) ? URL::build('/profile/' . Output::getClean($query->username) . '/', 'action=react&amp;post=' . $results->data[$n]->id) : '#')
-            );
+            ];
         }
     } else {
         $smarty->assign('NO_WALL_POSTS', $language->get('user', 'no_wall_posts'));
@@ -673,21 +704,22 @@ if (count($profile) >= 3 && ($profile[count($profile) - 1] != 'profile' || $prof
     }
 
     // About tab
-    $fields = array();
+    $fields = [];
 
     // Get profile fields
-    $profile_fields = $queries->getWhere('users_profile_fields', array('user_id', '=', $query->id));
+    $profile_fields = $queries->getWhere('users_profile_fields', ['user_id', '=', $query->id]);
+
     if (count($profile_fields)) {
         foreach ($profile_fields as $field) {
             // Get field
-            $profile_field = $queries->getWhere('profile_fields', array('id', '=', $field->field_id));
-            if (!count($profile_field)) {
+            $profile_field = $queries->getWhere('profile_fields', ['id', '=', $field->field_id]);
+
+            if (! count($profile_field)) {
                 continue;
-            } else {
-                $profile_field = $profile_field[0];
             }
-
-            if ($profile_field->public == 0 || !$field->value) {
+                $profile_field = $profile_field[0];
+            
+            if ($profile_field->public == 0 || ! $field->value) {
                 continue;
             }
 
@@ -695,78 +727,86 @@ if (count($profile) >= 3 && ($profile[count($profile) - 1] != 'profile' || $prof
             switch ($profile_field->type) {
             case 1:
                 $type = 'text';
+
                 break;
+
             case 2:
                 $type = 'textarea';
+
                 break;
+
             case 3:
                 $type = 'date';
+
                 break;
             }
 
-            $fields[] = array(
+            $fields[] = [
                 'title' => Output::getClean($profile_field->name),
                 'type' => $type,
                 'value' => Output::getPurified(Util::urlToAnchorTag(htmlspecialchars_decode($field->value)))
-            );
+            ];
         }
     }
 
     $profile_user = new User($query->id);
+
     if ($profile_user->data()->discord_username != null) {
-        $fields[] = array(
+        $fields[] = [
             'title' => $language->get('user', 'discord_username') . ':',
             'type' => 'text',
             'value' => $profile_user->data()->discord_username
-        );
+        ];
     }
 
-    if (!count($fields))
+    if (! count($fields))
         $smarty->assign('NO_ABOUT_FIELDS', $language->get('user', 'no_about_fields'));
 
     // Minecraft?
-    $minecraft_integration = $queries->getWhere('settings', array('name', '=', 'mc_integration'));
+    $minecraft_integration = $queries->getWhere('settings', ['name', '=', 'mc_integration']);
     $minecraft_integration = $minecraft_integration[0];
 
     if ($minecraft_integration->value == '1') {
-        $fields['minecraft'] = array(
+        $fields['minecraft'] = [
             'title' => 'IGN',
             'type' => 'text',
             'value' => Output::getClean($query->username),
             'image' => 'https://crafatar.com/renders/body/' . $query->uuid . '?overlay'
-        );
+        ];
     }
 
     // Add date registered and last seen
-    $fields['registered'] = array(
+    $fields['registered'] = [
         'title' => $language->get('user', 'registered'),
         'type' => 'text',
         'value' => $timeago->inWords(date('d M Y, H:i', $query->joined), $language->getTimeLanguage()),
         'tooltip' => date('d M Y, H:i', $query->joined)
-    );
-    $fields['last_seen'] = array(
+    ];
+    $fields['last_seen'] = [
         'title' => $language->get('user', 'last_seen'),
         'type' => 'text',
         'value' => $timeago->inWords(date('d M Y, H:i', $query->last_online), $language->getTimeLanguage()),
         'tooltip' => date('d M Y, H:i', $query->last_online)
-    );
+    ];
 
     // Add Profile views
-    $fields['profile_views'] = array(
-        'title' => $language->get("user", 'views'),
+    $fields['profile_views'] = [
+        'title' => $language->get('user', 'views'),
         'type' => 'text',
         'value' => $query->profile_views
-    );
+    ];
 
     $smarty->assign('ABOUT_FIELDS', $fields);
 
     // Custom tabs
-    $tabs = array();
+    $tabs = [];
+
     if (isset($profile_tabs) && count($profile_tabs)) {
         foreach ($profile_tabs as $key => $tab) {
-            $tabs[$key] = array('title' => $tab['title'], 'include' => $tab['smarty_template']);
+            $tabs[$key] = ['title' => $tab['title'], 'include' => $tab['smarty_template']];
+
             if (is_file($tab['require'])) {
-                require($tab['require']);
+                require ($tab['require']);
             }
         }
     }
@@ -774,19 +814,19 @@ if (count($profile) >= 3 && ($profile[count($profile) - 1] != 'profile' || $prof
     // Assign profile tabs
     $smarty->assign('TABS', $tabs);
 
-    if (isset($directories[1]) && !empty($directories[1]) && !isset($_GET['error']) && $user->isLoggedIn()) {
+    if (isset($directories[1]) && ! empty($directories[1]) && ! isset($_GET['error']) && $user->isLoggedIn()) {
         if ($user->data()->username == $profile) {
             // Script for banner selector
             $template->addJSFiles(
-                array(
-                    (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/image-picker/image-picker.min.js' => array()
-                )
+                [
+                    (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/image-picker/image-picker.min.js' => []
+                ]
             );
         }
     }
 
     // Load modules + template
-    Module::loadPage($user, $pages, $cache, $smarty, array($navigation, $cc_nav, $mod_nav), $widgets, $template);
+    Module::loadPage($user, $pages, $cache, $smarty, [$navigation, $cc_nav, $mod_nav], $widgets, $template);
 
     $page_load = microtime(true) - $start;
     define('PAGE_LOAD_TIME', str_replace('{x}', round($page_load, 3), $language->get('general', 'page_loaded_in')));
@@ -796,21 +836,22 @@ if (count($profile) >= 3 && ($profile[count($profile) - 1] != 'profile' || $prof
     $smarty->assign('WIDGETS_LEFT', $widgets->getWidgets('left'));
     $smarty->assign('WIDGETS_RIGHT', $widgets->getWidgets('right'));
 
-    require(ROOT_PATH . '/core/templates/navbar.php');
-    require(ROOT_PATH . '/core/templates/footer.php');
+    require (ROOT_PATH . '/core/templates/navbar.php');
+
+    require (ROOT_PATH . '/core/templates/footer.php');
 
     // Display template
     $template->displayTemplate('profile.tpl', $smarty);
 } else {
     if (isset($_GET['error'])) {
         // User not exist
-        $smarty->assign(array(
+        $smarty->assign([
             'BACK' => $language->get('general', 'back'),
             'HOME' => $language->get('general', 'home'),
             'NOT_FOUND' => $language->get('user', 'couldnt_find_that_user')
-        ));
+        ]);
         // Load modules + template
-        Module::loadPage($user, $pages, $cache, $smarty, array($navigation, $cc_nav, $mod_nav), $widgets, $template);
+        Module::loadPage($user, $pages, $cache, $smarty, [$navigation, $cc_nav, $mod_nav], $widgets, $template);
 
         $page_load = microtime(true) - $start;
         define('PAGE_LOAD_TIME', str_replace('{x}', round($page_load, 3), $language->get('general', 'page_loaded_in')));
@@ -820,8 +861,9 @@ if (count($profile) >= 3 && ($profile[count($profile) - 1] != 'profile' || $prof
         $smarty->assign('WIDGETS_LEFT', $widgets->getWidgets('left'));
         $smarty->assign('WIDGETS_RIGHT', $widgets->getWidgets('right'));
 
-        require(ROOT_PATH . '/core/templates/navbar.php');
-        require(ROOT_PATH . '/core/templates/footer.php');
+        require (ROOT_PATH . '/core/templates/navbar.php');
+
+        require (ROOT_PATH . '/core/templates/footer.php');
 
         // Display template
         $template->displayTemplate('user_not_exist.tpl', $smarty);
diff --git a/modules/Core/pages/register.php b/modules/Core/pages/register.php
index e995ab912c612c6e455085254d33a22777a0ef30..749f47fc385670bd961769c47039447d95e0c322 100644
--- a/modules/Core/pages/register.php
+++ b/modules/Core/pages/register.php
@@ -10,8 +10,9 @@
  */
 
 // Ensure user isn't already logged in
-if($user->isLoggedIn()){
+if ($user->isLoggedIn()){
     Redirect::to(URL::build('/'));
+
     die();
 }
 
@@ -21,40 +22,43 @@ define('PAGE', 'register');
 $page_title = $language->get('general', 'register');
 
 // Check if Minecraft is enabled
-$minecraft = $queries->getWhere('settings', array('name', '=', 'mc_integration'));
+$minecraft = $queries->getWhere('settings', ['name', '=', 'mc_integration']);
 $minecraft = $minecraft[0]->value;
 
 if ($minecraft == '1') {
     // Check if AuthMe is enabled
-    $authme_enabled = $queries->getWhere('settings', array('name', '=', 'authme'));
+    $authme_enabled = $queries->getWhere('settings', ['name', '=', 'authme']);
     $authme_enabled = $authme_enabled[0]->value;
 
     if ($authme_enabled == '1') {
         // Authme connector
-        require(join(DIRECTORY_SEPARATOR, array(ROOT_PATH, 'modules', 'Core', 'pages', 'authme_connector.php')));
+        require (join(DIRECTORY_SEPARATOR, [ROOT_PATH, 'modules', 'Core', 'pages', 'authme_connector.php']));
+
         die();
     }
 }
 
-require_once(ROOT_PATH . '/core/templates/frontend_init.php');
-require_once(ROOT_PATH . '/modules/Core/includes/emails/register.php');
+require_once (ROOT_PATH . '/core/templates/frontend_init.php');
+
+require_once (ROOT_PATH . '/modules/Core/includes/emails/register.php');
 
 // Check if registration is enabled
-$registration_enabled = $queries->getWhere('settings', array('name', '=', 'registration_enabled'));
+$registration_enabled = $queries->getWhere('settings', ['name', '=', 'registration_enabled']);
 $registration_enabled = $registration_enabled[0]->value;
 
 if ($registration_enabled == 0) {
     // Registration is disabled, display a message
-    $template->addCSSFiles(array(
-        (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/ckeditor/plugins/spoiler/css/spoiler.css' => array()
-    ));
+    $template->addCSSFiles([
+        (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/ckeditor/plugins/spoiler/css/spoiler.css' => []
+    ]);
 
-    $template->addJSFiles(array(
-        (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/ckeditor/plugins/spoiler/js/spoiler.js' => array()
-    ));
+    $template->addJSFiles([
+        (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/ckeditor/plugins/spoiler/js/spoiler.js' => []
+    ]);
 
     // Get registration disabled message and assign to Smarty variable
-    $registration_disabled_message = $queries->getWhere('settings', array('name', '=', 'registration_disabled_message'));
+    $registration_disabled_message = $queries->getWhere('settings', ['name', '=', 'registration_disabled_message']);
+
     if (count($registration_disabled_message)) {
         $message = Output::getPurified(htmlspecialchars_decode($registration_disabled_message[0]->value));
     } else {
@@ -62,22 +66,23 @@ if ($registration_enabled == 0) {
     }
 
     $smarty->assign(
-        array(
+        [
             'REGISTRATION_DISABLED' => $message,
             'CREATE_AN_ACCOUNT' => $language->get('user', 'create_an_account')
-        )
+        ]
     );
 
     // Load modules + template
-    Module::loadPage($user, $pages, $cache, $smarty, array($navigation, $cc_nav, $mod_nav), $widgets);
+    Module::loadPage($user, $pages, $cache, $smarty, [$navigation, $cc_nav, $mod_nav], $widgets);
 
     $page_load = microtime(true) - $start;
     define('PAGE_LOAD_TIME', str_replace('{x}', round($page_load, 3), $language->get('general', 'page_loaded_in')));
 
     $template->onPageLoad();
 
-    require(ROOT_PATH . '/core/templates/navbar.php');
-    require(ROOT_PATH . '/core/templates/footer.php');
+    require (ROOT_PATH . '/core/templates/navbar.php');
+
+    require (ROOT_PATH . '/core/templates/footer.php');
 
     // Display template
     $template->displayTemplate('registration_disabled.tpl', $smarty);
@@ -86,21 +91,22 @@ if ($registration_enabled == 0) {
 }
 
 // Registration page
-require(ROOT_PATH . '/core/integration/uuid.php'); // For UUID stuff
-require(ROOT_PATH . '/core/includes/password.php'); // For password hashing
+require (ROOT_PATH . '/core/integration/uuid.php'); // For UUID stuff
+
+require (ROOT_PATH . '/core/includes/password.php'); // For password hashing
 
 // Are custom usernames enabled?
-$custom_usernames = $queries->getWhere("settings", array("name", "=", "displaynames"));
+$custom_usernames = $queries->getWhere('settings', ['name', '=', 'displaynames']);
 $custom_usernames = $custom_usernames[0]->value;
 
-if (isset($_GET['step']) && isset($_SESSION['mcassoc'])) {
+if (isset($_GET['step'], $_SESSION['mcassoc'])) {
     // Get site details for MCAssoc
     $mcassoc_site_id = SITE_NAME;
 
-    $mcassoc_shared_secret = $queries->getWhere('settings', array('name', '=', 'mcassoc_key'));
+    $mcassoc_shared_secret = $queries->getWhere('settings', ['name', '=', 'mcassoc_key']);
     $mcassoc_shared_secret = $mcassoc_shared_secret[0]->value;
 
-    $mcassoc_instance_secret = $queries->getWhere('settings', array('name', '=', 'mcassoc_instance'));
+    $mcassoc_instance_secret = $queries->getWhere('settings', ['name', '=', 'mcassoc_instance']);
     $mcassoc_instance_secret = $mcassoc_instance_secret[0]->value;
 
     define('MCASSOC', true);
@@ -109,18 +115,19 @@ if (isset($_GET['step']) && isset($_SESSION['mcassoc'])) {
     $mcassoc = new MCAssoc($mcassoc_shared_secret, $mcassoc_site_id, $mcassoc_instance_secret);
     $mcassoc->enableInsecureMode();
 
-    require(ROOT_PATH . '/core/integration/run_mcassoc.php');
+    require (ROOT_PATH . '/core/integration/run_mcassoc.php');
+
     die();
 }
 
 // Is UUID linking enabled?
 if ($minecraft == '1') {
-    $uuid_linking = $queries->getWhere('settings', array('name', '=', 'uuid_linking'));
+    $uuid_linking = $queries->getWhere('settings', ['name', '=', 'uuid_linking']);
     $uuid_linking = $uuid_linking[0]->value;
 
     if ($uuid_linking == '1') {
         // Do we want to verify the user owns the account?
-        $account_verification = $queries->getWhere('settings', array('name', '=', 'verify_accounts'));
+        $account_verification = $queries->getWhere('settings', ['name', '=', 'verify_accounts']);
         $account_verification = $account_verification[0]->value;
     }
 } else {
@@ -128,21 +135,21 @@ if ($minecraft == '1') {
 }
 
 // Use recaptcha?
-$recaptcha = $queries->getWhere("settings", array("name", "=", "recaptcha"));
+$recaptcha = $queries->getWhere('settings', ['name', '=', 'recaptcha']);
 $recaptcha = $recaptcha[0]->value;
 
-$captcha_type = $queries->getWhere('settings', array('name', '=', 'recaptcha_type'));
-$captcha_type= $captcha_type[0]->value;
+$captcha_type = $queries->getWhere('settings', ['name', '=', 'recaptcha_type']);
+$captcha_type = $captcha_type[0]->value;
 
-$recaptcha_key = $queries->getWhere("settings", array("name", "=", "recaptcha_key"));
-$recaptcha_secret = $queries->getWhere('settings', array('name', '=', 'recaptcha_secret'));
+$recaptcha_key = $queries->getWhere('settings', ['name', '=', 'recaptcha_key']);
+$recaptcha_secret = $queries->getWhere('settings', ['name', '=', 'recaptcha_secret']);
 
 // Is email verification enabled?
-$email_verification = $queries->getWhere('settings', array('name', '=', 'email_verification'));
+$email_verification = $queries->getWhere('settings', ['name', '=', 'email_verification']);
 $email_verification = $email_verification[0]->value;
 
 // API verification
-$api_verification = $queries->getWhere('settings', array('name', '=', 'api_verification'));
+$api_verification = $queries->getWhere('settings', ['name', '=', 'api_verification']);
 $api_verification = $api_verification[0]->value;
 
 // Deal with any input
@@ -166,97 +173,94 @@ if (Input::exists()) {
             $result = json_decode($result, true);
         } else {
             // reCAPTCHA is disabled
-            $result = array(
+            $result = [
                 'success' => 'true'
-            );
+            ];
         }
 
         if (isset($result['success']) && $result['success'] == 'true') {
             // Validate
             $validate = new Validate();
 
-            $to_validation = array( // Base field validation
-                'password' => array(
+            $to_validation = [ // Base field validation
+                'password' => [
                     'required' => true,
                     'min' => 6,
                     'max' => 30
-                ),
-                'password_again' => array(
+                ],
+                'password_again' => [
                     'matches' => 'password'
-                ),
-                'email' => array(
+                ],
+                'email' => [
                     'required' => true,
                     'email' => true,
                     'unique' => 'users'
-                ),
-                't_and_c' => array(
+                ],
+                't_and_c' => [
                     'required' => true,
                     'agree' => true
-                )
-            );
+                ]
+            ];
 
-            if ($recaptcha === "true") { // check Recaptcha response
-                $to_validation['g-recaptcha-response'] = array(
+            if ($recaptcha === 'true') { // check Recaptcha response
+                $to_validation['g-recaptcha-response'] = [
                     'required' => true
-                );
+                ];
             }
 
             // Minecraft username?
             if (MINECRAFT) {
                 if ($custom_usernames == 'true') {
                     // Nickname enabled
-                    $to_validation['username'] = array(
+                    $to_validation['username'] = [
                         'required' => true,
                         'min' => 3,
                         'max' => 20,
                         'unique' => 'users'
-                    );
-                    $to_validation['nickname'] = array(
+                    ];
+                    $to_validation['nickname'] = [
                         'required' => true,
                         'min' => 3,
                         'max' => 20,
                         'unique' => 'users'
-                    );
+                    ];
 
                     $nickname = Output::getClean(Input::get('nickname'));
                     $username = Output::getClean(Input::get('username'));
-
                 } else {
-                    $to_validation['username'] = array(
+                    $to_validation['username'] = [
                         'required' => true,
                         'min' => 3,
                         'max' => 20,
                         'unique' => 'users'
-                    );
+                    ];
 
                     $nickname = Output::getClean(Input::get('username'));
                     $username = Output::getClean(Input::get('username'));
-
                 }
-
             } else {
                 // Just check username
-                $to_validation['username'] = array(
+                $to_validation['username'] = [
                     'required' => true,
                     'min' => 3,
                     'max' => 20,
                     'unique' => 'users'
-                );
+                ];
 
                 $nickname = Output::getClean(Input::get('username'));
                 $username = Output::getClean(Input::get('username'));
-
             }
 
             // Validate custom fields
-            $profile_fields = $queries->getWhere('profile_fields', array('id', '<>', 0));
+            $profile_fields = $queries->getWhere('profile_fields', ['id', '<>', 0]);
+
             if (count($profile_fields)) {
                 foreach ($profile_fields as $field) {
                     if ($field->required == true) {
-                        $to_validation[$field->name] = array(
+                        $to_validation[$field->name] = [
                             'required' => true,
                             'max' => (is_null($field->length) ? 1024 : $field->length)
-                        );
+                        ];
                     }
                 }
             }
@@ -269,18 +273,18 @@ if (Input::exists()) {
                     // Perform validation on Minecraft name
                     $profile = ProfileUtils::getProfile(str_replace(' ', '%20', $username));
 
-                    $mcname_result = $profile ? $profile->getProfileAsArray() : array();
+                    $mcname_result = $profile ? $profile->getProfileAsArray() : [];
 
-                    if (isset($mcname_result['username']) && !empty($mcname_result['username']) && isset($mcname_result['uuid']) && !empty($mcname_result['uuid'])) {
+                    if (isset($mcname_result['username']) && ! empty($mcname_result['username']) && isset($mcname_result['uuid']) && ! empty($mcname_result['uuid'])) {
                         // Valid
                         $uuid = Output::getClean($mcname_result['uuid']);
 
                         // Ensure UUID is unique
-                        $uuid_query = $queries->getWhere('users', array('uuid', '=', $uuid));
+                        $uuid_query = $queries->getWhere('users', ['uuid', '=', $uuid]);
+
                         if (count($uuid_query)) {
                             $uuid_error = $language->get('user', 'uuid_already_exists');
                         }
-
                     } else {
                         // Invalid
                         $invalid_mcname = true;
@@ -288,28 +292,28 @@ if (Input::exists()) {
                 }
 
                 // Check to see if the Minecraft username was valid
-                if (!isset($invalid_mcname)) {
-                    if (!isset($uuid)) {
+                if (! isset($invalid_mcname)) {
+                    if (! isset($uuid)) {
                         $uuid = '';
                     }
 
-                    if (!isset($uuid_error)) {
+                    if (! isset($uuid_error)) {
                         // Minecraft user account association
                         if (isset($account_verification) && $account_verification == '1') {
                             // MCAssoc enabled
                             // Get data from database
                             $mcassoc_site_id = SITE_NAME;
 
-                            $mcassoc_shared_secret = $queries->getWhere('settings', array('name', '=', 'mcassoc_key'));
+                            $mcassoc_shared_secret = $queries->getWhere('settings', ['name', '=', 'mcassoc_key']);
                             $mcassoc_shared_secret = $mcassoc_shared_secret[0]->value;
 
-                            $mcassoc_instance_secret = $queries->getWhere('settings', array('name', '=', 'mcassoc_instance'));
+                            $mcassoc_instance_secret = $queries->getWhere('settings', ['name', '=', 'mcassoc_instance']);
                             $mcassoc_instance_secret = $mcassoc_instance_secret[0]->value;
 
                             define('MCASSOC', true);
 
                             // Hash password first
-                            $password = password_hash($_POST['password'], PASSWORD_BCRYPT, array("cost" => 13));
+                            $password = password_hash($_POST['password'], PASSWORD_BCRYPT, ['cost' => 13]);
                             $_SESSION['password'] = $password;
                             unset($_POST['password']);
 
@@ -317,21 +321,21 @@ if (Input::exists()) {
                             $mcassoc = new MCAssoc($mcassoc_shared_secret, $mcassoc_site_id, $mcassoc_instance_secret);
                             $mcassoc->enableInsecureMode();
 
-                            require(ROOT_PATH . '/core/integration/run_mcassoc.php');
-                            die();
+                            require (ROOT_PATH . '/core/integration/run_mcassoc.php');
 
-                        } else {
+                            die();
+                        }
                             // Disabled
                             $user = new User();
 
                             $ip = $user->getIP();
+
                             if (filter_var($ip, FILTER_VALIDATE_IP)) {
                                 // Valid IP
-                            } else {
-                                // TODO: Invalid IP, do something else
                             }
-
-                            $password = password_hash(Input::get('password'), PASSWORD_BCRYPT, array("cost" => 13));
+                                // TODO: Invalid IP, do something else
+                            
+                            $password = password_hash(Input::get('password'), PASSWORD_BCRYPT, ['cost' => 13]);
                             // Get current unix time
                             $date = new DateTime();
                             $date = $date->getTimestamp();
@@ -339,16 +343,16 @@ if (Input::exists()) {
                             try {
                                 if ($api_verification == '1') {
                                     // Generate shorter code for API validation
-                                    $code = substr(str_shuffle("0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"), 0, 10);
+                                    $code = substr(str_shuffle('0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'), 0, 10);
                                     $active = 1;
                                 } else {
                                     // Generate random code for email
-                                    $code = substr(str_shuffle("0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"), 0, 60);
+                                    $code = substr(str_shuffle('0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'), 0, 60);
                                     $active = 0;
                                 }
 
                                 // Get default language ID before creating user
-                                $language_id = $queries->getWhere('languages', array('name', '=', LANGUAGE));
+                                $language_id = $queries->getWhere('languages', ['name', '=', LANGUAGE]);
 
                                 if (count($language_id)) {
                                     $language_id = $language_id[0]->id;
@@ -358,10 +362,11 @@ if (Input::exists()) {
 
                                 // Get default group ID
                                 $cache->setCache('default_group');
+
                                 if ($cache->isCached('default_group')) {
                                     $default_group = $cache->retrieve('default_group');
                                 } else {
-                                    $default_group = $queries->getWhere('groups', array('default_group', '=', 1));
+                                    $default_group = $queries->getWhere('groups', ['default_group', '=', 1]);
                                     $default_group = $default_group[0]->id;
 
                                     $cache->store('default_group', $default_group);
@@ -369,7 +374,7 @@ if (Input::exists()) {
 
                                 // Create user
                                 $user->create(
-                                    array(
+                                    [
                                         'username' => $username,
                                         'nickname' => $nickname,
                                         'uuid' => $uuid,
@@ -382,7 +387,7 @@ if (Input::exists()) {
                                         'last_online' => $date,
                                         'language_id' => $language_id,
                                         'active' => $active
-                                    )
+                                    ]
                                 );
 
                                 // Get user ID
@@ -398,29 +403,29 @@ if (Input::exists()) {
                                             continue;
                                         }
                                         $value = Input::get($field->name);
-                                        if (!empty($value)) {
+
+                                        if (! empty($value)) {
                                             // Insert custom field
                                             $queries->create(
                                                 'users_profile_fields',
-                                                array(
+                                                [
                                                     'user_id' => $user_id,
                                                     'field_id' => $field->id,
                                                     'value' => Output::getClean(Input::get($field->name))
-                                                )
+                                                ]
                                             );
                                         }
                                     }
                                 }
 
-                                Log::getInstance()->log(Log::Action('user/register'), "", $user_id);
+                                Log::getInstance()->log(Log::Action('user/register'), '', $user_id);
 
                                 if ($api_verification != '1' && $email_verification == '1') {
                                     // Send registration email
                                     sendRegisterEmail($queries, $language, Output::getClean(Input::get('email')), $username, $user_id, $code);
-
                                 } else if ($api_verification != '1') {
                                     // Email verification disabled
-                                    HookHandler::executeEvent('registerUser', array(
+                                    HookHandler::executeEvent('registerUser', [
                                         'event' => 'registerUser',
                                         'user_id' => $user_id,
                                         'username' => Output::getClean(Input::get('username')),
@@ -429,17 +434,18 @@ if (Input::exists()) {
                                         'avatar_url' => $user->getAvatar(null, 128, true),
                                         'url' => Util::getSelfURL() . ltrim(URL::build('/profile/' . Output::getClean(Input::get('username'))), '/'),
                                         'language' => $language
-                                    ));
+                                    ]);
 
                                     // Redirect straight to verification link
                                     $url = URL::build('/validate/', 'c=' . $code);
                                     Redirect::to($url);
+
                                     die();
                                 }
 
                                 HookHandler::executeEvent(
                                     'registerUser',
-                                    array(
+                                    [
                                         'event' => 'registerUser',
                                         'user_id' => $user_id,
                                         'username' => Output::getClean(Input::get('username')),
@@ -448,7 +454,7 @@ if (Input::exists()) {
                                         'avatar_url' => $user->getAvatar(null, 128, true),
                                         'url' => Util::getSelfURL() . ltrim(URL::build('/profile/' . Output::getClean(Input::get('username'))), '/'),
                                         'language' => $language
-                                    )
+                                    ]
                                 );
 
                                 if ($api_verification != '1') {
@@ -458,26 +464,23 @@ if (Input::exists()) {
                                 }
 
                                 Redirect::to(URL::build('/'));
-                                die();
 
+                                die();
                             } catch (Exception $e) {
                                 die($e->getMessage());
                             }
-                        }
                     } else {
-                        $errors = array($uuid_error);
+                        $errors = [$uuid_error];
                     }
-
                 } else {
                     // Invalid Minecraft name
-                    $errors = array($language->get('user', 'invalid_mcname'));
+                    $errors = [$language->get('user', 'invalid_mcname')];
                 }
-
             } else {
                 // Errors
-                $errors = array();
-                foreach ($validation->errors() as $validation_error) {
+                $errors = [];
 
+                foreach ($validation->errors() as $validation_error) {
                     if (strpos($validation_error, 'is required') !== false) {
                         // x is required
                         if (strpos($validation_error, 'username') !== false) {
@@ -491,7 +494,7 @@ if (Input::exists()) {
                         } else if (strpos($validation_error, 't_and_c') !== false) {
                             $errors[] = $language->get('user', 'accept_terms');
                         } else {
-                            $errors[] = $validation_error . ".";
+                            $errors[] = $validation_error . '.';
                         }
                     } else if (strpos($validation_error, 'minimum') !== false) {
                         // x must be a minimum of y characters long
@@ -516,7 +519,7 @@ if (Input::exists()) {
                         $errors[] = $language->get('user', 'passwords_dont_match');
                     } else if (strpos($validation_error, 'already exists') !== false) {
                         // already exists
-                        if (!in_array($language->get('user', 'username_mcname_email_exists'), $errors)) {
+                        if (! in_array($language->get('user', 'username_mcname_email_exists'), $errors)) {
                             $errors[] = $language->get('user', 'username_mcname_email_exists');
                         }
                     } else if (strpos($validation_error, 'not a valid Minecraft account') !== false) {
@@ -533,12 +536,11 @@ if (Input::exists()) {
             }
         } else {
             // reCAPTCHA failed
-            $errors = array($language->get('user', 'invalid_recaptcha'));
+            $errors = [$language->get('user', 'invalid_recaptcha')];
         }
-
     } else {
         // Invalid token
-        $errors = array($language->get('general', 'invalid_token'));
+        $errors = [$language->get('general', 'invalid_token')];
     }
 }
 
@@ -555,28 +557,29 @@ if ($minecraft == 1) {
     $smarty->assign('MINECRAFT', true);
 }
 
-$custom_fields = array();
-$profile_fields = $queries->getWhere('profile_fields', array('id', '<>', 0));
+$custom_fields = [];
+$profile_fields = $queries->getWhere('profile_fields', ['id', '<>', 0]);
+
 if (count($profile_fields)) {
     foreach ($profile_fields as $field) {
         if ($field->required == false) {
             continue;
         }
 
-        $custom_fields[] = array(
+        $custom_fields[] = [
             'id' => $field->id,
             'name' => Output::getClean($field->name),
             'description' => Output::getClean($field->description),
             'type' => $field->type,
             'required' => $field->required
-        );
+        ];
     }
 }
 // Assign Smarty variables
 $smarty->assign(
-    array(
+    [
         'USERNAME' => $language->get('user', 'username'),
-        'NICKNAME' => ($custom_usernames == 'false' && !MINECRAFT) ? $language->get('user', 'username') : $language->get('user', 'nickname'),
+        'NICKNAME' => ($custom_usernames == 'false' && ! MINECRAFT) ? $language->get('user', 'username') : $language->get('user', 'nickname'),
         'NICKNAME_VALUE' => ((isset($_POST['nickname']) && $_POST['nickname']) ? Output::getClean(Input::get('nickname')) : ''),
         'USERNAME_VALUE' => ((isset($_POST['username']) && $_POST['username']) ? Output::getClean(Input::get('username')) : ''),
         'MINECRAFT_USERNAME' => $language->get('user', 'minecraft_username'),
@@ -595,7 +598,7 @@ $smarty->assign(
         'ERROR_TITLE' => $language->get('general', 'error'),
         'CAPTCHA_CLASS' => $captcha_type === 'hCaptcha' ? 'h-captcha' : 'g-recaptcha',
         'CUSTOM_FIELDS' => $custom_fields
-    )
+    ]
 );
 
 if ($recaptcha === 'true') {
@@ -603,29 +606,30 @@ if ($recaptcha === 'true') {
 
     if ($captcha_type === 'hCaptcha') {
         $template->addJSFiles(
-            array(
-                'https://hcaptcha.com/1/api.js' => array()
-            )
+            [
+                'https://hcaptcha.com/1/api.js' => []
+            ]
         );
     } else {
         $template->addJSFiles(
-            array(
-                'https://www.google.com/recaptcha/api.js' => array()
-            )
+            [
+                'https://www.google.com/recaptcha/api.js' => []
+            ]
         );
     }
 }
 
 // Load modules + template
-Module::loadPage($user, $pages, $cache, $smarty, array($navigation, $cc_nav, $mod_nav), $widgets, $template);
+Module::loadPage($user, $pages, $cache, $smarty, [$navigation, $cc_nav, $mod_nav], $widgets, $template);
 
 $page_load = microtime(true) - $start;
 define('PAGE_LOAD_TIME', str_replace('{x}', round($page_load, 3), $language->get('general', 'page_loaded_in')));
 
 $template->onPageLoad();
 
-require(ROOT_PATH . '/core/templates/navbar.php');
-require(ROOT_PATH . '/core/templates/footer.php');
+require (ROOT_PATH . '/core/templates/navbar.php');
+
+require (ROOT_PATH . '/core/templates/footer.php');
 
 // Display template
 $template->displayTemplate('register.tpl', $smarty);
diff --git a/modules/Core/pages/status.php b/modules/Core/pages/status.php
index 802e895ddb6e9f637498c5b39f54262c58fe71d1..13d14c7b196e1d8bf9d68f1a254a0fe0969ed8ff 100644
--- a/modules/Core/pages/status.php
+++ b/modules/Core/pages/status.php
@@ -10,28 +10,30 @@
  */
 
 $cache->setCache('status_page');
+
 if ($cache->isCached('enabled')) {
     $status_enabled = $cache->retrieve('enabled');
-
 } else {
-    $status_enabled = $queries->getWhere('settings', array('name', '=', 'status_page'));
+    $status_enabled = $queries->getWhere('settings', ['name', '=', 'status_page']);
     $status_enabled = $status_enabled[0]->value == 1 ? 1 : 0;
     $cache->store('enabled', $status_enabled);
 }
 
-if (!defined('MINECRAFT') || MINECRAFT !== true || $status_enabled != 1) {
-    require_once(ROOT_PATH . '/403.php');
+if (! defined('MINECRAFT') || MINECRAFT !== true || $status_enabled != 1) {
+    require_once (ROOT_PATH . '/403.php');
+
     die();
 }
 
 define('PAGE', 'status');
 $page_title = $language->get('general', 'status');
-require_once(ROOT_PATH . '/core/templates/frontend_init.php');
+
+require_once (ROOT_PATH . '/core/templates/frontend_init.php');
 
 $servers = $queries->orderWhere('mc_servers', 'display = 1', '`order`', 'ASC');
 
 $smarty->assign(
-    array(
+    [
         'STATUS' => $language->get('general', 'status'),
         'IP' => $language->get('general', 'ip'),
         'TABLE_STATUS' => $language->get('general', 'table_status'),
@@ -39,19 +41,20 @@ $smarty->assign(
         'SERVERS' => $servers,
         'NO_SERVERS' => $language->get('general', 'no_servers'),
         'BUNGEE' => $language->get('general', 'bungee_instance')
-    )
+    ]
 );
 
 // Load modules + template
-Module::loadPage($user, $pages, $cache, $smarty, array($navigation, $cc_nav, $mod_nav), $widgets, $template);
+Module::loadPage($user, $pages, $cache, $smarty, [$navigation, $cc_nav, $mod_nav], $widgets, $template);
 
 $page_load = microtime(true) - $start;
 define('PAGE_LOAD_TIME', str_replace('{x}', round($page_load, 3), $language->get('general', 'page_loaded_in')));
 
 $template->onPageLoad();
 
-require(ROOT_PATH . '/core/templates/navbar.php');
-require(ROOT_PATH . '/core/templates/footer.php');
+require (ROOT_PATH . '/core/templates/navbar.php');
+
+require (ROOT_PATH . '/core/templates/footer.php');
 
 // Display template
 $template->displayTemplate('status.tpl', $smarty);
diff --git a/modules/Core/pages/terms.php b/modules/Core/pages/terms.php
index e0bc8ed9166c3b94bf5cef71c2e549d3da4e29ce..7cd9104a2ca2bedaa76e905cfce6b9b34611619a 100644
--- a/modules/Core/pages/terms.php
+++ b/modules/Core/pages/terms.php
@@ -12,42 +12,45 @@
 // Always define page name
 define('PAGE', 'terms');
 $page_title = $language->get('user', 'terms_and_conditions');
-require_once(ROOT_PATH . '/core/templates/frontend_init.php');
 
-$template->addCSSFiles(array(
-	(defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/ckeditor/plugins/spoiler/css/spoiler.css' => array()
-));
+require_once (ROOT_PATH . '/core/templates/frontend_init.php');
 
-$template->addJSFiles(array(
-	(defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/ckeditor/plugins/spoiler/js/spoiler.js' => array()
-));
+$template->addCSSFiles([
+    (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/ckeditor/plugins/spoiler/css/spoiler.css' => []
+]);
+
+$template->addJSFiles([
+    (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/ckeditor/plugins/spoiler/js/spoiler.js' => []
+]);
 
 // Retrieve terms from database
-$site_terms = $queries->getWhere('privacy_terms', array('name', '=', 'terms'));
-if(!count($site_terms)){
-	$site_terms = $queries->getWhere('settings', array('name', '=', 't_and_c_site'));
+$site_terms = $queries->getWhere('privacy_terms', ['name', '=', 'terms']);
+
+if (! count($site_terms)){
+    $site_terms = $queries->getWhere('settings', ['name', '=', 't_and_c_site']);
 }
 $site_terms = Output::getPurified($site_terms[0]->value);
 
-$nameless_terms = $queries->getWhere('settings', array('name', '=', 't_and_c'));
+$nameless_terms = $queries->getWhere('settings', ['name', '=', 't_and_c']);
 $nameless_terms = Output::getPurified($nameless_terms[0]->value);
 
-$smarty->assign(array(
-	'TERMS' => $language->get('user', 'terms_and_conditions'),
-	'SITE_TERMS' => $site_terms,
-	'NAMELESS_TERMS' => $nameless_terms
-));
+$smarty->assign([
+    'TERMS' => $language->get('user', 'terms_and_conditions'),
+    'SITE_TERMS' => $site_terms,
+    'NAMELESS_TERMS' => $nameless_terms
+]);
 
 // Load modules + template
-Module::loadPage($user, $pages, $cache, $smarty, array($navigation, $cc_nav, $mod_nav), $widgets, $template);
+Module::loadPage($user, $pages, $cache, $smarty, [$navigation, $cc_nav, $mod_nav], $widgets, $template);
 
 $page_load = microtime(true) - $start;
 define('PAGE_LOAD_TIME', str_replace('{x}', round($page_load, 3), $language->get('general', 'page_loaded_in')));
 
 $template->onPageLoad();
 
-require(ROOT_PATH . '/core/templates/navbar.php');
-require(ROOT_PATH . '/core/templates/footer.php');
+require (ROOT_PATH . '/core/templates/navbar.php');
+
+require (ROOT_PATH . '/core/templates/footer.php');
 
 // Display template
-$template->displayTemplate('terms.tpl', $smarty);
\ No newline at end of file
+$template->displayTemplate('terms.tpl', $smarty);
diff --git a/modules/Core/pages/user/acknowledge.php b/modules/Core/pages/user/acknowledge.php
index 496da6dd7a23a3b4f4d11f7bc741bfcefa5063d3..64f234ab31666cce9579999de62d1cef9e00bb55 100644
--- a/modules/Core/pages/user/acknowledge.php
+++ b/modules/Core/pages/user/acknowledge.php
@@ -9,8 +9,9 @@
  *  User warning acknowledgement page
  */
 
-if(!$user->isLoggedIn()){
+if (! $user->isLoggedIn()){
     Redirect::to(URL::build('/'));
+
     die();
 }
 
@@ -18,22 +19,25 @@ if(!$user->isLoggedIn()){
 $wid = explode('/', $route);
 $wid = $wid[count($wid) - 1];
 
-if(!isset($wid[count($wid) - 1]) || !is_numeric($wid)){
+if (! isset($wid[count($wid) - 1]) || ! is_numeric($wid)){
     Redirect::to(URL::build('/'));
+
     die();
 }
 
 // Ensure warning belongs to user
-$warning = $queries->getWhere('infractions', array('id', '=', $wid));
-if(count($warning)){
-    if($warning[0]->acknowledged == 0 && $warning[0]->punished == $user->data()->id){
-        $queries->update('infractions', $warning[0]->id, array(
+$warning = $queries->getWhere('infractions', ['id', '=', $wid]);
+
+if (count($warning)){
+    if ($warning[0]->acknowledged == 0 && $warning[0]->punished == $user->data()->id){
+        $queries->update('infractions', $warning[0]->id, [
             'acknowledged' => 1
-        ));
+        ]);
 
        Log::getInstance()->log(Log::Action('user/acknowledge'), $result);
     }
 }
 
 Redirect::to(URL::build('/'));
-die();
\ No newline at end of file
+
+die();
diff --git a/modules/Core/pages/user/alerts.php b/modules/Core/pages/user/alerts.php
index 050f41d416d7cf512daea13203ebbc273fa0d3d9..c88780b21edec0aec4f306c8087ef4fbe2d45bb1 100644
--- a/modules/Core/pages/user/alerts.php
+++ b/modules/Core/pages/user/alerts.php
@@ -10,91 +10,94 @@
  */
 
 // Must be logged in
-if(!$user->isLoggedIn()){
-	Redirect::to(URL::build('/'));
-	die();
+if (! $user->isLoggedIn()){
+    Redirect::to(URL::build('/'));
+
+    die();
 }
  
 // Always define page name for navbar
 define('PAGE', 'cc_alerts');
 $page_title = $language->get('user', 'user_cp');
-require_once(ROOT_PATH . '/core/templates/frontend_init.php');
+
+require_once (ROOT_PATH . '/core/templates/frontend_init.php');
 
 $timeago = new Timeago(TIMEZONE);
 
-if(!isset($_GET['view'])){
-	if(!isset($_GET['action'])){
-		// Get alerts
-		$alerts = $queries->orderWhere('alerts', 'user_id = ' . $user->data()->id, 'created', 'DESC');
+if (! isset($_GET['view'])){
+    if (! isset($_GET['action'])){
+        // Get alerts
+        $alerts = $queries->orderWhere('alerts', 'user_id = ' . $user->data()->id, 'created', 'DESC');
 
-		$alerts_limited = array();
-		$n = 0;
+        $alerts_limited = [];
+        $n = 0;
 
-		if(count($alerts) > 30) $limit = 30;
-		else $limit = count($alerts);
+        if (count($alerts) > 30) $limit = 30;
+        else $limit = count($alerts);
 
-		while($n < $limit){
-			// Only display 30 alerts
-			// Get date
-			$alerts[$n]->date = date('d M Y, H:i', $alerts[$n]->created);
-			$alerts[$n]->date_nice = $timeago->inWords(date('d M Y, H:i', $alerts[$n]->created), $language->getTimeLanguage());
-			$alerts[$n]->view_link = URL::build('/user/alerts/', 'view=' . $alerts[$n]->id);
+        while ($n < $limit){
+            // Only display 30 alerts
+            // Get date
+            $alerts[$n]->date = date('d M Y, H:i', $alerts[$n]->created);
+            $alerts[$n]->date_nice = $timeago->inWords(date('d M Y, H:i', $alerts[$n]->created), $language->getTimeLanguage());
+            $alerts[$n]->view_link = URL::build('/user/alerts/', 'view=' . $alerts[$n]->id);
 
-			$alerts_limited[] = $alerts[$n];
+            $alerts_limited[] = $alerts[$n];
 
-			$n++;
-		}
+            $n++;
+        }
 
-		// Language values
-		$smarty->assign(array(
-			'USER_CP' => $language->get('user', 'user_cp'),
-			'ALERTS' => $language->get('user', 'alerts'),
-			'ALERTS_LIST' => $alerts_limited,
-			'DELETE_ALL' => $language->get('user', 'delete_all'),
-			'DELETE_ALL_LINK' => URL::build('/user/alerts/', 'action=purge'),
-			'CLICK_TO_VIEW' => $language->get('user', 'click_here_to_view'),
-			'NO_ALERTS' => $language->get('user', 'no_alerts_usercp')
-		));
+        // Language values
+        $smarty->assign([
+            'USER_CP' => $language->get('user', 'user_cp'),
+            'ALERTS' => $language->get('user', 'alerts'),
+            'ALERTS_LIST' => $alerts_limited,
+            'DELETE_ALL' => $language->get('user', 'delete_all'),
+            'DELETE_ALL_LINK' => URL::build('/user/alerts/', 'action=purge'),
+            'CLICK_TO_VIEW' => $language->get('user', 'click_here_to_view'),
+            'NO_ALERTS' => $language->get('user', 'no_alerts_usercp')
+        ]);
 
-		// Load modules + template
-		Module::loadPage($user, $pages, $cache, $smarty, array($navigation, $cc_nav, $mod_nav), $widgets, $template);
+        // Load modules + template
+        Module::loadPage($user, $pages, $cache, $smarty, [$navigation, $cc_nav, $mod_nav], $widgets, $template);
 
-		require(ROOT_PATH . '/core/templates/cc_navbar.php');
+        require (ROOT_PATH . '/core/templates/cc_navbar.php');
 
-		$page_load = microtime(true) - $start;
-		define('PAGE_LOAD_TIME', str_replace('{x}', round($page_load, 3), $language->get('general', 'page_loaded_in')));
+        $page_load = microtime(true) - $start;
+        define('PAGE_LOAD_TIME', str_replace('{x}', round($page_load, 3), $language->get('general', 'page_loaded_in')));
 
-		$template->onPageLoad();
+        $template->onPageLoad();
 
-		require(ROOT_PATH . '/core/templates/navbar.php');
-		require(ROOT_PATH . '/core/templates/footer.php');
+        require (ROOT_PATH . '/core/templates/navbar.php');
 
-		// Display template
-		$template->displayTemplate('user/alerts.tpl', $smarty);
+        require (ROOT_PATH . '/core/templates/footer.php');
 
-	} else {
-		if($_GET['action'] == 'purge'){
-			$queries->delete('alerts', array('user_id', '=', $user->data()->id));
-			Redirect::to(URL::build('/user/alerts'));
-			die();
-		}
-	}
+        // Display template
+        $template->displayTemplate('user/alerts.tpl', $smarty);
+    } else {
+        if ($_GET['action'] == 'purge'){
+            $queries->delete('alerts', ['user_id', '=', $user->data()->id]);
+            Redirect::to(URL::build('/user/alerts'));
 
+            die();
+        }
+    }
 } else {
-	// Redirect to alert, mark as read
-	if(!is_numeric($_GET['view'])) Redirect::to(URL::build('/user/alerts'));
+    // Redirect to alert, mark as read
+    if (! is_numeric($_GET['view'])) Redirect::to(URL::build('/user/alerts'));
 
-	// Check the alert belongs to the user..
-	$alert = $queries->getWhere('alerts', array('id', '=', $_GET['view']));
+    // Check the alert belongs to the user..
+    $alert = $queries->getWhere('alerts', ['id', '=', $_GET['view']]);
 
-	if(!count($alert) || $alert[0]->user_id != $user->data()->id) Redirect::to(URL::build('/user/alerts'));
+    if (! count($alert) || $alert[0]->user_id != $user->data()->id) Redirect::to(URL::build('/user/alerts'));
 
-	if($alert[0]->read == 0){
-		$queries->update('alerts', $alert[0]->id, array(
-			'`read`' => 1
-		));
-	}
+    if ($alert[0]->read == 0){
+        $queries->update('alerts', $alert[0]->id, [
+            '`read`' => 1
+        ]);
+    }
 
-	Redirect::to($alert[0]->url);
-	die();
-}
\ No newline at end of file
+    Redirect::to($alert[0]->url);
+
+    die();
+}
diff --git a/modules/Core/pages/user/index.php b/modules/Core/pages/user/index.php
index 1640c8dbd29e58c3118dd385a0a105045f2819f8..52197442331372f89112e2a931e17cf10f09fde0 100644
--- a/modules/Core/pages/user/index.php
+++ b/modules/Core/pages/user/index.php
@@ -10,77 +10,85 @@
  */
 
 // Must be logged in
-if(!$user->isLoggedIn()){
-	Redirect::to(URL::build('/'));
-	die();
+if (! $user->isLoggedIn()){
+    Redirect::to(URL::build('/'));
+
+    die();
 }
  
 // Always define page name for navbar
 define('PAGE', 'cc_overview');
 $page_title = $language->get('user', 'user_cp');
-require_once(ROOT_PATH . '/core/templates/frontend_init.php');
 
-$user_details = array(
-	$language->get('user', 'username') => $user->getDisplayname(true),
-	$language->get('admin', 'group') => Output::getClean($user->getMainGroup()->name),
-	$language->get('admin', 'registered') => date('d M Y, H:i', $user->data()->joined)
-);
+require_once (ROOT_PATH . '/core/templates/frontend_init.php');
+
+$user_details = [
+    $language->get('user', 'username') => $user->getDisplayname(true),
+    $language->get('admin', 'group') => Output::getClean($user->getMainGroup()->name),
+    $language->get('admin', 'registered') => date('d M Y, H:i', $user->data()->joined)
+];
 
 // Language values
-$smarty->assign(array(
-	'USER_CP' => $language->get('user', 'user_cp'),
-	'USER_DETAILS' => $language->get('user', 'user_details'),
-	'USER_DETAILS_VALUES' => $user_details,
-	'OVERVIEW' => $language->get('user', 'overview')
-));
+$smarty->assign([
+    'USER_CP' => $language->get('user', 'user_cp'),
+    'USER_DETAILS' => $language->get('user', 'user_details'),
+    'USER_DETAILS_VALUES' => $user_details,
+    'OVERVIEW' => $language->get('user', 'overview')
+]);
 
 // Get graph data
 $cache->setCache('modulescache');
 $enabled_modules = $cache->retrieve('enabled_modules');
-foreach($enabled_modules as $module){
+
+foreach ($enabled_modules as $module){
   // Forum module enabled?
-  if($module['name'] == 'Forum'){
-	  // Enabled
-	  $forum_enabled = true;
-	  break;
+  if ($module['name'] == 'Forum'){
+      // Enabled
+      $forum_enabled = true;
+
+      break;
   }
 }
 
-if(isset($forum_enabled)){
-  $forum_query_user = DB::getInstance()->query("SELECT FROM_UNIXTIME(created, '%Y-%m-%d'), COUNT(*) FROM nl2_posts WHERE post_creator = ? AND created > ? GROUP BY FROM_UNIXTIME(created, '%Y-%m-%d')", array($user->data()->id, strtotime('-7 days')))->results();
-  $forum_query_average = DB::getInstance()->query("SELECT FROM_UNIXTIME(created, '%Y-%m-%d'), (COUNT(*) / COUNT(Distinct post_creator)) FROM nl2_posts WHERE created > ? GROUP BY FROM_UNIXTIME(created, '%Y-%m-%d')", array(strtotime('-7 days')))->results();
-  $forum_query_total = DB::getInstance()->query("SELECT FROM_UNIXTIME(created, '%Y-%m-%d'), COUNT(*) FROM nl2_posts WHERE created > ? GROUP BY FROM_UNIXTIME(created, '%Y-%m-%d')", array(strtotime('-7 days')))->results();
+if (isset($forum_enabled)){
+  $forum_query_user = DB::getInstance()->query("SELECT FROM_UNIXTIME(created, '%Y-%m-%d'), COUNT(*) FROM nl2_posts WHERE post_creator = ? AND created > ? GROUP BY FROM_UNIXTIME(created, '%Y-%m-%d')", [$user->data()->id, strtotime('-7 days')])->results();
+  $forum_query_average = DB::getInstance()->query("SELECT FROM_UNIXTIME(created, '%Y-%m-%d'), (COUNT(*) / COUNT(Distinct post_creator)) FROM nl2_posts WHERE created > ? GROUP BY FROM_UNIXTIME(created, '%Y-%m-%d')", [strtotime('-7 days')])->results();
+  $forum_query_total = DB::getInstance()->query("SELECT FROM_UNIXTIME(created, '%Y-%m-%d'), COUNT(*) FROM nl2_posts WHERE created > ? GROUP BY FROM_UNIXTIME(created, '%Y-%m-%d')", [strtotime('-7 days')])->results();
+
+  $output = [];
 
-  $output = array();
-  foreach($forum_query_user as $item){
-	  $date = strtotime($item->{'FROM_UNIXTIME(created, \'%Y-%m-%d\')'});
-	  $output[$date]['user'] = $item->{'COUNT(*)'};
+  foreach ($forum_query_user as $item){
+      $date = strtotime($item->{'FROM_UNIXTIME(created, \'%Y-%m-%d\')'});
+      $output[$date]['user'] = $item->{'COUNT(*)'};
   }
-  foreach($forum_query_average as $item){
-	  $date = strtotime($item->{'FROM_UNIXTIME(created, \'%Y-%m-%d\')'});
-	  $output[$date]['average'] = $item->{'(COUNT(*) / COUNT(Distinct post_creator))'};
+
+  foreach ($forum_query_average as $item){
+      $date = strtotime($item->{'FROM_UNIXTIME(created, \'%Y-%m-%d\')'});
+      $output[$date]['average'] = $item->{'(COUNT(*) / COUNT(Distinct post_creator))'};
 }
-  foreach($forum_query_total as $item){
-	  $date = strtotime($item->{'FROM_UNIXTIME(created, \'%Y-%m-%d\')'});
-	  $output[$date]['total'] = $item->{'COUNT(*)'};
+
+  foreach ($forum_query_total as $item){
+      $date = strtotime($item->{'FROM_UNIXTIME(created, \'%Y-%m-%d\')'});
+      $output[$date]['total'] = $item->{'COUNT(*)'};
   }
 
   // Fill in missing dates
-  $graph_start = strtotime("-7 days");
+  $graph_start = strtotime('-7 days');
   $graph_start = date('d M Y', $graph_start);
   $graph_start = strtotime($graph_start);
   $end = strtotime(date('d M Y'));
-  while($graph_start <= $end){
-	  if(!isset($output[$graph_start]['user']))
-		  $output[$graph_start]['user'] = 0;
 
-	  if(!isset($output[$graph_start]['average']))
-		  $output[$graph_start]['average'] = 0;
+  while ($graph_start <= $end){
+      if (! isset($output[$graph_start]['user']))
+          $output[$graph_start]['user'] = 0;
+
+      if (! isset($output[$graph_start]['average']))
+          $output[$graph_start]['average'] = 0;
 
-	  if(!isset($output[$graph_start]['total']))
-		  $output[$graph_start]['total'] = 0;
+      if (! isset($output[$graph_start]['total']))
+          $output[$graph_start]['total'] = 0;
 
-	  $graph_start = $graph_start + 86400;
+      $graph_start = $graph_start + 86400;
   }
 
   ksort($output);
@@ -90,11 +98,12 @@ if(isset($forum_enabled)){
   $user_data = '';
   $average_data = '';
   $total_data = '';
-  foreach($output as $date => $item){
-	  $labels .= '"' . date('Y-m-d', $date) . '", ';
-	  $user_data .= $item['user'] . ', ';
-	  $average_data .= $item['average'] . ', ';
-	  $total_data .= $item['total'] . ', ';
+
+  foreach ($output as $date => $item){
+      $labels .= '"' . date('Y-m-d', $date) . '", ';
+      $user_data .= $item['user'] . ', ';
+      $average_data .= $item['average'] . ', ';
+      $total_data .= $item['total'] . ', ';
   }
   $labels = '[' . rtrim($labels, ', ') . ']';
   $user_data = '[' . rtrim($user_data, ', ') . ']';
@@ -104,17 +113,17 @@ if(isset($forum_enabled)){
   $smarty->assign('FORUM_GRAPH', $forum_language->get('forum', 'last_7_days_posts'));
 }
 
-if(isset($forum_enabled)){
-	$template->addJSFiles(array(
-		(defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/moment/moment.min.js' => array(),
-		(defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/charts/Chart.min.js' => array()
-	));
-	$template->addJSScript(
-		'
+if (isset($forum_enabled)){
+    $template->addJSFiles([
+        (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/moment/moment.min.js' => [],
+        (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/charts/Chart.min.js' => []
+    ]);
+    $template->addJSScript(
+        '
 		$(document).ready(function() {
 			var ctx = $("#dataChart").get(0).getContext("2d");
 		
-			moment.locale(\'' . (defined('HTML_LANG') ? strtolower(HTML_LANG) : 'en'). '\');
+			moment.locale(\'' . (defined('HTML_LANG') ? strtolower(HTML_LANG) : 'en') . '\');
 		
 			var data = {
 				labels: ' . $labels . ',
@@ -178,21 +187,22 @@ if(isset($forum_enabled)){
 			});
 		});
 		'
-	);
+    );
 }
 
 // Load modules + template
-Module::loadPage($user, $pages, $cache, $smarty, array($navigation, $cc_nav, $mod_nav), $widgets, $template);
+Module::loadPage($user, $pages, $cache, $smarty, [$navigation, $cc_nav, $mod_nav], $widgets, $template);
 
-require(ROOT_PATH . '/core/templates/cc_navbar.php');
+require (ROOT_PATH . '/core/templates/cc_navbar.php');
 
 $page_load = microtime(true) - $start;
 define('PAGE_LOAD_TIME', str_replace('{x}', round($page_load, 3), $language->get('general', 'page_loaded_in')));
 
 $template->onPageLoad();
 
-require(ROOT_PATH . '/core/templates/navbar.php');
-require(ROOT_PATH . '/core/templates/footer.php');
+require (ROOT_PATH . '/core/templates/navbar.php');
+
+require (ROOT_PATH . '/core/templates/footer.php');
 
 // Display template
-$template->displayTemplate('user/index.tpl', $smarty);
\ No newline at end of file
+$template->displayTemplate('user/index.tpl', $smarty);
diff --git a/modules/Core/pages/user/messaging.php b/modules/Core/pages/user/messaging.php
index ab776b864d3d631806cafa566ca088113e7ae70c..f3361cd847565a1961576bec8606a88fd37a1fad 100644
--- a/modules/Core/pages/user/messaging.php
+++ b/modules/Core/pages/user/messaging.php
@@ -10,23 +10,25 @@
  */
 
 // Must be logged in
-if (!$user->isLoggedIn()) {
+if (! $user->isLoggedIn()) {
     Redirect::to(URL::build('/'));
+
     die();
 }
 
 // Always define page name for navbar
 define('PAGE', 'cc_messaging');
 $page_title = $language->get('user', 'user_cp');
-require_once(ROOT_PATH . '/core/templates/frontend_init.php');
+
+require_once (ROOT_PATH . '/core/templates/frontend_init.php');
 
 $template->addCSSFiles(
-    array(
-        (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/prism/prism.css' => array(),
-        (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/tinymce/plugins/spoiler/css/spoiler.css' => array(),
-        (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/emoji/css/emojione.min.css' => array(),
-        (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/emojionearea/css/emojionearea.min.css' => array()
-    )
+    [
+        (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/prism/prism.css' => [],
+        (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/tinymce/plugins/spoiler/css/spoiler.css' => [],
+        (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/emoji/css/emojione.min.css' => [],
+        (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/emojionearea/css/emojionearea.min.css' => []
+    ]
 );
 
 // Display either Markdown or HTML editor
@@ -35,10 +37,10 @@ $formatting = $cache->retrieve('formatting');
 
 if ($formatting == 'markdown') {
     $template->addJSFiles(
-        array(
-            (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/emoji/js/emojione.min.js' => array(),
-            (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/emojionearea/js/emojionearea.min.js' => array(),
-        )
+        [
+            (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/emoji/js/emojione.min.js' => [],
+            (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/emojionearea/js/emojionearea.min.js' => [],
+        ]
     );
 
     $template->addJSScript(
@@ -50,11 +52,11 @@ if ($formatting == 'markdown') {
     );
 } else {
     $template->addJSFiles(
-        array(
-            (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/prism/prism.js' => array(),
-            (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/tinymce/plugins/spoiler/js/spoiler.js' => array(),
-            (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/tinymce/tinymce.min.js' => array()
-        )
+        [
+            (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/prism/prism.js' => [],
+            (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/tinymce/plugins/spoiler/js/spoiler.js' => [],
+            (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/tinymce/tinymce.min.js' => []
+        ]
     );
 
     $template->addJSScript(Input::createTinyEditor($language, 'reply'));
@@ -62,49 +64,51 @@ if ($formatting == 'markdown') {
 
 $timeago = new Timeago(TIMEZONE);
 
-require(ROOT_PATH . '/core/includes/emojione/autoload.php'); // Emojione
-require(ROOT_PATH . '/core/includes/markdown/tohtml/Markdown.inc.php'); // Markdown to HTML
+require (ROOT_PATH . '/core/includes/emojione/autoload.php'); // Emojione
+
+require (ROOT_PATH . '/core/includes/markdown/tohtml/Markdown.inc.php'); // Markdown to HTML
 $emojione = new Emojione\Client(new Emojione\Ruleset());
 
 $smarty->assign(
-    array(
+    [
         'ERROR_TITLE' => $language->get('general', 'error')
-    )
+    ]
 );
 
 // Get page
 if (isset($_GET['p'])) {
-    if (!is_numeric($_GET['p'])) {
+    if (! is_numeric($_GET['p'])) {
         Redirect::to(URL::build('/user/messaging'));
+
         die();
-    } else {
+    }
+
         if ($_GET['p'] == 1) {
             // Avoid bug in pagination class
-            if(isset($_GET['message']))
+            if (isset($_GET['message']))
                 Redirect::to(URL::build('/user/messaging/', 'action=view&message=' . Output::getClean($_GET['message'])));
-            else
-                Redirect::to(URL::build('/user/messaging'));
+            else Redirect::to(URL::build('/user/messaging'));
+
             die();
         }
         $p = $_GET['p'];
-    }
 } else {
     $p = 1;
 }
 
-if(!isset($_GET['action'])) {
+if (! isset($_GET['action'])) {
     // Get private messages
     $messages = $user->listPMs($user->data()->id);
 
     // Pagination
-    $paginator = new Paginator((isset($template_pagination) ? $template_pagination : array()));
+    $paginator = new Paginator((isset($template_pagination) ? $template_pagination : []));
     $results = $paginator->getLimited($messages, 10, $p, count($messages));
     $pagination = $paginator->generate(7, URL::build('/user/messaging/', true));
 
     $smarty->assign('PAGINATION', $pagination);
 
     // Array to pass to template
-    $template_array = array();
+    $template_array = [];
 
     // Display the correct number of messages
     for ($n = 0; $n < count($results->data); $n++) {
@@ -117,7 +121,7 @@ if(!isset($_GET['action'])) {
         $participants = rtrim($participants, ', ');
 
         $target_user = new User($results->data[$n]['user_updated']);
-        $template_array[] = array(
+        $template_array[] = [
             'id' => $results->data[$n]['id'],
             'title' => Output::getClean($results->data[$n]['title']),
             'participants' => $participants,
@@ -125,16 +129,16 @@ if(!isset($_GET['action'])) {
             'last_message_user_id' => Output::getClean($results->data[$n]['user_updated']),
             'last_message_user' => $target_user->getDisplayname(),
             'last_message_user_profile' => $target_user->getProfileURL(),
-            'last_message_user_avatar' => $target_user->getAvatar("../", 30),
+            'last_message_user_avatar' => $target_user->getAvatar('../', 30),
             'last_message_user_style' => $target_user->getGroupClass(),
             'last_message_date' => $timeago->inWords(date('d M Y, H:i', $results->data[$n]['updated']), $language->getTimeLanguage()),
             'last_message_date_full' => date('d M Y, H:i', $results->data[$n]['updated'])
-        );
+        ];
     }
 
     // Assign Smarty variables
     $smarty->assign(
-        array(
+        [
             'USER_CP' => $language->get('user', 'user_cp'),
             'MESSAGING' => $language->get('user', 'messaging'),
             'MESSAGES' => $template_array,
@@ -143,39 +147,40 @@ if(!isset($_GET['action'])) {
             'PARTICIPANTS' => $language->get('user', 'participants'),
             'LAST_MESSAGE' => $language->get('user', 'last_message'),
             'BY' => $language->get('user', 'by')
-        )
+        ]
     );
 
     if ($user->hasPermission('usercp.messaging')) {
         // Can send messages
         $smarty->assign(
-            array(
+            [
                 'NEW_MESSAGE' => $language->get('user', 'new_message'),
                 'NEW_MESSAGE_LINK' => URL::build('/user/messaging/', 'action=new')
-            )
+            ]
         );
     }
 
     // Load modules + template
-    Module::loadPage($user, $pages, $cache, $smarty, array($navigation, $cc_nav, $mod_nav), $widgets, $template);
+    Module::loadPage($user, $pages, $cache, $smarty, [$navigation, $cc_nav, $mod_nav], $widgets, $template);
 
-    require(ROOT_PATH . '/core/templates/cc_navbar.php');
+    require (ROOT_PATH . '/core/templates/cc_navbar.php');
 
     $page_load = microtime(true) - $start;
     define('PAGE_LOAD_TIME', str_replace('{x}', round($page_load, 3), $language->get('general', 'page_loaded_in')));
 
     $template->onPageLoad();
 
-    require(ROOT_PATH . '/core/templates/navbar.php');
-    require(ROOT_PATH . '/core/templates/footer.php');
+    require (ROOT_PATH . '/core/templates/navbar.php');
+
+    require (ROOT_PATH . '/core/templates/footer.php');
 
     // Display template
     $template->displayTemplate('user/messaging.tpl', $smarty);
-
 } else {
     if ($_GET['action'] == 'new') {
-        if (!$user->hasPermission('usercp.messaging')) {
+        if (! $user->hasPermission('usercp.messaging')) {
           Redirect::to(URL::build('/user/messaging'));
+
           die();
         }
         // New PM
@@ -186,21 +191,21 @@ if(!isset($_GET['action'])) {
 
                 $validation = $validate->check(
                     $_POST,
-                    array(
-                        'title' => array(
+                    [
+                        'title' => [
                             'required' => true,
                             'min' => 2,
                             'max' => 64
-                        ),
-                        'content' => array(
+                        ],
+                        'content' => [
                             'required' => true,
                             'min' => 2,
                             'max' => 20480
-                        ),
-                        'to' => array(
+                        ],
+                        'to' => [
                             'required' => true
-                        )
-                    )
+                        ]
+                    ]
                 );
 
                 if ($validation->passed()) {
@@ -220,20 +225,24 @@ if(!isset($_GET['action'])) {
 
                         if ($username == $user->data()->nickname || $username == $user->data()->username) {
                             unset($users[$n]);
+
                             continue;
                         }
 
                         $user_id = $user->nameToId($item);
+
                         if ($user_id) {
-                            if ($user->isBlocked($user_id, $user->data()->id) && !$user->canViewACP()) {
+                            if ($user->isBlocked($user_id, $user->data()->id) && ! $user->canViewACP()) {
                                 $blocked = true;
                                 unset($users[$n]);
+
                                 continue;
                             }
                         }
 
                         if ($n == 10) {
                             $max_users = true;
+
                             break;
                         }
                         $n++;
@@ -241,26 +250,24 @@ if(!isset($_GET['action'])) {
 
                     if (isset($blocked)) {
                         $error = $language->get('user', 'one_or_more_users_blocked');
-
-                    } else if (!count($users)) {
+                    } else if (! count($users)) {
                         $error = $language->get('user', 'cant_send_to_self');
-
                     } else {
                         // Ensure people haven't been added twice
                         $users = array_unique($users);
 
-                        if (!isset($max_users)) {
+                        if (! isset($max_users)) {
                             try {
                                 // Input the content
                                 $queries->create(
                                     'private_messages',
-                                    array(
+                                    [
                                         'author_id' => $user->data()->id,
                                         'title' => Output::getClean(Input::get('title')),
                                         'created' => date('U'),
                                         'last_reply_user' => $user->data()->id,
                                         'last_reply_date' => date('U')
-                                    )
+                                    ]
                                 );
 
                                 // Get the PM ID
@@ -280,12 +287,12 @@ if(!isset($_GET['action'])) {
                                 // Insert post content into database
                                 $queries->create(
                                     'private_messages_replies',
-                                    array(
+                                    [
                                         'pm_id' => $last_id,
                                         'author_id' => $user->data()->id,
                                         'created' => date('U'),
                                         'content' => $content
-                                    )
+                                    ]
                                 );
 
                                 // Add users to conversation
@@ -297,10 +304,10 @@ if(!isset($_GET['action'])) {
                                         // Not the author
                                         $queries->create(
                                             'private_messages_users',
-                                            array(
+                                            [
                                                 'pm_id' => $last_id,
                                                 'user_id' => $user_id
-                                            )
+                                            ]
                                         );
                                     }
                                 }
@@ -308,23 +315,22 @@ if(!isset($_GET['action'])) {
                                 // Add the author to the list of users
                                 $queries->create(
                                     'private_messages_users',
-                                    array(
+                                    [
                                         'pm_id' => $last_id,
                                         'user_id' => $user->data()->id,
                                         'read' => 1
-                                    )
+                                    ]
                                 );
 
                                 // Sent successfully
                                 Session::flash('user_messaging_success', $language->get('user', 'message_sent_successfully'));
                                 Redirect::to(URL::build('/user/messaging'));
-                                die();
 
-                            } catch(Exception $e){
+                                die();
+                            } catch (Exception $e){
                                 // Exception
                                 die($e->getMessage());
                             }
-
                         } else {
                             // Over 10 users added
                             $error = $language->get('user', 'max_pm_10_users');
@@ -332,7 +338,7 @@ if(!isset($_GET['action'])) {
                     }
                 } else {
                     // Errors
-                    $errors = array();
+                    $errors = [];
 
                     foreach ($validation->errors() as $item) {
                         if (strpos($item, 'is required') !== false) {
@@ -340,6 +346,7 @@ if(!isset($_GET['action'])) {
                                 $errors[] = $language->get('user', 'title_required');
                             } else if (strpos($item, 'content') !== false) {
                                 $errors[] = $language->get('user', 'content_required');
+
                                 break;
                             } else if (strpos($item, 'to')) {
                                 $errors[] = $language->get('user', 'users_to_required');
@@ -349,6 +356,7 @@ if(!isset($_GET['action'])) {
                                 $errors[] = $language->get('user', 'title_min_2');
                             } else if (strpos($item, 'content') !== false) {
                                 $errors[] = $language->get('user', 'content_min_2');
+
                                 break;
                             }
                         } else if (strpos($item, 'maximum') !== false) {
@@ -362,7 +370,6 @@ if(!isset($_GET['action'])) {
 
                     $error = implode('<br />', $errors);
                 }
-
             } else {
                 // Invalid token
                 $error = $language->get('general', 'invalid_token');
@@ -385,7 +392,7 @@ if(!isset($_GET['action'])) {
 
         if (isset($_GET['uid'])) {
             // Messaging a specific user
-            $user_messaging = $queries->getWhere('users', array('id', '=', $_GET['uid']));
+            $user_messaging = $queries->getWhere('users', ['id', '=', $_GET['uid']]);
 
             if (count($user_messaging)) {
                 $smarty->assign('TO_USER', Output::getClean($user_messaging[0]->nickname));
@@ -394,7 +401,7 @@ if(!isset($_GET['action'])) {
 
         // Assign Smarty variables
         $smarty->assign(
-            array(
+            [
                 'NEW_MESSAGE' => $language->get('user', 'new_message'),
                 'CANCEL' => $language->get('general', 'cancel'),
                 'CONFIRM_CANCEL' => $language->get('general', 'confirm_cancel'),
@@ -407,37 +414,39 @@ if(!isset($_GET['action'])) {
                 'TO' => $language->get('user', 'to'),
                 'SEPARATE_USERS_WITH_COMMAS' => $language->get('user', 'separate_users_with_commas'),
                 'ALL_USERS' => $user->listAllUsers()
-            )
+            ]
         );
 
         // Load modules + template
-        Module::loadPage($user, $pages, $cache, $smarty, array($navigation, $cc_nav, $mod_nav), $widgets, $template);
+        Module::loadPage($user, $pages, $cache, $smarty, [$navigation, $cc_nav, $mod_nav], $widgets, $template);
 
-        require(ROOT_PATH . '/core/templates/cc_navbar.php');
+        require (ROOT_PATH . '/core/templates/cc_navbar.php');
 
         $page_load = microtime(true) - $start;
         define('PAGE_LOAD_TIME', str_replace('{x}', round($page_load, 3), $language->get('general', 'page_loaded_in')));
 
         $template->onPageLoad();
 
-        require(ROOT_PATH . '/core/templates/navbar.php');
-        require(ROOT_PATH . '/core/templates/footer.php');
+        require (ROOT_PATH . '/core/templates/navbar.php');
+
+        require (ROOT_PATH . '/core/templates/footer.php');
 
         // Display template
         $template->displayTemplate('user/new_message.tpl', $smarty);
-
     } else if ($_GET['action'] == 'view') {
         // Ensure message is specified
-        if (!isset($_GET['message']) || !is_numeric($_GET['message'])) {
+        if (! isset($_GET['message']) || ! is_numeric($_GET['message'])) {
             Redirect::to(URL::build('/user/messaging'));
+
             die();
         }
 
         // Ensure message exists
         $pm = $user->getPM($_GET['message'], $user->data()->id); // Get the PM - this also handles setting it as "read"
 
-        if (!$pm) { // Either PM doesn't exist, or the user doesn't have permission to view it
+        if (! $pm) { // Either PM doesn't exist, or the user doesn't have permission to view it
             Redirect::to(URL::build('/user/messaging'));
+
             die();
         }
 
@@ -451,13 +460,13 @@ if(!isset($_GET['action'])) {
 
                 $validation = $validate->check(
                     $_POST,
-                    array(
-                        'content' => array(
+                    [
+                        'content' => [
                             'required' => true,
                             'min' => 2,
                             'max' => 20480
-                        )
-                    )
+                        ]
+                    ]
                 );
 
                 if ($validation->passed()) {
@@ -475,35 +484,35 @@ if(!isset($_GET['action'])) {
                     // Insert post content into database
                     $queries->create(
                         'private_messages_replies',
-                        array(
+                        [
                             'pm_id' => $pm[0]->id,
                             'author_id' => $user->data()->id,
                             'created' => date('U'),
                             'content' => $content
-                        )
+                        ]
                     );
 
                     // Update last reply PM information
                     $queries->update(
                         'private_messages',
                         $pm[0]->id,
-                        array(
+                        [
                             'last_reply_user' => $user->data()->id,
                             'last_reply_date' => date('U')
-                        )
+                        ]
                     );
 
                     // Update PM as unread for all users
-                    $users = $queries->getWhere('private_messages_users', array('pm_id', '=', $pm[0]->id));
+                    $users = $queries->getWhere('private_messages_users', ['pm_id', '=', $pm[0]->id]);
 
                     foreach ($users as $item) {
                         if ($item->user_id != $user->data()->id) {
                             $queries->update(
                                 'private_messages_users',
                                 $item->id,
-                                array(
+                                [
                                     '`read`' => 0
-                                )
+                                ]
                             );
                         }
                     }
@@ -511,7 +520,6 @@ if(!isset($_GET['action'])) {
                     // Display success message
                     $smarty->assign('MESSAGE_SENT', $language->get('user', 'message_sent_successfully'));
                     unset($_POST['content']);
-
                 } else {
                     // Errors
                     foreach ($validation->errors() as $item) {
@@ -524,7 +532,6 @@ if(!isset($_GET['action'])) {
                         }
                     }
                 }
-
             } else {
                 // Invalid token
                 $error = $language->get('general', 'invalid_token');
@@ -536,34 +543,34 @@ if(!isset($_GET['action'])) {
         }
 
         // Get all PM replies
-        $pm_replies = $queries->getWhere('private_messages_replies', array('pm_id', '=', $_GET['message']));
+        $pm_replies = $queries->getWhere('private_messages_replies', ['pm_id', '=', $_GET['message']]);
 
         // Pagination
-        $paginator = new Paginator((isset($template_pagination) ? $template_pagination : array()));
+        $paginator = new Paginator((isset($template_pagination) ? $template_pagination : []));
         $results = $paginator->getLimited($pm_replies, 10, $p, count($pm_replies));
         $pagination = $paginator->generate(7, URL::build('/user/messaging/', 'action=view&amp;message=' . $pm[0]->id . '&amp;'));
 
         $smarty->assign('PAGINATION', $pagination);
 
         // Array to pass to template
-        $template_array = array();
+        $template_array = [];
 
         // Display the correct number of messages
         for ($n = 0; $n < count($results->data); $n++) {
             $target_user = new User($results->data[$n]->author_id);
 
-            $template_array[] = array(
+            $template_array[] = [
                 'id' => $results->data[$n]->id,
                 'author_id' => $results->data[$n]->author_id,
                 'author_username' => $target_user->getDisplayname(),
                 'author_profile' => $target_user->getProfileURL(),
-                'author_avatar' => $target_user->getAvatar("../", 100),
+                'author_avatar' => $target_user->getAvatar('../', 100),
                 'author_style' => $target_user->getGroupClass(),
                 'author_groups' => $target_user->getAllGroups('true'),
                 'message_date' => $timeago->inWords(date('d M Y, H:i', $results->data[$n]->created), $language->getTimeLanguage()),
                 'message_date_full' => date('d M Y, H:i', $results->data[$n]->created),
                 'content' => Output::getPurified($emojione->unicodeToImage(Output::getDecoded($results->data[$n]->content)))
-            );
+            ];
         }
 
         // Get participants list
@@ -575,7 +582,7 @@ if(!isset($_GET['action'])) {
         $participants = rtrim($participants, ', ');
 
         // Smarty variables
-        $smarty->assign(array(
+        $smarty->assign([
             'MESSAGE_TITLE' => Output::getClean($pm[0]->title),
             'BACK' => $language->get('general', 'back'),
             'BACK_LINK' => URL::build('/user/messaging'),
@@ -590,50 +597,52 @@ if(!isset($_GET['action'])) {
             'TOKEN' => Token::get(),
             'SUBMIT' => $language->get('general', 'submit'),
             'SUCCESS_TITLE' => $language->get('general', 'success')
-        ));
+        ]);
 
         // Markdown or HTML?
         $cache->setCache('post_formatting');
         $formatting = $cache->retrieve('formatting');
 
-        if($formatting == 'markdown'){
+        if ($formatting == 'markdown'){
             // Markdown
             $smarty->assign('MARKDOWN', true);
             $smarty->assign('MARKDOWN_HELP', $language->get('general', 'markdown_help'));
         }
 
-        if(isset($_POST['content']))
+        if (isset($_POST['content']))
             $smarty->assign('CONTENT', Output::getClean($_POST['content']));
         else $smarty->assign('CONTENT', '');
 
-        Module::loadPage($user, $pages, $cache, $smarty, array($navigation, $cc_nav, $mod_nav), $widgets, $template);
+        Module::loadPage($user, $pages, $cache, $smarty, [$navigation, $cc_nav, $mod_nav], $widgets, $template);
 
-        require(ROOT_PATH . '/core/templates/cc_navbar.php');
+        require (ROOT_PATH . '/core/templates/cc_navbar.php');
 
         $page_load = microtime(true) - $start;
         define('PAGE_LOAD_TIME', str_replace('{x}', round($page_load, 3), $language->get('general', 'page_loaded_in')));
 
         $template->onPageLoad();
 
-        require(ROOT_PATH . '/core/templates/navbar.php');
-        require(ROOT_PATH . '/core/templates/footer.php');
+        require (ROOT_PATH . '/core/templates/navbar.php');
+
+        require (ROOT_PATH . '/core/templates/footer.php');
 
         // Display template
         $template->displayTemplate('user/view_message.tpl', $smarty);
-
     } else if ($_GET['action'] == 'leave') {
         // Try to remove the user from the conversation
-        if (!isset($_GET['message']) || !is_numeric($_GET['message'])) {
+        if (! isset($_GET['message']) || ! is_numeric($_GET['message'])) {
             Redirect::to(URL::build('/user/messaging'));
+
             die();
         }
 
-        $message = $queries->getWhere('private_messages_users', array('pm_id', '=', $_GET['message']));
+        $message = $queries->getWhere('private_messages_users', ['pm_id', '=', $_GET['message']]);
 
         if (count($message)) {
             foreach ($message as $item) {
                 if ($item->user_id == $user->data()->id) {
-                    $queries->delete('private_messages_users', array('id', '=', $item->id));
+                    $queries->delete('private_messages_users', ['id', '=', $item->id]);
+
                     break;
                 }
             }
@@ -641,6 +650,7 @@ if(!isset($_GET['action'])) {
 
         // Done, redirect
         Redirect::to(URL::build('/user/messaging'));
+
         die();
     }
 }
diff --git a/modules/Core/pages/user/settings.php b/modules/Core/pages/user/settings.php
index c2bd83e82f289e82219165d10d9cc26e7856848b..e7cdcf2bc80e40978285aabfa545a784cc2bbd4a 100644
--- a/modules/Core/pages/user/settings.php
+++ b/modules/Core/pages/user/settings.php
@@ -10,208 +10,214 @@
  */
 
 // Must be logged in
-if(!$user->isLoggedIn()){
-	Redirect::to(URL::build('/'));
-	die();
+if (! $user->isLoggedIn()){
+    Redirect::to(URL::build('/'));
+
+    die();
 }
  
 // Always define page name for navbar
 define('PAGE', 'cc_settings');
 $page_title = $language->get('user', 'user_cp');
-require_once(ROOT_PATH . '/core/templates/frontend_init.php');
 
-require(ROOT_PATH . '/core/includes/password.php'); // For password hashing
-require(ROOT_PATH . '/core/includes/phpass.php'); // phpass for Wordpress auth
-require(ROOT_PATH . '/core/includes/emojione/autoload.php'); // Emojione
-require(ROOT_PATH . '/core/includes/markdown/tohtml/Markdown.inc.php'); // Markdown to HTML
+require_once (ROOT_PATH . '/core/templates/frontend_init.php');
+
+require (ROOT_PATH . '/core/includes/password.php'); // For password hashing
+
+require (ROOT_PATH . '/core/includes/phpass.php'); // phpass for Wordpress auth
+
+require (ROOT_PATH . '/core/includes/emojione/autoload.php'); // Emojione
+
+require (ROOT_PATH . '/core/includes/markdown/tohtml/Markdown.inc.php'); // Markdown to HTML
 $emojione = new Emojione\Client(new Emojione\Ruleset());
 
 // Two factor auth?
-if(isset($_GET['do'])){
-	if($_GET['do'] == 'enable_tfa'){
-		// Enable TFA
-		require(ROOT_PATH . '/core/includes/tfa/autoload.php');
-		
-		// Ensure TFA is currently disabled
-		if($user->data()->tfa_enabled == 1){
-			Redirect::to(URL::build('/user/settings'));
-			die();
-		}
-		
+if (isset($_GET['do'])){
+    if ($_GET['do'] == 'enable_tfa'){
+        // Enable TFA
+        require (ROOT_PATH . '/core/includes/tfa/autoload.php');
+        
+        // Ensure TFA is currently disabled
+        if ($user->data()->tfa_enabled == 1){
+            Redirect::to(URL::build('/user/settings'));
+
+            die();
+        }
+        
         $tfa = new \RobThree\Auth\TwoFactorAuth(SITE_NAME);
-		
-		if(!isset($_GET['s'])){
-			// Generate secret
-			$secret = $tfa->createSecret();
-
-			$user->update(array(
-				'tfa_secret' => $secret
-			));
-
-			if (Session::exists('force_tfa_alert')) {
-				$errors[] = Session::get('force_tfa_alert');
-			}
-
-			// Assign Smarty variables
-			$smarty->assign(array(
-				'TWO_FACTOR_AUTH' => $language->get('user', 'two_factor_auth'),
-				'TFA_SCAN_CODE_TEXT' => $language->get('user', 'tfa_scan_code'),
-				'IMG_SRC' => $tfa->getQRCodeImageAsDataUri(SITE_NAME . ':' . Output::getClean($user->data()->username), $secret),
-				'TFA_CODE_TEXT' => $language->get('user', 'tfa_code'),
-				'TFA_CODE' => chunk_split($secret, 4, ' '),
-				'NEXT' => $language->get('general', 'next'),
-				'LINK' => URL::build('/user/settings/', 'do=enable_tfa&amp;s=2'),
-				'CANCEL' => $language->get('general', 'cancel'),
-				'CANCEL_LINK' => URL::build('/user/settings/', 'do=disable_tfa'),
-				'ERROR_TITLE' => $language->get('general', 'error')
-			));
-			
-			if (isset($errors) && count($errors))
-				$smarty->assign(array(
-					'ERRORS' => $errors
-				));
-
-			// Load modules + template
-			Module::loadPage($user, $pages, $cache, $smarty, array($navigation, $cc_nav, $mod_nav), $widgets, $template);
-
-			require(ROOT_PATH . '/core/templates/cc_navbar.php');
-
-			$page_load = microtime(true) - $start;
-			define('PAGE_LOAD_TIME', str_replace('{x}', round($page_load, 3), $language->get('general', 'page_loaded_in')));
-
-			$template->onPageLoad();
-
-			require(ROOT_PATH . '/core/templates/navbar.php');
-			require(ROOT_PATH . '/core/templates/footer.php');
-
-			// Display template
-			$template->displayTemplate('user/tfa.tpl', $smarty);
-
-		} else {
-			// Validate code to see if it matches the secret
-			if(Input::exists()){
-				if(Token::check()){
-					if(isset($_POST['tfa_code'])){
-						if($tfa->verifyCode($user->data()->tfa_secret, $_POST['tfa_code']) === true){
-							$user->update(array(
-								'tfa_complete' => 1,
-								'tfa_enabled' => 1,
-								'tfa_type' => 1
-							));
-							Session::delete('force_tfa_alert');
-							Session::flash('tfa_success', $language->get('user', 'tfa_successful'));
-							Redirect::to(URL::build('/user/settings'));
-							die();
-						} else {
-							$error = $language->get('user', 'invalid_tfa');
-						}
-					} else {
-						$error = $language->get('user', 'invalid_tfa');
-					}
-				} else {
-					$error = $language->get('general', 'invalid_token');
-				}
-			}
-
-			if(isset($error)) $smarty->assign('ERROR', $error);
-
-			$smarty->assign(array(
-				'TWO_FACTOR_AUTH' => $language->get('user', 'two_factor_auth'),
-				'TFA_ENTER_CODE' => $language->get('user', 'tfa_enter_code'),
-				'SUBMIT' => $language->get('general', 'submit'),
-				'TOKEN' => Token::get(),
-				'CANCEL' => $language->get('general', 'cancel'),
-				'CANCEL_LINK' => URL::build('/user/settings/', 'do=disable_tfa'),
-				'ERROR_TITLE' => $language->get('general', 'error')
-			));
-
-			// Load modules + template
-			Module::loadPage($user, $pages, $cache, $smarty, array($navigation, $cc_nav, $mod_nav), $widgets, $template);
-
-			require(ROOT_PATH . '/core/templates/cc_navbar.php');
-
-			$page_load = microtime(true) - $start;
-			define('PAGE_LOAD_TIME', str_replace('{x}', round($page_load, 3), $language->get('general', 'page_loaded_in')));
-
-			$template->onPageLoad();
-
-			require(ROOT_PATH . '/core/templates/navbar.php');
-			require(ROOT_PATH . '/core/templates/footer.php');
-
-			// Display template
-			$template->displayTemplate('user/tfa.tpl', $smarty);
-
-		}
-
-	} else if($_GET['do'] == 'disable_tfa') {
-		// Disable TFA
-		$user->update(array(
-			'tfa_enabled' => 0,
-			'tfa_type' => 0,
-			'tfa_secret' => null,
-			'tfa_complete' => 0
-		));
-
-		Redirect::to(URL::build('/user/settings'));
-		die();
-	}
-	
+        
+        if (! isset($_GET['s'])){
+            // Generate secret
+            $secret = $tfa->createSecret();
+
+            $user->update([
+                'tfa_secret' => $secret
+            ]);
+
+            if (Session::exists('force_tfa_alert')) {
+                $errors[] = Session::get('force_tfa_alert');
+            }
+
+            // Assign Smarty variables
+            $smarty->assign([
+                'TWO_FACTOR_AUTH' => $language->get('user', 'two_factor_auth'),
+                'TFA_SCAN_CODE_TEXT' => $language->get('user', 'tfa_scan_code'),
+                'IMG_SRC' => $tfa->getQRCodeImageAsDataUri(SITE_NAME . ':' . Output::getClean($user->data()->username), $secret),
+                'TFA_CODE_TEXT' => $language->get('user', 'tfa_code'),
+                'TFA_CODE' => chunk_split($secret, 4, ' '),
+                'NEXT' => $language->get('general', 'next'),
+                'LINK' => URL::build('/user/settings/', 'do=enable_tfa&amp;s=2'),
+                'CANCEL' => $language->get('general', 'cancel'),
+                'CANCEL_LINK' => URL::build('/user/settings/', 'do=disable_tfa'),
+                'ERROR_TITLE' => $language->get('general', 'error')
+            ]);
+            
+            if (isset($errors) && count($errors))
+                $smarty->assign([
+                    'ERRORS' => $errors
+                ]);
+
+            // Load modules + template
+            Module::loadPage($user, $pages, $cache, $smarty, [$navigation, $cc_nav, $mod_nav], $widgets, $template);
+
+            require (ROOT_PATH . '/core/templates/cc_navbar.php');
+
+            $page_load = microtime(true) - $start;
+            define('PAGE_LOAD_TIME', str_replace('{x}', round($page_load, 3), $language->get('general', 'page_loaded_in')));
+
+            $template->onPageLoad();
+
+            require (ROOT_PATH . '/core/templates/navbar.php');
+
+            require (ROOT_PATH . '/core/templates/footer.php');
+
+            // Display template
+            $template->displayTemplate('user/tfa.tpl', $smarty);
+        } else {
+            // Validate code to see if it matches the secret
+            if (Input::exists()){
+                if (Token::check()){
+                    if (isset($_POST['tfa_code'])){
+                        if ($tfa->verifyCode($user->data()->tfa_secret, $_POST['tfa_code']) === true){
+                            $user->update([
+                                'tfa_complete' => 1,
+                                'tfa_enabled' => 1,
+                                'tfa_type' => 1
+                            ]);
+                            Session::delete('force_tfa_alert');
+                            Session::flash('tfa_success', $language->get('user', 'tfa_successful'));
+                            Redirect::to(URL::build('/user/settings'));
+
+                            die();
+                        }
+                            $error = $language->get('user', 'invalid_tfa');
+                    } else {
+                        $error = $language->get('user', 'invalid_tfa');
+                    }
+                } else {
+                    $error = $language->get('general', 'invalid_token');
+                }
+            }
+
+            if (isset($error)) $smarty->assign('ERROR', $error);
+
+            $smarty->assign([
+                'TWO_FACTOR_AUTH' => $language->get('user', 'two_factor_auth'),
+                'TFA_ENTER_CODE' => $language->get('user', 'tfa_enter_code'),
+                'SUBMIT' => $language->get('general', 'submit'),
+                'TOKEN' => Token::get(),
+                'CANCEL' => $language->get('general', 'cancel'),
+                'CANCEL_LINK' => URL::build('/user/settings/', 'do=disable_tfa'),
+                'ERROR_TITLE' => $language->get('general', 'error')
+            ]);
+
+            // Load modules + template
+            Module::loadPage($user, $pages, $cache, $smarty, [$navigation, $cc_nav, $mod_nav], $widgets, $template);
+
+            require (ROOT_PATH . '/core/templates/cc_navbar.php');
+
+            $page_load = microtime(true) - $start;
+            define('PAGE_LOAD_TIME', str_replace('{x}', round($page_load, 3), $language->get('general', 'page_loaded_in')));
+
+            $template->onPageLoad();
+
+            require (ROOT_PATH . '/core/templates/navbar.php');
+
+            require (ROOT_PATH . '/core/templates/footer.php');
+
+            // Display template
+            $template->displayTemplate('user/tfa.tpl', $smarty);
+        }
+    } else if ($_GET['do'] == 'disable_tfa') {
+        // Disable TFA
+        $user->update([
+            'tfa_enabled' => 0,
+            'tfa_type' => 0,
+            'tfa_secret' => null,
+            'tfa_complete' => 0
+        ]);
+
+        Redirect::to(URL::build('/user/settings'));
+
+        die();
+    }
 } else {
-	// Handle input
-	if(Input::exists()){
-		if(Token::check()){
-			if(Input::get('action') == 'settings'){
-				// Validation
-				$validate = new Validate();
-				
-				$to_validate = array(
-                    'signature' => array(
+    // Handle input
+    if (Input::exists()){
+        if (Token::check()){
+            if (Input::get('action') == 'settings'){
+                // Validation
+                $validate = new Validate();
+                
+                $to_validate = [
+                    'signature' => [
                         'max' => 900
-					),
-					'timezone' => array(
-						'timezone' => true,
-					)
-                );
-
-				// Permission to use nickname?
-                if($user->hasPermission('usercp.nickname')){
-                    $to_validate['nickname'] = array(
+                    ],
+                    'timezone' => [
+                        'timezone' => true,
+                    ]
+                ];
+
+                // Permission to use nickname?
+                if ($user->hasPermission('usercp.nickname')){
+                    $to_validate['nickname'] = [
                         'required' => true,
                         'min' => 3,
                         'max' => 20
-                    );
+                    ];
 
                     $displayname = Output::getClean(Input::get('nickname'));
-                } else
-                    $displayname = $user->data()->username;
-
-				// Get a list of required profile fields
-				$profile_fields = $queries->getWhere('profile_fields', array('required', '=', 1));
-
-				if (count($profile_fields)) {
-					foreach ($profile_fields as $field) {
-						if ($field->required = "1") {
-							$to_validate[$field->id] = array(
-								'required' => true,
-								'max' => (is_null($field->length) ? 1024 : $field->length)
-							);
-						} else {
-							$to_validate[$field->id] = array(
-								'max' => (is_null($field->length) ? 1024 : $field->length)
-							);
-						}
-					}
-				}
-				
-				$validation = $validate->check($_POST, $to_validate);
-				
-				if($validation->passed()){
-				    // Check nickname is unique
-                    if($user->hasPermission('usercp.nickname')) {
-                        $unique_nickname = $queries->getWhere('users', array('nickname', '=', Output::getClean(Input::get('nickname'))));
-                        if(count($unique_nickname)){
+                } else $displayname = $user->data()->username;
+
+                // Get a list of required profile fields
+                $profile_fields = $queries->getWhere('profile_fields', ['required', '=', 1]);
+
+                if (count($profile_fields)) {
+                    foreach ($profile_fields as $field) {
+                        if ($field->required = '1') {
+                            $to_validate[$field->id] = [
+                                'required' => true,
+                                'max' => (is_null($field->length) ? 1024 : $field->length)
+                            ];
+                        } else {
+                            $to_validate[$field->id] = [
+                                'max' => (is_null($field->length) ? 1024 : $field->length)
+                            ];
+                        }
+                    }
+                }
+                
+                $validation = $validate->check($_POST, $to_validate);
+                
+                if ($validation->passed()){
+                    // Check nickname is unique
+                    if ($user->hasPermission('usercp.nickname')) {
+                        $unique_nickname = $queries->getWhere('users', ['nickname', '=', Output::getClean(Input::get('nickname'))]);
+
+                        if (count($unique_nickname)){
                             $unique_nickname = $unique_nickname[0];
-                            if($unique_nickname->id != $user->data()->id){
+
+                            if ($unique_nickname->id != $user->data()->id){
                                 // Not unique
                                 $nickname_error = true;
                                 $error = $language->get('user', 'nickname_already_exists');
@@ -219,35 +225,36 @@ if(isset($_GET['do'])){
                         }
                     }
 
-					// Update profile fields
-                    if(!isset($nickname_error)) {
+                    // Update profile fields
+                    if (! isset($nickname_error)) {
                         try {
                             // Update language, template and timezone
-                            $new_language = $queries->getWhere('languages', array('name', '=', Input::get('language')));
+                            $new_language = $queries->getWhere('languages', ['name', '=', Input::get('language')]);
 
                             if (count($new_language)) $new_language = $new_language[0]->id;
                             else $new_language = $user->data()->language_id;
 
-	                        $new_template = $queries->getWhere('templates', array('id', '=', Input::get('template')));
+                            $new_template = $queries->getWhere('templates', ['id', '=', Input::get('template')]);
 
-	                        if (count($new_template)) $new_template = $new_template[0]->id;
-	                        else $new_template = $user->data()->theme_id;
+                            if (count($new_template)) $new_template = $new_template[0]->id;
+                            else $new_template = $user->data()->theme_id;
 
-	                        // Check permissions
-	                        $available_templates = $user->getUserTemplates();
+                            // Check permissions
+                            $available_templates = $user->getUserTemplates();
 
-	                        foreach($available_templates as $available_template){
-	                        	if($available_template->id == $new_template){
-	                        		$can_update = true;
-	                        		break;
-		                        }
-	                        }
+                            foreach ($available_templates as $available_template){
+                                if ($available_template->id == $new_template){
+                                    $can_update = true;
 
-	                        if(!isset($can_update)){
-	                        	$new_template = $user->data()->theme_id;
-	                        }
+                                    break;
+                                }
+                            }
+
+                            if (! isset($can_update)){
+                                $new_template = $user->data()->theme_id;
+                            }
 
-							$timezone = Output::getClean(Input::get('timezone'));
+                            $timezone = Output::getClean(Input::get('timezone'));
 
                             if ($user->hasPermission('usercp.signature')) {
                                 $cache->setCache('post_formatting');
@@ -257,55 +264,53 @@ if(isset($_GET['do'])){
                                     $signature = Michelf\Markdown::defaultTransform(Input::get('signature'));
                                     $signature = Output::getClean($signature);
                                 } else $signature = Output::getClean(Input::get('signature'));
-                            } else
-                                $signature = '';
+                            } else $signature = '';
 
-							$topicUpdates = Output::getClean(Input::get('topicUpdates'));
+                            $topicUpdates = Output::getClean(Input::get('topicUpdates'));
 
                             // Private profiles enabled?
-                            $private_profiles = $queries->getWhere('settings', array('name', '=', 'private_profile'));
-                            if($private_profiles[0]->value == 1) {
+                            $private_profiles = $queries->getWhere('settings', ['name', '=', 'private_profile']);
+
+                            if ($private_profiles[0]->value == 1) {
                                 if ($user->canPrivateProfile() && $_POST['privateProfile'] == 1)
                                     $privateProfile = 1;
-                                else
-                                    $privateProfile = 0;
-                            } else
-                                $privateProfile = $user->data()->private_profile;
+                                else $privateProfile = 0;
+                            } else $privateProfile = $user->data()->private_profile;
 
                             $gravatar = $_POST['gravatar'] == '1' ? 1 : 0;
 
-                            $user->update(array(
+                            $user->update([
                                 'language_id' => $new_language,
                                 'timezone' => $timezone,
                                 'signature' => $signature,
-								'nickname' => $displayname,
-								'topic_updates' => $topicUpdates,
+                                'nickname' => $displayname,
+                                'topic_updates' => $topicUpdates,
                                 'private_profile' => $privateProfile,
-	                            'theme_id' => $new_template,
+                                'theme_id' => $new_template,
                                 'gravatar' => $gravatar
-                            ));
+                            ]);
 
                             Log::getInstance()->log(Log::Action('user/ucp/update'));
 
-
                             foreach ($_POST as $key => $item) {
                                 if (strpos($key, 'action') !== false || strpos($key, 'token') !== false) {
                                     // Action/token, don't do anything
-
                                 } else {
                                     // Check field exists
-                                    $field_exists = $queries->getWhere('profile_fields', array('id', '=', $key));
-                                    if (!count($field_exists)) continue;
+                                    $field_exists = $queries->getWhere('profile_fields', ['id', '=', $key]);
+
+                                    if (! count($field_exists)) continue;
 
                                     // Update or create?
                                     $update = false;
-                                    $exists = $queries->getWhere('users_profile_fields', array('user_id', '=', $user->data()->id));
+                                    $exists = $queries->getWhere('users_profile_fields', ['user_id', '=', $user->data()->id]);
 
                                     if (count($exists)) {
                                         foreach ($exists as $exist) {
                                             if ($exist->field_id == $key) {
                                                 // Exists
                                                 $update = true;
+
                                                 break;
                                             }
                                         }
@@ -313,167 +318,170 @@ if(isset($_GET['do'])){
 
                                     if ($update == true) {
                                         // Update field value
-                                        $queries->update('users_profile_fields', $exist->id, array(
+                                        $queries->update('users_profile_fields', $exist->id, [
                                             'value' => Output::getClean($item) // Todo - allow HTML
-                                        ));
+                                        ]);
                                     } else {
                                         // Create new field value
-                                        $queries->create('users_profile_fields', array(
+                                        $queries->create('users_profile_fields', [
                                             'user_id' => $user->data()->id,
                                             'field_id' => $key,
                                             'value' => Output::getClean($item) // Todo - allow HTML
-                                        ));
+                                        ]);
                                     }
                                 }
                             }
 
                             Session::flash('settings_success', $language->get('user', 'settings_updated_successfully'));
                             Redirect::to(URL::build('/user/settings'));
-                            die();
 
+                            die();
                         } catch (Exception $e) {
                             Session::flash('settings_error', $e->getMessage());
                         }
                     }
-					
-				} else {
-					// Validation errors
-					foreach($validation->errors() as $item){
-					    if(strpos($item, 'signature') !== false){
-					        $errors[] = $language->get('user', 'signature_max_900') . '<br />';
-                        } else if(strpos($item, 'nickname') !== false){
-					        if(strpos($item, 'required') !== false){
-					            $errors[] = $language->get('user', 'username_required') . '<br />';
-                            } else if(strpos($item, 'min')  !== false){
+                } else {
+                    // Validation errors
+                    foreach ($validation->errors() as $item){
+                        if (strpos($item, 'signature') !== false){
+                            $errors[] = $language->get('user', 'signature_max_900') . '<br />';
+                        } else if (strpos($item, 'nickname') !== false){
+                            if (strpos($item, 'required') !== false){
+                                $errors[] = $language->get('user', 'username_required') . '<br />';
+                            } else if (strpos($item, 'min') !== false){
                                 $errors[] = $language->get('user', 'username_minimum_3') . '<br />';
-                            } else if(strpos($item, 'max') !== false){
+                            } else if (strpos($item, 'max') !== false){
                                 $errors[] = $language->get('user', 'username_maximum_20') . '<br />';
-							}
-						} else if (strpos($item, 'timezone') !== false) {
-							$errors[] = $language->get('general', 'invalid_timezone') . '<br />';
-						} else {
+                            }
+                        } else if (strpos($item, 'timezone') !== false) {
+                            $errors[] = $language->get('general', 'invalid_timezone') . '<br />';
+                        } else {
                             // Get field name
                             $id = explode(' ', $item);
                             $id = $id[0];
 
-                            $field = $queries->getWhere('profile_fields', array('id', '=', $id));
+                            $field = $queries->getWhere('profile_fields', ['id', '=', $id]);
+
                             if (count($field)) {
                                 $field = $field[0];
                                 $errors[] = str_replace('{x}', Output::getClean($field->name), $language->get('user', 'field_is_required')) . '<br />';
                             }
                         }
-					}					
-				}
-			} else if(Input::get('action') == 'password'){
-				// Change password
-				$validate = new Validate();
-				
-				$validation = $validate->check($_POST, array(
-					'old_password' => array(
-						'required' => true
-					),
-					'new_password' => array(
-						'required' => true,
-						'min' => 6,
-						'max' => 30
-					),
-					'new_password_again' => array(
-						'required' => true,
-						'matches' => 'new_password'
-					)
-				));
-				
-				if($validation->passed()){
-					// Update password
-					// Check old password matches 
-					$old_password = Input::get('old_password');
-					if($user->checkCredentials($user->data()->username, $old_password, 'username')){
-						try {
-							// Hash new password
-							$new_password = password_hash(Input::get('new_password'), PASSWORD_BCRYPT, array("cost" => 13));
-							
-							// Update password
-							$user->update(array(
-								'password' => $new_password,
-								'pass_method' => 'default'
-							));
-							
-							$success = $language->get('user', 'password_changed_successfully');
-
-						} catch(Exception $e) {
-							die($e->getMessage());
-						}
-					} else {
-						// Invalid current password
-						Session::flash('settings_error', $language->get('user', 'incorrect_password'));
-					}
-				} else {
-					$error = '';
-					foreach($validation->errors() as $item){
-						if(strpos($item, 'is required') !== false){
-							// Empty field
-							if(strpos($error, $language->get('user', 'password_required')) !== false){
-								// Only add error once
-							} else {
-								$errors[] = $language->get('user', 'password_required') . '<br />';
-							}
-						} else if(strpos($item, 'minimum') !== false){
-							// Field under 6 chars
-							if(strpos($error, $language->get('user', 'password_minimum_6')) !== false){
-								// Only add error once
-							} else {
-								$errors[] = $language->get('user', 'password_minimum_6') . '<br />';
-							}
-						} else if(strpos($item, 'maximum') !== false){
-							// Field under 6 chars
-							if(strpos($error, $language->get('user', 'password_maximum_30')) !== false){
-								// Only add error once
-							} else {
-								$errors[] = $language->get('user', 'password_maximum_30') . '<br />';
-							}
-						} else if(strpos($item, 'must match') !== false){
-							// Password must match password again
-							$errors[] = $language->get('user', 'passwords_dont_match') . '<br />';
-						}
-					}
-				}
-			} else if(Input::get('action') == 'email'){
+                    }
+                }
+            } else if (Input::get('action') == 'password'){
+                // Change password
+                $validate = new Validate();
+                
+                $validation = $validate->check($_POST, [
+                    'old_password' => [
+                        'required' => true
+                    ],
+                    'new_password' => [
+                        'required' => true,
+                        'min' => 6,
+                        'max' => 30
+                    ],
+                    'new_password_again' => [
+                        'required' => true,
+                        'matches' => 'new_password'
+                    ]
+                ]);
+                
+                if ($validation->passed()){
+                    // Update password
+                    // Check old password matches
+                    $old_password = Input::get('old_password');
+
+                    if ($user->checkCredentials($user->data()->username, $old_password, 'username')){
+                        try {
+                            // Hash new password
+                            $new_password = password_hash(Input::get('new_password'), PASSWORD_BCRYPT, ['cost' => 13]);
+                            
+                            // Update password
+                            $user->update([
+                                'password' => $new_password,
+                                'pass_method' => 'default'
+                            ]);
+                            
+                            $success = $language->get('user', 'password_changed_successfully');
+                        } catch (Exception $e) {
+                            die($e->getMessage());
+                        }
+                    } else {
+                        // Invalid current password
+                        Session::flash('settings_error', $language->get('user', 'incorrect_password'));
+                    }
+                } else {
+                    $error = '';
+
+                    foreach ($validation->errors() as $item){
+                        if (strpos($item, 'is required') !== false){
+                            // Empty field
+                            if (strpos($error, $language->get('user', 'password_required')) !== false){
+                                // Only add error once
+                            } else {
+                                $errors[] = $language->get('user', 'password_required') . '<br />';
+                            }
+                        } else if (strpos($item, 'minimum') !== false){
+                            // Field under 6 chars
+                            if (strpos($error, $language->get('user', 'password_minimum_6')) !== false){
+                                // Only add error once
+                            } else {
+                                $errors[] = $language->get('user', 'password_minimum_6') . '<br />';
+                            }
+                        } else if (strpos($item, 'maximum') !== false){
+                            // Field under 6 chars
+                            if (strpos($error, $language->get('user', 'password_maximum_30')) !== false){
+                                // Only add error once
+                            } else {
+                                $errors[] = $language->get('user', 'password_maximum_30') . '<br />';
+                            }
+                        } else if (strpos($item, 'must match') !== false){
+                            // Password must match password again
+                            $errors[] = $language->get('user', 'passwords_dont_match') . '<br />';
+                        }
+                    }
+                }
+            } else if (Input::get('action') == 'email'){
                 // Change password
                 $validate = new Validate();
 
-                $validation = $validate->check($_POST, array(
-                    'password' => array(
+                $validation = $validate->check($_POST, [
+                    'password' => [
                         'required' => true
-                    ),
-                    'email' => array(
+                    ],
+                    'email' => [
                         'required' => true,
-						'email' => true,
-                    )
-                ));
+                        'email' => true,
+                    ]
+                ]);
 
-                if($validation->passed()){
+                if ($validation->passed()){
                     // Check email doesn't exist
-                    $email_query = $queries->getWhere('users', array('email', '=', $_POST['email']));
-                    if(count($email_query)){
-                        if($email_query[0]->id != $user->data()->id){
+                    $email_query = $queries->getWhere('users', ['email', '=', $_POST['email']]);
+
+                    if (count($email_query)){
+                        if ($email_query[0]->id != $user->data()->id){
                             $error = $language->get('user', 'email_already_exists');
                         }
                     }
 
-                    if(!isset($error)) {
+                    if (! isset($error)) {
                         // Check password matches
                         $password = Input::get('password');
+
                         if ($user->checkCredentials($user->data()->username, $password, 'username')) {
                             try {
                                 // Update email
-                                $user->update(array(
+                                $user->update([
                                     'email' => Output::getClean($_POST['email'])
-                                ));
+                                ]);
 
                                 Session::flash('settings_success', $language->get('user', 'email_changed_successfully'));
                                 Redirect::to(URL::build('/user/settings'));
-                                die();
 
+                                die();
                             } catch (Exception $e) {
                                 die($e->getMessage());
                             }
@@ -484,341 +492,346 @@ if(isset($_GET['do'])){
                     }
                 } else {
                     $error = '';
-                    foreach($validation->errors() as $item){
-                        if(strpos($item, 'is required') !== false){
+
+                    foreach ($validation->errors() as $item){
+                        if (strpos($item, 'is required') !== false){
                             // Empty field
-                            if(strpos($item, 'password') !== false){
+                            if (strpos($item, 'password') !== false){
                                 $errors[] = $language->get('user', 'password_required') . '<br />';
                             } else {
                                 $errors[] = $language->get('user', 'email_required') . '<br />';
                             }
-                        } else if(strpos($item, 'minimum') !== false){
+                        } else if (strpos($item, 'minimum') !== false){
                             // Field under 4 chars
                             $errors[] = $language->get('user', 'invalid_email') . '<br />';
-
-                        } else if(strpos($item, 'maximum') !== false){
+                        } else if (strpos($item, 'maximum') !== false){
                             // Field over 64 chars
                             $errors[] = $language->get('user', 'invalid_email') . '<br />';
-
-                        } else if(strpos($item, 'email') !== false){
-							// Validate email
-							$errors[] = $language->get('general', 'contact_message_email') . '<br />';
-						} 
+                        } else if (strpos($item, 'email') !== false){
+                            // Validate email
+                            $errors[] = $language->get('general', 'contact_message_email') . '<br />';
+                        }
                     }
                 }
-            } else if(Input::get('action') == 'discord'){
-				
-				if (Input::get('unlink') == 'true') {
-
-					$user->update(array(
-						'discord_id' => null,
-						'discord_username' => null
-					));
-
-					Session::flash('settings_success', $language->get('user', 'discord_id_unlinked'));
-					Redirect::to(URL::build('/user/settings'));
-					die();
+            } else if (Input::get('action') == 'discord'){
+                if (Input::get('unlink') == 'true') {
+                    $user->update([
+                        'discord_id' => null,
+                        'discord_username' => null
+                    ]);
+
+                    Session::flash('settings_success', $language->get('user', 'discord_id_unlinked'));
+                    Redirect::to(URL::build('/user/settings'));
 
-				} else {
+                    die();
+                }
 
-					$token = uniqid('', true);
-					$queries->create('discord_verifications', [
-						'token' => $token,
-						'user_id' => $user->data()->id,
-					]);
+                    $token = uniqid('', true);
+                    $queries->create('discord_verifications', [
+                        'token' => $token,
+                        'user_id' => $user->data()->id,
+                    ]);
 
-                    $user->update(array(
+                    $user->update([
                         'discord_id' => 010
-                    ));
+                    ]);
                     
-                    Session::flash('settings_success', str_replace(array('{guild_id}', '{token}', '{bot_username}'), array(Util::getSetting(DB::getInstance(), 'discord'), $token, BOT_USERNAME), $language->get('user', 'discord_id_confirm')));
+                    Session::flash('settings_success', str_replace(['{guild_id}', '{token}', '{bot_username}'], [Util::getSetting(DB::getInstance(), 'discord'), $token, BOT_USERNAME], $language->get('user', 'discord_id_confirm')));
                     Redirect::to(URL::build('/user/settings'));
+
                     die();
-				}
-			}
-		} else {
-			// Invalid form token
-			Session::flash('settings_error', $language->get('general', 'invalid_token'));
-		}
-	}
-
-	$template->addCSSFiles(array(
-		(defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/bootstrap-datepicker/css/bootstrap-datepicker3.standalone.min.css' => array(),
-		(defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/prism/prism.css' => array(),
-		(defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/tinymce/plugins/spoiler/css/spoiler.css' => array(),
-		(defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/emoji/css/emojione.min.css' => array(),
-		(defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/emoji/css/emojione.sprites.css' => array(),
-		(defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/emojionearea/css/emojionearea.min.css' => array(),
-	));
-
-	$template->addJSFiles(array(
-		(defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/bootstrap-datepicker/js/bootstrap-datepicker.min.js' => array()
-	));
-
-	$template->addJSScript('$(\'.datepicker\').datepicker();');
-
-	$cache->setCache('post_formatting');
-	$formatting = $cache->retrieve('formatting');
-	if($formatting == 'markdown'){
-		$template->addJSFiles(array(
-			(defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/emoji/js/emojione.min.js' => array(),
-			(defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/emojionearea/js/emojionearea.min.js' => array()
-		));
-
-		$template->addJSScript('
+            }
+        } else {
+            // Invalid form token
+            Session::flash('settings_error', $language->get('general', 'invalid_token'));
+        }
+    }
+
+    $template->addCSSFiles([
+        (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/bootstrap-datepicker/css/bootstrap-datepicker3.standalone.min.css' => [],
+        (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/prism/prism.css' => [],
+        (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/tinymce/plugins/spoiler/css/spoiler.css' => [],
+        (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/emoji/css/emojione.min.css' => [],
+        (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/emoji/css/emojione.sprites.css' => [],
+        (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/emojionearea/css/emojionearea.min.css' => [],
+    ]);
+
+    $template->addJSFiles([
+        (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/bootstrap-datepicker/js/bootstrap-datepicker.min.js' => []
+    ]);
+
+    $template->addJSScript('$(\'.datepicker\').datepicker();');
+
+    $cache->setCache('post_formatting');
+    $formatting = $cache->retrieve('formatting');
+
+    if ($formatting == 'markdown'){
+        $template->addJSFiles([
+            (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/emoji/js/emojione.min.js' => [],
+            (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/emojionearea/js/emojionearea.min.js' => []
+        ]);
+
+        $template->addJSScript('
             $(document).ready(function() {
                 var el = $("#inputSignature").emojioneArea({
                     pickerPosition: "bottom"
                 });
             });
 		');
-
-	} else {
-		$template->addJSFiles(array(
-			(defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/prism/prism.js' => array(),
-			(defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/tinymce/plugins/spoiler/js/spoiler.js' => array(),
-			(defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/tinymce/tinymce.min.js' => array()
-		));
-
-		$template->addJSScript(Input::createTinyEditor($language, 'inputSignature'));
-	}
-
-	// Error/success message?
-	if(Session::exists('settings_error')) $error = Session::flash('settings_error');
-	if(Session::exists('settings_success')) $success = Session::flash('settings_success');
-	
-	// Get languages
-	$languages = array();
-	$language_query = $queries->getWhere('languages', array('id', '<>', 0));
-
-	foreach($language_query as $item){
-		$languages[] = array(
-			'name' => Output::getClean($item->name),
-			'active' => (($user->data()->language_id == $item->id) ? true : false)
-		);
-	}
-
-	// Get templates
-	$templates = array();
-	$templates_query = $user->getUserTemplates();
-
-	foreach($templates_query as $item){
-		$templates[] = array(
-			'id' => Output::getClean($item->id),
-			'active' => $item->id === $user->data()->theme_id,
-			'name' => Output::getClean($item->name)
-		);
-	}
-
-	// Get custom fields
-	$custom_fields = $queries->getWhere('profile_fields', array('id', '<>', 0));
-	$user_custom_fields = $queries->getWhere('users_profile_fields', array('user_id', '=', $user->data()->id));
-	
-	$custom_fields_template = array(
-		'nickname' => array(
-			'disabled' => true
-		)
-	);
-	
-	if($user->hasPermission('usercp.nickname')){
-		$custom_fields_template['nickname'] = array(
-			'name' => $language->get('user', 'nickname'),
-			'value' => Output::getClean($user->data()->nickname),
-			'id' => 'nickname',
-			'type' => 'text'
-		);
-	}
-	
-	if(count($custom_fields)){
-		foreach($custom_fields as $field){
-			// Check if its editable if not, next
-			if($field->editable == false){
-				continue;
-			}
-			// Get field value for user
-			$value = '';
-			if(count($user_custom_fields)){
-				foreach($user_custom_fields as $key => $item){
-					if($item->field_id == $field->id){
-						// TODO: support HTML fields
-						$value = Output::getClean($item->value);
-						unset($user_custom_fields[$key]);
-						break;
-					}
-				}
-			}
-			
-			// Get custom field type
-			if($field->type == 1)
-				$type = 'text';
-			else if($field->type == 2)
-				$type = 'textarea';
-			else if($field->type == 3)
-				$type = 'date';
-			
-			$custom_fields_template[$field->name] = array(
-				'name' => Output::getClean($field->name),
-				'value' => $value,
-				'id' => $field->id,
-				'type' => $type,
-				'required' => $field->required
-			);
-		}
-	}
-	
-	if(Session::exists('tfa_success')){
-		$success = Session::flash('tfa_success');
-	}
-
-	if (isset($errors) && count($errors))
-		$smarty->assign(array(
-			'ERRORS' => $errors,
-			'ERRORS_TITLE' => $language->get('general', 'error')
-		));
-
-	if($user->hasPermission('usercp.signature')){
+    } else {
+        $template->addJSFiles([
+            (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/prism/prism.js' => [],
+            (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/tinymce/plugins/spoiler/js/spoiler.js' => [],
+            (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/tinymce/tinymce.min.js' => []
+        ]);
+
+        $template->addJSScript(Input::createTinyEditor($language, 'inputSignature'));
+    }
+
+    // Error/success message?
+    if (Session::exists('settings_error')) $error = Session::flash('settings_error');
+
+    if (Session::exists('settings_success')) $success = Session::flash('settings_success');
+    
+    // Get languages
+    $languages = [];
+    $language_query = $queries->getWhere('languages', ['id', '<>', 0]);
+
+    foreach ($language_query as $item){
+        $languages[] = [
+            'name' => Output::getClean($item->name),
+            'active' => (($user->data()->language_id == $item->id) ? true : false)
+        ];
+    }
+
+    // Get templates
+    $templates = [];
+    $templates_query = $user->getUserTemplates();
+
+    foreach ($templates_query as $item){
+        $templates[] = [
+            'id' => Output::getClean($item->id),
+            'active' => $item->id === $user->data()->theme_id,
+            'name' => Output::getClean($item->name)
+        ];
+    }
+
+    // Get custom fields
+    $custom_fields = $queries->getWhere('profile_fields', ['id', '<>', 0]);
+    $user_custom_fields = $queries->getWhere('users_profile_fields', ['user_id', '=', $user->data()->id]);
+    
+    $custom_fields_template = [
+        'nickname' => [
+            'disabled' => true
+        ]
+    ];
+    
+    if ($user->hasPermission('usercp.nickname')){
+        $custom_fields_template['nickname'] = [
+            'name' => $language->get('user', 'nickname'),
+            'value' => Output::getClean($user->data()->nickname),
+            'id' => 'nickname',
+            'type' => 'text'
+        ];
+    }
+    
+    if (count($custom_fields)){
+        foreach ($custom_fields as $field){
+            // Check if its editable if not, next
+            if ($field->editable == false){
+                continue;
+            }
+            // Get field value for user
+            $value = '';
+
+            if (count($user_custom_fields)){
+                foreach ($user_custom_fields as $key => $item){
+                    if ($item->field_id == $field->id){
+                        // TODO: support HTML fields
+                        $value = Output::getClean($item->value);
+                        unset($user_custom_fields[$key]);
+
+                        break;
+                    }
+                }
+            }
+            
+            // Get custom field type
+            if ($field->type == 1)
+                $type = 'text';
+            else if ($field->type == 2)
+                $type = 'textarea';
+            else if ($field->type == 3)
+                $type = 'date';
+            
+            $custom_fields_template[$field->name] = [
+                'name' => Output::getClean($field->name),
+                'value' => $value,
+                'id' => $field->id,
+                'type' => $type,
+                'required' => $field->required
+            ];
+        }
+    }
+    
+    if (Session::exists('tfa_success')){
+        $success = Session::flash('tfa_success');
+    }
+
+    if (isset($errors) && count($errors))
+        $smarty->assign([
+            'ERRORS' => $errors,
+            'ERRORS_TITLE' => $language->get('general', 'error')
+        ]);
+
+    if ($user->hasPermission('usercp.signature')){
         // Get post formatting type (HTML or Markdown)
         $cache->setCache('post_formatting');
         $formatting = $cache->retrieve('formatting');
 
-        if($formatting == 'markdown'){
+        if ($formatting == 'markdown'){
             // Markdown
-            require(ROOT_PATH . '/core/includes/markdown/tomarkdown/autoload.php');
-            $converter = new League\HTMLToMarkdown\HtmlConverter(array('strip_tags' => TRUE));
+            require (ROOT_PATH . '/core/includes/markdown/tomarkdown/autoload.php');
+            $converter = new League\HTMLToMarkdown\HtmlConverter(['strip_tags' => true]);
 
             $signature = $converter->convert(htmlspecialchars_decode($user->data()->signature));
             $signature = Output::getPurified($signature);
 
-            $smarty->assign('MARKDOWN', TRUE);
+            $smarty->assign('MARKDOWN', true);
             $smarty->assign('MARKDOWN_HELP', $language->get('general', 'markdown_help'));
         } else {
             $signature = Output::getPurified(htmlspecialchars_decode($user->data()->signature));
         }
 
-        $smarty->assign(array(
+        $smarty->assign([
             'SIGNATURE' => $language->get('user', 'signature'),
             'SIGNATURE_VALUE' => $signature
-        ));
-	}
-
-	$forum_enabled = $queries->getWhere('modules', array('name', '=', 'Forum'));
-	if($forum_enabled[0]->enabled == 1){
-		$smarty->assign(array(
-			'TOPIC_UPDATES' => $language->get('user', 'topic_updates'),
-			'TOPIC_UPDATES_ENABLED' => DB::getInstance()->get('users', array('id', '=', $user->data()->id))->first()->topic_updates
-		));
-	}
-	
-	if($user->canPrivateProfile($user->data()->id)){
-        $smarty->assign(array(
+        ]);
+    }
+
+    $forum_enabled = $queries->getWhere('modules', ['name', '=', 'Forum']);
+
+    if ($forum_enabled[0]->enabled == 1){
+        $smarty->assign([
+            'TOPIC_UPDATES' => $language->get('user', 'topic_updates'),
+            'TOPIC_UPDATES_ENABLED' => DB::getInstance()->get('users', ['id', '=', $user->data()->id])->first()->topic_updates
+        ]);
+    }
+    
+    if ($user->canPrivateProfile($user->data()->id)){
+        $smarty->assign([
             'PRIVATE_PROFILE' => $language->get('user', 'private_profile'),
             'PRIVATE_PROFILE_ENABLED' => $user->isPrivateProfile($user->data()->id)
-        ));
-	}
-	
-	$discord_linked = $user->data()->discord_id == null || $user->data()->discord_id == 010 ? false : true;
-	$discord_integration = Util::getSetting(DB::getInstance(), 'discord_integration');
-	
-	// Language values
-	$smarty->assign(array(
-		'SETTINGS' => $language->get('user', 'profile_settings'),
-		'ACTIVE_LANGUAGE' => $language->get('user', 'active_language'),
-		'LANGUAGES' => $languages,
-		'ACTIVE_TEMPLATE' => $language->get('user', 'active_template'),
-		'TEMPLATES' => $templates,
-		'PROFILE_FIELDS' => $custom_fields_template,
-		'SUBMIT' => $language->get('general', 'submit'),
-		'TOKEN' => Token::get(),
-		'ERROR' => (isset($error) ? $error : false),
-		'SUCCESS' => (isset($success) ? $success : false),
-		'CHANGE_PASSWORD' => $language->get('user', 'change_password'),
-		'CURRENT_PASSWORD' => $language->get('user', 'current_password'),
-		'NEW_PASSWORD' => $language->get('user', 'new_password'),
-		'CONFIRM_NEW_PASSWORD' => $language->get('user', 'confirm_new_password'),
-		'DISCORD_INTEGRATION' => $discord_integration,
-		'DISCORD_LINK' => $language->get('user', 'discord_link'),
-		'DISCORD_LINKED' => $discord_linked,
-		'DISCORD_USERNAME' => $language->get('user', 'discord_username'),
-		'DISCORD_USERNAME_VALUE' => $user->data()->discord_username,
-		'DISCORD_ID' => $language->get('user', 'discord_id'),
-		'TWO_FACTOR_AUTH' => $language->get('user', 'two_factor_auth'),
-		'TIMEZONE' => $language->get('user', 'timezone'),
-		'TIMEZONES' => Util::listTimezones(),
-		'SELECTED_TIMEZONE' => $user->data()->timezone,
+        ]);
+    }
+    
+    $discord_linked = $user->data()->discord_id == null || $user->data()->discord_id == 010 ? false : true;
+    $discord_integration = Util::getSetting(DB::getInstance(), 'discord_integration');
+    
+    // Language values
+    $smarty->assign([
+        'SETTINGS' => $language->get('user', 'profile_settings'),
+        'ACTIVE_LANGUAGE' => $language->get('user', 'active_language'),
+        'LANGUAGES' => $languages,
+        'ACTIVE_TEMPLATE' => $language->get('user', 'active_template'),
+        'TEMPLATES' => $templates,
+        'PROFILE_FIELDS' => $custom_fields_template,
+        'SUBMIT' => $language->get('general', 'submit'),
+        'TOKEN' => Token::get(),
+        'ERROR' => (isset($error) ? $error : false),
+        'SUCCESS' => (isset($success) ? $success : false),
+        'CHANGE_PASSWORD' => $language->get('user', 'change_password'),
+        'CURRENT_PASSWORD' => $language->get('user', 'current_password'),
+        'NEW_PASSWORD' => $language->get('user', 'new_password'),
+        'CONFIRM_NEW_PASSWORD' => $language->get('user', 'confirm_new_password'),
+        'DISCORD_INTEGRATION' => $discord_integration,
+        'DISCORD_LINK' => $language->get('user', 'discord_link'),
+        'DISCORD_LINKED' => $discord_linked,
+        'DISCORD_USERNAME' => $language->get('user', 'discord_username'),
+        'DISCORD_USERNAME_VALUE' => $user->data()->discord_username,
+        'DISCORD_ID' => $language->get('user', 'discord_id'),
+        'TWO_FACTOR_AUTH' => $language->get('user', 'two_factor_auth'),
+        'TIMEZONE' => $language->get('user', 'timezone'),
+        'TIMEZONES' => Util::listTimezones(),
+        'SELECTED_TIMEZONE' => $user->data()->timezone,
         'CURRENT_EMAIL' => Output::getClean($user->data()->email),
         'CHANGE_EMAIL_ADDRESS' => $language->get('user', 'change_email_address'),
         'EMAIL_ADDRESS' => $language->get('user', 'email_address'),
-		'SUCCESS_TITLE' => $language->get('general', 'success'),
-		'ERROR_TITLE' => $language->get('general', 'error'),
-		'HELP' => $language->get('general', 'help'),
-		'INFO' => $language->get('general', 'info'),
-		'ID_INFO' => $language->get('user', 'discord_id_help'),
-		'ENABLED' => $language->get('user', 'enabled'),
-		'DISABLED' => $language->get('user', 'disabled'),
+        'SUCCESS_TITLE' => $language->get('general', 'success'),
+        'ERROR_TITLE' => $language->get('general', 'error'),
+        'HELP' => $language->get('general', 'help'),
+        'INFO' => $language->get('general', 'info'),
+        'ID_INFO' => $language->get('user', 'discord_id_help'),
+        'ENABLED' => $language->get('user', 'enabled'),
+        'DISABLED' => $language->get('user', 'disabled'),
         'GRAVATAR' => $language->get('user', 'gravatar'),
         'GRAVATAR_VALUE' => $user->data()->gravatar == '1' ? '1' : '0'
-	));
-
-	if ($discord_linked) {
-		$smarty->assign(array(
-			'UNLINK' => $language->get('general', 'unlink'),
-			'LINKED' => $language->get('user', 'linked'),
-			'DISCORD_ID_VALUE' => $user->data()->discord_id,
-		));
-	} else {
-		$smarty->assign(array(
-			'LINK' => $language->get('general', 'link'),
-			'NOT_LINKED' => $language->get('user', 'not_linked'),
-		));
-		if ($user->data()->discord_id == 010) {
-			$smarty->assign(array(
-				'PENDING_LINK' => $language->get('user', 'pending_link')
-			));
-		}
-	}
-
-	if(defined('CUSTOM_AVATARS')) {
-      $smarty->assign(array(
+    ]);
+
+    if ($discord_linked) {
+        $smarty->assign([
+            'UNLINK' => $language->get('general', 'unlink'),
+            'LINKED' => $language->get('user', 'linked'),
+            'DISCORD_ID_VALUE' => $user->data()->discord_id,
+        ]);
+    } else {
+        $smarty->assign([
+            'LINK' => $language->get('general', 'link'),
+            'NOT_LINKED' => $language->get('user', 'not_linked'),
+        ]);
+
+        if ($user->data()->discord_id == 010) {
+            $smarty->assign([
+                'PENDING_LINK' => $language->get('user', 'pending_link')
+            ]);
+        }
+    }
+
+    if (defined('CUSTOM_AVATARS')) {
+      $smarty->assign([
         'CUSTOM_AVATARS' => true,
         'CUSTOM_AVATARS_SCRIPT' => ((defined('CONFIG_PATH')) ? CONFIG_PATH . '/' : '/') . 'core/includes/image_upload.php',
         'BROWSE' => $language->get('general', 'browse'),
         'UPLOAD_NEW_PROFILE_IMAGE' => $language->get('user', 'upload_new_avatar')
-      ));
-	}
-	
-	if($user->data()->tfa_enabled == 1){
-		$smarty->assign('DISABLE', $language->get('user', 'disable'));
-		foreach($user->getGroups() as $group) {
-			if($group->force_tfa) {
-				$forced = true;
-				break;
-			}
-		}
-		
-		if (isset($forced) && $forced) {
-			$smarty->assign('FORCED', true);
-		} else {
-			$smarty->assign('DISABLE_LINK', URL::build('/user/settings/', 'do=disable_tfa'));
-		}
-	} else {
-		// Enable
-		$smarty->assign('ENABLE', $language->get('user', 'enable'));
-		$smarty->assign('ENABLE_LINK', URL::build('/user/settings/', 'do=enable_tfa'));
-	}
-
-	// Load modules + template
-	Module::loadPage($user, $pages, $cache, $smarty, array($navigation, $cc_nav, $mod_nav), $widgets, $template);
-
-	require(ROOT_PATH . '/core/templates/cc_navbar.php');
-
-	$page_load = microtime(true) - $start;
-	define('PAGE_LOAD_TIME', str_replace('{x}', round($page_load, 3), $language->get('general', 'page_loaded_in')));
-
-	$template->onPageLoad();
-
-	require(ROOT_PATH . '/core/templates/navbar.php');
-	require(ROOT_PATH . '/core/templates/footer.php');
-
-	// Display template
-	$template->displayTemplate('user/settings.tpl', $smarty);
+      ]);
+    }
+    
+    if ($user->data()->tfa_enabled == 1){
+        $smarty->assign('DISABLE', $language->get('user', 'disable'));
+
+        foreach ($user->getGroups() as $group) {
+            if ($group->force_tfa) {
+                $forced = true;
+
+                break;
+            }
+        }
+        
+        if (isset($forced) && $forced) {
+            $smarty->assign('FORCED', true);
+        } else {
+            $smarty->assign('DISABLE_LINK', URL::build('/user/settings/', 'do=disable_tfa'));
+        }
+    } else {
+        // Enable
+        $smarty->assign('ENABLE', $language->get('user', 'enable'));
+        $smarty->assign('ENABLE_LINK', URL::build('/user/settings/', 'do=enable_tfa'));
+    }
+
+    // Load modules + template
+    Module::loadPage($user, $pages, $cache, $smarty, [$navigation, $cc_nav, $mod_nav], $widgets, $template);
+
+    require (ROOT_PATH . '/core/templates/cc_navbar.php');
+
+    $page_load = microtime(true) - $start;
+    define('PAGE_LOAD_TIME', str_replace('{x}', round($page_load, 3), $language->get('general', 'page_loaded_in')));
+
+    $template->onPageLoad();
+
+    require (ROOT_PATH . '/core/templates/navbar.php');
+
+    require (ROOT_PATH . '/core/templates/footer.php');
+
+    // Display template
+    $template->displayTemplate('user/settings.tpl', $smarty);
 }
diff --git a/modules/Core/pages/validate.php b/modules/Core/pages/validate.php
index 80650c2e92365086eef10a3eb56272f0930c21e9..41f3d91c96232411a260370c5411b211cde6ff1b 100644
--- a/modules/Core/pages/validate.php
+++ b/modules/Core/pages/validate.php
@@ -12,32 +12,34 @@
 $page = 'validate';
 define('PAGE', 'validate');
 $page_title = $language->get('general', 'register');
-require_once(ROOT_PATH . '/core/templates/frontend_init.php');
+
+require_once (ROOT_PATH . '/core/templates/frontend_init.php');
 
 // Load modules + template
-Module::loadPage($user, $pages, $cache, $smarty, array($navigation, $cc_nav, $mod_nav), $widgets);
-
-if(!isset($_GET['c'])){
-	Redirect::to(URL::build('/'));
-	die();
-} else {
-	$user = new User($_GET['c'], 'reset_code');
-	if($user->data()){
+Module::loadPage($user, $pages, $cache, $smarty, [$navigation, $cc_nav, $mod_nav], $widgets);
+
+if (! isset($_GET['c'])){
+    Redirect::to(URL::build('/'));
+
+    die();
+}
+    $user = new User($_GET['c'], 'reset_code');
+
+    if ($user->data()){
         // API verification
-        $api_verification = $queries->getWhere('settings', array('name', '=', 'api_verification'));
+        $api_verification = $queries->getWhere('settings', ['name', '=', 'api_verification']);
         $api_verification = $api_verification[0]->value;
 
-        if($api_verification == '1')
+        if ($api_verification == '1')
             $reset_code = $user->data()->reset_code;
-        else
-            $reset_code = null;
+        else $reset_code = null;
 
-		$queries->update('users', $user->data()->id, array(
-			'reset_code' => $reset_code,
-			'active' => 1
-		));
+        $queries->update('users', $user->data()->id, [
+            'reset_code' => $reset_code,
+            'active' => 1
+        ]);
 
-        HookHandler::executeEvent('validateUser', array(
+        HookHandler::executeEvent('validateUser', [
             'event' => 'validateUser',
             'user_id' => $user->data()->id,
             'username' => $user->getDisplayname(),
@@ -46,16 +48,16 @@ if(!isset($_GET['c'])){
             'avatar_url' => $user->getAvatar(null, 128, true),
             'url' => Util::getSelfURL() . ltrim($user->getProfileURL(), '/'),
             'language' => $language
-        ));
+        ]);
 
         Discord::addDiscordRole($user, $user->getMainGroup()->id, $language, false);
 
-		Session::flash('home', $language->get('user', 'validation_complete'));
-		Redirect::to(URL::build('/'));
-		die();
-	} else {
-		Session::flash('home_error', $language->get('user', 'validation_error'));
-		Redirect::to(URL::build('/'));
-		die();
-	}
-}
+        Session::flash('home', $language->get('user', 'validation_complete'));
+        Redirect::to(URL::build('/'));
+
+        die();
+    }
+        Session::flash('home_error', $language->get('user', 'validation_error'));
+        Redirect::to(URL::build('/'));
+
+        die();
diff --git a/modules/Core/queries/admin_users.php b/modules/Core/queries/admin_users.php
index 3d3ca65c84a80b79091a408e5d4231a91a4c028a..9e0c15eeb09731999145cb9aca96b39def47268d 100644
--- a/modules/Core/queries/admin_users.php
+++ b/modules/Core/queries/admin_users.php
@@ -1,8 +1,9 @@
 <?php
+
 // Returns set of users for the StaffCP Users tab
 header('Content-type: application/json;charset=utf-8');
 
-if (!$user->isLoggedIn() || !$user->hasPermission('admincp.users')) {
+if (! $user->isLoggedIn() || ! $user->hasPermission('admincp.users')) {
     die(json_encode('Unauthenticated'));
 }
 
@@ -10,12 +11,12 @@ $sortColumns = ['username' => 'username', 'nickname' => 'nickname', 'joined' =>
 
 $db = DB::getInstance();
 
-$total = $db->query('SELECT COUNT(*) as `total` FROM nl2_users', array())->first()->total;
+$total = $db->query('SELECT COUNT(*) as `total` FROM nl2_users', [])->first()->total;
 $query = 'SELECT nl2_users.id as id, nl2_users.username as username, nl2_users.nickname as nickname, nl2_users.joined as joined FROM nl2_users';
 $where = '';
 $order = '';
 $limit = '';
-$params = array();
+$params = [];
 
 if (isset($_GET['search']) && $_GET['search']['value'] != '') {
     $where .= ' WHERE username LIKE ? OR nickname LIKE ? OR email LIKE ?';
@@ -23,7 +24,7 @@ if (isset($_GET['search']) && $_GET['search']['value'] != '') {
 }
 
 if (isset($_GET['order']) && count($_GET['order'])) {
-    $orderBy = array();
+    $orderBy = [];
 
     for ($i = 0, $j = count($_GET['order']); $i < $j; $i++) {
         $column = intval($_GET['order'][$i]['column']);
@@ -61,8 +62,8 @@ if (strlen($where) > 0) {
 }
 
 $results = $db->query($query . $where . $order . $limit, $params)->results();
-$data = array();
-$groups = array();
+$data = [];
+$groups = [];
 
 if (count($results)) {
     foreach ($results as $result) {
@@ -73,7 +74,7 @@ if (count($results)) {
         $obj->joined = date('d M Y', $result->joined);
 
         // Get group
-        $group = DB::getInstance()->query('SELECT `name` FROM nl2_groups WHERE id = (SELECT group_id FROM nl2_users_groups WHERE user_id = ? ORDER BY `order` ASC LIMIT 1)', array($result->id));
+        $group = DB::getInstance()->query('SELECT `name` FROM nl2_groups WHERE id = (SELECT group_id FROM nl2_users_groups WHERE user_id = ? ORDER BY `order` ASC LIMIT 1)', [$result->id]);
         $obj->groupName = $group->first()->name;
 
         $data[] = $obj;
@@ -81,11 +82,11 @@ if (count($results)) {
 }
 
 echo json_encode(
-    array(
+    [
         'draw' => isset($_GET['draw']) ? intval($_GET['draw']) : 0,
         'recordsTotal' => $total,
         'recordsFiltered' => isset($totalFiltered) ? $totalFiltered : $total,
         'data' => $data
-    ),
+    ],
     JSON_PRETTY_PRINT
 );
diff --git a/modules/Core/queries/alerts.php b/modules/Core/queries/alerts.php
index f8201d42ad465d8d15e5e1f1b0cbc44fab25095a..4e082c3161790770970242697f4b12ed1106a6b0 100644
--- a/modules/Core/queries/alerts.php
+++ b/modules/Core/queries/alerts.php
@@ -1,8 +1,9 @@
 <?php
-if (!$user->isLoggedIn()) {
-    die(json_encode(array("value" => 0)));
+
+if (! $user->isLoggedIn()) {
+    die(json_encode(['value' => 0]));
 }
 
 $alerts = Alert::getAlerts($user->data()->id);
 
-echo json_encode(array("value" => count($alerts), "alerts" => $alerts));
+echo json_encode(['value' => count($alerts), 'alerts' => $alerts]);
diff --git a/modules/Core/queries/pms.php b/modules/Core/queries/pms.php
index 2b6b1f7e5384f50108c1f5f3bb87ebb6e6aa8da0..1164439c0b7d7a5633dd0d4e9641d7bc3d530ee0 100644
--- a/modules/Core/queries/pms.php
+++ b/modules/Core/queries/pms.php
@@ -1,8 +1,9 @@
 <?php
-if (!$user->isLoggedIn()) {
-    die(json_encode(array("value" => 0)));
+
+if (! $user->isLoggedIn()) {
+    die(json_encode(['value' => 0]));
 }
 
 $pms = Alert::getPMs($user->data()->id);
 
-echo json_encode(array("value" => count($pms), "pms" => $pms));
+echo json_encode(['value' => count($pms), 'pms' => $pms]);
diff --git a/modules/Core/queries/server.php b/modules/Core/queries/server.php
index 419103a67fc15fa803755a7f9e172b4a5bf19035..01606e270d2b43e768192e0def0571eb46b02b94 100644
--- a/modules/Core/queries/server.php
+++ b/modules/Core/queries/server.php
@@ -1,31 +1,32 @@
 <?php
+
 // Check server ID is specified
-if (!isset($_GET['id']) || !is_numeric($_GET['id'])) {
+if (! isset($_GET['id']) || ! is_numeric($_GET['id'])) {
     die();
 }
 
-$server = $queries->getWhere('mc_servers', array('id', '=', $_GET['id']));
-if (!count($server)) {
+$server = $queries->getWhere('mc_servers', ['id', '=', $_GET['id']]);
+
+if (! count($server)) {
     die();
-} else {
-    $server = $server[0];
 }
+    $server = $server[0];
 
 $cache->setCache('server_' . $server->id);
+
 if ($cache->isCached('result')) {
     echo $cache->retrieve('result');
 } else {
     // Get query type
-    $query_type = $queries->getWhere('settings', array('name', '=', 'external_query'));
+    $query_type = $queries->getWhere('settings', ['name', '=', 'external_query']);
+
     if (count($query_type)) {
         if ($query_type[0]->value == '1')
             $query_type = 'external';
-        else
-            $query_type = 'internal';
-    } else
-        $query_type = 'internal';
+        else $query_type = 'internal';
+    } else $query_type = 'internal';
 
-    $full_ip = array('ip' => $server->ip . (is_null($server->port) ? '' : ':' . $server->port), 'pre' => $server->pre, 'name' => $server->name);
+    $full_ip = ['ip' => $server->ip . (is_null($server->port) ? '' : ':' . $server->port), 'pre' => $server->pre, 'name' => $server->name];
 
     $result = json_encode(MCQuery::singleQuery($full_ip, $query_type, $language, $queries), JSON_PRETTY_PRINT);
     $cache->store('result', $result, 30);
diff --git a/modules/Core/queries/servers.php b/modules/Core/queries/servers.php
index fb33820fe8f35d933d1e6923e58a5e701e62afe1..d0d4cc2d281f7351c8abecc6664743fa17c04994 100644
--- a/modules/Core/queries/servers.php
+++ b/modules/Core/queries/servers.php
@@ -1,8 +1,11 @@
 <?php
+
 // Check cache to see when servers were last queried
 $cache->setCache('server_query_cache');
+
 if ($cache->isCached('query_interval')) {
     $query_interval = $cache->retrieve('query_interval');
+
     if (is_numeric($query_interval) && $query_interval <= 60 && $query_interval >= 5) {
         // Interval ok
     } else {
@@ -20,16 +23,19 @@ if ($cache->isCached('query_interval')) {
 
 if (isset($_GET['key'])) {
     // Get key from database - check it matches
-    $key = $queries->getWhere('settings', array('name', '=', 'unique_id'));
-    if (!count($key))
+    $key = $queries->getWhere('settings', ['name', '=', 'unique_id']);
+
+    if (! count($key))
         die();
 
     $key = $key[0];
+
     if ($_GET['key'] != $key->value)
         die();
 } else {
     if ($cache->isCached('last_query')) {
         $last_query = $cache->retrieve('last_query');
+
         if ($last_query > strtotime($query_interval . ' minutes ago')) {
             // No need to re-query
             die('1');
@@ -38,23 +44,23 @@ if (isset($_GET['key'])) {
 }
 
 // Get query type
-$query_type = $queries->getWhere('settings', array('name', '=', 'external_query'));
+$query_type = $queries->getWhere('settings', ['name', '=', 'external_query']);
+
 if (count($query_type)) {
     if ($query_type[0]->value == '1')
         $query_type = 'external';
-    else
-        $query_type = 'internal';
-} else
-    $query_type = 'internal';
+    else $query_type = 'internal';
+} else $query_type = 'internal';
 
 // Query
-$servers = $queries->getWhere('mc_servers', array('id', '<>', 0));
+$servers = $queries->getWhere('mc_servers', ['id', '<>', 0]);
+
 if (count($servers)) {
-    $results = array();
+    $results = [];
 
     foreach ($servers as $server) {
         // Get query address for server
-        $full_ip = array('ip' => $server->ip . (is_null($server->port) ? '' : ':' . $server->port), 'pre' => $server->pre, 'name' => $server->name);
+        $full_ip = ['ip' => $server->ip . (is_null($server->port) ? '' : ':' . $server->port), 'pre' => $server->pre, 'name' => $server->name];
         $result = MCQuery::singleQuery($full_ip, $query_type, $language, $queries);
 
         if ($server->parent_server > 0)
@@ -65,7 +71,7 @@ if (count($servers)) {
 
     // Parent servers
     foreach ($results as $id => $result) {
-        if (isset($result['parent_server']) && isset($results[$result['parent_server']])) {
+        if (isset($result['parent_server'], $results[$result['parent_server']])) {
             $results[$result['parent_server']]['player_count'] += $result['player_count'];
         }
     }
@@ -73,11 +79,11 @@ if (count($servers)) {
     // Insert into db
     foreach ($results as $id => $result) {
         // Insert into db
-        $queries->create('query_results', array(
+        $queries->create('query_results', [
             'server_id' => $id,
             'queried_at' => date('U'),
             'players_online' => (isset($result['player_count']) ? $result['player_count'] : 0)
-        ));
+        ]);
     }
 
     $cache->store('last_query', date('U'));
diff --git a/modules/Core/queries/user.php b/modules/Core/queries/user.php
index b7c5f8a089a2247a0cd86637b990340de31dd1aa..c319d65055d7b75b22c271f8f22e2a475b2ee68d 100644
--- a/modules/Core/queries/user.php
+++ b/modules/Core/queries/user.php
@@ -1,30 +1,32 @@
 <?php
+
 // Check user ID is specified
-if (!isset($_GET['id'])) {
-    die(json_encode(array('html' => 'Error: Invalid ID')));
+if (! isset($_GET['id'])) {
+    die(json_encode(['html' => 'Error: Invalid ID']));
 }
 
 define('PAGE', 'user_query');
 $page_title = 'user_query';
-require_once(ROOT_PATH . '/core/templates/frontend_init.php');
 
-if (!is_numeric($_GET['id'])) {
+require_once (ROOT_PATH . '/core/templates/frontend_init.php');
+
+if (! is_numeric($_GET['id'])) {
     // Username
     $username = Output::getClean($_GET['id']);
     $nickname = $username;
     $profile = URL::build('/profile/' . $username);
     $avatar = (isset($_GET['uuid']) ? Util::getAvatarFromUUID(Output::getClean($_GET['uuid']), 128) : Util::getAvatarFromUUID($username, 128));
     $style = '';
-    $groups = array();
+    $groups = [];
     $id = 0;
 } else {
     $target_user = new User($_GET['id']);
-    if (!$target_user->data()) {
-        die(json_encode(array('html' => 'User not found')));
-    } else {
-        $user_query = $user_query[0];
-    }
 
+    if (! $target_user->data()) {
+        die(json_encode(['html' => 'User not found']));
+    }
+        $user_query = $user_query[0];
+    
     $username = $target_user->getDisplayname(true);
     $nickname = $target_user->getDisplayname();
     $profile = $target_user->getProfileURL();
@@ -34,7 +36,7 @@ if (!is_numeric($_GET['id'])) {
     $id = Output::getClean($target_user->data()->id);
 }
 
-$smarty->assign(array(
+$smarty->assign([
     'PROFILE' => $profile,
     'USERNAME' => $username,
     'NICKNAME' => $nickname,
@@ -42,14 +44,14 @@ $smarty->assign(array(
     'STYLE' => $style,
     'GROUPS' => $groups,
     'USER_ID' => $id
-));
+]);
 
 // Load modules + template
-Module::loadPage($user, $pages, $cache, $smarty, array($navigation, $cc_nav, $mod_nav), $widgets);
+Module::loadPage($user, $pages, $cache, $smarty, [$navigation, $cc_nav, $mod_nav], $widgets);
 
 $template->onPageLoad();
 
-echo json_encode(array(
+echo json_encode([
     'id' => $id,
     'profile' => $profile,
     'username' => $username,
@@ -58,4 +60,4 @@ echo json_encode(array(
     'style' => $style,
     'groups' => $groups,
     'html' => $template->getTemplate('user_popover.tpl', $smarty)
-), JSON_PRETTY_PRINT);
+], JSON_PRETTY_PRINT);
diff --git a/modules/Core/widgets/DiscordWidget.php b/modules/Core/widgets/DiscordWidget.php
index 597da2cd9a10d476e537646aa3e995ec206e1e2a..4d62cad4bdb4db5998abe15720c90bba47d513b8 100644
--- a/modules/Core/widgets/DiscordWidget.php
+++ b/modules/Core/widgets/DiscordWidget.php
@@ -9,13 +9,15 @@
  *
  *  Discord Widget
  */
-class DiscordWidget extends WidgetBase {
-
+class DiscordWidget extends WidgetBase
+{
     private $_language,
+
             $_cache,
+
             $_discord;
 
-    public function __construct($pages = array(), $language, $cache, $discord = '') {
+    public function __construct($pages = [], $language, $cache, $discord = '') {
         $this->_language = $language;
         $this->_cache = $cache;
         $this->_discord = $discord;
@@ -23,7 +25,7 @@ class DiscordWidget extends WidgetBase {
         parent::__construct($pages);
 
         // Get widget
-        $widget_query = DB::getInstance()->query('SELECT `location`, `order` FROM nl2_widgets WHERE `name` = ?', array('Discord'))->first();
+        $widget_query = DB::getInstance()->query('SELECT `location`, `order` FROM nl2_widgets WHERE `name` = ?', ['Discord'])->first();
 
         // Set widget variables
         $this->_module = 'Core';
@@ -38,39 +40,37 @@ class DiscordWidget extends WidgetBase {
         // Generate HTML code for widget
         // First, check to see if the Discord server has the widget enabled.
         $this->_cache->setCache('social_media');
+
         if ($this->_cache->isCached('discord_widget_check')) {
             $result = $this->_cache->retrieve('discord_widget_check');
-
         } else {
             $ch = curl_init();
             curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
             curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
             curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 0);
             curl_setopt($ch, CURLOPT_TIMEOUT, 5);
-            curl_setopt($ch, CURLOPT_URL, "https://discordapp.com/api/servers/" . Output::getClean($this->_discord) . "/widget.json");
+            curl_setopt($ch, CURLOPT_URL, 'https://discordapp.com/api/servers/' . Output::getClean($this->_discord) . '/widget.json');
             $result = curl_exec($ch);
             $result = json_decode($result);
             curl_close($ch);
 
             // Cache for 60 seconds
             $this->_cache->store('discord_widget_check', $result, 60);
-
         }
 
         // Check if the widget is disabled.
-        if (!isset($result->channels) || isset($result->code)) {
+        if (! isset($result->channels) || isset($result->code)) {
             // Yes, it is: display message
             $this->_content = $this->_language->get('general', 'discord_widget_disabled');
-
         } else {
             // No, it isn't: display the widget
             // Check cache for theme
             $theme = 'dark';
-            if($this->_cache->isCached('discord_widget_theme'))
+
+            if ($this->_cache->isCached('discord_widget_theme'))
                 $theme = $this->_cache->retrieve('discord_widget_theme');
 
             $this->_content = '<iframe src="https://discordapp.com/widget?id=' . Output::getClean($this->_discord) . '&theme=' . Output::getClean($theme) . '" width="100%" height="500" allowtransparency="true" frameborder="0"></iframe><br />';
-
         }
     }
 }
diff --git a/modules/Core/widgets/FacebookWidget.php b/modules/Core/widgets/FacebookWidget.php
index 8f4e4a068cea50ee966f77bc8787d2e21827d882..90807d5fd9a815399850e5307804908913c99d70 100644
--- a/modules/Core/widgets/FacebookWidget.php
+++ b/modules/Core/widgets/FacebookWidget.php
@@ -8,13 +8,13 @@
  *
  *  Facebook Widget
  */
-class FacebookWidget extends WidgetBase {
-
-    public function __construct($pages = array(), $fb_url = '') {
+class FacebookWidget extends WidgetBase
+{
+    public function __construct($pages = [], $fb_url = '') {
         parent::__construct($pages);
 
         // Get widget
-        $widget_query = DB::getInstance()->query('SELECT `location`, `order` FROM nl2_widgets WHERE `name` = ?', array('Facebook'))->first();
+        $widget_query = DB::getInstance()->query('SELECT `location`, `order` FROM nl2_widgets WHERE `name` = ?', ['Facebook'])->first();
 
         // Set widget variables
         $this->_module = 'Core';
diff --git a/modules/Core/widgets/OnlineStaff.php b/modules/Core/widgets/OnlineStaff.php
index f42d6f8c48899c7fb833aebffa5feaf1d6da142f..7aa0df753b06de5dddd7b219248559ac36f12ea1 100644
--- a/modules/Core/widgets/OnlineStaff.php
+++ b/modules/Core/widgets/OnlineStaff.php
@@ -8,13 +8,15 @@
  *
  *  Online staff widget
  */
-class OnlineStaffWidget extends WidgetBase {
-
+class OnlineStaffWidget extends WidgetBase
+{
     private $_cache,
+
             $_smarty,
+
             $_language;
 
-    public function __construct($pages = array(), $smarty, $language, $cache) {
+    public function __construct($pages = [], $smarty, $language, $cache) {
         $this->_cache = $cache;
         $this->_smarty = $smarty;
         $this->_language = $language;
@@ -22,7 +24,7 @@ class OnlineStaffWidget extends WidgetBase {
         parent::__construct($pages);
 
         // Get widget
-        $widget_query = DB::getInstance()->query('SELECT `location`, `order` FROM nl2_widgets WHERE `name` = ?', array('Online Staff'))->first();
+        $widget_query = DB::getInstance()->query('SELECT `location`, `order` FROM nl2_widgets WHERE `name` = ?', ['Online Staff'])->first();
 
         // Set widget variables
         $this->_module = 'Core';
@@ -35,20 +37,20 @@ class OnlineStaffWidget extends WidgetBase {
     public function initialise() {
         $this->_cache->setCache('online_members');
 
-        if($this->_cache->isCached('staff'))
+        if ($this->_cache->isCached('staff'))
             $online = $this->_cache->retrieve('staff');
         else {
-            $online = DB::getInstance()->query('SELECT U.id FROM nl2_users AS U JOIN nl2_users_groups AS UG ON (U.id = UG.user_id) JOIN nl2_groups AS G ON (UG.group_id = G.id) WHERE G.order = (SELECT min(iG.`order`) FROM nl2_users_groups AS iUG JOIN nl2_groups AS iG ON (iUG.group_id = iG.id) WHERE iUG.user_id = U.id GROUP BY iUG.user_id) AND U.last_online > ' . strtotime('-5 minutes') . ' AND G.staff = 1', array())->results();
+            $online = DB::getInstance()->query('SELECT U.id FROM nl2_users AS U JOIN nl2_users_groups AS UG ON (U.id = UG.user_id) JOIN nl2_groups AS G ON (UG.group_id = G.id) WHERE G.order = (SELECT min(iG.`order`) FROM nl2_users_groups AS iUG JOIN nl2_groups AS iG ON (iUG.group_id = iG.id) WHERE iUG.user_id = U.id GROUP BY iUG.user_id) AND U.last_online > ' . strtotime('-5 minutes') . ' AND G.staff = 1', [])->results();
             $this->_cache->store('staff', $online, 120);
         }
 
         // Generate HTML code for widget
-        if(count($online)){
-            $staff_members = array();
+        if (count($online)){
+            $staff_members = [];
 
             foreach ($online as $staff) {
                 $staff_user = new User($staff->id);
-                $staff_members[] = array(
+                $staff_members[] = [
                     'profile' => $staff_user->getProfileURL(),
                     'style' => $staff_user->getGroupClass(),
                     'username' => $staff_user->getDisplayname(true),
@@ -58,21 +60,19 @@ class OnlineStaffWidget extends WidgetBase {
                     'title' => Output::getClean($staff_user->data()->user_title),
                     'group' => $staff_user->getMainGroup()->group_html,
                     'group_order' => $staff_user->getMainGroup()->order
-                );
+                ];
             }
 
-            $this->_smarty->assign(array(
+            $this->_smarty->assign([
                 'ONLINE_STAFF' => $this->_language['title'],
                 'ONLINE_STAFF_LIST' => $staff_members,
                 'TOTAL_ONLINE_STAFF' => str_replace('{x}', count($staff_members), $this->_language['total_online_staff'])
-            ));
-
-        } else
-            $this->_smarty->assign(array(
+            ]);
+        } else $this->_smarty->assign([
                 'ONLINE_STAFF' => $this->_language['title'],
                 'NO_STAFF_ONLINE' => $this->_language['no_online_staff'],
                 'TOTAL_ONLINE_STAFF' => str_replace('{x}', '0', $this->_language['total_online_staff'])
-            ));
+            ]);
 
         $this->_content = $this->_smarty->fetch('widgets/online_staff.tpl');
     }
diff --git a/modules/Core/widgets/OnlineUsers.php b/modules/Core/widgets/OnlineUsers.php
index 948a69835a9861f92bc46c7acfdce4bea1aa5498..d0bc28c3aef50fe4ddb3dbf234416722b18c7894 100644
--- a/modules/Core/widgets/OnlineUsers.php
+++ b/modules/Core/widgets/OnlineUsers.php
@@ -8,13 +8,15 @@
  *
  *  Online users widget
  */
-class OnlineUsersWidget extends WidgetBase {
-
+class OnlineUsersWidget extends WidgetBase
+{
     private $_smarty,
+
             $_cache,
+
             $_language;
 
-    public function __construct($pages = array(), $cache, $smarty, $language) {
+    public function __construct($pages = [], $cache, $smarty, $language) {
         $this->_smarty = $smarty;
         $this->_cache = $cache;
         $this->_language = $language;
@@ -22,7 +24,7 @@ class OnlineUsersWidget extends WidgetBase {
         parent::__construct($pages);
 
         // Get widget
-        $widget_query = DB::getInstance()->query('SELECT `location`, `order` FROM nl2_widgets WHERE `name` = ?', array('Online Users'))->first();
+        $widget_query = DB::getInstance()->query('SELECT `location`, `order` FROM nl2_widgets WHERE `name` = ?', ['Online Users'])->first();
 
         // Set widget variables
         $this->_module = 'Core';
@@ -36,40 +38,41 @@ class OnlineUsersWidget extends WidgetBase {
     public function initialise() {
         $this->_cache->setCache('online_members');
 
-        if($this->_cache->isCached('users')){
+        if ($this->_cache->isCached('users')){
             $online = $this->_cache->retrieve('users');
             $use_nickname_show = $this->_cache->retrieve('show_nickname_instead');
         }
         else {
-            if($this->_cache->isCached('include_staff_in_users'))
+            if ($this->_cache->isCached('include_staff_in_users'))
                 $include_staff = $this->_cache->retrieve('include_staff_in_users');
             else {
                 $include_staff = 0;
                 $this->_cache->store('include_staff_in_users', 0);
             }
-            if($this->_cache->isCached('show_nickname_instead'))
+
+            if ($this->_cache->isCached('show_nickname_instead'))
                 $use_nickname_show = $this->_cache->retrieve('show_nickname_instead');
             else {
                 $use_nickname_show = 0;
                 $this->_cache->store('show_nickname_instead', 0);
             }
 
-            if($include_staff){
-                $online = DB::getInstance()->query('SELECT id FROM nl2_users WHERE last_online > ?', array(strtotime('-5 minutes')))->results();
+            if ($include_staff){
+                $online = DB::getInstance()->query('SELECT id FROM nl2_users WHERE last_online > ?', [strtotime('-5 minutes')])->results();
             } else {
-                $online = DB::getInstance()->query('SELECT U.id FROM nl2_users AS U JOIN nl2_users_groups AS UG ON (U.id = UG.user_id) JOIN nl2_groups AS G ON (UG.group_id = G.id) WHERE G.order = (SELECT min(iG.`order`) FROM nl2_users_groups AS iUG JOIN nl2_groups AS iG ON (iUG.group_id = iG.id) WHERE iUG.user_id = U.id GROUP BY iUG.user_id) AND U.last_online > ' . strtotime('-5 minutes') . ' AND G.staff = 0', array())->results();
+                $online = DB::getInstance()->query('SELECT U.id FROM nl2_users AS U JOIN nl2_users_groups AS UG ON (U.id = UG.user_id) JOIN nl2_groups AS G ON (UG.group_id = G.id) WHERE G.order = (SELECT min(iG.`order`) FROM nl2_users_groups AS iUG JOIN nl2_groups AS iG ON (iUG.group_id = iG.id) WHERE iUG.user_id = U.id GROUP BY iUG.user_id) AND U.last_online > ' . strtotime('-5 minutes') . ' AND G.staff = 0', [])->results();
             }
 
             $this->_cache->store('users', $online, 120);
         }
 
         // Generate HTML code for widget
-        if(count($online)){
-            $users = array();
+        if (count($online)){
+            $users = [];
 
-            foreach($online as $item) {
+            foreach ($online as $item) {
                 $online_user = new User($item->id);
-                $users[] = array(
+                $users[] = [
                     'profile' => $online_user->getProfileURL(),
                     'style' => $online_user->getGroupClass(),
                     'username' => $online_user->getDisplayname(true),
@@ -78,22 +81,20 @@ class OnlineUsersWidget extends WidgetBase {
                     'id' => Output::getClean($online_user->data()->id),
                     'title' => Output::getClean($online_user->data()->user_title),
                     'group' => $online_user->getMainGroup()->group_html
-                );
+                ];
             }
 
-            $this->_smarty->assign(array(
+            $this->_smarty->assign([
                 'SHOW_NICKNAME_INSTEAD' => $use_nickname_show,
                 'ONLINE_USERS' => $this->_language['title'],
                 'ONLINE_USERS_LIST' => $users,
                 'TOTAL_ONLINE_USERS' => str_replace('{x}', count($users), $this->_language['total_online_users'])
-            ));
-
-        } else
-            $this->_smarty->assign(array(
+            ]);
+        } else $this->_smarty->assign([
                 'ONLINE_USERS' => $this->_language['title'],
                 'NO_USERS_ONLINE' => $this->_language['no_online_users'],
                 'TOTAL_ONLINE_USERS' => str_replace('{x}', 0, $this->_language['total_online_users'])
-            ));
+            ]);
 
         $this->_content = $this->_smarty->fetch('widgets/online_users.tpl');
     }
diff --git a/modules/Core/widgets/ProfilePostsWidget.php b/modules/Core/widgets/ProfilePostsWidget.php
index 61f0342d0d9f0807c088295d4a123ac6f2777bbe..37d5aa388cc644332fa5ff1b7f1c251df143dd55 100644
--- a/modules/Core/widgets/ProfilePostsWidget.php
+++ b/modules/Core/widgets/ProfilePostsWidget.php
@@ -8,15 +8,19 @@
  *
  *  Profile Posts Widget
  */
-class ProfilePostsWidget extends WidgetBase {
-
+class ProfilePostsWidget extends WidgetBase
+{
     private $_cache,
+
             $_smarty,
+
             $_language,
+
             $_user,
+
             $_timeago;
 
-    public function __construct($pages = array(), $smarty, $language, $cache, $user, $timeago) {
+    public function __construct($pages = [], $smarty, $language, $cache, $user, $timeago) {
         $this->_language = $language;
         $this->_smarty = $smarty;
         $this->_cache = $cache;
@@ -26,7 +30,7 @@ class ProfilePostsWidget extends WidgetBase {
         parent::__construct($pages);
 
         // Get widget
-        $widget_query = DB::getInstance()->query('SELECT `location`, `order` FROM nl2_widgets WHERE `name` = ?', array('Latest Profile Posts'))->first();
+        $widget_query = DB::getInstance()->query('SELECT `location`, `order` FROM nl2_widgets WHERE `name` = ?', ['Latest Profile Posts'])->first();
 
         // Set widget variables
         $this->_module = 'Core';
@@ -46,22 +50,25 @@ class ProfilePostsWidget extends WidgetBase {
 
         $this->_cache->setCache('profile_posts_widget');
 
-        $posts_array = array();
+        $posts_array = [];
+
         if ($this->_cache->isCached('profile_posts_' . $user_id)) {
              $posts_array = $this->_cache->retrieve('profile_posts_' . $user_id);
          } else {
             $posts = DB::getInstance()->query('SELECT * FROM nl2_user_profile_wall_posts ORDER BY time DESC LIMIT 5')->results();
+
             foreach ($posts as $post) {
                 $post_author = new User($post->author_id);
 
                 if ($this->_user->isLoggedIn()) {
                     if ($this->_user->isBlocked($post->author_id, $this->_user->data()->id)) continue;
-                    if ($post_author->isPrivateProfile() && !$this->_user->hasPermission('profile.private.bypass')) continue;
+
+                    if ($post_author->isPrivateProfile() && ! $this->_user->hasPermission('profile.private.bypass')) continue;
                 } else if ($post_author->isPrivateProfile()) continue;
 
-                $link =  rtrim($post_author->getProfileURL(), '/');
+                $link = rtrim($post_author->getProfileURL(), '/');
 
-                $posts_array[] = array(
+                $posts_array[] = [
                     'avatar' => $post_author->getAvatar(),
                     'username' => $post_author->getDisplayname(),
                     'username_style' => $post_author->getGroupClass(),
@@ -71,19 +78,20 @@ class ProfilePostsWidget extends WidgetBase {
                     'user_id' => $post->author_id,
                     'user_profile_link' => $post_author->getProfileURL(),
                     'ago' => $this->_timeago->inWords(date('d M Y, H:i', $post->time), $this->_language->getTimeLanguage())
-                );
+                ];
             }
             $this->_cache->store('profile_posts_' . $user_id, $posts_array, 120);
         }
+
         if (count($posts_array) >= 1) {
-            $this->_smarty->assign(array(
+            $this->_smarty->assign([
                 'PROFILE_POSTS_ARRAY' => $posts_array
-            ));
+            ]);
         }
-        $this->_smarty->assign(array(
+        $this->_smarty->assign([
             'LATEST_PROFILE_POSTS' => $this->_language->get('user', 'latest_profile_posts'),
             'NO_PROFILE_POSTS' => $this->_language->get('user', 'no_profile_posts')
-        ));
-        $this->_content = $this->_smarty->fetch('widgets/profile_posts.tpl');;
+        ]);
+        $this->_content = $this->_smarty->fetch('widgets/profile_posts.tpl');
     }
 }
diff --git a/modules/Core/widgets/ServerStatusWidget.php b/modules/Core/widgets/ServerStatusWidget.php
index 18d9569e4b97b5dd41109bd4c4a63206300d4019..278aa41fa2c95faaf27fca535535fadb29cf1a79 100644
--- a/modules/Core/widgets/ServerStatusWidget.php
+++ b/modules/Core/widgets/ServerStatusWidget.php
@@ -8,13 +8,15 @@
  *
  *  Profile Posts Widget
  */
-class ServerStatusWidget extends WidgetBase {
-
+class ServerStatusWidget extends WidgetBase
+{
     private $_cache,
+
             $_smarty,
+
             $_language;
 
-    public function __construct($pages = array(), $smarty, $language, $cache) {
+    public function __construct($pages = [], $smarty, $language, $cache) {
         $this->_language = $language;
         $this->_smarty = $smarty;
         $this->_cache = $cache;
@@ -22,7 +24,7 @@ class ServerStatusWidget extends WidgetBase {
         parent::__construct($pages);
 
         // Get widget
-        $widget_query = DB::getInstance()->query('SELECT `location`, `order` FROM nl2_widgets WHERE `name` = ?', array('Server Status'))->first();
+        $widget_query = DB::getInstance()->query('SELECT `location`, `order` FROM nl2_widgets WHERE `name` = ?', ['Server Status'])->first();
 
         // Set widget variables
         $this->_module = 'Core';
@@ -62,21 +64,21 @@ class ServerStatusWidget extends WidgetBase {
 
         if (count($server_array) >= 1) {
             $this->_smarty->assign(
-                array(
+                [
                     'SERVER' => $server_array,
                     'ONLINE' => $this->_language->get('general', 'online'),
                     'OFFLINE' => $this->_language->get('general', 'offline'),
                     'IP' => $this->_language->get('general', 'ip'),
-                    'VERSION' => isset($server_array['version']) ? str_replace('{x}', '<strong>' . $server_array['version'] . '</strong>' , $this->_language->get('general', 'version')) : null
-                )
+                    'VERSION' => isset($server_array['version']) ? str_replace('{x}', '<strong>' . $server_array['version'] . '</strong>', $this->_language->get('general', 'version')) : null
+                ]
             );
         }
         $this->_smarty->assign(
-            array(
+            [
                 'SERVER_STATUS' => $this->_language->get('general', 'server_status'),
                 'NO_SERVERS' => $this->_language->get('general', 'no_default_server')
-            )
+            ]
         );
-        $this->_content = $this->_smarty->fetch('widgets/server_status.tpl');;
+        $this->_content = $this->_smarty->fetch('widgets/server_status.tpl');
     }
 }
diff --git a/modules/Core/widgets/StatsWidget.php b/modules/Core/widgets/StatsWidget.php
index 06fb6ad4fb77f63fce99f42cd364137a0e2fd47f..db57b559b91d15b67332c097cec075f0c5f6541d 100644
--- a/modules/Core/widgets/StatsWidget.php
+++ b/modules/Core/widgets/StatsWidget.php
@@ -9,13 +9,15 @@
  *  Statistics Widget // By Xemah // https://xemah.me
  */
 
-class StatsWidget extends WidgetBase {
-
+class StatsWidget extends WidgetBase
+{
     private $_cache,
+
             $_smarty,
+
             $_language;
 
-    public function __construct($pages = array(), $smarty, $language, $cache) {
+    public function __construct($pages = [], $smarty, $language, $cache) {
         $this->_cache = $cache;
         $this->_smarty = $smarty;
         $this->_language = $language;
@@ -23,7 +25,7 @@ class StatsWidget extends WidgetBase {
         parent::__construct($pages);
 
         // Get widget
-        $widget_query = DB::getInstance()->query('SELECT `location`, `order` FROM nl2_widgets WHERE `name` = ?', array('Statistics'))->first();
+        $widget_query = DB::getInstance()->query('SELECT `location`, `order` FROM nl2_widgets WHERE `name` = ?', ['Statistics'])->first();
 
         // Set widget variables
         $this->_module = 'Core';
@@ -40,53 +42,49 @@ class StatsWidget extends WidgetBase {
         $this->_cache->setCache('statistics');
 
         if ($this->_cache->isCached('statistics')) {
-
             $users_query = $this->_cache->retrieve('statistics');
             $users_registered = $users_query['users_registered'];
             $latest_member = $users_query['latest_member'];
-
         } else {
-
             $users_query = $queries->orderAll('users', 'joined', 'DESC');
             $users_registered = count($users_query);
 
             $latest_user = new User($users_query[0]->id);
-            $latest_member = array(
+            $latest_member = [
                 'style' => $latest_user->getGroupClass(),
                 'profile' => $latest_user->getProfileURL(),
                 'avatar' => $latest_user->getAvatar(),
                 'username' => $latest_user->getDisplayname(true),
                 'nickname' => $latest_user->getDisplayname(),
                 'id' => Output::getClean($users_query[0]->id)
-            );
+            ];
 
             $users_query = null;
 
             $this->_cache->store(
                 'statistics',
-                array(
+                [
                     'users_registered' => $users_registered,
                     'latest_member' => $latest_member
-                ),
+                ],
                 120
             );
+        }
 
-        };
-
-        if (!$this->_cache->isCached('online_users')) {
-            $online_users = DB::getInstance()->query('SELECT count(*) FROM nl2_users WHERE last_online > ?', array(strtotime('-5 minutes')))->first();
+        if (! $this->_cache->isCached('online_users')) {
+            $online_users = DB::getInstance()->query('SELECT count(*) FROM nl2_users WHERE last_online > ?', [strtotime('-5 minutes')])->first();
             $online_users = $online_users->{'count(*)'};
             $this->_cache->store('online_users', $online_users, 60);
         } else {
             $online_users = $this->_cache->retrieve('online_users');
         }
 
-        if (!$this->_cache->isCached('online_guests')) {
+        if (! $this->_cache->isCached('online_guests')) {
             try {
-                $online_guests = DB::getInstance()->query('SELECT count(*) FROM nl2_online_guests WHERE last_seen > ?', array(strtotime('-5 minutes')))->first();
+                $online_guests = DB::getInstance()->query('SELECT count(*) FROM nl2_online_guests WHERE last_seen > ?', [strtotime('-5 minutes')])->first();
                 $online_guests = $online_guests->{'count(*)'};
                 $this->_cache->store('online_guests', $online_guests, 60);
-            } catch(Exception $e){
+            } catch (Exception $e){
                 // Upgrade script hasn't been run
                 $online_guests = 0;
             }
@@ -94,12 +92,13 @@ class StatsWidget extends WidgetBase {
             $online_guests = $this->_cache->retrieve('online_guests');
         }
 
-        $forum_module = $queries->getWhere('modules', array('name', '=', 'Forum'));
+        $forum_module = $queries->getWhere('modules', ['name', '=', 'Forum']);
         $forum_module = $forum_module[0];
 
         if ($forum_module->enabled) {
             $this->_cache->setCache('forum_stats');
-            if (!$this->_cache->isCached('total_topics')) {
+
+            if (! $this->_cache->isCached('total_topics')) {
                 $total_topics = DB::getInstance()->query('SELECT count(*) FROM nl2_topics WHERE deleted = 0')->first();
                 $total_topics = $total_topics->{'count(*)'};
                 $this->_cache->store('total_topics', $total_topics, 60);
@@ -107,7 +106,7 @@ class StatsWidget extends WidgetBase {
                 $total_topics = $this->_cache->retrieve('total_topics');
             }
 
-            if (!$this->_cache->isCached('total_posts')) {
+            if (! $this->_cache->isCached('total_posts')) {
                 $total_posts = DB::getInstance()->query('SELECT count(*) FROM nl2_posts WHERE deleted = 0')->first();
                 $total_posts = $total_posts->{'count(*)'};
                 $this->_cache->store('total_posts', $total_posts, 60);
@@ -116,22 +115,22 @@ class StatsWidget extends WidgetBase {
             }
 
             $this->_smarty->assign(
-                array(
+                [
                     'FORUM_STATISTICS' => $this->_language['forum_stats'],
-                    'TOTAL_THREADS' =>  $this->_language['total_threads'],
+                    'TOTAL_THREADS' => $this->_language['total_threads'],
                     'TOTAL_THREADS_VALUE' => $total_topics,
-                    'TOTAL_POSTS' =>  $this->_language['total_posts'],
+                    'TOTAL_POSTS' => $this->_language['total_posts'],
                     'TOTAL_POSTS_VALUE' => $total_posts,
-                )
+                ]
             );
-        };
+        }
 
         $this->_smarty->assign(
-            array(
-                'STATISTICS' =>  $this->_language['statistics'],
-                'USERS_REGISTERED' =>  $this->_language['users_registered'],
+            [
+                'STATISTICS' => $this->_language['statistics'],
+                'USERS_REGISTERED' => $this->_language['users_registered'],
                 'USERS_REGISTERED_VALUE' => $users_registered,
-                'LATEST_MEMBER' =>  $this->_language['latest_member'],
+                'LATEST_MEMBER' => $this->_language['latest_member'],
                 'LATEST_MEMBER_VALUE' => $latest_member,
                 'USERS_ONLINE' => $this->_language['users_online'],
                 'USERS_ONLINE_VALUE' => $online_users,
@@ -139,7 +138,7 @@ class StatsWidget extends WidgetBase {
                 'GUESTS_ONLINE_VALUE' => $online_guests,
                 'TOTAL_ONLINE' => $this->_language['total_online'],
                 'TOTAL_ONLINE_VALUE' => $online_guests + $online_users
-            )
+            ]
         );
 
         $this->_content = $this->_smarty->fetch('widgets/statistics.tpl');
diff --git a/modules/Core/widgets/TwitterWidget.php b/modules/Core/widgets/TwitterWidget.php
index 85ad39f2a6a83713178871d864ea9f59d12b85db..f64d121598ea3b5aec6a27f901867fc1db4b546e 100644
--- a/modules/Core/widgets/TwitterWidget.php
+++ b/modules/Core/widgets/TwitterWidget.php
@@ -8,13 +8,13 @@
  *
  *  Twitter Widget
  */
-class TwitterWidget extends WidgetBase {
-
-    public function __construct($pages = array(), $twitter = '', $theme = '') {
+class TwitterWidget extends WidgetBase
+{
+    public function __construct($pages = [], $twitter = '', $theme = '') {
         parent::__construct($pages);
 
         // Get widget
-        $widget_query = DB::getInstance()->query('SELECT `location`, `order` FROM nl2_widgets WHERE `name` = ?', array('Twitter'))->first();
+        $widget_query = DB::getInstance()->query('SELECT `location`, `order` FROM nl2_widgets WHERE `name` = ?', ['Twitter'])->first();
 
         // Set widget variables
         $this->_module = 'Core';
diff --git a/modules/Forum/classes/Forum.php b/modules/Forum/classes/Forum.php
index d3f309658c7cc70ee2badd29b56bc63bb0d16a0b..4b924664c874fb942d18f10ef7b6f8ab4040bb74 100644
--- a/modules/Forum/classes/Forum.php
+++ b/modules/Forum/classes/Forum.php
@@ -9,8 +9,8 @@
  *  Forum class
  */
 
-class Forum {
-
+class Forum
+{
     private $_db;
 
     // Constructor, connect to database
@@ -20,19 +20,19 @@ class Forum {
 
     // Returns an array of forums a user can access, including topic information
     // Params: $groups (array) - user groups
-    public function listAllForums($groups = array(0), $user_id = null) {
+    public function listAllForums($groups = [0], $user_id = null) {
         if (in_array(0, $groups)) {
             $user_id = 0;
         }
 
-        if (!$user_id) {
+        if (! $user_id) {
             $user_id = 0;
         }
 
         // Get a list of parent forums
         $parent_forums = $this->_db->orderWhere('forums', 'parent = 0', 'forum_order', 'ASC')->results();
 
-        $return = array();
+        $return = [];
 
         if (count($parent_forums)) {
             foreach ($parent_forums as $forum) {
@@ -43,6 +43,7 @@ class Forum {
 
                     // Get subforums
                     $forums = $this->_db->orderWhere('forums', 'parent = ' . $forum->id, 'forum_order', 'ASC')->results();
+
                     if (count($forums)) {
                         foreach ($forums as $item) {
                             if ($this->forumExist($item->id, $groups)) {
@@ -72,6 +73,7 @@ class Forum {
                                     }
                                 } else {
                                     $last_topic = $this->_db->orderWhere('topics', 'forum_id = ' . $item->id . ' AND deleted = 0 AND topic_creator = ' . $user_id, 'topic_reply_date', 'DESC')->results();
+
                                     if (count($last_topic)) {
                                         $last_reply = $this->_db->orderWhere('posts', 'topic_id = ' . $last_topic[0]->id, 'created', 'DESC')->results();
                                     } else {
@@ -79,16 +81,17 @@ class Forum {
                                     }
                                 }
 
-                                if (isset($last_reply) && !is_null($last_reply) && count($last_reply)) {
+                                if (isset($last_reply) && ! is_null($last_reply) && count($last_reply)) {
                                     $n = 0;
+
                                     while (isset($last_reply[$n]) && $last_reply[$n]->deleted == 1) {
                                         $n++;
                                     }
 
-                                    if (!isset($last_reply[$n])) continue;
+                                    if (! isset($last_reply[$n])) continue;
 
                                     // Title
-                                    $last_topic = $this->_db->get('topics', array('id', '=', $last_reply[$n]->topic_id))->results();
+                                    $last_topic = $this->_db->get('topics', ['id', '=', $last_reply[$n]->topic_id])->results();
 
                                     $return[$forum->id]['subforums'][$item->id]->last_post = $last_reply[$n];
                                     $return[$forum->id]['subforums'][$item->id]->last_post->title = Output::getClean($last_topic[0]->topic_title);
@@ -97,11 +100,12 @@ class Forum {
 
                                 // Get list of subforums (names + links)
                                 $subforums = $this->_db->orderWhere('forums', 'parent = ' . $item->id, 'forum_order', 'ASC')->results();
+
                                 if (count($subforums)) {
                                     foreach ($subforums as $subforum) {
                                         if ($this->forumExist($subforum->id, $groups)) {
-                                            if (!isset($return[$forum->id]['subforums'][$item->id]->subforums))
-                                                $return[$forum->id]['subforums'][$item->id]->subforums = array();
+                                            if (! isset($return[$forum->id]['subforums'][$item->id]->subforums))
+                                                $return[$forum->id]['subforums'][$item->id]->subforums = [];
                                             $return[$forum->id]['subforums'][$item->id]->subforums[$subforum->id] = new stdClass();
                                             $return[$forum->id]['subforums'][$item->id]->subforums[$subforum->id]->title = Output::getClean($subforum->forum_title);
                                             $return[$forum->id]['subforums'][$item->id]->subforums[$subforum->id]->link = URL::build('/forum/view/' . $subforum->id . '-' . $this->titleToURL($subforum->forum_title));
@@ -121,23 +125,24 @@ class Forum {
 
     // Returns an array of the latest 50 discussions a user can access
     // Params: $groups (array) - user groups
-    public function getLatestDiscussions($groups = array(0), $user_id = null) {
-        if (!$user_id) {
+    public function getLatestDiscussions($groups = [0], $user_id = null) {
+        if (! $user_id) {
             $user_id = 0;
         }
 
-        $all_topics_forums = DB::getInstance()->query("SELECT forum_id FROM nl2_forums_permissions WHERE group_id IN (" . rtrim(implode(',', $groups), ',') . ") AND `view` = 1 AND view_other_topics = 1")->results();
+        $all_topics_forums = DB::getInstance()->query('SELECT forum_id FROM nl2_forums_permissions WHERE group_id IN (' . rtrim(implode(',', $groups), ',') . ') AND `view` = 1 AND view_other_topics = 1')->results();
 
         if ($user_id > 0) {
-            $own_topics_forums = DB::getInstance()->query("SELECT forum_id FROM nl2_forums_permissions WHERE group_id IN (" . rtrim(implode(',', $groups), ',') . ") AND `view` = 1 AND view_other_topics = 0")->results();
+            $own_topics_forums = DB::getInstance()->query('SELECT forum_id FROM nl2_forums_permissions WHERE group_id IN (' . rtrim(implode(',', $groups), ',') . ') AND `view` = 1 AND view_other_topics = 0')->results();
         } else {
-            $own_topics_forums = array();
+            $own_topics_forums = [];
         }
 
-        if (!count($all_topics_forums) && !count($own_topics_forums))
-            return array();
+        if (! count($all_topics_forums) && ! count($own_topics_forums))
+            return [];
 
         $all_topics_forums_string = '(';
+
         foreach ($all_topics_forums as $forum) {
             $all_topics_forums_string .= $forum->forum_id . ',';
         }
@@ -146,21 +151,21 @@ class Forum {
 
         try {
             if (count($own_topics_forums)) {
-
                 $own_topics_forums_string = '(';
+
                 foreach ($own_topics_forums as $forum) {
                     $own_topics_forums_string .= $forum->forum_id . ',';
                 }
                 $own_topics_forums_string = rtrim($own_topics_forums_string, ',');
                 $own_topics_forums_string .= ')';
 
-                $query = DB::getInstance()->query("(
-		        SELECT topics.id as id, topics.forum_id as forum_id, topics.topic_title as topic_title, topics.topic_creator as topic_creator, topics.topic_last_user as topic_last_user, topics.topic_date as topic_date, topics.topic_reply_date as topic_reply_date, topics.topic_views as topic_views, topics.locked as locked, topics.sticky as sticky, topics.label as label, topics.deleted as deleted, posts.id as last_post_id FROM nl2_topics topics LEFT JOIN nl2_posts posts ON topics.id = posts.topic_id AND posts.id = (SELECT MAX(id) FROM nl2_posts p WHERE p.topic_id = topics.id AND p.deleted = 0) WHERE topics.deleted = 0 AND topics.forum_id IN " . $all_topics_forums_string . " ORDER BY topics.topic_reply_date DESC LIMIT 50
+                $query = DB::getInstance()->query('(
+		        SELECT topics.id as id, topics.forum_id as forum_id, topics.topic_title as topic_title, topics.topic_creator as topic_creator, topics.topic_last_user as topic_last_user, topics.topic_date as topic_date, topics.topic_reply_date as topic_reply_date, topics.topic_views as topic_views, topics.locked as locked, topics.sticky as sticky, topics.label as label, topics.deleted as deleted, posts.id as last_post_id FROM nl2_topics topics LEFT JOIN nl2_posts posts ON topics.id = posts.topic_id AND posts.id = (SELECT MAX(id) FROM nl2_posts p WHERE p.topic_id = topics.id AND p.deleted = 0) WHERE topics.deleted = 0 AND topics.forum_id IN ' . $all_topics_forums_string . ' ORDER BY topics.topic_reply_date DESC LIMIT 50
 		        ) UNION (
-		        SELECT topics.id as id, topics.forum_id as forum_id, topics.topic_title as topic_title, topics.topic_creator as topic_creator, topics.topic_last_user as topic_last_user, topics.topic_date as topic_date, topics.topic_reply_date as topic_reply_date, topics.topic_views as topic_views, topics.locked as locked, topics.sticky as sticky, topics.label as label, topics.deleted as deleted, posts.id as last_post_id FROM nl2_topics topics LEFT JOIN nl2_posts posts ON topics.id = posts.topic_id AND posts.id = (SELECT MAX(id) FROM nl2_posts p WHERE p.topic_id = topics.id AND p.deleted = 0) WHERE topics.deleted = 0 AND ((topics.forum_id IN " . $own_topics_forums_string . " AND topics.topic_creator = ?) OR topics.sticky = 1) ORDER BY topics.topic_reply_date DESC LIMIT 50
-		        ) ORDER BY topic_reply_date DESC LIMIT 50", array($user_id), PDO::FETCH_ASSOC)->results();
+		        SELECT topics.id as id, topics.forum_id as forum_id, topics.topic_title as topic_title, topics.topic_creator as topic_creator, topics.topic_last_user as topic_last_user, topics.topic_date as topic_date, topics.topic_reply_date as topic_reply_date, topics.topic_views as topic_views, topics.locked as locked, topics.sticky as sticky, topics.label as label, topics.deleted as deleted, posts.id as last_post_id FROM nl2_topics topics LEFT JOIN nl2_posts posts ON topics.id = posts.topic_id AND posts.id = (SELECT MAX(id) FROM nl2_posts p WHERE p.topic_id = topics.id AND p.deleted = 0) WHERE topics.deleted = 0 AND ((topics.forum_id IN ' . $own_topics_forums_string . ' AND topics.topic_creator = ?) OR topics.sticky = 1) ORDER BY topics.topic_reply_date DESC LIMIT 50
+		        ) ORDER BY topic_reply_date DESC LIMIT 50', [$user_id], PDO::FETCH_ASSOC)->results();
             } else {
-                $query = DB::getInstance()->query("SELECT topics.id as id, topics.forum_id as forum_id, topics.topic_title as topic_title, topics.topic_creator as topic_creator, topics.topic_last_user as topic_last_user, topics.topic_date as topic_date, topics.topic_reply_date as topic_reply_date, topics.topic_views as topic_views, topics.locked as locked, topics.sticky as sticky, topics.label as label, topics.deleted as deleted, posts.id as last_post_id FROM nl2_topics topics LEFT JOIN nl2_posts posts ON topics.id = posts.topic_id AND posts.id = (SELECT MAX(id) FROM nl2_posts p WHERE p.topic_id = topics.id AND p.deleted = 0) WHERE topics.deleted = 0 AND topics.forum_id IN " . $all_topics_forums_string . " ORDER BY topics.topic_reply_date DESC LIMIT 50", array(), PDO::FETCH_ASSOC)->results();
+                $query = DB::getInstance()->query('SELECT topics.id as id, topics.forum_id as forum_id, topics.topic_title as topic_title, topics.topic_creator as topic_creator, topics.topic_last_user as topic_last_user, topics.topic_date as topic_date, topics.topic_reply_date as topic_reply_date, topics.topic_views as topic_views, topics.locked as locked, topics.sticky as sticky, topics.label as label, topics.deleted as deleted, posts.id as last_post_id FROM nl2_topics topics LEFT JOIN nl2_posts posts ON topics.id = posts.topic_id AND posts.id = (SELECT MAX(id) FROM nl2_posts p WHERE p.topic_id = topics.id AND p.deleted = 0) WHERE topics.deleted = 0 AND topics.forum_id IN ' . $all_topics_forums_string . ' ORDER BY topics.topic_reply_date DESC LIMIT 50', [], PDO::FETCH_ASSOC)->results();
             }
         } catch (Exception $e) {
             // Likely no permissions to view any forums
@@ -172,9 +177,10 @@ class Forum {
 
     // Returns true/false, depending on whether the specified forum exists and whether the user can view it
     // Params: $forum_id (integer) - forum id to check, $groups (array) - user groups
-    public function forumExist($forum_id, $groups = array(0)) {
+    public function forumExist($forum_id, $groups = [0]) {
         // Does the forum exist?
-        $exists = $this->_db->get("forums", array("id", "=", $forum_id))->results();
+        $exists = $this->_db->get('forums', ['id', '=', $forum_id])->results();
+
         if (count($exists)) {
             return $this->hasPermission($forum_id, 'view', $groups);
         }
@@ -186,80 +192,82 @@ class Forum {
     // Params: $topic_id (integer) - topic id to check
     public function topicExist($topic_id) {
         // Does the topic exist?
-        $exists = $this->_db->get("topics", array("id", "=", $topic_id))->results();
+        $exists = $this->_db->get('topics', ['id', '=', $topic_id])->results();
+
         return count($exists) > 0;
     }
 
     // Returns true/false depending on whether the current user can view a forum
     // Params: $forum_id (integer) - forum id to check, $groups (array) - user groups
-    public function canViewForum($forum_id, $groups = array(0)) {
+    public function canViewForum($forum_id, $groups = [0]) {
         return $this->hasPermission($forum_id, 'view', $groups);
-
     }
 
     // Returns true/false, depending on whether the user's group can create a topic in a specified forum
     // Params: $forum_id (integer) - forum id to check, $groups (array) - user groups
-    public function canPostTopic($forum_id, $groups = array(0)) {
+    public function canPostTopic($forum_id, $groups = [0]) {
         return $this->hasPermission($forum_id, 'create_topic', $groups);
     }
 
     // Returns true/false, depending on whether the user's group can create a reply to a topic in a specified forum
     // Params: $forum_id (integer) - forum id to check, $groups (array) - user groups
-    public function canPostReply($forum_id, $groups = array(0)) {
+    public function canPostReply($forum_id, $groups = [0]) {
         return $this->hasPermission($forum_id, 'create_post', $groups);
     }
 
-    public function canEditTopic($forum_id, $groups = array(0)) {
+    public function canEditTopic($forum_id, $groups = [0]) {
         return $this->hasPermission($forum_id, 'edit_topic', $groups);
     }
 
     private function hasPermission($forum_id, $required_permission, $groups) {
-        $permissions = $this->_db->get('forums_permissions', array('forum_id', '=', $forum_id))->results();
+        $permissions = $this->_db->get('forums_permissions', ['forum_id', '=', $forum_id])->results();
+
         foreach ($permissions as $permission) {
             if (in_array($permission->group_id, $groups)) {
-                if ($permission->$required_permission == 1)
+                if ($permission->{$required_permission} == 1)
                     return true;
             }
         }
+
         return false;
     }
 
     // Updates the latest post column in all forums. Used when a reply/topic is deleted
     public function updateForumLatestPosts() {
-        $forums = $this->_db->get('forums', array('id', '<>', 0))->results();
-        $latest_posts = array();
+        $forums = $this->_db->get('forums', ['id', '<>', 0])->results();
+        $latest_posts = [];
         $n = 0;
 
         foreach ($forums as $item) {
             if ($item->parent != 0) {
                 $latest_post_query = $this->_db->orderWhere('posts', 'forum_id = ' . $item->id, 'post_date', 'DESC')->results();
 
-                if (!empty($latest_post_query)) {
+                if (! empty($latest_post_query)) {
                     foreach ($latest_post_query as $latest_post) {
                         if ($latest_post->deleted != 1) {
                             // Ensure topic isn't deleted
-                            $topic_query = $this->_db->get('topics', array('id', '=', $latest_post->topic_id))->results();
+                            $topic_query = $this->_db->get('topics', ['id', '=', $latest_post->topic_id])->results();
 
                             if (empty($topic_query)) continue;
 
-                            $latest_posts[$n]["forum_id"] = $item->id;
+                            $latest_posts[$n]['forum_id'] = $item->id;
+
                             if ($latest_post->created)
-                                $latest_posts[$n]["date"] = $latest_post->created;
-                            else
-                                $latest_posts[$n]["date"] = strtotime($latest_post->post_date);
-                            $latest_posts[$n]["author"] = $latest_post->post_creator;
-                            $latest_posts[$n]["topic_id"] = $latest_post->topic_id;
+                                $latest_posts[$n]['date'] = $latest_post->created;
+                            else $latest_posts[$n]['date'] = strtotime($latest_post->post_date);
+                            $latest_posts[$n]['author'] = $latest_post->post_creator;
+                            $latest_posts[$n]['topic_id'] = $latest_post->topic_id;
 
                             break;
                         }
                     }
                 }
 
-                if (!isset($latest_posts[$n])) {
-                    $latest_posts[$n]["forum_id"] = $item->id;
-                    $latest_posts[$n]["date"] = null;
-                    $latest_posts[$n]["author"] = null;
-                    $latest_posts[$n]["topic_id"] = null;
+                if (! isset($latest_posts[$n])) {
+                    $latest_posts[$n]['forum_id'] = $item->id;
+                    $latest_posts[$n]['date'] = null;
+                    $latest_posts[$n]['author'] = null;
+                    $latest_posts[$n]['topic_id'] = null;
                 }
 
                 $n++;
@@ -270,11 +278,11 @@ class Forum {
 
         if (count($latest_posts)) {
             foreach ($latest_posts as $latest_post) {
-                $this->_db->update('forums', $latest_post["forum_id"], array(
-                    'last_post_date' => $latest_post["date"],
-                    'last_user_posted' => $latest_post["author"],
-                    'last_topic_posted' => $latest_post["topic_id"]
-                ));
+                $this->_db->update('forums', $latest_post['forum_id'], [
+                    'last_post_date' => $latest_post['date'],
+                    'last_user_posted' => $latest_post['author'],
+                    'last_topic_posted' => $latest_post['topic_id']
+                ]);
             }
         }
 
@@ -285,8 +293,8 @@ class Forum {
 
     // Updates the latest post column in all topics
     public function updateTopicLatestPosts() {
-        $topics = $this->_db->get('topics', array('id', '<>', 0))->results();
-        $latest_posts = array();
+        $topics = $this->_db->get('topics', ['id', '<>', 0])->results();
+        $latest_posts = [];
         $n = 0;
 
         foreach ($topics as $topic) {
@@ -295,14 +303,13 @@ class Forum {
             if (count($latest_post_query)) {
                 foreach ($latest_post_query as $latest_post) {
                     if ($latest_post->deleted != 1) {
-                        $latest_posts[$n]["topic_id"] = $topic->id;
+                        $latest_posts[$n]['topic_id'] = $topic->id;
 
                         if ($latest_post->created != null)
-                            $latest_posts[$n]["date"] = $latest_post->created;
-                        else
-                            $latest_posts[$n]["date"] = strtotime($latest_post->post_date);
+                            $latest_posts[$n]['date'] = $latest_post->created;
+                        else $latest_posts[$n]['date'] = strtotime($latest_post->post_date);
 
-                        $latest_posts[$n]["author"] = $latest_post->post_creator;
+                        $latest_posts[$n]['author'] = $latest_post->post_creator;
 
                         break;
                     }
@@ -313,11 +320,11 @@ class Forum {
         }
 
         foreach ($latest_posts as $latest_post) {
-            if (!empty($latest_post["date"])) {
-                $this->_db->update('topics', $latest_post["topic_id"], array(
-                    'topic_reply_date' => $latest_post["date"],
-                    'topic_last_user' => $latest_post["author"]
-                ));
+            if (! empty($latest_post['date'])) {
+                $this->_db->update('topics', $latest_post['topic_id'], [
+                    'topic_reply_date' => $latest_post['date'],
+                    'topic_last_user' => $latest_post['author']
+                ]);
             }
         }
 
@@ -327,36 +334,39 @@ class Forum {
     // Returns a string containing the title of a specified forum
     // Params: $forum_id (integer) - forum id to check
     public function getForumTitle($forum_id) {
-        $data = $this->_db->get('forums', array('id', '=', $forum_id))->results();
+        $data = $this->_db->get('forums', ['id', '=', $forum_id])->results();
+
         return $data[0]->forum_title;
     }
 
     // Returns an array containing information about a specified post
     // Params: $post_id (integer) - post id to check
     public function getIndividualPost($post_id) {
-        $data = $this->_db->get('posts', array('id', '=', $post_id))->results();
+        $data = $this->_db->get('posts', ['id', '=', $post_id])->results();
+
         if (count($data)) {
-            return (array(
+            return ([
                 'creator' => $data[0]->post_creator,
                 'content' => $data[0]->post_content,
                 'date' => $data[0]->post_date,
                 'forum_id' => $data[0]->forum_id,
                 'topic_id' => $data[0]->topic_id
-            ));
+            ]);
         }
+
         return false;
     }
 
     // Returns an array of the latest news items
     // Params: $number (integer) - number to return (max 10)
     public function getLatestNews($number = 5) {
-        $return = array(); // Array to return containing news
-        $labels_cache = array(); // Array to contain labels
+        $return = []; // Array to return containing news
+        $labels_cache = []; // Array to contain labels
 
-        $news_items = $this->_db->query("SELECT * FROM nl2_topics WHERE forum_id IN (SELECT id FROM nl2_forums WHERE news = 1) AND deleted = 0 ORDER BY topic_date DESC LIMIT 10")->results();
+        $news_items = $this->_db->query('SELECT * FROM nl2_topics WHERE forum_id IN (SELECT id FROM nl2_forums WHERE news = 1) AND deleted = 0 ORDER BY topic_date DESC LIMIT 10')->results();
 
         foreach ($news_items as $item) {
-            $news_post = $this->_db->get("posts", array("topic_id", "=", $item->id))->results();
+            $news_post = $this->_db->get('posts', ['topic_id', '=', $item->id])->results();
             $posts = count($news_post);
 
             if (is_null($news_post[0]->created)) {
@@ -365,7 +375,7 @@ class Forum {
                 $post_date = date('d M Y, H:i', $news_post[0]->created);
             }
 
-            $labels = array();
+            $labels = [];
 
             if ($item->labels) {
                 // Get label
@@ -376,11 +386,12 @@ class Forum {
                         if (isset($labels_cache[$label_id])) {
                             $labels[] = $labels_cache[$label_id];
                         } else {
-                            $label = $this->_db->get('forums_topic_labels', array('id', '=', $label_id));
+                            $label = $this->_db->get('forums_topic_labels', ['id', '=', $label_id]);
+
                             if ($label->count()) {
                                 $label = $label->first();
 
-                                $label_html = $this->_db->get('forums_labels', array('id', '=', $label->label));
+                                $label_html = $this->_db->get('forums_labels', ['id', '=', $label->label]);
 
                                 if ($label_html->count()) {
                                     $label_html = $label_html->first()->html;
@@ -396,17 +407,17 @@ class Forum {
             }
 
             $post = $news_post[0]->post_content;
-            $return[] = array(
-                "topic_id" => $item->id,
-                "topic_date" => $post_date,
-                "topic_title" => $item->topic_title,
-                "topic_views" => $item->topic_views,
-                "author" => $item->topic_creator,
-                "content" => Util::truncate(Output::getDecoded($post)),
-                "replies" => $posts,
+            $return[] = [
+                'topic_id' => $item->id,
+                'topic_date' => $post_date,
+                'topic_title' => $item->topic_title,
+                'topic_views' => $item->topic_views,
+                'author' => $item->topic_creator,
+                'content' => Util::truncate(Output::getDecoded($post)),
+                'replies' => $posts,
                 'label' => $labels[0],
                 'labels' => $labels
-            );
+            ];
         }
 
         // Order the discussions by date - most recent first
@@ -420,10 +431,10 @@ class Forum {
     // Can the user moderate the specified forum?
     // Params:  $forum_id (integer) - forum ID to check
     //			$groups (array) - user groups
-    public function canModerateForum($forum_id = null, $groups = array(0)) {
-        if (in_array(0, $groups) || !$forum_id) return false;
+    public function canModerateForum($forum_id = null, $groups = [0]) {
+        if (in_array(0, $groups) || ! $forum_id) return false;
 
-        $permissions = $this->_db->get('forums_permissions', array('forum_id', '=', $forum_id))->results();
+        $permissions = $this->_db->get('forums_permissions', ['forum_id', '=', $forum_id])->results();
 
         // Check the forum
         foreach ($permissions as $permission) {
@@ -440,7 +451,7 @@ class Forum {
     public function getPosts($tid = null) {
         if ($tid) {
             // Get posts from database
-            $posts = $this->_db->get('posts', array('topic_id', '=', $tid));
+            $posts = $this->_db->get('posts', ['topic_id', '=', $tid]);
 
             if ($posts->count()) {
                 $posts = $posts->results();
@@ -453,13 +464,15 @@ class Forum {
                 return array_values($posts);
             }
         }
+
         return false;
     }
 
     // Transform a topic title to URL-ify it
     public function titleToURL($topic = null) {
         if ($topic) {
-            $topic = preg_replace("/[^A-Za-z0-9 ]/", '', Util::cyrillicToLatin($topic));
+            $topic = preg_replace('/[^A-Za-z0-9 ]/', '', Util::cyrillicToLatin($topic));
+
             return Output::getClean(strtolower(urlencode(str_replace(' ', '-', htmlspecialchars_decode($topic)))));
         }
 
@@ -468,12 +481,13 @@ class Forum {
 
     // Can the user view other topics in a forum?
     // Params: $forum_id - forum ID (int), $groups (array) - user groups
-    public function canViewOtherTopics($forum_id, $groups = array(0)) {
+    public function canViewOtherTopics($forum_id, $groups = [0]) {
         // Does the forum exist?
-        $exists = $this->_db->get("forums", array("id", "=", $forum_id))->results();
+        $exists = $this->_db->get('forums', ['id', '=', $forum_id])->results();
+
         if (count($exists)) {
             // Can the user view other topics?
-            $access = $this->_db->get("forums_permissions", array("forum_id", "=", $forum_id))->results();
+            $access = $this->_db->get('forums_permissions', ['forum_id', '=', $forum_id])->results();
 
             foreach ($access as $item) {
                 if (in_array($item->group_id, $groups)) {
@@ -489,16 +503,16 @@ class Forum {
 
     // Get any subforums at any level for a forum
     // Params: $forum_id - forum ID (int), $groups (array) - user groups
-    public function getAnySubforums($forum_id, $groups = array(0), $depth = 0) {
+    public function getAnySubforums($forum_id, $groups = [0], $depth = 0) {
         if ($depth == 10) {
-            return array();
+            return [];
         }
 
-        $ret = array();
+        $ret = [];
 
-        $subforums_query = $this->_db->query('SELECT * FROM nl2_forums WHERE parent = ? ORDER BY forum_order ASC', array($forum_id));
+        $subforums_query = $this->_db->query('SELECT * FROM nl2_forums WHERE parent = ? ORDER BY forum_order ASC', [$forum_id]);
 
-        if (!$subforums_query->count()) {
+        if (! $subforums_query->count()) {
             return $ret;
         }
 
diff --git a/modules/Forum/classes/Forum_Sitemap.php b/modules/Forum/classes/Forum_Sitemap.php
index 78324382c1a76e8a0f39eaf1f168fb23625f84f8..6c462c63c52f5ab2291bd2f911995e9af4b68146 100644
--- a/modules/Forum/classes/Forum_Sitemap.php
+++ b/modules/Forum/classes/Forum_Sitemap.php
@@ -8,10 +8,10 @@
  *
  *  Forum module Sitemap method
  */
-class Forum_Sitemap {
-    
+class Forum_Sitemap
+{
     public static function generateSitemap($sitemap = null) {
-        if (!$sitemap)
+        if (! $sitemap)
             return;
 
         // Forum
diff --git a/modules/Forum/collections/panel/RecentPosts.php b/modules/Forum/collections/panel/RecentPosts.php
index f5eb20ede32a8a1c2721d0703f9ec85ed7fbce9e..9845488ccb62921f539a65d031ac37589956f65a 100644
--- a/modules/Forum/collections/panel/RecentPosts.php
+++ b/modules/Forum/collections/panel/RecentPosts.php
@@ -9,25 +9,27 @@
  *  Recent posts dashboard collection item
  */
 
-class RecentPostsItem extends CollectionItemBase {
-
-    private $_smarty, 
-            $_language, 
+class RecentPostsItem extends CollectionItemBase
+{
+    private $_smarty,
+ 
+            $_language,
+ 
             $_posts;
 
     public function __construct($smarty, $language, $cache, $posts) {
         $cache->setCache('dashboard_stats_collection');
+
         if ($cache->isCached('recent_posts')) {
             $from_cache = $cache->retrieve('recent_posts');
+
             if (isset($from_cache['order']))
                 $order = $from_cache['order'];
-            else
-                $order = 4;
+            else $order = 4;
 
             if (isset($from_cache['enabled']))
                 $enabled = $from_cache['enabled'];
-            else
-                $enabled = 1;
+            else $enabled = 1;
         } else {
             $order = 4;
             $enabled = 1;
@@ -41,11 +43,11 @@ class RecentPostsItem extends CollectionItemBase {
     }
 
     public function getContent() {
-        $this->_smarty->assign(array(
+        $this->_smarty->assign([
             'ICON' => $this->_language->get('forum', 'recent_posts_statistic_icon'),
             'TITLE' => $this->_language->get('forum', 'recent_posts'),
             'VALUE' => $this->_posts
-        ));
+        ]);
 
         return $this->_smarty->fetch('collections/dashboard_stats/recent_posts.tpl');
     }
diff --git a/modules/Forum/collections/panel/RecentTopics.php b/modules/Forum/collections/panel/RecentTopics.php
index c2fe83e53f92ee0ee9203313c1801b49aaf88265..4364a8cc071e60b4c29601f266e43e5c09e5e536 100644
--- a/modules/Forum/collections/panel/RecentTopics.php
+++ b/modules/Forum/collections/panel/RecentTopics.php
@@ -8,25 +8,27 @@
  *
  *  Recent topics dashboard collection item
  */
-class RecentTopicsItem extends CollectionItemBase {
-
-    private $_smarty, 
-            $_language, 
+class RecentTopicsItem extends CollectionItemBase
+{
+    private $_smarty,
+ 
+            $_language,
+ 
             $_topics;
 
     public function __construct($smarty, $language, $cache, $topics) {
         $cache->setCache('dashboard_stats_collection');
+
         if ($cache->isCached('recent_topics')) {
             $from_cache = $cache->retrieve('recent_topics');
+
             if (isset($from_cache['order']))
                 $order = $from_cache['order'];
-            else
-                $order = 3;
+            else $order = 3;
 
             if (isset($from_cache['enabled']))
                 $enabled = $from_cache['enabled'];
-            else
-                $enabled = 1;
+            else $enabled = 1;
         } else {
             $order = 3;
             $enabled = 1;
@@ -40,11 +42,11 @@ class RecentTopicsItem extends CollectionItemBase {
     }
 
     public function getContent() {
-        $this->_smarty->assign(array(
+        $this->_smarty->assign([
             'ICON' => $this->_language->get('forum', 'recent_topics_statistic_icon'),
             'TITLE' => $this->_language->get('forum', 'recent_topics'),
             'VALUE' => $this->_topics
-        ));
+        ]);
 
         return $this->_smarty->fetch('collections/dashboard_stats/recent_topics.tpl');
     }
diff --git a/modules/Forum/front_page.php b/modules/Forum/front_page.php
index a56e847e157a251c1ff249c5da8b7cb1cf909e00..9493a5d03ac28d73082a8da37f53b0e7b7af6ae5 100644
--- a/modules/Forum/front_page.php
+++ b/modules/Forum/front_page.php
@@ -10,21 +10,22 @@
  */
 
 $cache->setCache('news_cache');
+
 if ($cache->isCached('news')) {
     $news = $cache->retrieve('news');
 } else {
-    require_once(ROOT_PATH . '/modules/Forum/classes/Forum.php');
+    require_once (ROOT_PATH . '/modules/Forum/classes/Forum.php');
     $forum = new Forum();
     $timeago = new Timeago(TIMEZONE);
 
     $latest_news = $forum->getLatestNews(5); // Get latest 5 items
 
-    $news = array();
+    $news = [];
 
     foreach ($latest_news as $item) {
         $post_user = new User($item['author']);
 
-        $news[] = array(
+        $news[] = [
             'id' => $item['topic_id'],
             'url' => URL::build('/forum/topic/' . $item['topic_id'] . '-' . $forum->titleToURL($item['topic_title'])),
             'date' => date('d M Y, H:i', strtotime($item['topic_date'])),
@@ -37,13 +38,13 @@ if ($cache->isCached('news')) {
             'author_style' => $post_user->getGroupClass(),
             'author_name' => $post_user->getDisplayname(true),
             'author_nickname' => $post_user->getDisplayname(),
-            'author_avatar' => $post_user->getAvatar("../", 64),
+            'author_avatar' => $post_user->getAvatar('../', 64),
             'author_group' => Output::getClean($post_user->getMainGroup()->name),
             'author_group_html' => $post_user->getMainGroup()->group_html,
             'content' => Output::getPurified($item['content']),
             'label' => $item['label'],
             'labels' => $item['labels']
-        );
+        ];
     }
 
     $cache->store('news', $news, 60);
diff --git a/modules/Forum/hooks/DeleteUserForumHook.php b/modules/Forum/hooks/DeleteUserForumHook.php
index ab804650c8e6cac528f1b6bfe1735e17162815ae..6387cc8e8a6258a62162c936fb602aaed3ed8602 100644
--- a/modules/Forum/hooks/DeleteUserForumHook.php
+++ b/modules/Forum/hooks/DeleteUserForumHook.php
@@ -7,27 +7,27 @@
  *  Delete user hook handler class for Forum module
  */
 
-class DeleteUserForumHook {
+class DeleteUserForumHook
+{
+    // Execute hook
+    public static function deleteUser($params = []) {
+        if (isset($params['user_id']) && $params['user_id'] > 1){
+            $queries = new Queries();
 
-	// Execute hook
-	public static function deleteUser($params = array()) {
-		if(isset($params['user_id']) && $params['user_id'] > 1){
-			$queries = new Queries();
+            // Delete the user's posts
+            $queries->delete('posts', ['post_creator', '=', $params['user_id']]);
 
-			// Delete the user's posts
-			$queries->delete('posts', array('post_creator', '=', $params['user_id']));
+            // Delete the user's topics
+            $queries->delete('topics', ['topic_creator', '=', $params['user_id']]);
 
-			// Delete the user's topics
-			$queries->delete('topics', array('topic_creator', '=', $params['user_id']));
+            // Forum reactions
+            $queries->delete('forums_reactions', ['user_received', '=', $params['user_id']]);
+            $queries->delete('forums_reactions', ['user_given', '=', $params['user_id']]);
 
-			// Forum reactions
-			$queries->delete('forums_reactions', array('user_received', '=', $params['user_id']));
-			$queries->delete('forums_reactions', array('user_given', '=', $params['user_id']));
+            // Topics following
+            $queries->delete('topics_following', ['user_id', '=', $params['user_id']]);
+        }
 
-			// Topics following
-			$queries->delete('topics_following', array('user_id', '=', $params['user_id']));
-		}
-
-		return true;
-	}
-}
\ No newline at end of file
+        return true;
+    }
+}
diff --git a/modules/Forum/init.php b/modules/Forum/init.php
index 1de9a747160abace696b02cb9badd0061c53e3e7..e2dcf76cd7bb73b9925badfa4d206789d9098af9 100644
--- a/modules/Forum/init.php
+++ b/modules/Forum/init.php
@@ -12,16 +12,17 @@
 // Ensure module has been installed
 $cache->setCache('modulescache');
 $module_installed = $cache->retrieve('module_forum');
-if (!$module_installed) {
+
+if (! $module_installed) {
     // Hasn't been installed
     // Need to run the installer
 
     $exists = $queries->tableExists('forums');
+
     if (empty($exists)) {
         die('Run the installer first!');
-    } else {
-        $cache->store('module_forum', true);
     }
+        $cache->store('module_forum', true);
 }
 
 define('FORUM', true);
@@ -29,20 +30,18 @@ define('FORUM', true);
 // Initialise forum language
 $forum_language = new Language(ROOT_PATH . '/modules/Forum/language', LANGUAGE);
 
-/*
- *  Temp methods for front page module, profile page tab + admin sidebar; likely to change in the future
- */
+// Temp methods for front page module, profile page tab + admin sidebar; likely to change in the future
 // Front page module
-if (!isset($front_page_modules)) $front_page_modules = array();
+if (! isset($front_page_modules)) $front_page_modules = [];
 $front_page_modules[] = 'modules/Forum/front_page.php';
 
 // Profile page tab
-if (!isset($profile_tabs)) $profile_tabs = array();
-$profile_tabs['forum'] = array('title' => $forum_language->get('forum', 'forum'), 'smarty_template' => 'forum/profile_tab.tpl', 'require' => ROOT_PATH . DIRECTORY_SEPARATOR . 'modules' . DIRECTORY_SEPARATOR . 'Forum' . DIRECTORY_SEPARATOR . 'profile_tab.php');
+if (! isset($profile_tabs)) $profile_tabs = [];
+$profile_tabs['forum'] = ['title' => $forum_language->get('forum', 'forum'), 'smarty_template' => 'forum/profile_tab.tpl', 'require' => ROOT_PATH . DIRECTORY_SEPARATOR . 'modules' . DIRECTORY_SEPARATOR . 'Forum' . DIRECTORY_SEPARATOR . 'profile_tab.php'];
 
 // Following topics UserCP sidebar
 $cc_nav->add('cc_following_topics', $forum_language->get('forum', 'following_topics'), URL::build('/user/following_topics'));
 
 // Initialise module
-require_once(ROOT_PATH . '/modules/Forum/module.php');
+require_once (ROOT_PATH . '/modules/Forum/module.php');
 $module = new Forum_Module($language, $forum_language, $pages);
diff --git a/modules/Forum/language/Chinese(Simplified)/forum.php b/modules/Forum/language/Chinese(Simplified)/forum.php
index ab28bb213055a856ad185df3b5e05ba5eda865dd..0fb42e4a34e0a474b9f4454fe9f755add719bf41 100644
--- a/modules/Forum/language/Chinese(Simplified)/forum.php
+++ b/modules/Forum/language/Chinese(Simplified)/forum.php
@@ -1,4 +1,5 @@
-<?php 
+<?php
+
 /*
  *  Made by Samerton
  *  https://github.com/NamelessMC/Nameless/
@@ -11,10 +12,8 @@
  *  Progress: 100%
  */
 
-$language = array(
-    /*
-     *  Forums
-     */ 
+$language = [
+    // Forums
     'forum' => '论坛',
     'forums' => '论坛',
     'forum_index' => '论坛主页',
@@ -215,4 +214,4 @@ $language = array(
     'recent_posts_statistic_icon' => '<i class="far fa-comments"></i>',
     'topics_title' => '话题数',
     'posts_title' => '帖子数',
-);
+];
diff --git a/modules/Forum/language/Chinese/forum.php b/modules/Forum/language/Chinese/forum.php
index 03a64a68df7c46785e558e470448823a38ecd396..cb7848c22034f9ab9b1c8c939648baa16c67886c 100644
--- a/modules/Forum/language/Chinese/forum.php
+++ b/modules/Forum/language/Chinese/forum.php
@@ -1,4 +1,5 @@
-<?php 
+<?php
+
 /*
  *  Made by Samerton
  *  Translate By Hi_Michael
@@ -9,14 +10,12 @@
  *
  *  Chinese Language - Forum
  *  Translation progress : 100%
- *  翻譯有誤請使用GitHun回報issues 
+ *  翻譯有誤請使用GitHun回報issues
  *  https://github.com/haer0248/NamelessMC-v2-Traditional-Chinese/issues
  */
 
-$language = array(
-    /*
-     *  Forums
-     */ 
+$language = [
+    // Forums
     'forum' => '論壇',
     'forums' => '論壇',
     'forum_index' => '首頁',
@@ -216,4 +215,4 @@ $language = array(
     'recent_posts_statistic_icon' => '<i class="far fa-comments"></i>',
     'topics_title' => 'Topics',
     'posts_title' => 'Posts',
-);
+];
diff --git a/modules/Forum/language/Czech/forum.php b/modules/Forum/language/Czech/forum.php
index fb5303aea1f4707b4636d9588ad0bfe6b247de7f..d40881f6f072b1a0717f90357e0c5302c19a0bd5 100755
--- a/modules/Forum/language/Czech/forum.php
+++ b/modules/Forum/language/Czech/forum.php
@@ -1,4 +1,5 @@
-<?php 
+<?php
+
 /*
  *  Made by Samerton
  *  Translated by Ethxrnity and Fjuro
@@ -10,10 +11,8 @@
  *  Czech Language - Forum
  */
 
-$language = array(
-    /*
-     *  Forums
-     */ 
+$language = [
+    // Forums
     'forum' => 'Fórum',
     'forums' => 'Fóra',
     'forum_index' => 'Domov',
@@ -212,4 +211,4 @@ $language = array(
     'recent_posts_statistic_icon' => '<i class="far fa-comments"></i>',
     'topics_title' => 'Témata',
     'posts_title' => 'Příspěvky',
-);
+];
diff --git a/modules/Forum/language/Dutch/forum.php b/modules/Forum/language/Dutch/forum.php
index b8ef6a99345128f0d270f7cd15545ee4e06fced6..8e1b86084f590baa28b1fbd0e3919ca0ab1ef3f7 100644
--- a/modules/Forum/language/Dutch/forum.php
+++ b/modules/Forum/language/Dutch/forum.php
@@ -1,8 +1,9 @@
-<?php 
+<?php
+
 /*
  *  Gemaakt door Samerton
  *  en vertaald door Sander Lambrechts
- *  
+ *
  *  https://github.com/NamelessMC/Nameless/
  *  NamelessMC versie 2.0.0-pr3
  *
@@ -11,10 +12,8 @@
  *  Nederlandse taal voor Forum module
  */
 
-$language = array(
-    /*
-     *  Forums
-     */ 
+$language = [
+    // Forums
     'forum' => 'Forum',
     'forums' => 'Forums',
     'forum_index' => 'Start',
@@ -212,4 +211,4 @@ $language = array(
     'recent_posts_statistic_icon' => '<i class="far fa-comments"></i>',
     'topics_title' => 'Topics',
     'posts_title' => 'Posts',
-);
+];
diff --git a/modules/Forum/language/EnglishUK/forum.php b/modules/Forum/language/EnglishUK/forum.php
index 06d7325a16f7e717f5710a76ac47c0ed48b377ab..6b5a039eb7bceb14d243f50acc5786628e31c27c 100644
--- a/modules/Forum/language/EnglishUK/forum.php
+++ b/modules/Forum/language/EnglishUK/forum.php
@@ -1,4 +1,5 @@
-<?php 
+<?php
+
 /*
  *  Made by Samerton
  *  https://github.com/NamelessMC/Nameless/
@@ -9,10 +10,8 @@
  *  EnglishUK Language for Forum module
  */
 
-$language = array(
-    /*
-     *  Forums
-     */ 
+$language = [
+    // Forums
     'forum' => 'Forum',
     'forums' => 'Forums',
     'forum_index' => 'Home',
@@ -212,4 +211,4 @@ $language = array(
     'recent_posts_statistic_icon' => '<i class="far fa-comments"></i>',
     'topics_title' => 'Topics',
     'posts_title' => 'Posts',
-);
+];
diff --git a/modules/Forum/language/EnglishUS/forum.php b/modules/Forum/language/EnglishUS/forum.php
index 16cc138fbcf83a0ae06a2c6b9057a1ac482acbfe..60d3d47d8f60c9a58386831b775781e999cf2543 100644
--- a/modules/Forum/language/EnglishUS/forum.php
+++ b/modules/Forum/language/EnglishUS/forum.php
@@ -1,4 +1,5 @@
-<?php 
+<?php
+
 /*
  *  Made by Samerton
  *  https://github.com/NamelessMC/Nameless/
@@ -9,10 +10,8 @@
  *  EnglishUS Language for Forum module
  */
 
-$language = array(
-    /*
-     *  Forums
-     */ 
+$language = [
+    // Forums
     'forum' => 'Forum',
     'forums' => 'Forums',
     'forum_index' => 'Home',
@@ -212,4 +211,4 @@ $language = array(
     'recent_posts_statistic_icon' => '<i class="far fa-comments"></i>',
     'topics_title' => 'Topics',
     'posts_title' => 'Posts',
-);
+];
diff --git a/modules/Forum/language/French/forum.php b/modules/Forum/language/French/forum.php
index 95cb56d30f57a728fdc58facb8c5f867b79a6d78..3b92f33488c7b7a21aaa3f666ab7084b91df2733 100644
--- a/modules/Forum/language/French/forum.php
+++ b/modules/Forum/language/French/forum.php
@@ -1,4 +1,5 @@
-<?php 
+<?php
+
 /*
  *  Made by Samerton
  *  Translated by Aviortheking
@@ -10,10 +11,8 @@
  *  French Language for Forum module
  */
 
-$language = array(
-    /*
-     *  Forums
-     */ 
+$language = [
+    // Forums
     'forum' => 'Forum',
     'forums' => 'Forums',
     'forum_index' => 'Accueil',
@@ -120,7 +119,7 @@ $language = array(
     'label_forums' => 'Étiquette du forum',
     'label_groups' => 'Label Groups',
     'no_forums' => 'Aucun forum',
-    'no_labels_defined' => 'Aucune étiquettes n\'ont été définie.', 
+    'no_labels_defined' => 'Aucune étiquettes n\'ont été définie.',
     'no_label_types_defined' => 'Aucun type d\'étiquette n\'ont été définie.',
     'label_edit_success' => 'Étiquette modifié.',
     'label_type_edit_success' => 'Tpye d\'étiquette modifié.',
@@ -213,4 +212,4 @@ $language = array(
     'recent_posts_statistic_icon' => '<i class="far fa-comments"></i>',
     'topics_title' => 'Topics',
     'posts_title' => 'Posts',
-);
+];
diff --git a/modules/Forum/language/German/forum.php b/modules/Forum/language/German/forum.php
index 62b7dab76e6f30c607f7d98851f6b41d267b8a06..b052ae72d1116a51ca35d6b17a806731b1c8f420 100644
--- a/modules/Forum/language/German/forum.php
+++ b/modules/Forum/language/German/forum.php
@@ -17,10 +17,8 @@
  *
  */
 
-$language = array(
-    /*
-     *  Forums
-     */
+$language = [
+    // Forums
     'forum' => 'Forum',
     'forums' => 'Foren',
     'forum_index' => 'Startseite',
@@ -219,4 +217,4 @@ $language = array(
     'recent_posts_statistic_icon' => '<i class="fas fa-comments"></i>',
     'topics_title' => 'Topics',
     'posts_title' => 'Posts',
-);
+];
diff --git a/modules/Forum/language/Italian/forum.php b/modules/Forum/language/Italian/forum.php
index c43a184bba1c80869224a70780a7d3ad4fc72b19..17470ab5e3dd28305ade7ef6be8a1d5ab2dc3693 100644
--- a/modules/Forum/language/Italian/forum.php
+++ b/modules/Forum/language/Italian/forum.php
@@ -10,10 +10,8 @@
  *  Italian Language for Forum module
  */
 
-$language = array(
-    /*
-     *  Forums
-     */
+$language = [
+    // Forums
     'forum' => 'Forum',
     'forums' => 'Forum',
     'forum_index' => 'Home',
@@ -43,7 +41,7 @@ $language = array(
     'post_edited_successfully' => 'Post modificato con successo.',
     'user_tag' => 'Sei stato taggato in un post.',
     'user_tag_info' => 'Sei stato taggato in un post da {x}.', // Don't replace "{x}"
-    'creating_topic_in_x' => "Creazione della discussione in {x}", // Don't replace "{x}"
+    'creating_topic_in_x' => 'Creazione della discussione in {x}', // Don't replace "{x}"
     'topic_title' => 'Titolo del topic',
     'new_reply' => 'Nuova risposta',
     're' => 'RI: ',
@@ -59,7 +57,7 @@ $language = array(
     'confirm_delete_post' => 'Sei sicuro di voler eliminare questo post?',
     'delete_topic' => 'Elimina discussione',
     'move_topic' => 'Sposta discussione',
-    'move_topic_to' => "Sposta la discussione in:",
+    'move_topic_to' => 'Sposta la discussione in:',
     'stick_topic' => 'Fissa discussione',
     'unstick_topic' => 'Togli la discussione dai fissati',
     'share' => 'Condividi',
@@ -70,10 +68,10 @@ $language = array(
     'last_edited' => 'Ultima modifica: {x}', // Don't replace "{x}"
     'quote' => 'Quota',
     'topic_locked_notice' => 'Questa discussione è bloccata, ma i tuoi permessi ti consentono di creare una risposta.',
-    'title_required' => "Devi inserire il titolo della discussione!",
+    'title_required' => 'Devi inserire il titolo della discussione!',
     'content_required' => 'Non puoi creare un post vuoto!',
-    'title_min_2' => "Il titolo della discussione deve contenere almeno 2 caratteri",
-    'title_max_64' => "Il titolo della discussione non deve contenere più di 64 caratteri",
+    'title_min_2' => 'Il titolo della discussione deve contenere almeno 2 caratteri',
+    'title_max_64' => 'Il titolo della discussione non deve contenere più di 64 caratteri',
     'content_min_2' => 'Il contenuto del tuo post deve contenere almeno 2 caratteri',
     'content_max_50000' => 'Il contenuto del tuo post non deve essere più lungo di 50000 caratteri',
     'post_already_reported' => 'Hai già segnalato questo post!',
@@ -81,10 +79,10 @@ $language = array(
     'removed_quoted_post' => 'Post rimosso dai post citati.',
     'insert_quotes' => 'Inserisci citazioni',
     'quoting_posts' => 'Inserimento citazioni..',
-    'error_quoting_posts' => "Spiacenti, si è verificato un problema durante la citazione dei post.",
+    'error_quoting_posts' => 'Spiacenti, si è verificato un problema durante la citazione dei post.',
     'error_rating_post' => 'Spiacenti, si è verificato un errore durante la valutazione del post.',
-    'topic_stuck' => "La discussione è rimasta bloccata.",
-    'topic_unstuck' => "La discussione è stato sbloccata.",
+    'topic_stuck' => 'La discussione è rimasta bloccata.',
+    'topic_unstuck' => 'La discussione è stato sbloccata.',
     'spam_wait' => 'Attendi {x} secondi prima di postare di nuovo.',
     'overview' => 'Panoramica',
     'no_label' => 'Senza etichetta',
@@ -93,7 +91,7 @@ $language = array(
     'unfollow' => 'Smetti di seguire',
     'now_following_topic' => 'Ora stai seguendo questa discussione e sarai informato di eventuali nuove risposte.',
     'no_longer_following_topic' => 'Non stai più seguendo questa discussione e non riceverai alcuna notifica di nuove risposte.',
-    'new_reply_in_topic' => "{x} ha risposto alla discussione {y}", // Don't replace {x} (username) or {y} (topic title)
+    'new_reply_in_topic' => '{x} ha risposto alla discussione {y}', // Don't replace {x} (username) or {y} (topic title)
     'started_by_x' => 'Avviato da {x}', // Don't replace {x}
     'sticky_topics' => 'Discussioni in rilievo',
 
@@ -212,4 +210,4 @@ $language = array(
     'recent_posts_statistic_icon' => '<i class="far fa-comments"></i>',
     'topics_title' => 'Discussioni',
     'posts_title' => 'Post',
-);
+];
diff --git a/modules/Forum/language/Japanese/forum.php b/modules/Forum/language/Japanese/forum.php
index b5b501ffd8c164d0d015a4f351e0728faf062a82..744c1933bad833c8d4c574736aeae61032e6ee25 100644
--- a/modules/Forum/language/Japanese/forum.php
+++ b/modules/Forum/language/Japanese/forum.php
@@ -14,10 +14,8 @@
  *  Japanese Language - Forum module
  */
 
-$language = array(
-    /*
-     *  Forums
-     */
+$language = [
+    // Forums
     'forum' => 'フォーラム',
     'forums' => 'フォーラム',
     'forum_index' => 'ホーム',
@@ -217,4 +215,4 @@ $language = array(
     'recent_posts_statistic_icon' => '<i class = "far fa-comments"> </i>',
     'topics_title' => 'トピック',
     'posts_title' => '投稿',
-);
+];
diff --git a/modules/Forum/language/Norwegian/forum.php b/modules/Forum/language/Norwegian/forum.php
index fa349f7f9010e30e419d70cf81d2442ad780213a..711c3384e43b16184d578420381c6374a620a403 100644
--- a/modules/Forum/language/Norwegian/forum.php
+++ b/modules/Forum/language/Norwegian/forum.php
@@ -1,4 +1,5 @@
-<?php 
+<?php
+
 /*
  *  Translations by Svevende & Maiu
  *  https://github.com/NamelessMC/Nameless/
@@ -9,10 +10,8 @@
  *  Norwegian Language for Forum module
  */
 
-$language = array(
-    /*
-     *  Forums
-     */ 
+$language = [
+    // Forums
     'forum' => 'Forum',
     'forums' => 'Forum',
     'forum_index' => 'Hjem',
@@ -211,4 +210,4 @@ $language = array(
     'recent_posts_statistic_icon' => '<i class="far fa-comments"></i>',
     'topics_title' => 'Tråder',
     'posts_title' => 'Innlegg',
-);
+];
diff --git a/modules/Forum/language/Polish/forum.php b/modules/Forum/language/Polish/forum.php
index 7a1df95bd3be71d13189bac06f3825a37ce1e122..5da28009f3487ee9ff7c20a9f6ef4d42a6dc5c62 100755
--- a/modules/Forum/language/Polish/forum.php
+++ b/modules/Forum/language/Polish/forum.php
@@ -9,10 +9,8 @@
  *  Polish Language for Forum module
  */
 
-$language = array(
-    /*
-     *  Forums
-     */
+$language = [
+    // Forums
     'forum' => 'Forum',
     'forums' => 'Fora',
     'forum_index' => 'Strona główna',
@@ -211,4 +209,4 @@ $language = array(
     'recent_posts_statistic_icon' => '<i class="far fa-comments"></i>',
     'topics_title' => 'Tematy',
     'posts_title' => 'Posty',
-);
+];
diff --git a/modules/Forum/language/Portuguese/forum.php b/modules/Forum/language/Portuguese/forum.php
index 94b2c8bfe19b1d5c9b4ae811922c7f6b88ebcb56..48b6e1e495a49ecf4821f606157fdf1d12957b6a 100644
--- a/modules/Forum/language/Portuguese/forum.php
+++ b/modules/Forum/language/Portuguese/forum.php
@@ -1,4 +1,5 @@
-<?php 
+<?php
+
 /*
  *  Made by Samerton
  *  https://github.com/NamelessMC/Nameless/
@@ -11,10 +12,8 @@
  *  Last update: 09/02/2021
  */
 
-$language = array(
-    /*
-     *  Forums
-     */ 
+$language = [
+    // Forums
     'forum' => 'Fórum',
     'forums' => 'Fóruns',
     'forum_index' => 'Início',
@@ -214,4 +213,4 @@ $language = array(
     'recent_posts_statistic_icon' => '<i class="far fa-comments"></i>',
     'topics_title' => 'Tópicos',
     'posts_title' => 'Postagens',
-);
+];
diff --git a/modules/Forum/language/Romanian/forum.php b/modules/Forum/language/Romanian/forum.php
index 18a657966cb8249f4afdd17e869c2f1d81ca6c3f..098b59537b1009641708241ce57bf741297ec9b6 100644
--- a/modules/Forum/language/Romanian/forum.php
+++ b/modules/Forum/language/Romanian/forum.php
@@ -1,4 +1,5 @@
-<?php 
+<?php
+
 /*
  *  Made by Samerton
  *  https://github.com/NamelessMC/Nameless/
@@ -11,10 +12,8 @@
  *  Last Update: 24/11/2018
  */
 
-$language = array(
-    /*
-     *  Forums
-     */ 
+$language = [
+    // Forums
     'forum' => 'Forum',
     'forums' => 'Forumuri',
     'forum_index' => 'Forum',
@@ -215,4 +214,4 @@ $language = array(
     'recent_posts_statistic_icon' => '<i class="far fa-comments"></i>',
     'topics_title' => 'Subiecte',
     'posts_title' => 'Mesaje',
-);
+];
diff --git a/modules/Forum/language/Russian/forum.php b/modules/Forum/language/Russian/forum.php
index 782d040702b7b930085a7cbf87e00757ecd2035d..ec9fdaa21bf59796f858c772d57812dc0ee3d3aa 100644
--- a/modules/Forum/language/Russian/forum.php
+++ b/modules/Forum/language/Russian/forum.php
@@ -10,10 +10,8 @@
  *  https://github.com/0niel
  */
 
-$language = array(
-    /*
-     *  Forums
-     */
+$language = [
+    // Forums
     'forum' => 'Форум',
     'forums' => 'Форумы',
     'forum_index' => 'Главная',
@@ -213,4 +211,4 @@ $language = array(
     'recent_posts_statistic_icon' => '<i class="far fa-comments"></i>',
     'topics_title' => 'Топики',
     'posts_title' => 'Посты',
-);
+];
diff --git a/modules/Forum/language/Spanish/forum.php b/modules/Forum/language/Spanish/forum.php
index dccf07a8a6a97cbfcc725a4971786c08b35061d1..0426240d587809afd670fabb4e681ec826b1381f 100644
--- a/modules/Forum/language/Spanish/forum.php
+++ b/modules/Forum/language/Spanish/forum.php
@@ -11,10 +11,8 @@
  *  Spanish Language for Forum module
  */
 
-$language = array(
-    /*
-     *  Forums
-     */
+$language = [
+    // Forums
     'forum' => 'Foro',
     'forums' => 'Foros',
     'forum_index' => 'Inicio',
@@ -214,4 +212,4 @@ $language = array(
     'recent_posts_statistic_icon' => '<i class="far fa-comments"></i>',
     'topics_title' => 'Temas',
     'posts_title' => 'Publicaciones',
-);
+];
diff --git a/modules/Forum/language/SwedishSE/forum.php b/modules/Forum/language/SwedishSE/forum.php
index 2e99c0fa76d64770a50016da0408f3253195f066..ae2b4dd413d81973a7bf706434b6b9694140a545 100644
--- a/modules/Forum/language/SwedishSE/forum.php
+++ b/modules/Forum/language/SwedishSE/forum.php
@@ -1,4 +1,5 @@
-<?php 
+<?php
+
 /*
  *  Made by Samerton
  *  https://github.com/NamelessMC/Nameless/
@@ -11,10 +12,8 @@
  *  SwedishSE Language for the forum module.
  */
 
-$language = array(
-    /*
-     *  Forums
-     */ 
+$language = [
+    // Forums
     'forum' => 'Forum',
     'forums' => 'Forumer',
     'forum_index' => 'Hem',
@@ -214,4 +213,4 @@ $language = array(
     'recent_posts_statistic_icon' => '<i class="far fa-comments"></i>',
     'topics_title' => 'Topics',
     'posts_title' => 'Posts',
-);
+];
diff --git a/modules/Forum/language/Turkish/forum.php b/modules/Forum/language/Turkish/forum.php
index 326ef7d69709792fef8067bc640f1eddba74d252..3f08c75601c5f5506fb721553eec4361e4164dad 100644
--- a/modules/Forum/language/Turkish/forum.php
+++ b/modules/Forum/language/Turkish/forum.php
@@ -1,4 +1,5 @@
-<?php 
+<?php
+
 /*
  *  https://github.com/NamelessMC/Nameless/
  *  NamelessMC version 2.0.0-pr8
@@ -9,10 +10,8 @@
  *  Turkish translation by xOrcun
  */
 
-$language = array(
-    /*
-     *  Forums
-     */ 
+$language = [
+    // Forums
     'forum' => 'Forum',
     'forums' => 'Forum',
     'forum_index' => 'Ana Sayfa',
@@ -211,4 +210,4 @@ $language = array(
     'recent_posts_statistic_icon' => '<i class="far fa-comments"></i>',
     'topics_title' => 'Konular',
     'posts_title' => 'Mesajlar',
-);
+];
diff --git a/modules/Forum/module.php b/modules/Forum/module.php
index e4253ba2d7e386f334698bd0bcc68eb85dac9961..c2d8fb60662a8abce1c3c327f929fc9370dae8db 100644
--- a/modules/Forum/module.php
+++ b/modules/Forum/module.php
@@ -9,237 +9,235 @@
  *  Forum module file
  */
 
-class Forum_Module extends Module {
-
-    private $_language, 
+class Forum_Module extends Module
+{
+    private $_language,
+ 
             $_forum_language;
 
-	public function __construct($language, $forum_language, $pages) {
-		$this->_language = $language;
-		$this->_forum_language = $forum_language;
-
-		$name = 'Forum';
-		$author = '<a href="https://samerton.me" target="_blank" rel="nofollow noopener">Samerton</a>';
-		$module_version = '2.0.0-pr9';
-		$nameless_version = '2.0.0-pr9';
-
-		parent::__construct($this, $name, $author, $module_version, $nameless_version);
-
-		// Define URLs which belong to this module
-		$pages->add('Forum', '/panel/forums', 'pages/panel/forums.php');
-		$pages->add('Forum', '/panel/forums/labels', 'pages/panel/labels.php');
-
-		$pages->add('Forum', '/forum', 'pages/forum/index.php', 'forum', true);
-		$pages->add('Forum', '/forum/error', 'pages/forum/error.php');
-		$pages->add('Forum', '/forum/view', 'pages/forum/view_forum.php');
-		$pages->add('Forum', '/forum/topic', 'pages/forum/view_topic.php');
-		$pages->add('Forum', '/forum/new', 'pages/forum/new_topic.php');
-		$pages->add('Forum', '/forum/spam', 'pages/forum/spam.php');
-		$pages->add('Forum', '/forum/report', 'pages/forum/report.php');
-		$pages->add('Forum', '/forum/get_quotes', 'pages/forum/get_quotes.php');
-		$pages->add('Forum', '/forum/delete_post', 'pages/forum/delete_post.php');
-		$pages->add('Forum', '/forum/delete', 'pages/forum/delete.php');
-		$pages->add('Forum', '/forum/move', 'pages/forum/move.php');
-		$pages->add('Forum', '/forum/merge', 'pages/forum/merge.php');
-		$pages->add('Forum', '/forum/edit', 'pages/forum/edit.php');
-		$pages->add('Forum', '/forum/lock', 'pages/forum/lock.php');
-		$pages->add('Forum', '/forum/stick', 'pages/forum/stick.php');
-		$pages->add('Forum', '/forum/reactions', 'pages/forum/reactions.php');
-		$pages->add('Forum', '/forum/search', 'pages/forum/search.php');
-
-		// UserCP
-		$pages->add('Forum', '/user/following_topics', 'pages/user/following_topics.php');
-
-		// Redirects
-		$pages->add('Forum', '/forum/view_topic', 'pages/forum/redirect.php');
-		$pages->add('Forum', '/forum/view_forum', 'pages/forum/redirect.php');
-
-		// Hooks
-		HookHandler::registerEvent('newTopic', $this->_forum_language->get('forum', 'new_topic_hook_info'), array('uuid' => $this->_language->get('admin', 'uuid'), 'username' => $this->_language->get('user', 'username'), 'nickname' => $this->_language->get('user', 'nickname'), 'content' => $this->_language->get('general', 'content'), 'content_full' => $this->_language->get('general', 'full_content'), 'avatar_url' => $this->_language->get('user', 'avatar'), 'title' => $this->_forum_language->get('forum', 'topic_title'), 'url' => $this->_language->get('general', 'url'), 'available_hooks' => $this->_forum_language->get('forum', 'available_hooks')));
-	}
-
-	public function onInstall() {
-		// Not necessary for Forum
-	}
-
-	public function onUninstall() {
-
-	}
-
-	public function onEnable() {
-		// No actions necessary
-	}
-
-	public function onDisable() {
-		// No actions necessary
-	}
-
-	public function onPageLoad($user, $pages, $cache, $smarty, $navs, $widgets, $template) {
-		// AdminCP
-		PermissionHandler::registerPermissions('Forum', array(
-			'admincp.forums' => $this->_language->get('moderator', 'staff_cp') . ' &raquo; ' . $this->_forum_language->get('forum', 'forum')
-		));
-
-		// Sitemap
-		$pages->registerSitemapMethod(ROOT_PATH . '/modules/Forum/classes/Forum_Sitemap.php', 'Forum_Sitemap::generateSitemap');
-
-		// Add link to navbar
-		$cache->setCache('navbar_order');
-		if(!$cache->isCached('forum_order')){
-			$forum_order = 2;
-			$cache->store('forum_order', 2);
-		} else {
-			$forum_order = $cache->retrieve('forum_order');
-		}
-
-		$cache->setCache('navbar_icons');
-		if(!$cache->isCached('forum_icon'))
-			$icon = '';
-		else
-			$icon = $cache->retrieve('forum_icon');
-
-		$navs[0]->add('forum', $this->_forum_language->get('forum', 'forum'), URL::build('/forum'), 'top', null, $forum_order, $icon);
-
-		// Widgets
-		// Latest posts
-		require_once(ROOT_PATH . '/modules/Forum/widgets/LatestPostsWidget.php');
-		$module_pages = $widgets->getPages('Latest Posts');
-
-		$widgets->add(new LatestPostsWidget($module_pages, $this->_forum_language->get('forum', 'latest_posts'), $this->_forum_language->get('forum', 'by'), $smarty, $cache, $user, $this->_language));
-
-		// Front end or back end?
-		if(defined('FRONT_END')){
-			$queries = new Queries();
-
-			// Global variables if user is logged in
-			if($user->isLoggedIn()){
-				// Basic user variables
-				$topic_count = $queries->getWhere('topics', array('topic_creator', '=', $user->data()->id));
-				$topic_count = count($topic_count);
-				$post_count = $queries->getWhere('posts', array('post_creator', '=', $user->data()->id));
-				$post_count = count($post_count);
-				$smarty->assign('LOGGED_IN_USER_FORUM', array(
-					'topic_count' => $topic_count,
-					'post_count' => $post_count
-				));
-			}
-
-			if(defined('PAGE') && PAGE == 'user_query'){
-				$user_id = $smarty->getTemplateVars('USER_ID');
-
-				if($user_id){
-					$topic_count = $queries->getWhere('topics', array('topic_creator', '=', $user_id));
-					$smarty->assign('TOPICS', str_replace('{x}', count($topic_count), $this->_forum_language->get('forum', 'x_topics')));
-					$post_count = $queries->getWhere('posts', array('post_creator', '=', $user_id));
-					$smarty->assign('POSTS', str_replace('{x}', count($post_count), $this->_forum_language->get('forum', 'x_posts')));
-				}
-			}
-
-		} else if(defined('BACK_END')){
-			if($user->hasPermission('admincp.forums')){
-				$cache->setCache('panel_sidebar');
-				if(!$cache->isCached('forum_order')){
-					$order = 12;
-					$cache->store('forum_order', 12);
-				} else {
-					$order = $cache->retrieve('forum_order');
-				}
-
-				if(!$cache->isCached('forum_icon')){
-					$icon = '<i class="nav-icon fas fa-comments"></i>';
-					$cache->store('forum_icon', $icon);
-				} else
-					$icon = $cache->retrieve('forum_icon');
-
-				$navs[2]->add('forum_divider', mb_strtoupper($this->_forum_language->get('forum', 'forum'), 'UTF-8'), 'divider', 'top', null, $order, '');
-				$navs[2]->add('forums', $this->_forum_language->get('forum', 'forums'), URL::build('/panel/forums'), 'top', null, $order + 0.1, $icon);
-
-				if(!$cache->isCached('forum_label_icon')){
-					$icon = '<i class="nav-icon fas fa-tags"></i>';
-					$cache->store('forum_label_icon', $icon);
-				} else
-					$icon = $cache->retrieve('forum_label_icon');
-
-				$navs[2]->add('forum_labels', $this->_forum_language->get('forum', 'labels'), URL::build('/panel/forums/labels'), 'top', null, $order + 0.2, $icon);
-			}
-
-			if(defined('PANEL_PAGE') && PANEL_PAGE == 'dashboard'){
-				// Dashboard graph
-				$queries = new Queries();
-
-				// Get data for topics and posts
-				$latest_topics = $queries->orderWhere('topics', 'topic_date > ' . strtotime("-1 week"), 'topic_date', 'ASC');
-				$latest_posts = $queries->orderWhere('posts', 'post_date > "' . date('Y-m-d G:i:s', strtotime("-1 week")) . '"', 'post_date', 'ASC');
-
-				$cache->setCache('dashboard_graph');
-				if($cache->isCached('forum_data')){
-					$output = $cache->retrieve('forum_data');
-
-				} else {
-					$output = array();
-
-					$output['datasets']['topics']['label'] = 'forum_language/forum/topics_title'; // for $forum_language->get('forum', 'topics_title');
-					$output['datasets']['topics']['colour'] = '#00931D';
-					$output['datasets']['posts']['label'] = 'forum_language/forum/posts_title'; // for $forum_language->get('forum', 'posts_title');
-					$output['datasets']['posts']['colour'] = '#ffde0a';
-
-					foreach($latest_topics as $topic){
-						$date = date('d M Y', $topic->topic_date);
-						$date = '_' . strtotime($date);
-
-						if(isset($output[$date]['topics'])){
-							$output[$date]['topics'] = $output[$date]['topics'] + 1;
-						} else {
-							$output[$date]['topics'] = 1;
-						}
-					}
-
-					foreach($latest_posts as $post){
-						$date = date('d M Y', strtotime($post->post_date));
-						$date = '_' . strtotime($date);
-
-						if(isset($output[$date]['posts'])){
-							$output[$date]['posts'] = $output[$date]['posts'] + 1;
-						} else {
-							$output[$date]['posts'] = 1;
-						}
-					}
-
-					// Fill in missing dates, set topics/posts to 0
-					$start = strtotime("-1 week");
-					$start = date('d M Y', $start);
-					$start = strtotime($start);
-					$end = strtotime(date('d M Y'));
-					while($start <= $end){
-						if(!isset($output['_' . $start]['topics']))
-							$output['_' . $start]['topics'] = 0;
-
-						if(!isset($output['_' . $start]['posts']))
-							$output['_' . $start]['posts'] = 0;
-
-						$start = strtotime('+1 day', $start);
-					}
-
-					// Sort by date
-					ksort($output);
-
-					$cache->store('forum_data', $output, 120);
-
-				}
-
-				Core_Module::addDataToDashboardGraph($this->_language->get('admin', 'overview'), $output);
-
-				// Dashboard stats
-				require_once(ROOT_PATH . '/modules/Forum/collections/panel/RecentTopics.php');
-				CollectionManager::addItemToCollection('dashboard_stats', new RecentTopicsItem($smarty, $this->_forum_language, $cache, count($latest_topics)));
-
-				require_once(ROOT_PATH . '/modules/Forum/collections/panel/RecentPosts.php');
-				CollectionManager::addItemToCollection('dashboard_stats', new RecentPostsItem($smarty, $this->_forum_language, $cache, count($latest_posts)));
-
-			}
-		}
-
-		require_once(ROOT_PATH . '/modules/Forum/hooks/DeleteUserForumHook.php');
-		HookHandler::registerHook('deleteUser', 'DeleteUserForumHook::deleteUser');
-	}
-}
\ No newline at end of file
+    public function __construct($language, $forum_language, $pages) {
+        $this->_language = $language;
+        $this->_forum_language = $forum_language;
+
+        $name = 'Forum';
+        $author = '<a href="https://samerton.me" target="_blank" rel="nofollow noopener">Samerton</a>';
+        $module_version = '2.0.0-pr9';
+        $nameless_version = '2.0.0-pr9';
+
+        parent::__construct($this, $name, $author, $module_version, $nameless_version);
+
+        // Define URLs which belong to this module
+        $pages->add('Forum', '/panel/forums', 'pages/panel/forums.php');
+        $pages->add('Forum', '/panel/forums/labels', 'pages/panel/labels.php');
+
+        $pages->add('Forum', '/forum', 'pages/forum/index.php', 'forum', true);
+        $pages->add('Forum', '/forum/error', 'pages/forum/error.php');
+        $pages->add('Forum', '/forum/view', 'pages/forum/view_forum.php');
+        $pages->add('Forum', '/forum/topic', 'pages/forum/view_topic.php');
+        $pages->add('Forum', '/forum/new', 'pages/forum/new_topic.php');
+        $pages->add('Forum', '/forum/spam', 'pages/forum/spam.php');
+        $pages->add('Forum', '/forum/report', 'pages/forum/report.php');
+        $pages->add('Forum', '/forum/get_quotes', 'pages/forum/get_quotes.php');
+        $pages->add('Forum', '/forum/delete_post', 'pages/forum/delete_post.php');
+        $pages->add('Forum', '/forum/delete', 'pages/forum/delete.php');
+        $pages->add('Forum', '/forum/move', 'pages/forum/move.php');
+        $pages->add('Forum', '/forum/merge', 'pages/forum/merge.php');
+        $pages->add('Forum', '/forum/edit', 'pages/forum/edit.php');
+        $pages->add('Forum', '/forum/lock', 'pages/forum/lock.php');
+        $pages->add('Forum', '/forum/stick', 'pages/forum/stick.php');
+        $pages->add('Forum', '/forum/reactions', 'pages/forum/reactions.php');
+        $pages->add('Forum', '/forum/search', 'pages/forum/search.php');
+
+        // UserCP
+        $pages->add('Forum', '/user/following_topics', 'pages/user/following_topics.php');
+
+        // Redirects
+        $pages->add('Forum', '/forum/view_topic', 'pages/forum/redirect.php');
+        $pages->add('Forum', '/forum/view_forum', 'pages/forum/redirect.php');
+
+        // Hooks
+        HookHandler::registerEvent('newTopic', $this->_forum_language->get('forum', 'new_topic_hook_info'), ['uuid' => $this->_language->get('admin', 'uuid'), 'username' => $this->_language->get('user', 'username'), 'nickname' => $this->_language->get('user', 'nickname'), 'content' => $this->_language->get('general', 'content'), 'content_full' => $this->_language->get('general', 'full_content'), 'avatar_url' => $this->_language->get('user', 'avatar'), 'title' => $this->_forum_language->get('forum', 'topic_title'), 'url' => $this->_language->get('general', 'url'), 'available_hooks' => $this->_forum_language->get('forum', 'available_hooks')]);
+    }
+
+    public function onInstall() {
+        // Not necessary for Forum
+    }
+
+    public function onUninstall() {
+    }
+
+    public function onEnable() {
+        // No actions necessary
+    }
+
+    public function onDisable() {
+        // No actions necessary
+    }
+
+    public function onPageLoad($user, $pages, $cache, $smarty, $navs, $widgets, $template) {
+        // AdminCP
+        PermissionHandler::registerPermissions('Forum', [
+            'admincp.forums' => $this->_language->get('moderator', 'staff_cp') . ' &raquo; ' . $this->_forum_language->get('forum', 'forum')
+        ]);
+
+        // Sitemap
+        $pages->registerSitemapMethod(ROOT_PATH . '/modules/Forum/classes/Forum_Sitemap.php', 'Forum_Sitemap::generateSitemap');
+
+        // Add link to navbar
+        $cache->setCache('navbar_order');
+
+        if (! $cache->isCached('forum_order')){
+            $forum_order = 2;
+            $cache->store('forum_order', 2);
+        } else {
+            $forum_order = $cache->retrieve('forum_order');
+        }
+
+        $cache->setCache('navbar_icons');
+
+        if (! $cache->isCached('forum_icon'))
+            $icon = '';
+        else $icon = $cache->retrieve('forum_icon');
+
+        $navs[0]->add('forum', $this->_forum_language->get('forum', 'forum'), URL::build('/forum'), 'top', null, $forum_order, $icon);
+
+        // Widgets
+        // Latest posts
+        require_once (ROOT_PATH . '/modules/Forum/widgets/LatestPostsWidget.php');
+        $module_pages = $widgets->getPages('Latest Posts');
+
+        $widgets->add(new LatestPostsWidget($module_pages, $this->_forum_language->get('forum', 'latest_posts'), $this->_forum_language->get('forum', 'by'), $smarty, $cache, $user, $this->_language));
+
+        // Front end or back end?
+        if (defined('FRONT_END')){
+            $queries = new Queries();
+
+            // Global variables if user is logged in
+            if ($user->isLoggedIn()){
+                // Basic user variables
+                $topic_count = $queries->getWhere('topics', ['topic_creator', '=', $user->data()->id]);
+                $topic_count = count($topic_count);
+                $post_count = $queries->getWhere('posts', ['post_creator', '=', $user->data()->id]);
+                $post_count = count($post_count);
+                $smarty->assign('LOGGED_IN_USER_FORUM', [
+                    'topic_count' => $topic_count,
+                    'post_count' => $post_count
+                ]);
+            }
+
+            if (defined('PAGE') && PAGE == 'user_query'){
+                $user_id = $smarty->getTemplateVars('USER_ID');
+
+                if ($user_id){
+                    $topic_count = $queries->getWhere('topics', ['topic_creator', '=', $user_id]);
+                    $smarty->assign('TOPICS', str_replace('{x}', count($topic_count), $this->_forum_language->get('forum', 'x_topics')));
+                    $post_count = $queries->getWhere('posts', ['post_creator', '=', $user_id]);
+                    $smarty->assign('POSTS', str_replace('{x}', count($post_count), $this->_forum_language->get('forum', 'x_posts')));
+                }
+            }
+        } else if (defined('BACK_END')){
+            if ($user->hasPermission('admincp.forums')){
+                $cache->setCache('panel_sidebar');
+
+                if (! $cache->isCached('forum_order')){
+                    $order = 12;
+                    $cache->store('forum_order', 12);
+                } else {
+                    $order = $cache->retrieve('forum_order');
+                }
+
+                if (! $cache->isCached('forum_icon')){
+                    $icon = '<i class="nav-icon fas fa-comments"></i>';
+                    $cache->store('forum_icon', $icon);
+                } else $icon = $cache->retrieve('forum_icon');
+
+                $navs[2]->add('forum_divider', mb_strtoupper($this->_forum_language->get('forum', 'forum'), 'UTF-8'), 'divider', 'top', null, $order, '');
+                $navs[2]->add('forums', $this->_forum_language->get('forum', 'forums'), URL::build('/panel/forums'), 'top', null, $order + 0.1, $icon);
+
+                if (! $cache->isCached('forum_label_icon')){
+                    $icon = '<i class="nav-icon fas fa-tags"></i>';
+                    $cache->store('forum_label_icon', $icon);
+                } else $icon = $cache->retrieve('forum_label_icon');
+
+                $navs[2]->add('forum_labels', $this->_forum_language->get('forum', 'labels'), URL::build('/panel/forums/labels'), 'top', null, $order + 0.2, $icon);
+            }
+
+            if (defined('PANEL_PAGE') && PANEL_PAGE == 'dashboard'){
+                // Dashboard graph
+                $queries = new Queries();
+
+                // Get data for topics and posts
+                $latest_topics = $queries->orderWhere('topics', 'topic_date > ' . strtotime('-1 week'), 'topic_date', 'ASC');
+                $latest_posts = $queries->orderWhere('posts', 'post_date > "' . date('Y-m-d G:i:s', strtotime('-1 week')) . '"', 'post_date', 'ASC');
+
+                $cache->setCache('dashboard_graph');
+
+                if ($cache->isCached('forum_data')){
+                    $output = $cache->retrieve('forum_data');
+                } else {
+                    $output = [];
+
+                    $output['datasets']['topics']['label'] = 'forum_language/forum/topics_title'; // for $forum_language->get('forum', 'topics_title');
+                    $output['datasets']['topics']['colour'] = '#00931D';
+                    $output['datasets']['posts']['label'] = 'forum_language/forum/posts_title'; // for $forum_language->get('forum', 'posts_title');
+                    $output['datasets']['posts']['colour'] = '#ffde0a';
+
+                    foreach ($latest_topics as $topic){
+                        $date = date('d M Y', $topic->topic_date);
+                        $date = '_' . strtotime($date);
+
+                        if (isset($output[$date]['topics'])){
+                            $output[$date]['topics'] = $output[$date]['topics'] + 1;
+                        } else {
+                            $output[$date]['topics'] = 1;
+                        }
+                    }
+
+                    foreach ($latest_posts as $post){
+                        $date = date('d M Y', strtotime($post->post_date));
+                        $date = '_' . strtotime($date);
+
+                        if (isset($output[$date]['posts'])){
+                            $output[$date]['posts'] = $output[$date]['posts'] + 1;
+                        } else {
+                            $output[$date]['posts'] = 1;
+                        }
+                    }
+
+                    // Fill in missing dates, set topics/posts to 0
+                    $start = strtotime('-1 week');
+                    $start = date('d M Y', $start);
+                    $start = strtotime($start);
+                    $end = strtotime(date('d M Y'));
+
+                    while ($start <= $end){
+                        if (! isset($output['_' . $start]['topics']))
+                            $output['_' . $start]['topics'] = 0;
+
+                        if (! isset($output['_' . $start]['posts']))
+                            $output['_' . $start]['posts'] = 0;
+
+                        $start = strtotime('+1 day', $start);
+                    }
+
+                    // Sort by date
+                    ksort($output);
+
+                    $cache->store('forum_data', $output, 120);
+                }
+
+                Core_Module::addDataToDashboardGraph($this->_language->get('admin', 'overview'), $output);
+
+                // Dashboard stats
+                require_once (ROOT_PATH . '/modules/Forum/collections/panel/RecentTopics.php');
+                CollectionManager::addItemToCollection('dashboard_stats', new RecentTopicsItem($smarty, $this->_forum_language, $cache, count($latest_topics)));
+
+                require_once (ROOT_PATH . '/modules/Forum/collections/panel/RecentPosts.php');
+                CollectionManager::addItemToCollection('dashboard_stats', new RecentPostsItem($smarty, $this->_forum_language, $cache, count($latest_posts)));
+            }
+        }
+
+        require_once (ROOT_PATH . '/modules/Forum/hooks/DeleteUserForumHook.php');
+        HookHandler::registerHook('deleteUser', 'DeleteUserForumHook::deleteUser');
+    }
+}
diff --git a/modules/Forum/pages/forum/delete.php b/modules/Forum/pages/forum/delete.php
index c35b387226ab1be7c75c7b652c8ee51d3f8353d9..1614e2b084a546e2f9fd74be539a2c18f4083ff8 100644
--- a/modules/Forum/pages/forum/delete.php
+++ b/modules/Forum/pages/forum/delete.php
@@ -9,12 +9,13 @@
  *  Delete topic
  */
 
-if (!$user->isLoggedIn()) {
+if (! $user->isLoggedIn()) {
     Redirect::to(URL::build('/forum'));
+
     die();
 }
 
-require_once(ROOT_PATH . '/modules/Forum/classes/Forum.php');
+require_once (ROOT_PATH . '/modules/Forum/classes/Forum.php');
 
 // Always define page name
 define('PAGE', 'forum');
@@ -22,18 +23,19 @@ define('PAGE', 'forum');
 $forum = new Forum();
 
 // Check params are set
-if (!isset($_GET["tid"]) || !is_numeric($_GET["tid"])) {
+if (! isset($_GET['tid']) || ! is_numeric($_GET['tid'])) {
     Redirect::to(URL::build('/forum'));
+
     die();
-} else {
-    $topic_id = $_GET["tid"];
 }
+    $topic_id = $_GET['tid'];
 
 // Check topic exists
-$topic = $queries->getWhere('topics', array('id', '=', $topic_id));
+$topic = $queries->getWhere('topics', ['id', '=', $topic_id]);
 
-if (!count($topic)) {
+if (! count($topic)) {
     Redirect::to(URL::build('forum'));
+
     die();
 }
 
@@ -41,19 +43,19 @@ $topic = $topic[0];
 
 if ($forum->canModerateForum($topic->forum_id, $user->getAllGroupIds())) {
     try {
-        $queries->update('topics', $topic_id, array(
+        $queries->update('topics', $topic_id, [
             'deleted' => 1
-        ));
+        ]);
         //TODO: TOPIC
         Log::getInstance()->log(Log::Action('forums/topic/delete'), $topic_id);
 
-        $posts = $queries->getWhere('posts', array('topic_id', '=', $topic_id));
+        $posts = $queries->getWhere('posts', ['topic_id', '=', $topic_id]);
 
         if (count($posts)) {
             foreach ($posts as $post) {
-                $queries->update('posts', $post->id, array(
+                $queries->update('posts', $post->id, [
                     'deleted' => 1
-                ));
+                ]);
             }
         }
 
@@ -61,11 +63,13 @@ if ($forum->canModerateForum($topic->forum_id, $user->getAllGroupIds())) {
         $forum->updateForumLatestPosts();
 
         Redirect::to(URL::build('/forum'));
+
         die();
     } catch (Exception $e) {
         die($e->getMessage());
     }
 } else {
     Redirect::to(URL::build('/forum'));
+
     die();
 }
diff --git a/modules/Forum/pages/forum/delete_post.php b/modules/Forum/pages/forum/delete_post.php
index fe9863e805d10d7926ea97ff2b7d119f1fa54df6..10e41ed88a6c6f630a513558ac571259bd3b4ebc 100644
--- a/modules/Forum/pages/forum/delete_post.php
+++ b/modules/Forum/pages/forum/delete_post.php
@@ -9,12 +9,13 @@
  *  Delete post page
  */
 
-if (!$user->isLoggedIn()) {
+if (! $user->isLoggedIn()) {
     Redirect::to(URL::build('/forum'));
+
     die();
 }
 
-require_once(ROOT_PATH . '/modules/Forum/classes/Forum.php');
+require_once (ROOT_PATH . '/modules/Forum/classes/Forum.php');
 
 // Always define page name
 define('PAGE', 'forum');
@@ -22,15 +23,18 @@ define('PAGE', 'forum');
 $forum = new Forum();
 
 // Check params are set
-if (!isset($_GET['pid']) || !is_numeric($_GET['pid'])) {
+if (! isset($_GET['pid']) || ! is_numeric($_GET['pid'])) {
     Redirect::to(URL::build('/forum'));
+
     die();
 }
 
 // Get post and forum ID
-$post = $queries->getWhere('posts', array('id', '=', $_GET['pid']));
-if (!count($post)) {
+$post = $queries->getWhere('posts', ['id', '=', $_GET['pid']]);
+
+if (! count($post)) {
     Redirect::to(URL::build('/forum'));
+
     die();
 }
 $post = $post[0];
@@ -44,9 +48,9 @@ if ($forum->canModerateForum($forum_id, $user->getAllGroupIds())) {
                 // Is it the OP?
                 if (isset($_POST['number']) && Input::get('number') == 10) {
                     try {
-                        $queries->update('topics', Input::get('tid'), array(
+                        $queries->update('topics', Input::get('tid'), [
                             'deleted' => 1
-                        ));
+                        ]);
                         Log::getInstance()->log(Log::Action('forums/post/delete'), Input::get('tid'));
                         $opening_post = 1;
                     } catch (Exception $e) {
@@ -59,18 +63,18 @@ if ($forum->canModerateForum($forum_id, $user->getAllGroupIds())) {
             } else $redirect = URL::build('/forum/search/', 'p=1&s=' . htmlspecialchars($_POST['search_string']));
 
             try {
-                $queries->update('posts', Input::get('pid'), array(
+                $queries->update('posts', Input::get('pid'), [
                     'deleted' => 1
-                ));
+                ]);
 
                 if (isset($opening_post)) {
-                    $posts = $queries->getWhere('posts', array('topic_id', '=', $_POST['tid']));
+                    $posts = $queries->getWhere('posts', ['topic_id', '=', $_POST['tid']]);
 
                     if (count($posts)) {
                         foreach ($posts as $post) {
-                            $queries->update('posts', $post->id, array(
+                            $queries->update('posts', $post->id, [
                                 'deleted' => 1
-                            ));
+                            ]);
                             Log::getInstance()->log(Log::Action('forums/post/delete'), $post->id);
                         }
                     }
@@ -81,19 +85,23 @@ if ($forum->canModerateForum($forum_id, $user->getAllGroupIds())) {
                 $forum->updateTopicLatestPosts();
 
                 Redirect::to($redirect);
+
                 die();
             } catch (Exception $e) {
                 die($e->getMessage());
             }
         } else {
             Redirect::to(URL::build('/forum/topic/' . Input::get('tid')));
+
             die();
         }
     } else {
         echo 'No post selected';
+
         die();
     }
 } else {
     Redirect::to(URL::build('/forum'));
+
     die();
 }
diff --git a/modules/Forum/pages/forum/edit.php b/modules/Forum/pages/forum/edit.php
index 71c041605efbb1cbfdef4303b861af92407301b0..b08dd044ff533c9de3178923f40e092ac1c8961c 100644
--- a/modules/Forum/pages/forum/edit.php
+++ b/modules/Forum/pages/forum/edit.php
@@ -12,75 +12,75 @@
 // Always define page name
 define('PAGE', 'forum');
 $page_title = $forum_language->get('forum', 'edit_post');
-require_once(ROOT_PATH . '/core/templates/frontend_init.php');
 
-$template->addCSSFiles(array(
-    (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/prism/prism.css' => array(),
-    (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/tinymce/plugins/spoiler/css/spoiler.css' => array(),
-    (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/emoji/css/emojione.min.css' => array(),
-    (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/emoji/css/emojione.sprites.css' => array(),
-    (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/emojionearea/css/emojionearea.min.css' => array(),
-));
+require_once (ROOT_PATH . '/core/templates/frontend_init.php');
+
+$template->addCSSFiles([
+    (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/prism/prism.css' => [],
+    (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/tinymce/plugins/spoiler/css/spoiler.css' => [],
+    (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/emoji/css/emojione.min.css' => [],
+    (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/emoji/css/emojione.sprites.css' => [],
+    (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/emojionearea/css/emojionearea.min.css' => [],
+]);
 
 // User must be logged in to proceed
-if (!$user->isLoggedIn()) {
+if (! $user->isLoggedIn()) {
     Redirect::to(URL::build('/forum'));
+
     die();
 }
 
 // Initialise
-require_once(ROOT_PATH . '/modules/Forum/classes/Forum.php');
+require_once (ROOT_PATH . '/modules/Forum/classes/Forum.php');
 $forum = new Forum();
 $mentionsParser = new MentionsParser();
 
-require(ROOT_PATH . '/core/includes/markdown/tohtml/Markdown.inc.php'); // Markdown to HTML
+require (ROOT_PATH . '/core/includes/markdown/tohtml/Markdown.inc.php'); // Markdown to HTML
 
-if (isset($_GET['pid']) && isset($_GET['tid'])) {
+if (isset($_GET['pid'], $_GET['tid'])) {
     if (is_numeric($_GET['pid']) && is_numeric($_GET['tid'])) {
         $post_id = $_GET['pid'];
         $topic_id = $_GET['tid'];
     } else {
         Redirect::to(URL::build('/forum/error/', 'error=not_exist'));
+
         die();
     }
 } else {
     Redirect::to(URL::build('/forum/error/', 'error=not_exist'));
+
     die();
 }
 
-/*
- *  Is the post the first in the topic? If so, allow the title to be edited.
- */
+// Is the post the first in the topic? If so, allow the title to be edited.
 
-$post_editing = $queries->orderWhere("posts", "topic_id = " . $topic_id, "id", "ASC LIMIT 1");
+$post_editing = $queries->orderWhere('posts', 'topic_id = ' . $topic_id, 'id', 'ASC LIMIT 1');
 
 // Check topic exists
-if (!count($post_editing)) {
+if (! count($post_editing)) {
     Redirect::to(URL::build('/forum/error/', 'error=not_exist'));
+
     die();
 }
 
 if ($post_editing[0]->id == $post_id) {
     $edit_title = true;
 
-    /*
-	 *  Get the title of the topic
-	 */
+    // Get the title of the topic
 
-    $post_title = $queries->getWhere("topics", array("id", "=", $topic_id));
-    $post_labels = $post_title[0]->labels ? explode(',', $post_title[0]->labels) : array();
+    $post_title = $queries->getWhere('topics', ['id', '=', $topic_id]);
+    $post_labels = $post_title[0]->labels ? explode(',', $post_title[0]->labels) : [];
     $post_title = Output::getClean($post_title[0]->topic_title);
 }
 
-/*
- *  Get the post we're editing
- */
+// Get the post we're editing
 
-$post_editing = $queries->getWhere("posts", array("id", "=", $post_id));
+$post_editing = $queries->getWhere('posts', ['id', '=', $post_id]);
 
 // Check post exists
-if (!count($post_editing)) {
+if (! count($post_editing)) {
     Redirect::to(URL::build('/forum/error/', 'error=not_exist'));
+
     die();
 }
 
@@ -90,13 +90,15 @@ $forum_id = $post_editing[0]->forum_id;
 $user_groups = $user->getAllGroupIds();
 
 // Check permissions before proceeding
-if ($user->data()->id === $post_editing[0]->post_creator && !$forum->canEditTopic($forum_id, $user_groups) && !$forum->canModerateForum($forum_id, $user_groups)) {
+if ($user->data()->id === $post_editing[0]->post_creator && ! $forum->canEditTopic($forum_id, $user_groups) && ! $forum->canModerateForum($forum_id, $user_groups)) {
     Redirect::to(URL::build('/forum/topic/' . $post_id));
+
     die();
 }
 
-if ($user->data()->id !== $post_editing[0]->post_creator && !($forum->canModerateForum($forum_id, $user_groups))) {
+if ($user->data()->id !== $post_editing[0]->post_creator && ! ($forum->canModerateForum($forum_id, $user_groups))) {
     Redirect::to(URL::build('/forum/topic/' . $post_id));
+
     die();
 }
 
@@ -106,20 +108,20 @@ if (Input::exists()) {
     if (Token::check()) {
         // Valid token, check input
         $validate = new Validate();
-        $validation = array(
-            'content' => array(
+        $validation = [
+            'content' => [
                 'required' => true,
                 'min' => 2,
                 'max' => 50000
-            )
-        );
+            ]
+        ];
         // Add title to validation if we need to
         if (isset($edit_title)) {
-            $validation['title'] = array(
+            $validation['title'] = [
                 'required' => true,
                 'min' => 2,
                 'max' => 64
-            );
+            ];
         }
 
         $validation = $validate->check($_POST, $validation);
@@ -137,27 +139,30 @@ if (Input::exists()) {
                 } else $content = Output::getClean(Input::get('content'));
 
                 // Update post content
-                $queries->update("posts", $post_id, array(
+                $queries->update('posts', $post_id, [
                     'post_content' => $content,
                     'last_edited' => date('U')
-                ));
+                ]);
 
                 Log::getInstance()->log(Log::Action('forums/post/edit'), $post_id);
 
                 if (isset($edit_title)) {
                     // Update title and labels
-                    $post_labels = array();
+                    $post_labels = [];
 
-                    if (isset($_POST['topic_label']) && !empty($_POST['topic_label']) && is_array($_POST['topic_label']) && count($_POST['topic_label'])) {
+                    if (isset($_POST['topic_label']) && ! empty($_POST['topic_label']) && is_array($_POST['topic_label']) && count($_POST['topic_label'])) {
                         foreach ($_POST['topic_label'] as $topic_label) {
-                            $label = $queries->getWhere('forums_topic_labels', array('id', '=', $topic_label));
+                            $label = $queries->getWhere('forums_topic_labels', ['id', '=', $topic_label]);
+
                             if (count($label)) {
                                 $lgroups = explode(',', $label[0]->gids);
 
                                 $hasperm = false;
+
                                 foreach ($user_groups as $group_id) {
                                     if (in_array($group_id, $lgroups)) {
                                         $hasperm = true;
+
                                         break;
                                     }
                                 }
@@ -167,10 +172,10 @@ if (Input::exists()) {
                         }
                     }
 
-                    $queries->update('topics', $topic_id, array(
+                    $queries->update('topics', $topic_id, [
                         'topic_title' => Output::getDecoded(Input::get('title')),
                         'labels' => implode(',', $post_labels)
-                    ));
+                    ]);
 
                     Log::getInstance()->log(Log::Action('forums/topic/edit'), Output::getDecoded(Input::get('title')));
                 }
@@ -178,40 +183,50 @@ if (Input::exists()) {
                 // Display success message and redirect
                 Session::flash('success_post', $forum_language->get('forum', 'post_edited_successfully'));
                 Redirect::to(URL::build('/forum/topic/' . $topic_id, 'pid=' . $post_id));
+
                 die();
             } catch (Exception $e) {
                 die($e->getMessage());
             }
         } else {
             // Error handling
-            $errors = array();
+            $errors = [];
 
             foreach ($validation->errors() as $item) {
                 if (strpos($item, 'is required') !== false) {
                     switch ($item) {
                         case (strpos($item, 'title') !== false):
                             $errors[] = $forum_language->get('forum', 'title_required');
+
                             break;
+
                         case (strpos($item, 'content') !== false):
                             $errors[] = $forum_language->get('forum', 'content_required');
+
                             break;
                     }
                 } else if (strpos($item, 'minimum') !== false) {
                     switch ($item) {
                         case (strpos($item, 'title') !== false):
                             $errors[] = $forum_language->get('forum', 'title_min_2');
+
                             break;
+
                         case (strpos($item, 'content') !== false):
                             $errors[] = $forum_language->get('forum', 'content_min_2');
+
                             break;
                     }
                 } else if (strpos($item, 'maximum') !== false) {
                     switch ($item) {
                         case (strpos($item, 'title') !== false):
                             $errors[] = $forum_language->get('forum', 'title_max_64');
+
                             break;
+
                         case (strpos($item, 'content') !== false):
                             $errors[] = $forum_language->get('forum', 'content_max_50000');
+
                             break;
                     }
                 }
@@ -219,28 +234,29 @@ if (Input::exists()) {
         }
     } else {
         // Bad token
-        $errors = array($language->get('general', 'invalid_token'));
+        $errors = [$language->get('general', 'invalid_token')];
     }
 }
 
 if (isset($errors))
-    $smarty->assign(array(
+    $smarty->assign([
         'ERROR_TITLE' => $language->get('general', 'error'),
         'ERRORS' => $errors
-    ));
+    ]);
 
 $smarty->assign('EDITING_POST', $forum_language->get('forum', 'edit_post'));
 
-if (isset($edit_title) && isset($post_labels)) {
+if (isset($edit_title, $post_labels)) {
     $smarty->assign('EDITING_TOPIC', true);
 
     $smarty->assign('TOPIC_TITLE', $post_title);
 
     // Topic labels
     $smarty->assign('LABELS_TEXT', $forum_language->get('forum', 'label'));
-    $labels = array();
+    $labels = [];
+
+    $forum_labels = $queries->getWhere('forums_topic_labels', ['id', '<>', 0]);
 
-    $forum_labels = $queries->getWhere('forums_topic_labels', array('id', '<>', 0));
     if (count($forum_labels)) {
         foreach ($forum_labels as $label) {
             $forum_ids = explode(',', $label->fids);
@@ -258,15 +274,16 @@ if (isset($edit_title) && isset($post_labels)) {
                 if ($perms == false) continue;
 
                 // Get label HTML
-                $label_html = $queries->getWhere('forums_labels', array('id', '=', $label->label));
-                if (!count($label_html)) continue;
-                else $label_html = str_replace('{x}', Output::getClean($label->name), $label_html[0]->html);
+                $label_html = $queries->getWhere('forums_labels', ['id', '=', $label->label]);
+
+                if (! count($label_html)) continue;
+                 $label_html = str_replace('{x}', Output::getClean($label->name), $label_html[0]->html);
 
-                $labels[] = array(
+                $labels[] = [
                     'id' => $label->id,
                     'active' => in_array($label->id, $post_labels),
                     'html' => $label_html
-                );
+                ];
             }
         }
     }
@@ -274,14 +291,14 @@ if (isset($edit_title) && isset($post_labels)) {
     $smarty->assign('LABELS', $labels);
 }
 
-$smarty->assign(array(
+$smarty->assign([
     'TOKEN' => Token::get(),
     'SUBMIT' => $language->get('general', 'submit'),
     'CANCEL' => $language->get('general', 'cancel'),
     'CANCEL_LINK' => URL::build('/forum/topic/' . $topic_id, 'pid=' . $post_id),
     'CONFIRM_CANCEL' => $language->get('general', 'confirm_cancel'),
     'CONTENT' => Output::getPurified(Output::getDecoded($post_editing[0]->post_content))
-));
+]);
 
 // Get post formatting type (HTML or Markdown)
 $cache->setCache('post_formatting');
@@ -292,16 +309,16 @@ if ($formatting == 'markdown') {
     $smarty->assign('MARKDOWN', true);
     $smarty->assign('MARKDOWN_HELP', $language->get('general', 'markdown_help'));
 
-    require(ROOT_PATH . '/core/includes/markdown/tomarkdown/autoload.php');
-    $converter = new League\HTMLToMarkdown\HtmlConverter(array('strip_tags' => true));
+    require (ROOT_PATH . '/core/includes/markdown/tomarkdown/autoload.php');
+    $converter = new League\HTMLToMarkdown\HtmlConverter(['strip_tags' => true]);
 
     $clean = $converter->convert(Output::getDecoded($post_editing[0]->post_content));
     $clean = Output::getPurified($clean);
 
-    $template->addJSFiles(array(
-        (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/emoji/js/emojione.min.js' => array(),
-        (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/emojionearea/js/emojionearea.min.js' => array()
-    ));
+    $template->addJSFiles([
+        (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/emoji/js/emojione.min.js' => [],
+        (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/emojionearea/js/emojionearea.min.js' => []
+    ]);
 
     $template->addJSScript('
 	  $(document).ready(function() {
@@ -309,32 +326,33 @@ if ($formatting == 'markdown') {
 			pickerPosition: "bottom"
 		});
 
-		el[0].emojioneArea.setText(\'' . str_replace(array("'", "&gt;", "&amp;"), array("&#39;", ">", "&"), str_replace(array("\r", "\n"), array("\\r", "\\n"), $clean)) . '\');
+		el[0].emojioneArea.setText(\'' . str_replace(["'", '&gt;', '&amp;'], ['&#39;', '>', '&'], str_replace(["\r", "\n"], ['\\r', '\\n'], $clean)) . '\');
  	 });
 	');
 } else {
     $clean = Output::getDecoded($post_editing[0]->post_content);
     $clean = Output::getPurified($clean);
 
-    $template->addJSFiles(array(
-        (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/prism/prism.js' => array(),
-        (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/tinymce/plugins/spoiler/js/spoiler.js' => array(),
-        (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/tinymce/tinymce.min.js' => array()
-    ));
+    $template->addJSFiles([
+        (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/prism/prism.js' => [],
+        (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/tinymce/plugins/spoiler/js/spoiler.js' => [],
+        (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/tinymce/tinymce.min.js' => []
+    ]);
 
     $template->addJSScript(Input::createTinyEditor($language, 'editor'));
 }
 
 // Load modules + template
-Module::loadPage($user, $pages, $cache, $smarty, array($navigation, $cc_nav, $mod_nav), $widgets, $template);
+Module::loadPage($user, $pages, $cache, $smarty, [$navigation, $cc_nav, $mod_nav], $widgets, $template);
 
 $page_load = microtime(true) - $start;
 define('PAGE_LOAD_TIME', str_replace('{x}', round($page_load, 3), $language->get('general', 'page_loaded_in')));
 
 $template->onPageLoad();
 
-require(ROOT_PATH . '/core/templates/navbar.php');
-require(ROOT_PATH . '/core/templates/footer.php');
+require (ROOT_PATH . '/core/templates/navbar.php');
+
+require (ROOT_PATH . '/core/templates/footer.php');
 
 // Display template
 $template->displayTemplate('forum/forum_edit_post.tpl', $smarty);
diff --git a/modules/Forum/pages/forum/get_quotes.php b/modules/Forum/pages/forum/get_quotes.php
index ba6e0a6101dc0fe856cc3a5d4bb82940d69dfe12..3a7c9f1cc48e531378e49e038d2a6ca4bf665454 100644
--- a/modules/Forum/pages/forum/get_quotes.php
+++ b/modules/Forum/pages/forum/get_quotes.php
@@ -9,11 +9,11 @@
  *  Get a list of quotes
  */
 
-if (!$user->isLoggedIn()) {
-    die(json_encode(array('error' => 'Not logged in')));
+if (! $user->isLoggedIn()) {
+    die(json_encode(['error' => 'Not logged in']));
 }
 
-require_once(ROOT_PATH . '/modules/Forum/classes/Forum.php');
+require_once (ROOT_PATH . '/modules/Forum/classes/Forum.php');
 
 // Always define page name
 define('PAGE', 'forum');
@@ -22,8 +22,8 @@ define('PAGE', 'forum');
 $forum = new Forum();
 
 // Get the post data
-if (!isset($_POST) || empty($_POST)) {
-    die(json_encode(array('error' => 'No post data')));
+if (! isset($_POST) || empty($_POST)) {
+    die(json_encode(['error' => 'No post data']));
 }
 
 // Markdown?
@@ -32,17 +32,17 @@ $formatting = $cache->retrieve('formatting');
 
 if ($formatting == 'markdown') {
     // Markdown
-    require(ROOT_PATH . '/core/includes/markdown/tomarkdown/autoload.php');
-    $converter = new League\HTMLToMarkdown\HtmlConverter(array('strip_tags' => true));
+    require (ROOT_PATH . '/core/includes/markdown/tomarkdown/autoload.php');
+    $converter = new League\HTMLToMarkdown\HtmlConverter(['strip_tags' => true]);
 }
 
-$posts = array();
+$posts = [];
 
 foreach ($_POST['posts'] as $item) {
     $post = $forum->getIndividualPost($item);
 
     $content = htmlspecialchars_decode($post['content']);
-    $content = preg_replace("~<blockquote(.*?)>(.*)</blockquote>~si", "", $content);
+    $content = preg_replace('~<blockquote(.*?)>(.*)</blockquote>~si', '', $content);
 
     if ($formatting == 'markdown') {
         $content = $converter->convert($content);
@@ -50,14 +50,13 @@ foreach ($_POST['posts'] as $item) {
 
     if ($post['topic_id'] == $_POST['topic']) {
         $post_author = new User($post['creator']);
-        $posts[] = array(
+        $posts[] = [
             'content' => Output::getPurified($content),
             'author_username' => $post_author->getDisplayname(),
             'author_nickname' => $post_author->getDisplayname(true),
             'link' => URL::build('/forum/topic/' . $post['topic_id'], 'pid=' . htmlspecialchars($item))
-        );
+        ];
     }
 }
 
-
 die(json_encode($posts));
diff --git a/modules/Forum/pages/forum/index.php b/modules/Forum/pages/forum/index.php
index 9498d78d41f3b33835c0f3962aa1a4caced8a822..264905a5e6d2132d9251014c44043fbd20c8a86c 100644
--- a/modules/Forum/pages/forum/index.php
+++ b/modules/Forum/pages/forum/index.php
@@ -9,12 +9,13 @@
  *  Forum index page
  */
 
-require_once(ROOT_PATH . '/modules/Forum/classes/Forum.php');
+require_once (ROOT_PATH . '/modules/Forum/classes/Forum.php');
 
 // Always define page name
 define('PAGE', 'forum');
 $page_title = $forum_language->get('forum', 'forum');
-require_once(ROOT_PATH . '/core/templates/frontend_init.php');
+
+require_once (ROOT_PATH . '/core/templates/frontend_init.php');
 
 // Initialise
 $forum = new Forum();
@@ -27,11 +28,11 @@ $groups = $user->getAllGroupIds();
 $smarty->assign('BREADCRUMB_URL', URL::build('/forum'));
 $smarty->assign('BREADCRUMB_TEXT', $forum_language->get('forum', 'forum_index'));
 // Search bar
-$smarty->assign(array(
+$smarty->assign([
     'SEARCH_URL' => URL::build('/forum/search'),
     'SEARCH' => $language->get('general', 'search'),
     'TOKEN' => Token::get()
-));
+]);
 
 // Server status module
 if (isset($status_enabled->value) && $status_enabled->value == 'true') {
@@ -76,6 +77,7 @@ if ($cache->isCached('forums')) {
     if (count($forums)) {
         foreach ($forums as $key => $item) {
             $forums[$key]['link'] = URL::build('/forum/view/' . $key . '-' . $forum->titleToURL($forums[$key]['title']));
+
             if (isset($item['subforums']) && count($item['subforums'])) {
                 foreach ($item['subforums'] as $subforum_id => $subforum) {
                     if (isset($subforum->last_post)) {
@@ -100,7 +102,7 @@ if ($cache->isCached('forums')) {
                 }
             }
         }
-    } else $forums = array();
+    } else $forums = [];
 
     $cache->store('forums', $forums, 60);
 }
@@ -113,7 +115,7 @@ $smarty->assign('SUBFORUMS', $forum_language->get('forum', 'subforums'));
 $smarty->assign('FORUM_INDEX_LINK', URL::build('/forum'));
 
 // Load modules + template
-Module::loadPage($user, $pages, $cache, $smarty, array($navigation, $cc_nav, $mod_nav), $widgets, $template);
+Module::loadPage($user, $pages, $cache, $smarty, [$navigation, $cc_nav, $mod_nav], $widgets, $template);
 
 $page_load = microtime(true) - $start;
 define('PAGE_LOAD_TIME', str_replace('{x}', round($page_load, 3), $language->get('general', 'page_loaded_in')));
@@ -123,8 +125,9 @@ $template->onPageLoad();
 $smarty->assign('WIDGETS_LEFT', $widgets->getWidgets('left'));
 $smarty->assign('WIDGETS_RIGHT', $widgets->getWidgets('right'));
 
-require(ROOT_PATH . '/core/templates/navbar.php');
-require(ROOT_PATH . '/core/templates/footer.php');
+require (ROOT_PATH . '/core/templates/navbar.php');
+
+require (ROOT_PATH . '/core/templates/footer.php');
 
 // Display template
 $template->displayTemplate('forum/forum_index.tpl', $smarty);
diff --git a/modules/Forum/pages/forum/lock.php b/modules/Forum/pages/forum/lock.php
index c08c4de01c067083fb03ccf57a7e79da4b6f8306..2649137c0a65d9a09cde4905166bae3af1a3179a 100644
--- a/modules/Forum/pages/forum/lock.php
+++ b/modules/Forum/pages/forum/lock.php
@@ -9,22 +9,23 @@
  *  Lock/unlock a topic
  */
 
-require_once(ROOT_PATH . '/modules/Forum/classes/Forum.php');
+require_once (ROOT_PATH . '/modules/Forum/classes/Forum.php');
 $forum = new Forum();
 
 if ($user->isLoggedIn()) {
-    if (!isset($_GET["tid"]) || !is_numeric($_GET["tid"])) {
+    if (! isset($_GET['tid']) || ! is_numeric($_GET['tid'])) {
         Redirect::to(URL::build('/forum/error/', 'error=not_exist'));
+
         die();
-    } else {
-        $topic_id = $_GET["tid"];
     }
-
+        $topic_id = $_GET['tid'];
+    
     // Check topic exists and get forum ID
-    $topic = $queries->getWhere('topics', array('id', '=', $topic_id));
+    $topic = $queries->getWhere('topics', ['id', '=', $topic_id]);
 
-    if (!count($topic)) {
+    if (! count($topic)) {
         Redirect::to(URL::build('/forum/error/', 'error=not_exist'));
+
         die();
     }
 
@@ -40,21 +41,24 @@ if ($user->isLoggedIn()) {
         }
 
         try {
-            $queries->update('topics', $topic_id, array(
+            $queries->update('topics', $topic_id, [
                 'locked' => $locked_status
-            ));
+            ]);
             Log::getInstance()->log(Log::Action('forums/topic/lock'), ($locked_status == 1) ? $language->get('log', 'info_forums_lock') : $language->get('log', 'info_forums_unlock'));
 
             Redirect::to(URL::build('/forum/topic/' . $topic_id));
+
             die();
         } catch (Exception $e) {
             die($e->getMessage());
         }
     } else {
-        Redirect::to(URL::build("/forum"));
+        Redirect::to(URL::build('/forum'));
+
         die();
     }
 } else {
-    Redirect::to(URL::build("/forum"));
+    Redirect::to(URL::build('/forum'));
+
     die();
 }
diff --git a/modules/Forum/pages/forum/merge.php b/modules/Forum/pages/forum/merge.php
index 702cb0dcaad7c8b52f25fac0e8288bcb64ccbb43..f0f396831734afbe99c2a41bf7cea343f0784e28 100644
--- a/modules/Forum/pages/forum/merge.php
+++ b/modules/Forum/pages/forum/merge.php
@@ -11,63 +11,68 @@
 
 define('PAGE', 'forum');
 $page_title = $forum_language->get('forum', 'merge_topics');
-require_once(ROOT_PATH . '/core/templates/frontend_init.php');
 
-require_once(ROOT_PATH . '/modules/Forum/classes/Forum.php');
+require_once (ROOT_PATH . '/core/templates/frontend_init.php');
+
+require_once (ROOT_PATH . '/modules/Forum/classes/Forum.php');
 $forum = new Forum();
 
 // User must be logged in to proceed
-if (!$user->isLoggedIn()) {
+if (! $user->isLoggedIn()) {
     Redirect::to('/forum');
+
     die();
 }
 
-
-if (!isset($_GET["tid"]) || !is_numeric($_GET["tid"])) {
+if (! isset($_GET['tid']) || ! is_numeric($_GET['tid'])) {
     Redirect::to(URL::build('/forum/error/', 'error=not_exist'));
+
     die();
-} else {
-    $topic_id = $_GET["tid"];
-    $forum_id = $queries->getWhere('topics', array('id', '=', $topic_id));
-    $forum_id = $forum_id[0]->forum_id;
 }
+    $topic_id = $_GET['tid'];
+    $forum_id = $queries->getWhere('topics', ['id', '=', $topic_id]);
+    $forum_id = $forum_id[0]->forum_id;
 
 if ($forum->canModerateForum($forum_id, $user->getAllGroupIds())) {
     if (Input::exists()) {
         if (Token::check()) {
             $validate = new Validate();
-            $validation = $validate->check($_POST, array(
-                'merge' => array(
+            $validation = $validate->check($_POST, [
+                'merge' => [
                     'required' => true
-                )
-            ));
-            $posts_to_move = $queries->getWhere('posts', array('topic_id', '=', $topic_id));
+                ]
+            ]);
+            $posts_to_move = $queries->getWhere('posts', ['topic_id', '=', $topic_id]);
+
             if ($validation->passed()) {
                 try {
                     foreach ($posts_to_move as $post_to_move) {
-                        $queries->update('posts', $post_to_move->id, array(
+                        $queries->update('posts', $post_to_move->id, [
                             'topic_id' => Input::get('merge')
-                        ));
+                        ]);
                     }
-                    $queries->delete('topics', array('id', '=', $topic_id));
+                    $queries->delete('topics', ['id', '=', $topic_id]);
                     Log::getInstance()->log(Log::Action('forums/merge'));
                     // Update latest posts in categories
                     $forum->updateForumLatestPosts();
                     $forum->updateTopicLatestPosts();
 
                     Redirect::to(URL::build('/forum/topic/' . Input::get('merge')));
+
                     die();
                 } catch (Exception $e) {
                     die($e->getMessage());
                 }
             } else {
                 echo 'Error processing that action. <a href="' . URL::build('/forum') . '">Forum index</a>';
+
                 die();
             }
         }
     }
 } else {
-    Redirect::to(URL::build("/forum"));
+    Redirect::to(URL::build('/forum'));
+
     die();
 }
 
@@ -77,7 +82,7 @@ $token = Token::get();
 $topics = $queries->orderWhere('topics', 'forum_id = ' . $forum_id . ' AND deleted = 0 AND id <> ' . $topic_id, 'id', 'ASC');
 
 // Smarty
-$smarty->assign(array(
+$smarty->assign([
     'MERGE_TOPICS' => $forum_language->get('forum', 'merge_topics'),
     'MERGE_INSTRUCTIONS' => $forum_language->get('forum', 'merge_instructions'),
     'TOKEN' => Token::get(),
@@ -86,18 +91,19 @@ $smarty->assign(array(
     'CONFIRM_CANCEL' => $language->get('general', 'confirm_cancel'),
     'CANCEL_LINK' => URL::build('/forum/topic/' . $topic_id),
     'TOPICS' => $topics
-));
+]);
 
 // Load modules + template
-Module::loadPage($user, $pages, $cache, $smarty, array($navigation, $cc_nav, $mod_nav), $widgets, $template);
+Module::loadPage($user, $pages, $cache, $smarty, [$navigation, $cc_nav, $mod_nav], $widgets, $template);
 
 $page_load = microtime(true) - $start;
 define('PAGE_LOAD_TIME', str_replace('{x}', round($page_load, 3), $language->get('general', 'page_loaded_in')));
 
 $template->onPageLoad();
 
-require(ROOT_PATH . '/core/templates/navbar.php');
-require(ROOT_PATH . '/core/templates/footer.php');
+require (ROOT_PATH . '/core/templates/navbar.php');
+
+require (ROOT_PATH . '/core/templates/footer.php');
 
 // Display template
 $template->displayTemplate('forum/merge.tpl', $smarty);
diff --git a/modules/Forum/pages/forum/move.php b/modules/Forum/pages/forum/move.php
index 87ce502b9fc101cacef2cdd5cbb607e2f31f1df3..a334ea4dcd195266739b73b6d2171c2639382574 100644
--- a/modules/Forum/pages/forum/move.php
+++ b/modules/Forum/pages/forum/move.php
@@ -11,52 +11,59 @@
 
 define('PAGE', 'forum');
 $page_title = $forum_language->get('forum', 'move_topic');
-require_once(ROOT_PATH . '/core/templates/frontend_init.php');
 
-require_once(ROOT_PATH . '/modules/Forum/classes/Forum.php');
+require_once (ROOT_PATH . '/core/templates/frontend_init.php');
+
+require_once (ROOT_PATH . '/modules/Forum/classes/Forum.php');
 $forum = new Forum();
 
-if (!isset($_GET["tid"]) || !is_numeric($_GET["tid"])) {
+if (! isset($_GET['tid']) || ! is_numeric($_GET['tid'])) {
     Redirect::to(URL::build('/forum/error/', 'error=not_exist'));
+
     die();
-} else {
-    $topic_id = $_GET["tid"];
-    $topic = $queries->getWhere('topics', array('id', '=', $topic_id));
-    if (!count($topic)) {
+}
+    $topic_id = $_GET['tid'];
+    $topic = $queries->getWhere('topics', ['id', '=', $topic_id]);
+
+    if (! count($topic)) {
         Redirect::to(URL::build('/forum/error/', 'error=not_exist'));
+
         die();
     }
     $forum_id = $topic[0]->forum_id;
     $topic = $topic[0];
-}
 
 if ($forum->canModerateForum($forum_id, $user->getAllGroupIds())) {
     if (Input::exists()) {
         if (Token::check()) {
             $validate = new Validate();
-            $validation = $validate->check($_POST, array(
-                'forum' => array(
+            $validation = $validate->check($_POST, [
+                'forum' => [
                     'required' => true
-                )
-            ));
+                ]
+            ]);
 
             // Ensure forum we're moving to exists
-            $forum_moving_to = $queries->getWhere('forums', array('id', '=', Input::get('forum')));
-            if (!count($forum_moving_to)) {
+            $forum_moving_to = $queries->getWhere('forums', ['id', '=', Input::get('forum')]);
+
+            if (! count($forum_moving_to)) {
                 Redirect::to(URL::build('/forum'));
+
                 die();
             }
 
-            $posts_to_move = $queries->getWhere('posts', array('topic_id', '=', $topic_id));
+            $posts_to_move = $queries->getWhere('posts', ['topic_id', '=', $topic_id]);
+
             if ($validation->passed()) {
                 try {
-                    $queries->update('topics', $topic->id, array(
+                    $queries->update('topics', $topic->id, [
                         'forum_id' => Input::get('forum')
-                    ));
+                    ]);
+
                     foreach ($posts_to_move as $post_to_move) {
-                        $queries->update('posts', $post_to_move->id, array(
+                        $queries->update('posts', $post_to_move->id, [
                             'forum_id' => Input::get('forum')
-                        ));
+                        ]);
                     }
 
                     //TODO: Topic name & and Forums name
@@ -67,31 +74,36 @@ if ($forum->canModerateForum($forum_id, $user->getAllGroupIds())) {
                     $forum->updateTopicLatestPosts();
 
                     Redirect::to(URL::build('/forum/topic/' . $topic_id));
+
                     die();
                 } catch (Exception $e) {
                     die($e->getMessage());
                 }
             } else {
                 echo 'Error processing that action. <a href="' . URL::build('/forum') . '">Forum index</a>';
+
                 die();
             }
         }
     }
 } else {
-    Redirect::to(URL::build("/forum"));
+    Redirect::to(URL::build('/forum'));
+
     die();
 }
 
 // Generate navbar and footer
-require(ROOT_PATH . '/core/templates/navbar.php');
-require(ROOT_PATH . '/core/templates/footer.php');
+require (ROOT_PATH . '/core/templates/navbar.php');
+
+require (ROOT_PATH . '/core/templates/footer.php');
 
 // Get a list of all forums
-$template_forums = array();
+$template_forums = [];
 
 $categories = $queries->orderWhere('forums', 'parent = 0', 'forum_order', 'ASC');
+
 foreach ($categories as $category) {
-    if (!$forum->forumExist($category->id, $user->getAllGroupIds())) continue;
+    if (! $forum->forumExist($category->id, $user->getAllGroupIds())) continue;
 
     $to_add = new stdClass();
     $to_add->id = Output::getClean($category->id);
@@ -99,13 +111,13 @@ foreach ($categories as $category) {
     $to_add->category = true;
     $template_forums[] = $to_add;
 
-
-    $forums = DB::getInstance()->query('SELECT * FROM nl2_forums WHERE parent = ? ORDER BY forum_order ASC', array($category->id));
+    $forums = DB::getInstance()->query('SELECT * FROM nl2_forums WHERE parent = ? ORDER BY forum_order ASC', [$category->id]);
 
     if ($forums->count()) {
         $forums = $forums->results();
+
         foreach ($forums as $item) {
-            if (!$forum->forumExist($item->id, $user->getAllGroupIds())) continue;
+            if (! $forum->forumExist($item->id, $user->getAllGroupIds())) continue;
 
             if ($item->id !== $forum_id) {
                 $to_add = new stdClass();
@@ -128,7 +140,7 @@ foreach ($categories as $category) {
 }
 
 // Assign Smarty variables
-$smarty->assign(array(
+$smarty->assign([
     'MOVE_TOPIC' => $forum_language->get('forum', 'move_topic'),
     'MOVE_TO' => $forum_language->get('forum', 'move_topic_to'),
     'TOKEN' => Token::get(),
@@ -137,18 +149,19 @@ $smarty->assign(array(
     'CONFIRM_CANCEL' => $language->get('general', 'confirm_cancel'),
     'CANCEL_LINK' => URL::build('/forum/topic/' . $topic->id),
     'FORUMS' => $template_forums
-));
+]);
 
 // Load modules + template
-Module::loadPage($user, $pages, $cache, $smarty, array($navigation, $cc_nav, $mod_nav), $widgets, $template);
+Module::loadPage($user, $pages, $cache, $smarty, [$navigation, $cc_nav, $mod_nav], $widgets, $template);
 
 $page_load = microtime(true) - $start;
 define('PAGE_LOAD_TIME', str_replace('{x}', round($page_load, 3), $language->get('general', 'page_loaded_in')));
 
 $template->onPageLoad();
 
-require(ROOT_PATH . '/core/templates/navbar.php');
-require(ROOT_PATH . '/core/templates/footer.php');
+require (ROOT_PATH . '/core/templates/navbar.php');
+
+require (ROOT_PATH . '/core/templates/footer.php');
 
 // Display template
 $template->displayTemplate('forum/move.tpl', $smarty);
diff --git a/modules/Forum/pages/forum/new_topic.php b/modules/Forum/pages/forum/new_topic.php
index b16b80e6eeab094c0dbca6c42db6a0cd986dad9e..e336a25cdd9ca9687d14c349927101ccbf5acebe 100644
--- a/modules/Forum/pages/forum/new_topic.php
+++ b/modules/Forum/pages/forum/new_topic.php
@@ -12,22 +12,25 @@
 // Always define page name
 define('PAGE', 'forum');
 $page_title = $forum_language->get('forum', 'new_topic');
-require_once(ROOT_PATH . '/core/templates/frontend_init.php');
+
+require_once (ROOT_PATH . '/core/templates/frontend_init.php');
 
 // User must be logged in to proceed
-if (!$user->isLoggedIn()) {
+if (! $user->isLoggedIn()) {
     Redirect::to(URL::build('/forum'));
+
     die();
 }
 
-require_once(ROOT_PATH . '/modules/Forum/classes/Forum.php');
+require_once (ROOT_PATH . '/modules/Forum/classes/Forum.php');
 $forum = new Forum();
 $mentionsParser = new MentionsParser();
 
-require(ROOT_PATH . '/core/includes/markdown/tohtml/Markdown.inc.php'); // Markdown to HTML
+require (ROOT_PATH . '/core/includes/markdown/tohtml/Markdown.inc.php'); // Markdown to HTML
 
-if (!isset($_GET['fid']) || !is_numeric($_GET['fid'])) {
+if (! isset($_GET['fid']) || ! is_numeric($_GET['fid'])) {
     Redirect::to(URL::build('/forum/error/', 'error=not_exist'));
+
     die();
 }
 
@@ -38,28 +41,33 @@ $user_groups = $user->getAllGroupIds();
 
 // Does the forum exist, and can the user view it?
 $list = $forum->forumExist($fid, $user_groups);
-if (!$list) {
+
+if (! $list) {
     Redirect::to(URL::build('/forum/error/', 'error=not_exist'));
+
     die();
 }
 
 // Can the user post a topic in this forum?
 $can_reply = $forum->canPostTopic($fid, $user_groups);
-if (!$can_reply) {
+
+if (! $can_reply) {
     Redirect::to(URL::build('/forum/view/' . $fid));
+
     die();
 }
 
-$current_forum = DB::getInstance()->query('SELECT * FROM nl2_forums WHERE id = ?', array($fid))->first();
+$current_forum = DB::getInstance()->query('SELECT * FROM nl2_forums WHERE id = ?', [$fid])->first();
 $forum_title = Output::getClean(Output::getDecoded($current_forum->forum_title));
 
 // Topic labels
 $smarty->assign('LABELS_TEXT', $forum_language->get('forum', 'label'));
-$labels = array();
+$labels = [];
+
+$default_labels = $current_forum->default_labels ? explode(',', $current_forum->default_labels) : [];
 
-$default_labels = $current_forum->default_labels ? explode(',', $current_forum->default_labels) : array();
+$forum_labels = $queries->getWhere('forums_topic_labels', ['id', '<>', 0]);
 
-$forum_labels = $queries->getWhere('forums_topic_labels', array('id', '<>', 0));
 if (count($forum_labels)) {
     foreach ($forum_labels as $label) {
         $forum_ids = explode(',', $label->fids);
@@ -69,26 +77,29 @@ if (count($forum_labels)) {
             $lgroups = explode(',', $label->gids);
 
             $hasperm = false;
+
             foreach ($user_groups as $group_id) {
                 if (in_array($group_id, $lgroups)) {
                     $hasperm = true;
+
                     break;
                 }
             }
 
-            if (!$hasperm)
+            if (! $hasperm)
                 continue;
 
             // Get label HTML
-            $label_html = $queries->getWhere('forums_labels', array('id', '=', $label->label));
-            if (!count($label_html)) continue;
-            else $label_html = str_replace('{x}', Output::getClean($label->name), $label_html[0]->html);
+            $label_html = $queries->getWhere('forums_labels', ['id', '=', $label->label]);
 
-            $labels[] = array(
+            if (! count($label_html)) continue;
+             $label_html = str_replace('{x}', Output::getClean($label->name), $label_html[0]->html);
+
+            $labels[] = [
                 'id' => $label->id,
                 'html' => $label_html,
                 'checked' => in_array($label->id, $default_labels)
-            );
+            ];
         }
     }
 }
@@ -98,41 +109,46 @@ if (Input::exists()) {
     if (Token::check()) {
         // Check post limits
         $last_post = $queries->orderWhere('posts', 'post_creator = ' . $user->data()->id, 'post_date', 'DESC LIMIT 1');
+
         if (count($last_post)) {
-            if ($last_post[0]->created > strtotime("-30 seconds")) {
+            if ($last_post[0]->created > strtotime('-30 seconds')) {
                 $spam_check = true;
             }
         }
 
-        if (!isset($spam_check)) {
+        if (! isset($spam_check)) {
             // Spam check passed
             $validate = new Validate();
-            $validation = $validate->check($_POST, array(
-                'title' => array(
+            $validation = $validate->check($_POST, [
+                'title' => [
                     'required' => true,
                     'min' => 2,
                     'max' => 64
-                ),
-                'content' => array(
+                ],
+                'content' => [
                     'required' => true,
                     'min' => 2,
                     'max' => 50000
-                )
-            ));
+                ]
+            ]);
+
             if ($validation->passed()) {
                 try {
-                    $post_labels = array();
+                    $post_labels = [];
 
-                    if (isset($_POST['topic_label']) && !empty($_POST['topic_label']) && is_array($_POST['topic_label']) && count($_POST['topic_label'])) {
+                    if (isset($_POST['topic_label']) && ! empty($_POST['topic_label']) && is_array($_POST['topic_label']) && count($_POST['topic_label'])) {
                         foreach ($_POST['topic_label'] as $topic_label) {
-                            $label = $queries->getWhere('forums_topic_labels', array('id', '=', $topic_label));
+                            $label = $queries->getWhere('forums_topic_labels', ['id', '=', $topic_label]);
+
                             if (count($label)) {
                                 $lgroups = explode(',', $label[0]->gids);
 
                                 $hasperm = false;
+
                                 foreach ($user_groups as $group_id) {
                                     if (in_array($group_id, $lgroups)) {
                                         $hasperm = true;
+
                                         break;
                                     }
                                 }
@@ -144,7 +160,7 @@ if (Input::exists()) {
                         $post_labels = $default_labels;
                     }
 
-                    $queries->create("topics", array(
+                    $queries->create('topics', [
                         'forum_id' => $fid,
                         'topic_title' => Input::get('title'),
                         'topic_creator' => $user->data()->id,
@@ -152,7 +168,7 @@ if (Input::exists()) {
                         'topic_date' => date('U'),
                         'topic_reply_date' => date('U'),
                         'labels' => implode(',', $post_labels)
-                    ));
+                    ]);
                     $topic_id = $queries->getLastId();
 
                     // Parse markdown
@@ -164,107 +180,119 @@ if (Input::exists()) {
                         $content = Output::getClean($content);
                     } else $content = Output::getClean(Input::get('content'));
 
-                    $queries->create("posts", array(
+                    $queries->create('posts', [
                         'forum_id' => $fid,
                         'topic_id' => $topic_id,
                         'post_creator' => $user->data()->id,
                         'post_content' => $content,
                         'post_date' => date('Y-m-d H:i:s'),
                         'created' => date('U')
-                    ));
+                    ]);
 
                     // Get last post ID
                     $last_post_id = $queries->getLastId();
-                    $content = $mentionsParser->parse($user->data()->id, $content, URL::build('/forum/topic/' . $topic_id, 'pid=' . $last_post_id), array('path' => ROOT_PATH . '/modules/Forum/language', 'file' => 'forum', 'term' => 'user_tag'), array('path' => ROOT_PATH . '/modules/Forum/language', 'file' => 'forum', 'term' => 'user_tag_info', 'replace' => '{x}', 'replace_with' => Output::getClean($user->data()->nickname)));
+                    $content = $mentionsParser->parse($user->data()->id, $content, URL::build('/forum/topic/' . $topic_id, 'pid=' . $last_post_id), ['path' => ROOT_PATH . '/modules/Forum/language', 'file' => 'forum', 'term' => 'user_tag'], ['path' => ROOT_PATH . '/modules/Forum/language', 'file' => 'forum', 'term' => 'user_tag_info', 'replace' => '{x}', 'replace_with' => Output::getClean($user->data()->nickname)]);
 
-                    $queries->update("posts", $last_post_id, array(
+                    $queries->update('posts', $last_post_id, [
                         'post_content' => $content
-                    ));
+                    ]);
 
-                    $queries->update("forums", $fid, array(
+                    $queries->update('forums', $fid, [
                         'last_post_date' => date('U'),
                         'last_user_posted' => $user->data()->id,
                         'last_topic_posted' => $topic_id
-                    ));
+                    ]);
 
                     Log::getInstance()->log(Log::Action('forums/topic/create'), Output::getClean(Input::get('title')));
 
                     // Execute hooks and pass $available_hooks
-                    $available_hooks = $queries->getWhere('forums', array('id', '=', $fid));
+                    $available_hooks = $queries->getWhere('forums', ['id', '=', $fid]);
                     $available_hooks = json_decode($available_hooks[0]->hooks);
+
                     if ($available_hooks != null) {
-                        HookHandler::executeEvent('newTopic', array(
+                        HookHandler::executeEvent('newTopic', [
                             'event' => 'newTopic',
                             'uuid' => Output::getClean($user->data()->uuid),
                             'username' => $user->getDisplayname(true),
                             'nickname' => $user->getDisplayname(),
-                            'content' => str_replace(array('{x}', '{y}'), array($forum_title, $user->getDisplayname()), $forum_language->get('forum', 'new_topic_text')),
-                            'content_full' => strip_tags(str_ireplace(array('<br />', '<br>', '<br/>'), "\r\n", Input::get('content'))),
+                            'content' => str_replace(['{x}', '{y}'], [$forum_title, $user->getDisplayname()], $forum_language->get('forum', 'new_topic_text')),
+                            'content_full' => strip_tags(str_ireplace(['<br />', '<br>', '<br/>'], "\r\n", Input::get('content'))),
                             'avatar_url' => $user->getAvatar(null, 128, true),
                             'title' => Input::get('title'),
                             'url' => Util::getSelfURL() . ltrim(URL::build('/forum/topic/' . $topic_id . '-' . $forum->titleToURL(Input::get('title'))), '/'),
                             'available_hooks' => $available_hooks
-                        ));
+                        ]);
                     }
 
                     Session::flash('success_post', $forum_language->get('forum', 'post_successful'));
 
                     Redirect::to(URL::build('/forum/topic/' . $topic_id . '-' . $forum->titleToURL(Input::get('title'))));
+
                     die();
                 } catch (Exception $e) {
                     die($e->getMessage());
                 }
             } else {
-                $error = array();
+                $error = [];
+
                 foreach ($validation->errors() as $item) {
                     if (strpos($item, 'is required') !== false) {
                         switch ($item) {
                             case (strpos($item, 'title') !== false):
                                 $error[] = $forum_language->get('forum', 'title_required');
+
                                 break;
+
                             case (strpos($item, 'content') !== false):
                                 $error[] = $forum_language->get('forum', 'content_required');
+
                                 break;
                         }
                     } else if (strpos($item, 'minimum') !== false) {
                         switch ($item) {
                             case (strpos($item, 'title') !== false):
                                 $error[] = $forum_language->get('forum', 'title_min_2');
+
                                 break;
+
                             case (strpos($item, 'content') !== false):
                                 $error[] = $forum_language->get('forum', 'content_min_2');
+
                                 break;
                         }
                     } else if (strpos($item, 'maximum') !== false) {
                         switch ($item) {
                             case (strpos($item, 'title') !== false):
                                 $error[] = $forum_language->get('forum', 'title_max_64');
+
                                 break;
+
                             case (strpos($item, 'content') !== false):
                                 $error[] = $forum_language->get('forum', 'content_max_50000');
+
                                 break;
                         }
                     }
                 }
             }
         } else {
-            $error = array(str_replace('{x}', (strtotime($last_post[0]->post_date) - strtotime("-30 seconds")), $forum_language->get('forum', 'spam_wait')));
+            $error = [str_replace('{x}', (strtotime($last_post[0]->post_date) - strtotime('-30 seconds')), $forum_language->get('forum', 'spam_wait'))];
         }
     } else {
-        $error = array($language->get('general', 'invalid_token'));
+        $error = [$language->get('general', 'invalid_token')];
     }
 }
 
 // Generate a token
 $token = Token::get();
 
-$template->addCSSFiles(array(
-    (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/prism/prism.css' => array(),
-    (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/tinymce/plugins/spoiler/css/spoiler.css' => array(),
-    (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/emoji/css/emojione.min.css' => array(),
-    (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/emoji/css/emojione.sprites.css' => array(),
-    (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/emojionearea/css/emojionearea.min.css' => array(),
-));
+$template->addCSSFiles([
+    (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/prism/prism.css' => [],
+    (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/tinymce/plugins/spoiler/css/spoiler.css' => [],
+    (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/emoji/css/emojione.min.css' => [],
+    (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/emoji/css/emojione.sprites.css' => [],
+    (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/emojionearea/css/emojionearea.min.css' => [],
+]);
 
 // Generate content for template
 if (isset($error)) {
@@ -275,7 +303,7 @@ $creating_topic_in = str_replace('{x}', $forum_title, $forum_language->get('foru
 $smarty->assign('CREATING_TOPIC_IN', $creating_topic_in);
 
 // Get info about forum
-$forum_query = $queries->getWhere('forums', array('id', '=', $fid));
+$forum_query = $queries->getWhere('forums', ['id', '=', $fid]);
 $forum_query = $forum_query[0];
 
 // Placeholder?
@@ -284,7 +312,7 @@ if ($forum_query->topic_placeholder) {
 }
 
 // Smarty variables
-$smarty->assign(array(
+$smarty->assign([
     'LABELS' => $labels,
     'TOPIC_TITLE' => $forum_language->get('forum', 'topic_title'),
     'LABEL' => $forum_language->get('forum', 'label'),
@@ -300,7 +328,7 @@ $smarty->assign(array(
     'FORUM_TITLE' => Output::getClean($forum_title),
     'FORUM_DESCRIPTION' => Output::getPurified($forum_query->forum_description),
     'NEWS_FORUM' => $forum_query->news
-));
+]);
 
 // Get post formatting type (HTML or Markdown)
 $cache->setCache('post_formatting');
@@ -311,10 +339,10 @@ if ($formatting == 'markdown') {
     $smarty->assign('MARKDOWN', true);
     $smarty->assign('MARKDOWN_HELP', $language->get('general', 'markdown_help'));
 
-    $template->addJSFiles(array(
-        (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/emoji/js/emojione.min.js' => array(),
-        (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/emojionearea/js/emojionearea.min.js' => array()
-    ));
+    $template->addJSFiles([
+        (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/emoji/js/emojione.min.js' => [],
+        (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/emojionearea/js/emojionearea.min.js' => []
+    ]);
 
     $template->addJSScript('
 	  $(document).ready(function() {
@@ -324,25 +352,26 @@ if ($formatting == 'markdown') {
 	  });
 	');
 } else {
-    $template->addJSFiles(array(
-        (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/prism/prism.js' => array(),
-        (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/tinymce/plugins/spoiler/js/spoiler.js' => array(),
-        (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/tinymce/tinymce.min.js' => array()
-    ));
+    $template->addJSFiles([
+        (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/prism/prism.js' => [],
+        (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/tinymce/plugins/spoiler/js/spoiler.js' => [],
+        (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/tinymce/tinymce.min.js' => []
+    ]);
 
     $template->addJSScript(Input::createTinyEditor($language, 'reply'));
 }
 
 // Load modules + template
-Module::loadPage($user, $pages, $cache, $smarty, array($navigation, $cc_nav, $mod_nav), $widgets, $template);
+Module::loadPage($user, $pages, $cache, $smarty, [$navigation, $cc_nav, $mod_nav], $widgets, $template);
 
 $page_load = microtime(true) - $start;
 define('PAGE_LOAD_TIME', str_replace('{x}', round($page_load, 3), $language->get('general', 'page_loaded_in')));
 
 $template->onPageLoad();
 
-require(ROOT_PATH . '/core/templates/navbar.php');
-require(ROOT_PATH . '/core/templates/footer.php');
+require (ROOT_PATH . '/core/templates/navbar.php');
+
+require (ROOT_PATH . '/core/templates/footer.php');
 
 // Display template
 $template->displayTemplate('forum/new_topic.tpl', $smarty);
diff --git a/modules/Forum/pages/forum/reactions.php b/modules/Forum/pages/forum/reactions.php
index ff451444a3df293c6191c942504b6f14021a5d15..68a3975d973619a94380706ea786d77087e237d3 100644
--- a/modules/Forum/pages/forum/reactions.php
+++ b/modules/Forum/pages/forum/reactions.php
@@ -9,35 +9,40 @@
  *  React to a post
  */
 
-require_once(ROOT_PATH . '/modules/Forum/classes/Forum.php');
+require_once (ROOT_PATH . '/modules/Forum/classes/Forum.php');
 $forum = new Forum();
 
 // User must be logged in to proceed
-if (!$user->isLoggedIn()) {
+if (! $user->isLoggedIn()) {
     Redirect::to(URL::build('/forum'));
+
     die();
 }
 
 // Are reactions enabled?
-$reactions_enabled = $queries->getWhere('settings', array('name', '=', 'forum_reactions'));
+$reactions_enabled = $queries->getWhere('settings', ['name', '=', 'forum_reactions']);
+
 if ($reactions_enabled[0]->value != '1') {
     Redirect::to(URL::build('/forum'));
+
     die();
 }
 
 // Deal with input
 if (Input::exists()) {
     // Validate form input
-    if (!isset($_POST['post']) || !is_numeric($_POST['post']) || !isset($_POST['reaction']) || !is_numeric($_POST['reaction'])) {
+    if (! isset($_POST['post']) || ! is_numeric($_POST['post']) || ! isset($_POST['reaction']) || ! is_numeric($_POST['reaction'])) {
         Redirect::to(URL::build('/forum'));
+
         die();
     }
 
     // Get post information
-    $post = $queries->getWhere('posts', array('id', '=', $_POST['post']));
+    $post = $queries->getWhere('posts', ['id', '=', $_POST['post']]);
 
-    if (!count($post)) {
+    if (! count($post)) {
         Redirect::to(URL::build('/forum'));
+
         die();
     }
 
@@ -45,56 +50,60 @@ if (Input::exists()) {
     $topic_id = $post->topic_id;
 
     // Check user can actually view the post
-    if (!($forum->forumExist($post->forum_id, $user->getAllGroupIds()))) {
+    if (! ($forum->forumExist($post->forum_id, $user->getAllGroupIds()))) {
         Redirect::to(URL::build('/forum/error/', 'error=not_exist'));
+
         die();
     }
 
     if (Token::check()) {
         // Check if the user has already reacted to this post
-        $user_reacted = $queries->getWhere('forums_reactions', array('post_id', '=', $post->id));
+        $user_reacted = $queries->getWhere('forums_reactions', ['post_id', '=', $post->id]);
+
         if (count($user_reacted)) {
             foreach ($user_reacted as $reaction) {
                 if ($reaction->user_given == $user->data()->id) {
                     if ($reaction->reaction_id == $_POST['reaction']) {
                         // Undo reaction
-                        $queries->delete('forums_reactions', array('id', '=', $reaction->id));
+                        $queries->delete('forums_reactions', ['id', '=', $reaction->id]);
                     } else {
                         // Change reaction
-                        $queries->update('forums_reactions', $reaction->id, array(
+                        $queries->update('forums_reactions', $reaction->id, [
                             'reaction_id' => $_POST['reaction'],
                             'time' => date('U')
-                        ));
+                        ]);
                     }
 
                     $changed = true;
+
                     break;
                 }
             }
         }
 
-        if (!isset($changed)) {
+        if (! isset($changed)) {
             // Input new reaction
-            $queries->create('forums_reactions', array(
+            $queries->create('forums_reactions', [
                 'post_id' => $post->id,
                 'user_received' => $post->post_creator,
                 'user_given' => $user->data()->id,
                 'reaction_id' => $_POST['reaction'],
                 'time' => date('U')
-            ));
+            ]);
 
             Log::getInstance()->log(Log::Action('forums/react'), $_POST['reaction']);
         }
 
         // Redirect
         Redirect::to(URL::build('/forum/topic/' . $topic_id, 'pid=' . $post->id));
+
         die();
-    } else {
+    }
         // Invalid token
         Redirect::to(URL::build('/forum/topic/' . $topic_id, 'pid=' . $post->id));
+
         die();
-    }
-} else {
+}
     Redirect::to(URL::build('/forum'));
+
     die();
-}
diff --git a/modules/Forum/pages/forum/redirect.php b/modules/Forum/pages/forum/redirect.php
index ecd747f2614243f56e2f473dd9260eb200aad6a8..8c531a5a88a3c942b2a68874f2575f62a044c933 100644
--- a/modules/Forum/pages/forum/redirect.php
+++ b/modules/Forum/pages/forum/redirect.php
@@ -27,5 +27,6 @@ if (strpos($route, 'view_forum') !== false) {
     $url = URL::build('/forum');
 }
 
-header("Location: " . $url, TRUE, 301);
+header('Location: ' . $url, true, 301);
+
 die();
diff --git a/modules/Forum/pages/forum/report.php b/modules/Forum/pages/forum/report.php
index f1070b9bc67b5d547b4f052a65af3dd71e18dab7..708fda3bb68d46f3235e8bc1c66d9030ff6f6420 100644
--- a/modules/Forum/pages/forum/report.php
+++ b/modules/Forum/pages/forum/report.php
@@ -9,12 +9,13 @@
  *  Report a post
  */
 
-if (!$user->isLoggedIn()) {
+if (! $user->isLoggedIn()) {
     Redirect::to(URL::build('/forum'));
+
     die();
 }
 
-require_once(ROOT_PATH . '/modules/Forum/classes/Forum.php');
+require_once (ROOT_PATH . '/modules/Forum/classes/Forum.php');
 
 // Always define page name
 define('PAGE', 'forum');
@@ -23,15 +24,18 @@ define('PAGE', 'forum');
 $forum = new Forum();
 
 // Get the post
-if (!isset($_POST['post']) || !is_numeric($_POST['post'])) {
+if (! isset($_POST['post']) || ! is_numeric($_POST['post'])) {
     Redirect::to(URL::build('/forum'));
+
     die();
 }
 
-$post = $queries->getWhere('posts', array('id', '=', $_POST['post']));
-if (!count($post)) {
+$post = $queries->getWhere('posts', ['id', '=', $_POST['post']]);
+
+if (! count($post)) {
     // Doesn't exist
     Redirect::to(URL::build('/forum'));
+
     die();
 }
 $post = $post[0];
@@ -40,7 +44,7 @@ $post = $post[0];
 if (Token::check()) {
     // Valid token
     // Ensure user hasn't already submitted a report for this post
-    $reports = $queries->getWhere('reports', array('reported_post', '=', $_POST['post']));
+    $reports = $queries->getWhere('reports', ['reported_post', '=', $_POST['post']]);
 
     if (count($reports)) {
         foreach ($reports as $report) {
@@ -48,6 +52,7 @@ if (Token::check()) {
                 // User already has an open report
                 Session::flash('failure_post', $forum_language->get('forum', 'post_already_reported'));
                 Redirect::to(URL::build('/forum/topic/' . Output::getClean($_POST['topic'])));
+
                 die();
             }
         }
@@ -55,20 +60,20 @@ if (Token::check()) {
 
     $validate = new Validate();
 
-    $validation = $validate->check($_POST, array(
-        'reason' => array(
+    $validation = $validate->check($_POST, [
+        'reason' => [
             'required' => true,
             'min' => 2,
             'max' => 1024
-        )
-    ));
+        ]
+    ]);
 
     if ($validation->passed()) {
         try {
             $report = new Report();
 
             // Create report
-            $report->create(array(
+            $report->create([
                 'type' => 0,
                 'reporter_id' => $user->data()->id,
                 'reported_id' => $post->post_creator,
@@ -80,27 +85,29 @@ if (Token::check()) {
                 'updated_by' => $user->data()->id,
                 'reported_post' => $post->id,
                 'link' => URL::build('/forum/topic/' . Output::getClean($_POST['topic']), 'pid=' . Output::getClean($_POST['post']))
-            ));
+            ]);
             Log::getInstance()->log(Log::Action('misc/report'), $post->post_creator);
         } catch (Exception $e) {
             // Exception creating report
             Session::flash('failure_post', $e->getMessage());
             Redirect::to(URL::build('/forum/topic/' . Output::getClean($_POST['topic'])));
+
             die();
         }
 
         Session::flash('success_post', $language->get('user', 'report_created'));
         Redirect::to(URL::build('/forum/topic/' . Output::getClean($_POST['topic'])));
+
         die();
-    } else {
+    }
         // Invalid report content
         Session::flash('failure_post', $language->get('user', 'invalid_report_content'));
         Redirect::to(URL::build('/forum/topic/' . Output::getClean($_POST['topic'])));
+
         die();
-    }
-} else {
+}
     // Invalid token
     Session::flash('failure_post', $language->get('general', 'invalid_token'));
     Redirect::to(URL::build('/forum/topic/' . Output::getClean($_POST['topic'])));
+
     die();
-}
diff --git a/modules/Forum/pages/forum/search.php b/modules/Forum/pages/forum/search.php
index a4e1c87b0c0bdc8f32ba79d2cf2d1f9e88556559..95b5a8e7ea48907f59b22813e06a2d35b0bcbb82 100644
--- a/modules/Forum/pages/forum/search.php
+++ b/modules/Forum/pages/forum/search.php
@@ -9,11 +9,12 @@
  *  Forum search page
  */
 
-require_once(ROOT_PATH . '/modules/Forum/classes/Forum.php');
-if (!isset($forum) || (isset($forum) && !$forum instanceof Forum))
+require_once (ROOT_PATH . '/modules/Forum/classes/Forum.php');
+
+if (! isset($forum) || (isset($forum) && ! $forum instanceof Forum))
     $forum = new Forum();
 
-require_once(ROOT_PATH . '/core/includes/emojione/autoload.php'); // Emojione
+require_once (ROOT_PATH . '/core/includes/emojione/autoload.php'); // Emojione
 
 define('PAGE', 'forum');
 
@@ -24,101 +25,110 @@ $emojione = new Emojione\Client(new Emojione\Ruleset());
 // Get user group ID
 $user_groups = $user->getAllGroupIds();
 
-if (!isset($_GET['s'])) {
+if (! isset($_GET['s'])) {
     if (Input::exists()) {
         if (Token::check()) {
             $validate = new Validate();
-            $validation = $validate->check($_POST, array(
-                'forum_search' => array(
+            $validation = $validate->check($_POST, [
+                'forum_search' => [
                     'required' => true,
                     'min' => 3,
                     'max' => 128
-                )
-            ));
+                ]
+            ]);
 
             if ($validation->passed()) {
                 $search = str_replace(' ', '+', htmlspecialchars(Input::get('forum_search')));
-                $search = preg_replace("/[^a-zA-Z0-9 +]+/", "", $search); // alphanumeric only
+                $search = preg_replace('/[^a-zA-Z0-9 +]+/', '', $search); // alphanumeric only
 
                 Redirect::to(URL::build('/forum/search/', 's=' . $search . '&p=1'));
+
                 die();
-            } else
+            }
                 $error = $forum_language->get('forum', 'invalid_search_query');
-        } else
-            $error = $language->get('general', 'invalid_token');
+        } else $error = $language->get('general', 'invalid_token');
     }
 } else {
     $search = htmlspecialchars(str_replace('+', ' ', $_GET['s']));
-    $search = preg_replace("/[^a-zA-Z0-9 +]+/", "", $search); // alphanumeric only
+    $search = preg_replace('/[^a-zA-Z0-9 +]+/', '', $search); // alphanumeric only
 
     if (isset($_GET['p']) && is_numeric($_GET['p']))
         $p = $_GET['p'];
-    else
-        $p = 1;
+    else $p = 1;
 
     if (isset($_SESSION['last_forum_search']) && $_SESSION['last_forum_search_query'] != $_GET['s'] && $_SESSION['last_forum_search'] > strtotime('-1 minute')) {
         Session::flash('search_error', str_replace('{x}', (60 - (date('U') - $_SESSION['last_forum_search'])), $forum_language->get('forum', 'search_again_in_x_seconds')));
         Redirect::to(URL::build('/forum/search'));
+
         die();
     }
 
     $cache->setCache($search . '-' . rtrim(implode('-', $user_groups), '-'));
-    if (!$cache->isCached('result')) {
+
+    if (! $cache->isCached('result')) {
         // Execute search
         $search_topics = $queries->getLike('topics', 'topic_title', '%' . $search . '%');
         $search_posts = $queries->getLike('posts', 'post_content', '%' . $search . '%');
 
-        $search_results = array_merge((array)$search_topics, (array)$search_posts);
+        $search_results = array_merge((array) $search_topics, (array) $search_posts);
+
+        $results = [];
 
-        $results = array();
         foreach ($search_results as $result) {
             // Check permissions
-            $perms = $queries->getWhere('forums_permissions', array('forum_id', '=', $result->forum_id));
+            $perms = $queries->getWhere('forums_permissions', ['forum_id', '=', $result->forum_id]);
+
             foreach ($perms as $perm) {
                 if (in_array($perm->group_id, $user_groups) && $perm->view == 1) {
                     if (isset($result->topic_id)) {
                         // Post
-                        if (!isset($results[$result->id]) && $result->deleted == 0) {
+                        if (! isset($results[$result->id]) && $result->deleted == 0) {
                             // Get associated topic
-                            $topic = $queries->getWhere('topics', array('id', '=', $result->topic_id));
+                            $topic = $queries->getWhere('topics', ['id', '=', $result->topic_id]);
+
                             if (count($topic) && $topic[0]->deleted === 0) {
                                 $topic = $topic[0];
-                                $results[$result->id] = array(
+                                $results[$result->id] = [
                                     'post_id' => $result->id,
                                     'topic_id' => $topic->id,
                                     'topic_title' => $topic->topic_title,
                                     'post_author' => $result->post_creator,
                                     'post_date' => $result->post_date,
                                     'post_content' => $result->post_content
-                                );
+                                ];
 
                                 break;
-                            } else
+                            }
+
                                 break;
-                        } else
+                        }
+
                             break;
-                    } else {
+                    }
                         // Topic, get associated post
                         $post = $queries->orderWhere('posts', 'topic_id = ' . $result->id, 'post_date', 'ASC LIMIT 1');
+
                         if (count($post)) {
                             $post = $post[0];
-                            if (!isset($results[$post->id]) && $post->deleted == 0) {
-                                $results[$post->id] = array(
+
+                            if (! isset($results[$post->id]) && $post->deleted == 0) {
+                                $results[$post->id] = [
                                     'post_id' => $post->id,
                                     'topic_id' => $result->id,
                                     'topic_title' => $result->topic_title,
                                     'post_author' => $post->post_creator,
                                     'post_date' => $post->post_date,
                                     'post_content' => $post->post_content
-                                );
+                                ];
 
                                 break;
-                            } else
+                            }
+
                                 break;
-                        } else
-                            break;
-                    }
+                        }
 
+                            break;
+                    
                     break;
                 }
             }
@@ -127,56 +137,57 @@ if (!isset($_GET['s'])) {
         $results = array_values($results);
         $cache->store('result', $results, 60);
 
-        if (!isset($_SESSION['last_forum_search_query']) || $_SESSION['last_forum_search_query'] != $_GET['s']) {
+        if (! isset($_SESSION['last_forum_search_query']) || $_SESSION['last_forum_search_query'] != $_GET['s']) {
             $_SESSION['last_forum_search'] = date('U');
             $_SESSION['last_forum_search_query'] = $_GET['s'];
         }
-    } else
-        $results = $cache->retrieve('result');
+    } else $results = $cache->retrieve('result');
 
     $input = true;
 }
 
-if (!isset($_GET['s']))
+if (! isset($_GET['s']))
     $page_title = $forum_language->get('forum', 'forum_search');
 else {
     $page_title = $forum_language->get('forum', 'forum_search') . ' - ' . Output::getClean(substr($search, 0, 20)) . ' - ' . str_replace('{x}', $p, $language->get('general', 'page_x'));
 }
-require_once(ROOT_PATH . '/core/templates/frontend_init.php');
 
-$template->addCSSFiles(array(
-    (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/prism/prism.css' => array(),
-    (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/tinymce/plugins/spoiler/css/spoiler.css' => array(),
-    (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/emoji/css/emojione.min.css' => array(),
-    (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/emojionearea/css/emojionearea.min.css' => array()
-));
+require_once (ROOT_PATH . '/core/templates/frontend_init.php');
+
+$template->addCSSFiles([
+    (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/prism/prism.css' => [],
+    (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/tinymce/plugins/spoiler/css/spoiler.css' => [],
+    (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/emoji/css/emojione.min.css' => [],
+    (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/emojionearea/css/emojionearea.min.css' => []
+]);
 
-$template->addJSFiles(array(
-    (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/prism/prism.js' => array(),
-    (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/tinymce/plugins/spoiler/js/spoiler.js' => array(),
-    (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/tinymce/tinymce.min.js' => array()
-));
+$template->addJSFiles([
+    (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/prism/prism.js' => [],
+    (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/tinymce/plugins/spoiler/js/spoiler.js' => [],
+    (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/tinymce/tinymce.min.js' => []
+]);
 
 if (isset($_GET['s'])) {
     // Show results
     if (count($results)) {
-        $paginator = new Paginator((isset($template_pagination) ? $template_pagination : array()));
+        $paginator = new Paginator((isset($template_pagination) ? $template_pagination : []));
         $results = $paginator->getLimited($results, 10, $p, count($results));
         $pagination = $paginator->generate(7, URL::build('/forum/search/', 's=' . $search . '&'));
 
         $smarty->assign('PAGINATION', $pagination);
 
         // Posts to display on the page
-        $posts = array();
+        $posts = [];
         // Display the correct number of posts
         $n = 0;
+
         while (($n < count($results->data)) && isset($results->data[$n])) {
             $content = htmlspecialchars_decode($results->data[$n]['post_content']);
             $content = $emojione->unicodeToImage($content);
             $content = Output::getPurified($content);
 
             $post_user = new User($results->data[$n]['post_author']);
-            $posts[$n] = array(
+            $posts[$n] = [
                 'post_author' => $post_user->getDisplayname(),
                 'post_author_id' => Output::getClean($results->data[$n]['post_author']),
                 'post_author_avatar' => $post_user->getAvatar('../', 25),
@@ -187,36 +198,36 @@ if (isset($_GET['s'])) {
                 'content' => $content,
                 'topic_title' => Output::getClean($results->data[$n]['topic_title']),
                 'post_url' => URL::build('/forum/topic/' . $results->data[$n]['topic_id'] . '-' . $forum->titleToURL($results->data[$n]['topic_title']), 'pid=' . $results->data[$n]['post_id'])
-            );
+            ];
             $n++;
         }
 
         $results = null;
 
-        $smarty->assign(array(
+        $smarty->assign([
             'RESULTS' => $posts,
             'READ_FULL_POST' => $forum_language->get('forum', 'read_full_post')
-        ));
-    } else
-        $smarty->assign('NO_RESULTS', $forum_language->get('forum', 'no_results_found'));
+        ]);
+    } else $smarty->assign('NO_RESULTS', $forum_language->get('forum', 'no_results_found'));
 
-    $smarty->assign(array(
+    $smarty->assign([
         'SEARCH_RESULTS' => $forum_language->get('forum', 'search_results'),
         'NEW_SEARCH' => $forum_language->get('forum', 'new_search'),
         'NEW_SEARCH_URL' => URL::build('/forum/search'),
         'SEARCH_TERM' => (isset($_GET['s']) ? Output::getClean($_GET['s']) : '')
-    ));
+    ]);
 
     // Load modules + template
-    Module::loadPage($user, $pages, $cache, $smarty, array($navigation, $cc_nav, $mod_nav), $widgets, $template);
+    Module::loadPage($user, $pages, $cache, $smarty, [$navigation, $cc_nav, $mod_nav], $widgets, $template);
 
     $page_load = microtime(true) - $start;
     define('PAGE_LOAD_TIME', str_replace('{x}', round($page_load, 3), $language->get('general', 'page_loaded_in')));
 
     $template->onPageLoad();
 
-    require(ROOT_PATH . '/core/templates/navbar.php');
-    require(ROOT_PATH . '/core/templates/footer.php');
+    require (ROOT_PATH . '/core/templates/navbar.php');
+
+    require (ROOT_PATH . '/core/templates/footer.php');
 
     // Display template
     $template->displayTemplate('forum/search_results.tpl', $smarty);
@@ -227,25 +238,26 @@ if (isset($_GET['s'])) {
     else if (Session::exists('search_error'))
         $smarty->assign('ERROR', Session::flash('search_error'));
 
-    $smarty->assign(array(
+    $smarty->assign([
         'FORUM_SEARCH' => $forum_language->get('forum', 'forum_search'),
         'FORM_ACTION' => URL::build('/forum/search'),
         'SEARCH' => $language->get('general', 'search'),
         'TOKEN' => Token::get(),
         'SUBMIT' => $language->get('general', 'submit'),
         'ERROR_TITLE' => $language->get('general', 'error')
-    ));
+    ]);
 
     // Load modules + template
-    Module::loadPage($user, $pages, $cache, $smarty, array($navigation, $cc_nav, $mod_nav), $widgets, $template);
+    Module::loadPage($user, $pages, $cache, $smarty, [$navigation, $cc_nav, $mod_nav], $widgets, $template);
 
     $page_load = microtime(true) - $start;
     define('PAGE_LOAD_TIME', str_replace('{x}', round($page_load, 3), $language->get('general', 'page_loaded_in')));
 
     $template->onPageLoad();
 
-    require(ROOT_PATH . '/core/templates/navbar.php');
-    require(ROOT_PATH . '/core/templates/footer.php');
+    require (ROOT_PATH . '/core/templates/navbar.php');
+
+    require (ROOT_PATH . '/core/templates/footer.php');
 
     // Display template
     $template->displayTemplate('forum/search.tpl', $smarty);
diff --git a/modules/Forum/pages/forum/spam.php b/modules/Forum/pages/forum/spam.php
index d3954b303a81dc66411602dfcb2e736a427f353f..1097edb035fbde9ad2bdb29aefe42d86d4af341c 100644
--- a/modules/Forum/pages/forum/spam.php
+++ b/modules/Forum/pages/forum/spam.php
@@ -9,12 +9,13 @@
  *  Mark a post as spam
  */
 
-if (!$user->isLoggedIn()) {
+if (! $user->isLoggedIn()) {
     Redirect::to(URL::build('/forum'));
+
     die();
 }
 
-require_once(ROOT_PATH . '/modules/Forum/classes/Forum.php');
+require_once (ROOT_PATH . '/modules/Forum/classes/Forum.php');
 
 // Always define page name
 define('PAGE', 'forum');
@@ -23,15 +24,18 @@ define('PAGE', 'forum');
 $forum = new Forum();
 
 // Get the post
-if (!isset($_POST['post']) || !is_numeric($_POST['post'])) {
+if (! isset($_POST['post']) || ! is_numeric($_POST['post'])) {
     Redirect::to(URL::build('/forum'));
+
     die();
 }
 
-$post = $queries->getWhere('posts', array('id', '=', $_POST['post']));
-if (!count($post)) {
+$post = $queries->getWhere('posts', ['id', '=', $_POST['post']]);
+
+if (! count($post)) {
     // Doesn't exist
     Redirect::to(URL::build('/forum'));
+
     die();
 }
 $post = $post[0];
@@ -51,43 +55,45 @@ if ($forum->canModerateForum($post->forum_id, $user->getAllGroupIds())) {
         if ($is_admin) {
             Session::flash('failure_post', $language->get('moderator', 'cant_ban_admin'));
             Redirect::to(URL::build('/forum/topic/' . $post->topic_id, 'pid=' . $post->id));
+
             die();
         }
 
         // Delete all posts from the user
-        $queries->delete('posts', array('post_creator', '=', $post->post_creator));
+        $queries->delete('posts', ['post_creator', '=', $post->post_creator]);
 
         // Delete all topics from the user
-        $queries->delete('topics', array('topic_creator', '=', $post->post_creator));
+        $queries->delete('topics', ['topic_creator', '=', $post->post_creator]);
 
         // Log user out
         $banned_user_ip = $banned_user->data()->lastip;
         $banned_user->logout();
 
         // Ban IP
-        $queries->create('ip_bans', array(
+        $queries->create('ip_bans', [
             'ip' => $banned_user_ip,
             'banned_by' => $user->data()->id,
             'banned_at' => date('U'),
             'reason' => 'Spam'
-        ));
+        ]);
 
         // Ban user
-        $queries->update('users', $post->post_creator, array(
+        $queries->update('users', $post->post_creator, [
             'isbanned' => 1
-        ));
+        ]);
 
         // Redirect
         Session::flash('spam_info', $language->get('moderator', 'user_marked_as_spam'));
         Redirect::to(URL::build('/forum'));
+
         die();
-    } else {
+    }
         // Invalid token
         Redirect::to(URL::build('/forum/topic/' . $post->topic_id, 'pid=' . $post->id));
+
         die();
-    }
-} else {
+}
     // Can't moderate forum
     Redirect::to(URL::build('/forum'));
+
     die();
-}
diff --git a/modules/Forum/pages/forum/stick.php b/modules/Forum/pages/forum/stick.php
index 980f00429f91664e4be32e42e83ec1c739a34048..09e20d7f3f9dbece2b7c61c7dfcd6cbe43878823 100644
--- a/modules/Forum/pages/forum/stick.php
+++ b/modules/Forum/pages/forum/stick.php
@@ -9,33 +9,37 @@
  *  Stick/unstick a topic
  */
 
-require_once(ROOT_PATH . '/modules/Forum/classes/Forum.php');
+require_once (ROOT_PATH . '/modules/Forum/classes/Forum.php');
 $forum = new Forum();
 
 // User must be logged in to proceed
-if (!$user->isLoggedIn()) {
+if (! $user->isLoggedIn()) {
     Redirect::to(URL::build('/forum'));
+
     die();
 }
 
 // Ensure a topic is set via URL parameters
-if (isset($_GET["tid"])) {
-    if (is_numeric($_GET["tid"])) {
-        $topic_id = $_GET["tid"];
+if (isset($_GET['tid'])) {
+    if (is_numeric($_GET['tid'])) {
+        $topic_id = $_GET['tid'];
     } else {
         Redirect::to(URL::build('/forum/error/', 'error=not_exist'));
+
         die();
     }
 } else {
     Redirect::to(URL::build('/forum/error/', 'error=not_exist'));
+
     die();
 }
 
 // Check topic exists and get forum ID
-$topic = $queries->getWhere('topics', array('id', '=', $topic_id));
+$topic = $queries->getWhere('topics', ['id', '=', $topic_id]);
 
-if (!count($topic)) {
+if (! count($topic)) {
     Redirect::to(URL::build('/forum/error/', 'error=not_exist'));
+
     die();
 }
 
@@ -51,9 +55,9 @@ if ($forum->canModerateForum($forum_id, $user->getAllGroupIds())) {
         $status = $forum_language->get('forum', 'topic_unstuck');
     }
 
-    $queries->update("topics", $topic_id, array(
-        "sticky" => $sticky
-    ));
+    $queries->update('topics', $topic_id, [
+        'sticky' => $sticky
+    ]);
 
     Log::getInstance()->log(($sticky == 1) ? Log::Action('forums/topic/stick') : Log::Action('forums/topic/unstick'), $topic[0]->topic_title);
 
@@ -61,4 +65,5 @@ if ($forum->canModerateForum($forum_id, $user->getAllGroupIds())) {
 }
 
 Redirect::to(URL::build('/forum/topic/' . $topic_id));
+
 die();
diff --git a/modules/Forum/pages/forum/view_forum.php b/modules/Forum/pages/forum/view_forum.php
index 4105d36cf034f45b4183214a89b1b69b471c1fe9..0c772729d6c55d2c1dbbd3bab204152cea40cd69 100644
--- a/modules/Forum/pages/forum/view_forum.php
+++ b/modules/Forum/pages/forum/view_forum.php
@@ -12,7 +12,7 @@
 // Always define page name
 define('PAGE', 'forum');
 
-require_once(ROOT_PATH . '/modules/Forum/classes/Forum.php');
+require_once (ROOT_PATH . '/modules/Forum/classes/Forum.php');
 $forum = new Forum();
 $timeago = new Timeago(TIMEZONE);
 
@@ -20,14 +20,17 @@ $timeago = new Timeago(TIMEZONE);
 $fid = explode('/', $route);
 $fid = $fid[count($fid) - 1];
 
-if (!strlen($fid)) {
-    require_once(ROOT_PATH . '/404.php');
+if (! strlen($fid)) {
+    require_once (ROOT_PATH . '/404.php');
+
     die();
 }
 
 $fid = explode('-', $fid);
-if (!is_numeric($fid[0])) {
-    require_once(ROOT_PATH . '/404.php');
+
+if (! is_numeric($fid[0])) {
+    require_once (ROOT_PATH . '/404.php');
+
     die();
 }
 $fid = $fid[0];
@@ -37,59 +40,67 @@ $user_groups = $user->getAllGroupIds();
 
 // Does the forum exist, and can the user view it?
 $list = $forum->canViewForum($fid, $user_groups);
-if (!$list) {
-    require_once(ROOT_PATH . '/403.php');
+
+if (! $list) {
+    require_once (ROOT_PATH . '/403.php');
+
     die();
 }
 
 // Get data from the database
-$forum_query = $queries->getWhere('forums', array('id', '=', $fid));
+$forum_query = $queries->getWhere('forums', ['id', '=', $fid]);
 $forum_query = $forum_query[0];
 
 // Get page
 if (isset($_GET['p'])) {
-    if (!is_numeric($_GET['p'])) {
+    if (! is_numeric($_GET['p'])) {
         Redirect::to(URL::build('/forum'));
+
         die();
-    } else {
+    }
+
         if ($_GET['p'] == 1) {
             // Avoid bug in pagination class
-            Redirect::to(URL::build('/forum/view/' . $fid . '-' .  $forum->titleToURL($forum_query->forum_title)));
+            Redirect::to(URL::build('/forum/view/' . $fid . '-' . $forum->titleToURL($forum_query->forum_title)));
+
             die();
         }
         $p = $_GET['p'];
-    }
 } else {
     $p = 1;
 }
 
-$page_metadata = $queries->getWhere('page_descriptions', array('page', '=', '/forum/view'));
+$page_metadata = $queries->getWhere('page_descriptions', ['page', '=', '/forum/view']);
+
 if (count($page_metadata)) {
-    define('PAGE_DESCRIPTION', str_replace(array('{site}', '{forum_title}', '{page}', '{description}'), array(SITE_NAME, Output::getClean($forum_query->forum_title), Output::getClean($p), Output::getClean(strip_tags(Output::getDecoded($forum_query->forum_description)))), $page_metadata[0]->description));
+    define('PAGE_DESCRIPTION', str_replace(['{site}', '{forum_title}', '{page}', '{description}'], [SITE_NAME, Output::getClean($forum_query->forum_title), Output::getClean($p), Output::getClean(strip_tags(Output::getDecoded($forum_query->forum_description)))], $page_metadata[0]->description));
     define('PAGE_KEYWORDS', $page_metadata[0]->tags);
 }
 
 $page_title = $forum_language->get('forum', 'forum');
+
 if (isset($p)) $page_title .= ' - ' . str_replace('{x}', $p, $language->get('general', 'page_x'));
-require_once(ROOT_PATH . '/core/templates/frontend_init.php');
+
+require_once (ROOT_PATH . '/core/templates/frontend_init.php');
 
 // Redirect forum?
 if ($forum_query->redirect_forum == 1) {
-    if (!Util::isExternalURL($forum_query->redirect_url)) {
+    if (! Util::isExternalURL($forum_query->redirect_url)) {
         Redirect::to(Output::getClean(Output::getDecoded($forum_query->redirect_url)));
+
         die();
     }
 
-    $smarty->assign(array(
+    $smarty->assign([
         'CONFIRM_REDIRECT' => str_replace('{x}', $forum_query->redirect_url, $forum_language->get('forum', 'forum_redirect_warning')),
         'YES' => $language->get('general', 'yes'),
         'NO' => $language->get('general', 'no'),
         'REDIRECT_URL' => Output::getClean(htmlspecialchars_decode($forum_query->redirect_url)),
         'FORUM_INDEX' => URL::build('/forum')
-    ));
+    ]);
 
     // Load modules + template
-    Module::loadPage($user, $pages, $cache, $smarty, array($navigation, $cc_nav, $mod_nav), $widgets, $template);
+    Module::loadPage($user, $pages, $cache, $smarty, [$navigation, $cc_nav, $mod_nav], $widgets, $template);
 
     $page_load = microtime(true) - $start;
     define('PAGE_LOAD_TIME', str_replace('{x}', round($page_load, 3), $language->get('general', 'page_loaded_in')));
@@ -99,8 +110,9 @@ if ($forum_query->redirect_forum == 1) {
     $smarty->assign('WIDGETS_LEFT', $widgets->getWidgets('left'));
     $smarty->assign('WIDGETS_RIGHT', $widgets->getWidgets('right'));
 
-    require(ROOT_PATH . '/core/templates/navbar.php');
-    require(ROOT_PATH . '/core/templates/footer.php');
+    require (ROOT_PATH . '/core/templates/navbar.php');
+
+    require (ROOT_PATH . '/core/templates/footer.php');
 
     // Display template
     $template->displayTemplate('forum/view_forum_confirm_redirect.tpl', $smarty);
@@ -108,65 +120,66 @@ if ($forum_query->redirect_forum == 1) {
     // Get all topics
     if ($user->isLoggedIn())
         $user_id = $user->data()->id;
-    else
-        $user_id = 0;
+    else $user_id = 0;
 
     if ($forum->canViewOtherTopics($fid, $user_groups))
-        $topics = $queries->orderWhere("topics", "forum_id = " . $fid . " AND sticky = 0 AND deleted = 0", "topic_reply_date", "DESC");
-    else
-        $topics = $queries->orderWhere("topics", "forum_id = " . $fid . " AND sticky = 0 AND deleted = 0 AND topic_creator = " . $user_id, "topic_reply_date", "DESC");
+        $topics = $queries->orderWhere('topics', 'forum_id = ' . $fid . ' AND sticky = 0 AND deleted = 0', 'topic_reply_date', 'DESC');
+    else $topics = $queries->orderWhere('topics', 'forum_id = ' . $fid . ' AND sticky = 0 AND deleted = 0 AND topic_creator = ' . $user_id, 'topic_reply_date', 'DESC');
 
     // Get sticky topics
-    $stickies = $queries->orderWhere("topics", "forum_id = " . $fid . " AND sticky = 1 AND deleted = 0", "topic_reply_date", "DESC");
+    $stickies = $queries->orderWhere('topics', 'forum_id = ' . $fid . ' AND sticky = 1 AND deleted = 0', 'topic_reply_date', 'DESC');
 
     // Search bar
-    $smarty->assign(array(
+    $smarty->assign([
         'SEARCH_URL' => URL::build('/forum/search'),
         'SEARCH' => $language->get('general', 'search'),
         'TOKEN' => Token::get()
-    ));
+    ]);
 
     // Breadcrumbs and search bar - same for latest discussions view + table view
-    $parent_category = $queries->getWhere('forums', array('id', '=', $forum_query->parent));
-    $breadcrumbs = array(0 => array(
+    $parent_category = $queries->getWhere('forums', ['id', '=', $forum_query->parent]);
+    $breadcrumbs = [0 => [
         'id' => $forum_query->id,
         'forum_title' => Output::getClean($forum_query->forum_title),
         'active' => 1,
         'link' => URL::build('/forum/view/' . $forum_query->id . '-' . $forum->titleToURL($forum_query->forum_title))
-    ));
-    if (!empty($parent_category) && $parent_category[0]->parent == 0) {
+    ]];
+
+    if (! empty($parent_category) && $parent_category[0]->parent == 0) {
         // Category
-        $breadcrumbs[] = array(
+        $breadcrumbs[] = [
             'id' => $parent_category[0]->id,
             'forum_title' => Output::getClean($parent_category[0]->forum_title),
             'link' => URL::build('/forum/view/' . $parent_category[0]->id . '-' . $forum->titleToURL($parent_category[0]->forum_title))
-        );
-    } else if (!empty($parent_category)) {
+        ];
+    } else if (! empty($parent_category)) {
         // Parent forum, get its category
-        $breadcrumbs[] = array(
+        $breadcrumbs[] = [
             'id' => $parent_category[0]->id,
             'forum_title' => Output::getClean($parent_category[0]->forum_title),
             'link' => URL::build('/forum/view/' . $parent_category[0]->id . '-' . $forum->titleToURL($parent_category[0]->forum_title))
-        );
+        ];
         $parent = false;
+
         while ($parent == false) {
-            $parent_category = $queries->getWhere('forums', array('id', '=', $parent_category[0]->parent));
-            $breadcrumbs[] = array(
+            $parent_category = $queries->getWhere('forums', ['id', '=', $parent_category[0]->parent]);
+            $breadcrumbs[] = [
                 'id' => $parent_category[0]->id,
                 'forum_title' => Output::getClean($parent_category[0]->forum_title),
                 'link' => URL::build('/forum/view/' . $parent_category[0]->id . '-' . $forum->titleToURL($parent_category[0]->forum_title))
-            );
+            ];
+
             if ($parent_category[0]->parent == 0) {
                 $parent = true;
             }
         }
     }
 
-    $breadcrumbs[] = array(
+    $breadcrumbs[] = [
         'id' => 'index',
         'forum_title' => $forum_language->get('forum', 'forum_index'),
         'link' => URL::build('/forum')
-    );
+    ];
 
     $smarty->assign('BREADCRUMBS', array_reverse($breadcrumbs));
 
@@ -185,7 +198,7 @@ if ($forum_query->redirect_forum == 1) {
     // Any subforums?
     $subforums = $queries->orderWhere('forums', 'parent = ' . $forum_query->id, 'forum_order', 'ASC');
 
-    $subforum_array = array();
+    $subforum_array = [];
 
     if (count($subforums)) {
         // append subforums to string
@@ -194,21 +207,22 @@ if ($forum_query->redirect_forum == 1) {
             if ($forum->forumExist($subforum->id, $user_groups)) {
                 if ($forum->canViewOtherTopics($subforum->id, $user_groups))
                     $latest_post = $queries->orderWhere('topics', 'forum_id = ' . $subforum->id . ' AND deleted = 0', 'topic_reply_date', 'DESC');
-                else
-                    $latest_post = $queries->orderWhere('topics', 'forum_id = ' . $subforum->id . ' AND deleted = 0 AND topic_creator = ' . $user_id, 'topic_reply_date', 'DESC');
+                else $latest_post = $queries->orderWhere('topics', 'forum_id = ' . $subforum->id . ' AND deleted = 0 AND topic_creator = ' . $user_id, 'topic_reply_date', 'DESC');
 
                 $subforum_topics = count($latest_post);
+
                 if (count($latest_post)) {
                     foreach ($latest_post as $item) {
                         if ($item->deleted == 0) {
                             $latest_post = $item;
+
                             break;
                         }
                     }
 
                     $latest_post_user = new User($latest_post->topic_last_user);
                     $latest_post_link = URL::build('/forum/topic/' . $latest_post->id . '-' . $forum->titleToURL($latest_post->topic_title));
-                    $latest_post_avatar = $latest_post_user->getAvatar("../", 128);
+                    $latest_post_avatar = $latest_post_user->getAvatar('../', 128);
                     $latest_post_title = Output::getClean($latest_post->topic_title);
                     $latest_post_user_displayname = $latest_post_user->getDisplayname();
                     $latest_post_user_link = $latest_post_user->getProfileURL();
@@ -217,7 +231,7 @@ if ($forum_query->redirect_forum == 1) {
                     $latest_post_time = date('d M Y, H:i', $latest_post->topic_reply_date);
                     $latest_post_user_id = Output::getClean($latest_post->topic_last_user);
 
-                    $latest_post = array(
+                    $latest_post = [
                         'link' => $latest_post_link,
                         'title' => $latest_post_title,
                         'last_user_avatar' => $latest_post_avatar,
@@ -227,10 +241,10 @@ if ($forum_query->redirect_forum == 1) {
                         'timeago' => $latest_post_date_timeago,
                         'time' => $latest_post_time,
                         'last_user_id' => $latest_post_user_id
-                    );
-                } else $latest_post = array();
+                    ];
+                } else $latest_post = [];
 
-                $subforum_array[] = array(
+                $subforum_array[] = [
                     'id' => $subforum->id,
                     'title' => Output::getPurified(Output::getDecoded($subforum->forum_title)),
                     'description' => Output::getPurified(Output::getDecoded($subforum->forum_description)),
@@ -239,7 +253,7 @@ if ($forum_query->redirect_forum == 1) {
                     'latest_post' => $latest_post,
                     'icon' => Output::getDecoded($subforum->icon),
                     'redirect' => $subforum->redirect_forum
-                );
+                ];
             }
         }
     }
@@ -274,7 +288,7 @@ if ($forum_query->redirect_forum == 1) {
     $smarty->assign('NEW_TOPIC', $forum_language->get('forum', 'new_topic'));
 
     // Topics
-    if (!count($stickies) && !count($topics)) {
+    if (! count($stickies) && ! count($topics)) {
         // No topics yet
         $smarty->assign('NO_TOPICS_FULL', $forum_language->get('forum', 'no_topics'));
 
@@ -287,13 +301,13 @@ if ($forum_query->redirect_forum == 1) {
         $no_topics_exist = true;
     } else {
         // Topics/sticky topics exist
-        $labels_cache = array();
+        $labels_cache = [];
 
-        $sticky_array = array();
+        $sticky_array = [];
         // Assign sticky threads to smarty variable
         foreach ($stickies as $sticky) {
             // Get number of replies to a topic
-            $replies = $queries->getWhere('posts', array('topic_id', '=', $sticky->id));
+            $replies = $queries->getWhere('posts', ['topic_id', '=', $sticky->id]);
             $replies = count($replies);
 
             // Is there a label?
@@ -302,11 +316,13 @@ if ($forum_query->redirect_forum == 1) {
                 if ($labels_cache[$sticky->label]) {
                     $label = $labels_cache[$sticky->label];
                 } else {
-                    $label = $queries->getWhere('forums_topic_labels', array('id', '=', $sticky->label));
+                    $label = $queries->getWhere('forums_topic_labels', ['id', '=', $sticky->label]);
+
                     if (count($label)) {
                         $label = $label[0];
 
-                        $label_html = $queries->getWhere('forums_labels', array('id', '=', $label->label));
+                        $label_html = $queries->getWhere('forums_labels', ['id', '=', $label->label]);
+
                         if (count($label_html)) {
                             $label_html = $label_html[0]->html;
                             $label = str_replace('{x}', Output::getClean($label->name), $label_html);
@@ -319,7 +335,8 @@ if ($forum_query->redirect_forum == 1) {
                 $label = '';
             }
 
-            $labels = array();
+            $labels = [];
+
             if ($sticky->labels) {
                 $topic_labels = explode(',', $sticky->labels);
 
@@ -328,11 +345,13 @@ if ($forum_query->redirect_forum == 1) {
                     if ($labels_cache[$item]) {
                         $labels[] = $labels_cache[$item];
                     } else {
-                        $label_query = $queries->getWhere('forums_topic_labels', array('id', '=', $item));
+                        $label_query = $queries->getWhere('forums_topic_labels', ['id', '=', $item]);
+
                         if (count($label_query)) {
                             $label_query = $label_query[0];
 
-                            $label_html = $queries->getWhere('forums_labels', array('id', '=', $label_query->label));
+                            $label_html = $queries->getWhere('forums_labels', ['id', '=', $label_query->label]);
+
                             if (count($label_html)) {
                                 $label_html = $label_html[0]->html;
                                 $label_html = str_replace('{x}', Output::getClean($label_query->name), $label_html);
@@ -348,7 +367,7 @@ if ($forum_query->redirect_forum == 1) {
             $last_reply_user = new User($sticky->topic_last_user);
 
             // Add to array
-            $sticky_array[] = array(
+            $sticky_array[] = [
                 'topic_title' => Output::getClean($sticky->topic_title),
                 'topic_id' => $sticky->id,
                 'topic_created_rough' => $timeago->inWords(date('d M Y, H:i', $sticky->topic_date), $language->getTimeLanguage()),
@@ -360,7 +379,7 @@ if ($forum_query->redirect_forum == 1) {
                 'views' => $sticky->topic_views,
                 'locked' => $sticky->locked,
                 'posts' => $replies,
-                'last_reply_avatar' => $last_reply_user->getAvatar("../", 128),
+                'last_reply_avatar' => $last_reply_user->getAvatar('../', 128),
                 'last_reply_rough' => $timeago->inWords(date('d M Y, H:i', $sticky->topic_reply_date), $language->getTimeLanguage()),
                 'last_reply' => date('d M Y, H:i', $sticky->topic_reply_date),
                 'last_reply_username' => $last_reply_user->getDisplayname(),
@@ -372,7 +391,7 @@ if ($forum_query->redirect_forum == 1) {
                 'author_link' => $topic_user->getProfileURL(),
                 'link' => URL::build('/forum/topic/' . $sticky->id . '-' . $forum->titleToURL($sticky->topic_title)),
                 'last_reply_link' => $last_reply_user->getProfileURL()
-            );
+            ];
         }
         // Clear out variables
         $stickies = null;
@@ -380,20 +399,19 @@ if ($forum_query->redirect_forum == 1) {
 
         // Latest discussions
         // Pagination
-        $paginator = new Paginator((isset($template_pagination) ? $template_pagination : array()));
+        $paginator = new Paginator((isset($template_pagination) ? $template_pagination : []));
         $results = $paginator->getLimited($topics, 10, $p, count($topics));
         $pagination = $paginator->generate(7, URL::build('/forum/view/' . $fid . '-' . $forum->titleToURL($forum_query->forum_title), true));
 
         if (count($topics))
             $smarty->assign('PAGINATION', $pagination);
-        else
-            $smarty->assign('PAGINATION', '');
+        else $smarty->assign('PAGINATION', '');
 
-        $template_array = array();
+        $template_array = [];
         // Get a list of all topics from the forum, and paginate
         for ($n = 0; $n < count($results->data); $n++) {
             // Get number of replies to a topic
-            $replies = $queries->getWhere("posts", array("topic_id", "=", $results->data[$n]->id));
+            $replies = $queries->getWhere('posts', ['topic_id', '=', $results->data[$n]->id]);
             $replies = count($replies);
 
             // Is there a label?
@@ -402,11 +420,13 @@ if ($forum_query->redirect_forum == 1) {
                 if ($labels_cache[$results->data[$n]->label]) {
                     $label = $labels_cache[$results->data[$n]->label];
                 } else {
-                    $label = $queries->getWhere('forums_topic_labels', array('id', '=', $results->data[$n]->label));
+                    $label = $queries->getWhere('forums_topic_labels', ['id', '=', $results->data[$n]->label]);
+
                     if (count($label)) {
                         $label = $label[0];
 
-                        $label_html = $queries->getWhere('forums_labels', array('id', '=', $label->label));
+                        $label_html = $queries->getWhere('forums_labels', ['id', '=', $label->label]);
+
                         if (count($label_html)) {
                             $label_html = $label_html[0]->html;
                             $label = str_replace('{x}', Output::getClean($label->name), $label_html);
@@ -419,7 +439,8 @@ if ($forum_query->redirect_forum == 1) {
                 $label = '';
             }
 
-            $labels = array();
+            $labels = [];
+
             if ($results->data[$n]->labels) {
                 if ($labels_cache[$results->data[$n]->labels]) {
                     $labels[] = $labels_cache[$results->data[$n]->labels];
@@ -428,11 +449,13 @@ if ($forum_query->redirect_forum == 1) {
 
                     foreach ($topic_labels as $item) {
                         // Get label
-                        $label_query = $queries->getWhere('forums_topic_labels', array('id', '=', $item));
+                        $label_query = $queries->getWhere('forums_topic_labels', ['id', '=', $item]);
+
                         if (count($label_query)) {
                             $label_query = $label_query[0];
 
-                            $label_html = $queries->getWhere('forums_labels', array('id', '=', $label_query->label));
+                            $label_html = $queries->getWhere('forums_labels', ['id', '=', $label_query->label]);
+
                             if (count($label_html)) {
                                 $label_html = $label_html[0]->html;
                                 $label_html = str_replace('{x}', Output::getClean($label_query->name), $label_html);
@@ -448,7 +471,7 @@ if ($forum_query->redirect_forum == 1) {
             $last_reply_user = new User($results->data[$n]->topic_last_user);
 
             // Add to array
-            $template_array[] = array(
+            $template_array[] = [
                 'topic_title' => Output::getClean($results->data[$n]->topic_title),
                 'topic_id' => $results->data[$n]->id,
                 'topic_created_rough' => $timeago->inWords(date('d M Y, H:i', $results->data[$n]->topic_date), $language->getTimeLanguage()),
@@ -472,7 +495,7 @@ if ($forum_query->redirect_forum == 1) {
                 'link' => URL::build('/forum/topic/' . $results->data[$n]->id . '-' . $forum->titleToURL($results->data[$n]->topic_title)),
                 'last_reply_link' => $last_reply_user->getProfileURL(),
                 'last_reply_user_id' => Output::getClean($results->data[$n]->topic_last_user)
-            );
+            ];
         }
 
         // Assign to Smarty variable
@@ -481,7 +504,7 @@ if ($forum_query->redirect_forum == 1) {
     }
 
     // Load modules + template
-    Module::loadPage($user, $pages, $cache, $smarty, array($navigation, $cc_nav, $mod_nav), $widgets, $template);
+    Module::loadPage($user, $pages, $cache, $smarty, [$navigation, $cc_nav, $mod_nav], $widgets, $template);
 
     $page_load = microtime(true) - $start;
     define('PAGE_LOAD_TIME', str_replace('{x}', round($page_load, 3), $language->get('general', 'page_loaded_in')));
@@ -491,12 +514,12 @@ if ($forum_query->redirect_forum == 1) {
     $smarty->assign('WIDGETS_LEFT', $widgets->getWidgets('left'));
     $smarty->assign('WIDGETS_RIGHT', $widgets->getWidgets('right'));
 
-    require(ROOT_PATH . '/core/templates/navbar.php');
-    require(ROOT_PATH . '/core/templates/footer.php');
+    require (ROOT_PATH . '/core/templates/navbar.php');
+
+    require (ROOT_PATH . '/core/templates/footer.php');
 
     // Display template
     if (isset($no_topics_exist))
         $template->displayTemplate('forum/view_forum_no_discussions.tpl', $smarty);
-    else
-        $template->displayTemplate('forum/view_forum.tpl', $smarty);
+    else $template->displayTemplate('forum/view_forum.tpl', $smarty);
 }
diff --git a/modules/Forum/pages/forum/view_topic.php b/modules/Forum/pages/forum/view_topic.php
index b0806643b7c7155918fba1899e2f18dfc76c31c3..fb125b49760973501874f47e1deb6f7811d11a9e 100644
--- a/modules/Forum/pages/forum/view_topic.php
+++ b/modules/Forum/pages/forum/view_topic.php
@@ -9,7 +9,7 @@
  *  View topic page
  */
 
-require_once(ROOT_PATH . '/modules/Forum/classes/Forum.php');
+require_once (ROOT_PATH . '/modules/Forum/classes/Forum.php');
 
 // Set the page name for the active link in navbar
 define('PAGE', 'forum');
@@ -18,22 +18,26 @@ $forum = new Forum();
 $timeago = new Timeago(TIMEZONE);
 $mentionsParser = new MentionsParser();
 
-require(ROOT_PATH . '/core/includes/emojione/autoload.php'); // Emojione
-require(ROOT_PATH . '/core/includes/markdown/tohtml/Markdown.inc.php'); // Markdown to HTML
+require (ROOT_PATH . '/core/includes/emojione/autoload.php'); // Emojione
+
+require (ROOT_PATH . '/core/includes/markdown/tohtml/Markdown.inc.php'); // Markdown to HTML
 $emojione = new Emojione\Client(new Emojione\Ruleset());
 
 // Get topic ID
 $tid = explode('/', $route);
 $tid = $tid[count($tid) - 1];
 
-if (!strlen($tid)) {
-    require_once(ROOT_PATH . '/404.php');
+if (! strlen($tid)) {
+    require_once (ROOT_PATH . '/404.php');
+
     die();
 }
 
 $tid = explode('-', $tid);
-if (!is_numeric($tid[0])) {
-    require_once(ROOT_PATH . '/404.php');
+
+if (! is_numeric($tid[0])) {
+    require_once (ROOT_PATH . '/404.php');
+
     die();
 }
 $tid = $tid[0];
@@ -42,79 +46,92 @@ $tid = $tid[0];
 $user_groups = $user->getAllGroupIds();
 
 $list = $forum->topicExist($tid, $user_groups);
-if (!$list) {
-    require_once(ROOT_PATH . '/404.php');
+
+if (! $list) {
+    require_once (ROOT_PATH . '/404.php');
+
     die();
 }
 
 // Get the topic information
-$topic = $queries->getWhere('topics', array('id', '=', $tid));
+$topic = $queries->getWhere('topics', ['id', '=', $tid]);
 $topic = $topic[0];
 
 if ($topic->deleted == 1) {
-    require_once(ROOT_PATH . '/404.php');
+    require_once (ROOT_PATH . '/404.php');
+
     die();
 }
 
 $list = $forum->canViewForum($topic->forum_id, $user_groups);
-if (!$list) {
-    require_once(ROOT_PATH . '/403.php');
+
+if (! $list) {
+    require_once (ROOT_PATH . '/403.php');
+
     die();
 }
 
 if ($user->isLoggedIn())
     $user_id = $user->data()->id;
-else
-    $user_id = 0;
+else $user_id = 0;
 
-if ($topic->topic_creator != $user_id && !$forum->canViewOtherTopics($topic->forum_id, $user_groups)) {
+if ($topic->topic_creator != $user_id && ! $forum->canViewOtherTopics($topic->forum_id, $user_groups)) {
     // Only allow viewing stickied topics
     if ($topic->sticky == 0) {
-        require_once(ROOT_PATH . '/403.php');
+        require_once (ROOT_PATH . '/403.php');
+
         die();
     }
 }
 
 // Get page
 if (isset($_GET['p'])) {
-    if (!is_numeric($_GET['p'])) {
+    if (! is_numeric($_GET['p'])) {
         Redirect::to(URL::build('/forum'));
+
         die();
-    } else {
+    }
+
         if ($_GET['p'] == 1) {
             // Avoid bug in pagination class
             Redirect::to(URL::build('/forum/topic/' . $tid . '-' . $forum->titleToURL($topic->topic_title)));
+
             die();
         }
         $p = $_GET['p'];
-    }
 } else {
     $p = 1;
 }
 
 // Is the URL pointing to a specific post?
 if (isset($_GET['pid'])) {
-    $posts = DB::getInstance()->query('SELECT * FROM nl2_posts WHERE topic_id = ? AND deleted = 0', array($tid))->results();
+    $posts = DB::getInstance()->query('SELECT * FROM nl2_posts WHERE topic_id = ? AND deleted = 0', [$tid])->results();
+
     if (count($posts)) {
         $i = 0;
+
         while ($i < count($posts)) {
             if ($posts[$i]->id == $_GET['pid']) {
                 $output = $i + 1;
+
                 break;
             }
             $i++;
         }
+
         if (ceil($output / 10) != $p) {
             Redirect::to(URL::build('/forum/topic/' . $tid . '-' . $forum->titleToURL($topic->topic_title), 'p=' . ceil($output / 10)) . '#post-' . $_GET['pid']);
+
             die();
-        } else {
+        }
             Redirect::to(URL::build('/forum/topic/' . $tid . '-' . $forum->titleToURL($topic->topic_title)) . '#post-' . $_GET['pid']);
+
             die();
-        }
-    } else {
-        require_once(ROOT_PATH . '/404.php');
-        die();
     }
+
+        require_once (ROOT_PATH . '/404.php');
+
+        die();
 }
 
 // Follow/unfollow
@@ -122,54 +139,63 @@ if (isset($_GET['action'])) {
     if ($user->isLoggedIn()) {
         switch ($_GET['action']) {
             case 'follow':
-                $already_following = DB::getInstance()->query('SELECT id FROM nl2_topics_following WHERE topic_id = ? AND user_id = ?', array($tid, $user->data()->id));
-                if (!$already_following->count()) {
-                    $queries->create('topics_following', array(
+                $already_following = DB::getInstance()->query('SELECT id FROM nl2_topics_following WHERE topic_id = ? AND user_id = ?', [$tid, $user->data()->id]);
+
+                if (! $already_following->count()) {
+                    $queries->create('topics_following', [
                         'topic_id' => $tid,
                         'user_id' => $user->data()->id,
                         'existing_alerts' => 0
-                    ));
+                    ]);
                     Session::flash('success_post', $forum_language->get('forum', 'now_following_topic'));
                 }
+
                 break;
+
             case 'unfollow':
-                $delete = DB::getInstance()->createQuery('DELETE FROM nl2_topics_following WHERE topic_id = ? AND user_id = ?', array($tid, $user->data()->id));
+                $delete = DB::getInstance()->createQuery('DELETE FROM nl2_topics_following WHERE topic_id = ? AND user_id = ?', [$tid, $user->data()->id]);
                 Session::flash('success_post', $forum_language->get('forum', 'no_longer_following_topic'));
+
                 if (isset($_GET['return']) && $_GET['return'] == 'list') {
                     Redirect::to(URL::build('/user/following_topics'));
+
                     die();
                 }
+
                 break;
         }
     }
 
     Redirect::to(URL::build('/forum/topic/' . $tid . '-' . $forum->titleToURL($topic->topic_title)));
+
     die();
 }
 
-$forum_parent = $queries->getWhere('forums', array('id', '=', $topic->forum_id));
+$forum_parent = $queries->getWhere('forums', ['id', '=', $topic->forum_id]);
+
+$page_metadata = $queries->getWhere('page_descriptions', ['page', '=', '/forum/topic']);
 
-$page_metadata = $queries->getWhere('page_descriptions', array('page', '=', '/forum/topic'));
 if (count($page_metadata)) {
     $first_post = $queries->orderWhere('posts', 'topic_id = ' . $topic->id, 'created', 'ASC LIMIT 1');
-    $first_post = strip_tags(str_ireplace(array('<br />', '<br>', '<br/>', '&nbsp;'), array("\n", "\n", "\n", ' '), Output::getDecoded($first_post[0]->post_content)));
+    $first_post = strip_tags(str_ireplace(['<br />', '<br>', '<br/>', '&nbsp;'], ["\n", "\n", "\n", ' '], Output::getDecoded($first_post[0]->post_content)));
 
-    define('PAGE_DESCRIPTION', str_replace(array('{site}', '{title}', '{author}', '{forum_title}', '{page}', '{post}'), array(SITE_NAME, Output::getClean($topic->topic_title), Output::getClean($user->idToName($topic->topic_creator)), Output::getClean($forum_parent[0]->forum_title), Output::getClean($p), substr($first_post, 0, 160) . '...'), $page_metadata[0]->description));
+    define('PAGE_DESCRIPTION', str_replace(['{site}', '{title}', '{author}', '{forum_title}', '{page}', '{post}'], [SITE_NAME, Output::getClean($topic->topic_title), Output::getClean($user->idToName($topic->topic_creator)), Output::getClean($forum_parent[0]->forum_title), Output::getClean($p), substr($first_post, 0, 160) . '...'], $page_metadata[0]->description));
     define('PAGE_KEYWORDS', $page_metadata[0]->tags);
 } else {
-    $page_metadata = $queries->getWhere('page_descriptions', array('page', '=', '/forum/view_topic'));
+    $page_metadata = $queries->getWhere('page_descriptions', ['page', '=', '/forum/view_topic']);
 
     if (count($page_metadata)) {
         $first_post = $queries->orderWhere('posts', 'topic_id = ' . $topic->id, 'created', 'ASC LIMIT 1');
-        $first_post = strip_tags(str_ireplace(array('<br />', '<br>', '<br/>', '&nbsp;'), array("\n", "\n", "\n", ' '), Output::getDecoded($first_post[0]->post_content)));
+        $first_post = strip_tags(str_ireplace(['<br />', '<br>', '<br/>', '&nbsp;'], ["\n", "\n", "\n", ' '], Output::getDecoded($first_post[0]->post_content)));
 
-        define('PAGE_DESCRIPTION', str_replace(array('{site}', '{title}', '{author}', '{forum_title}', '{page}', '{post}'), array(SITE_NAME, Output::getClean($topic->topic_title), Output::getClean($user->idToName($topic->topic_creator)), Output::getClean($forum_parent[0]->forum_title), Output::getClean($p), substr($first_post, 0, 160) . '...'), $page_metadata[0]->description));
+        define('PAGE_DESCRIPTION', str_replace(['{site}', '{title}', '{author}', '{forum_title}', '{page}', '{post}'], [SITE_NAME, Output::getClean($topic->topic_title), Output::getClean($user->idToName($topic->topic_creator)), Output::getClean($forum_parent[0]->forum_title), Output::getClean($p), substr($first_post, 0, 160) . '...'], $page_metadata[0]->description));
         define('PAGE_KEYWORDS', $page_metadata[0]->tags);
     }
 }
 
 $page_title = ((strlen(Output::getClean($topic->topic_title)) > 20) ? Output::getClean(mb_substr($topic->topic_title, 0, 20)) . '...' : Output::getClean($topic->topic_title)) . ' - ' . str_replace('{x}', $p, $language->get('general', 'page_x'));
-require_once(ROOT_PATH . '/core/templates/frontend_init.php');
+
+require_once (ROOT_PATH . '/core/templates/frontend_init.php');
 
 // Assign author + title to Smarty variables
 // Get first post
@@ -178,7 +204,7 @@ $first_post = $first_post[0];
 
 $topic_user = new User($topic->topic_creator);
 
-$smarty->assign(array(
+$smarty->assign([
     'TOPIC_TITLE' => Output::getClean($topic->topic_title),
     'TOPIC_AUTHOR_USERNAME' => $topic_user->getDisplayname(),
     'TOPIC_AUTHOR_MCNAME' => $topic_user->getDisplayname(true),
@@ -188,16 +214,18 @@ $smarty->assign(array(
     'FORUM_ID' => $topic->forum_id,
     'TOPIC_LAST_EDITED' => ($first_post->last_edited ? $timeago->inWords(date('d M Y, H:i', $first_post->last_edited), $language->getTimeLanguage()) : null),
     'TOPIC_LAST_EDITED_FULL' => ($first_post->last_edited ? date('d M Y, H:i', $first_post->last_edited) : null)
-));
+]);
 
 // Is there a label?
 if ($topic->label != 0) { // yes
     // Get label
-    $label = $queries->getWhere('forums_topic_labels', array('id', '=', $topic->label));
+    $label = $queries->getWhere('forums_topic_labels', ['id', '=', $topic->label]);
+
     if (count($label)) {
         $label = $label[0];
 
-        $label_html = $queries->getWhere('forums_labels', array('id', '=', $label->label));
+        $label_html = $queries->getWhere('forums_labels', ['id', '=', $label->label]);
+
         if (count($label_html)) {
             $label_html = $label_html[0]->html;
             $label = str_replace('{x}', Output::getClean($label->name), $label_html);
@@ -207,17 +235,20 @@ if ($topic->label != 0) { // yes
     $label = '';
 }
 
-$labels = array();
+$labels = [];
+
 if ($topic->labels) {
     // Get labels
     $topic_labels = explode(',', $topic->labels);
 
     foreach ($topic_labels as $topic_label) {
-        $label_query = $queries->getWhere('forums_topic_labels', array('id', '=', $topic_label));
+        $label_query = $queries->getWhere('forums_topic_labels', ['id', '=', $topic_label]);
+
         if (count($label_query)) {
             $label_query = $label_query[0];
 
-            $label_html = $queries->getWhere('forums_labels', array('id', '=', $label_query->label));
+            $label_html = $queries->getWhere('forums_labels', ['id', '=', $label_query->label]);
+
             if (count($label_html)) {
                 $label_html = $label_html[0]->html;
                 $labels[] = str_replace('{x}', Output::getClean($label_query->name), $label_html);
@@ -226,7 +257,7 @@ if ($topic->labels) {
     }
 }
 
-$smarty->assign(array('TOPIC_LABEL' => $label, 'TOPIC_LABELS' => $labels));
+$smarty->assign(['TOPIC_LABEL' => $label, 'TOPIC_LABELS' => $labels]);
 
 // Get all posts in the topic
 $posts = $forum->getPosts($tid);
@@ -245,19 +276,22 @@ if ($user->isLoggedIn()) {
 
 // Quick reply
 if (Input::exists()) {
-    if (!$user->isLoggedIn() || !$can_reply) {
+    if (! $user->isLoggedIn() || ! $can_reply) {
         Redirect::to(URL::build('/forum'));
+
         die();
     }
+
     if (Token::check()) {
         $validate = new Validate();
-        $validation = $validate->check($_POST, array(
-            'content' => array(
+        $validation = $validate->check($_POST, [
+            'content' => [
                 'required' => true,
                 'min' => 2,
                 'max' => 50000
-            )
-        ));
+            ]
+        ]);
+
         if ($validation->passed()) {
             try {
                 $cache->setCache('post_formatting');
@@ -268,98 +302,103 @@ if (Input::exists()) {
                     $content = Output::getClean($content);
                 } else $content = Output::getClean(Input::get('content'));
 
-                $queries->create("posts", array(
+                $queries->create('posts', [
                     'forum_id' => $topic->forum_id,
                     'topic_id' => $tid,
                     'post_creator' => $user->data()->id,
                     'post_content' => $content,
                     'post_date' => date('Y-m-d H:i:s'),
                     'created' => date('U')
-                ));
+                ]);
 
                 // Get last post ID
                 $last_post_id = $queries->getLastId();
-                $content = $mentionsParser->parse($user->data()->id, $content, URL::build('/forum/topic/' . $tid, 'pid=' . $last_post_id), array('path' => ROOT_PATH . '/modules/Forum/language', 'file' => 'forum', 'term' => 'user_tag'), array('path' => ROOT_PATH . '/modules/Forum/language', 'file' => 'forum', 'term' => 'user_tag_info', 'replace' => '{x}', 'replace_with' => Output::getClean($user->data()->nickname)));
+                $content = $mentionsParser->parse($user->data()->id, $content, URL::build('/forum/topic/' . $tid, 'pid=' . $last_post_id), ['path' => ROOT_PATH . '/modules/Forum/language', 'file' => 'forum', 'term' => 'user_tag'], ['path' => ROOT_PATH . '/modules/Forum/language', 'file' => 'forum', 'term' => 'user_tag_info', 'replace' => '{x}', 'replace_with' => Output::getClean($user->data()->nickname)]);
 
-                $queries->update("posts", $last_post_id, array(
+                $queries->update('posts', $last_post_id, [
                     'post_content' => $content
-                ));
+                ]);
 
-                $queries->update("forums", $topic->forum_id, array(
+                $queries->update('forums', $topic->forum_id, [
                     'last_topic_posted' => $tid,
                     'last_user_posted' => $user->data()->id,
                     'last_post_date' => date('U')
-                ));
-                $queries->update("topics", $tid, array(
+                ]);
+                $queries->update('topics', $tid, [
                     'topic_last_user' => $user->data()->id,
                     'topic_reply_date' => date('U')
-                ));
+                ]);
 
                 // Alerts + Emails
-                $users_following = $queries->getWhere('topics_following', array('topic_id', '=', $tid));
+                $users_following = $queries->getWhere('topics_following', ['topic_id', '=', $tid]);
+
                 if (count($users_following)) {
-                    $users_following_info = array();
+                    $users_following_info = [];
+
                     foreach ($users_following as $user_following) {
                         if ($user_following->user_id != $user->data()->id) {
                             if ($user_following->existing_alerts == 0) {
                                 Alert::create(
                                     $user_following->user_id,
                                     'new_reply',
-                                    array('path' => ROOT_PATH . '/modules/Forum/language', 'file' => 'forum', 'term' => 'new_reply_in_topic', 'replace' => array('{x}', '{y}'), 'replace_with' => array(Output::getClean($user->data()->nickname), Output::getClean($topic->topic_title))),
-                                    array('path' => ROOT_PATH . '/modules/Forum/language', 'file' => 'forum', 'term' => 'new_reply_in_topic', 'replace' => array('{x}', '{y}'), 'replace_with' => array(Output::getClean($user->data()->nickname), Output::getClean($topic->topic_title))),
+                                    ['path' => ROOT_PATH . '/modules/Forum/language', 'file' => 'forum', 'term' => 'new_reply_in_topic', 'replace' => ['{x}', '{y}'], 'replace_with' => [Output::getClean($user->data()->nickname), Output::getClean($topic->topic_title)]],
+                                    ['path' => ROOT_PATH . '/modules/Forum/language', 'file' => 'forum', 'term' => 'new_reply_in_topic', 'replace' => ['{x}', '{y}'], 'replace_with' => [Output::getClean($user->data()->nickname), Output::getClean($topic->topic_title)]],
                                     URL::build('/forum/topic/' . $tid . '-' . $forum->titleToURL($topic->topic_title), 'pid=' . $last_post_id)
                                 );
-                                $queries->update('topics_following', $user_following->id, array(
+                                $queries->update('topics_following', $user_following->id, [
                                     'existing_alerts' => 1
-                                ));
+                                ]);
                             }
-                            $user_info = $queries->getWhere('users', array('id', '=', $user_following->user_id));
+                            $user_info = $queries->getWhere('users', ['id', '=', $user_following->user_id]);
+
                             if ($user_info[0]->topic_updates) array_push($users_following_info, ['email' => $user_info[0]->email, 'username' => $user_info[0]->username]);
                         }
                     }
-                    $path = join(DIRECTORY_SEPARATOR, array(ROOT_PATH, 'custom', 'templates', TEMPLATE, 'email', 'forum_topic_reply.html'));
+                    $path = join(DIRECTORY_SEPARATOR, [ROOT_PATH, 'custom', 'templates', TEMPLATE, 'email', 'forum_topic_reply.html']);
                     $html = file_get_contents($path);
 
                     // TODO: Add placeholder support for Email::formatEmail()
                     $message = str_replace(
-                        array('[Sitename]', '[TopicReply]', '[Greeting]', '[Message]', '[Link]', '[Thanks]'),
-                        array(
+                        ['[Sitename]', '[TopicReply]', '[Greeting]', '[Message]', '[Link]', '[Thanks]'],
+                        [
                             SITE_NAME,
-                            str_replace(array('{x}', '{y}'), array($user->data()->username, $topic->topic_title), $language->get('emails', 'forum_topic_reply_subject')),
+                            str_replace(['{x}', '{y}'], [$user->data()->username, $topic->topic_title], $language->get('emails', 'forum_topic_reply_subject')),
                             $language->get('emails', 'greeting'),
-                            str_replace(array('{x}', '{z}'), array($user->data()->username, html_entity_decode($content)), $language->get('emails', 'forum_topic_reply_message')),
+                            str_replace(['{x}', '{z}'], [$user->data()->username, html_entity_decode($content)], $language->get('emails', 'forum_topic_reply_message')),
                             rtrim(Util::getSelfURL(), '/') . URL::build('/forum/topic/' . $tid . '-' . $forum->titleToURL($topic->topic_title), 'pid=' . $last_post_id),
                             $language->get('emails', 'thanks')
-                        ),
+                        ],
                         $html
                     );
-                    $subject = SITE_NAME . ' - ' . str_replace(array('{x}', '{y}'), array($user->data()->username, $topic->topic_title), $language->get('emails', 'forum_topic_reply_subject'));
-                    $siteemail = $queries->getWhere('settings', array('name', '=', 'outgoing_email'));
+                    $subject = SITE_NAME . ' - ' . str_replace(['{x}', '{y}'], [$user->data()->username, $topic->topic_title], $language->get('emails', 'forum_topic_reply_subject'));
+                    $siteemail = $queries->getWhere('settings', ['name', '=', 'outgoing_email']);
                     $siteemail = $siteemail[0]->value;
-                    $contactemail = $queries->getWhere('settings', array('name', '=', 'incoming_email'));
+                    $contactemail = $queries->getWhere('settings', ['name', '=', 'incoming_email']);
                     $contactemail = $contactemail[0]->value;
+
                     try {
-                        $php_mailer = $queries->getWhere('settings', array('name', '=', 'phpmailer'));
+                        $php_mailer = $queries->getWhere('settings', ['name', '=', 'phpmailer']);
                         $php_mailer = $php_mailer[0]->value;
+
                         if ($php_mailer == '1') {
                             foreach ($users_following_info as $user_info) {
                                 // PHP Mailer
-                                $email = array(
-                                    'replyto' => array('email' => $contactemail, 'name' => Output::getClean(SITE_NAME)),
-                                    'to' => array('email' => Output::getClean($user_info['email']), 'name' => Output::getClean($user_info['username'])),
+                                $email = [
+                                    'replyto' => ['email' => $contactemail, 'name' => Output::getClean(SITE_NAME)],
+                                    'to' => ['email' => Output::getClean($user_info['email']), 'name' => Output::getClean($user_info['username'])],
                                     'subject' => $subject,
                                     'message' => $message
-                                );
+                                ];
                                 $sent = Email::send($email, 'mailer');
 
                                 if (isset($sent['error'])) {
                                     // Error, log it
-                                    $queries->create('email_errors', array(
+                                    $queries->create('email_errors', [
                                         'type' => 5, // 5 = forum topic reply
                                         'content' => $sent['error'],
                                         'at' => date('U'),
                                         'user_id' => ($user->isLoggedIn() ? $user->data()->id : null)
-                                    ));
+                                    ]);
                                 }
                             }
                         } else {
@@ -371,23 +410,23 @@ if (Input::exists()) {
                                     'MIME-Version: 1.0' . "\r\n" .
                                     'Content-type: text/html; charset=UTF-8' . "\r\n";
 
-                                $email = array(
+                                $email = [
                                     'to' => $user_info['email'],
                                     'subject' => $subject,
                                     'message' => $message,
                                     'headers' => $headers
-                                );
+                                ];
 
                                 $sent = Email::send($email, 'php');
 
                                 if (isset($sent['error'])) {
                                     // Error, log it
-                                    $queries->create('email_errors', array(
+                                    $queries->create('email_errors', [
                                         'type' => 5, // 5 = forum topic reply
                                         'content' => $sent['error'],
                                         'at' => date('U'),
                                         'user_id' => ($user->isLoggedIn() ? $user->data()->id : null)
-                                    ));
+                                    ]);
                                 }
                             }
                         }
@@ -398,12 +437,14 @@ if (Input::exists()) {
                 }
                 Session::flash('success_post', $forum_language->get('forum', 'post_successful'));
                 Redirect::to(URL::build('/forum/topic/' . $tid . '-' . $forum->titleToURL($topic->topic_title), 'pid=' . $last_post_id));
+
                 die();
             } catch (Exception $e) {
                 die($e->getMessage());
             }
         } else {
-            $error = array();
+            $error = [];
+
             foreach ($validation->errors() as $item) {
                 if (strpos($item, 'is required') !== false) {
                     $error[] = $forum_language->get('forum', 'content_required');
@@ -415,7 +456,7 @@ if (Input::exists()) {
             }
         }
     } else {
-        $error = array($language->get('general', 'invalid_token'));
+        $error = [$language->get('general', 'invalid_token')];
     }
 }
 
@@ -426,83 +467,86 @@ if ($user->isLoggedIn()) {
 
 // View count
 if ($user->isLoggedIn() || Cookie::exists('alert-box')) {
-    if (!Cookie::exists('nl-topic-' . $tid)) {
-        $queries->increment("topics", $tid, "topic_views");
-        Cookie::put("nl-topic-" . $tid, "true", 3600);
+    if (! Cookie::exists('nl-topic-' . $tid)) {
+        $queries->increment('topics', $tid, 'topic_views');
+        Cookie::put('nl-topic-' . $tid, 'true', 3600);
     }
 } else {
-    if (!Session::exists('nl-topic-' . $tid)) {
-        $queries->increment("topics", $tid, "topic_views");
-        Session::put("nl-topic-" . $tid, "true");
+    if (! Session::exists('nl-topic-' . $tid)) {
+        $queries->increment('topics', $tid, 'topic_views');
+        Session::put('nl-topic-' . $tid, 'true');
     }
 }
 
-$template->addCSSFiles(array(
-    (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/prism/prism.css' => array(),
-    (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/tinymce/plugins/spoiler/css/spoiler.css' => array(),
-    (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/emoji/css/emojione.min.css' => array(),
-    (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/emojionearea/css/emojionearea.min.css' => array()
-));
+$template->addCSSFiles([
+    (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/prism/prism.css' => [],
+    (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/tinymce/plugins/spoiler/css/spoiler.css' => [],
+    (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/emoji/css/emojione.min.css' => [],
+    (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/emojionearea/css/emojionearea.min.css' => []
+]);
 
 if ($user->isLoggedIn())
     $template->addJSScript('var quotedPosts = [];');
 
 // Are reactions enabled?
-$reactions_enabled = $queries->getWhere('settings', array('name', '=', 'forum_reactions'));
+$reactions_enabled = $queries->getWhere('settings', ['name', '=', 'forum_reactions']);
+
 if ($reactions_enabled[0]->value == '1')
     $reactions_enabled = true;
-else
-    $reactions_enabled = false;
+else $reactions_enabled = false;
 
 // Assign Smarty variables to pass to template
-$parent_category = $queries->getWhere('forums', array('id', '=', $forum_parent[0]->parent));
+$parent_category = $queries->getWhere('forums', ['id', '=', $forum_parent[0]->parent]);
 
-$breadcrumbs = array(
-    0 => array(
+$breadcrumbs = [
+    0 => [
         'id' => 0,
         'forum_title' => Output::getClean($topic->topic_title),
         'active' => 1,
         'link' => URL::build('/forum/topic/' . $topic->id . '-' . $forum->titleToURL($topic->topic_title))
-    ),
-    1 => array(
+    ],
+    1 => [
         'id' => $forum_parent[0]->id,
         'forum_title' => Output::getClean($forum_parent[0]->forum_title),
         'link' => URL::build('/forum/view/' . $forum_parent[0]->id . '-' . $forum->titleToURL($forum_parent[0]->forum_title))
-    )
-);
-if (!empty($parent_category) && $parent_category[0]->parent == 0) {
+    ]
+];
+
+if (! empty($parent_category) && $parent_category[0]->parent == 0) {
     // Category
-    $breadcrumbs[] = array(
+    $breadcrumbs[] = [
         'id' => $parent_category[0]->id,
         'forum_title' => Output::getClean($parent_category[0]->forum_title),
         'link' => URL::build('/forum/view/' . $parent_category[0]->id . '-' . $forum->titleToURL($parent_category[0]->forum_title))
-    );
-} else if (!empty($parent_category)) {
+    ];
+} else if (! empty($parent_category)) {
     // Parent forum, get its category
-    $breadcrumbs[] = array(
+    $breadcrumbs[] = [
         'id' => $parent_category[0]->id,
         'forum_title' => Output::getClean($parent_category[0]->forum_title),
         'link' => URL::build('/forum/view/' . $parent_category[0]->id . '-' . $forum->titleToURL($parent_category[0]->forum_title))
-    );
+    ];
     $parent = false;
+
     while ($parent == false) {
-        $parent_category = $queries->getWhere('forums', array('id', '=', $parent_category[0]->parent));
-        $breadcrumbs[] = array(
+        $parent_category = $queries->getWhere('forums', ['id', '=', $parent_category[0]->parent]);
+        $breadcrumbs[] = [
             'id' => $parent_category[0]->id,
             'forum_title' => Output::getClean($parent_category[0]->forum_title),
             'link' => URL::build('/forum/view/' . $parent_category[0]->id . '-' . $forum->titleToURL($parent_category[0]->forum_title))
-        );
+        ];
+
         if ($parent_category[0]->parent == 0) {
             $parent = true;
         }
     }
 }
 
-$breadcrumbs[] = array(
+$breadcrumbs[] = [
     'id' => 'index',
     'forum_title' => $forum_language->get('forum', 'forum_index'),
     'link' => URL::build('/forum')
-);
+];
 
 $smarty->assign('BREADCRUMBS', array_reverse($breadcrumbs));
 
@@ -510,14 +554,16 @@ $smarty->assign('BREADCRUMBS', array_reverse($breadcrumbs));
 if (Session::exists('success_post')) {
     $smarty->assign('SESSION_SUCCESS_POST', Session::flash('success_post'));
 }
+
 if (Session::exists('failure_post')) {
     $smarty->assign('SESSION_FAILURE_POST', Session::flash('failure_post'));
 }
+
 if (isset($error) && count($error)) {
-    $smarty->assign(array(
+    $smarty->assign([
         'ERROR_TITLE' => $language->get('general', 'error'),
         'ERRORS' => $error
-    ));
+    ]);
 }
 
 // Display "new reply" button and "mod actions" if the user has access to them
@@ -545,7 +591,7 @@ if ($topic->locked == 1)
 
 // Is the user a moderator?
 if ($user->isLoggedIn() && $forum->canModerateForum($forum_parent[0]->id, $user_groups)) {
-    $smarty->assign(array(
+    $smarty->assign([
         'CAN_MODERATE' => true,
         'MOD_ACTIONS' => $forum_language->get('forum', 'mod_actions'),
         'LOCK_URL' => URL::build('/forum/lock/', 'tid=' . $tid),
@@ -563,30 +609,30 @@ if ($user->isLoggedIn() && $forum->canModerateForum($forum_parent[0]->id, $user_
         'STICK' => (($topic->sticky == 1) ? $forum_language->get('forum', 'unstick_topic') : $forum_language->get('forum', 'stick_topic')),
         'MARK_AS_SPAM' => $language->get('moderator', 'mark_as_spam'),
         'CONFIRM_SPAM_POST' => $language->get('moderator', 'confirm_spam')
-    ));
+    ]);
 }
 
 // Sharing
-$smarty->assign(array(
+$smarty->assign([
     'SHARE' => $forum_language->get('forum', 'share'),
     'SHARE_TWITTER' => $forum_language->get('forum', 'share_twitter'),
     'SHARE_TWITTER_URL' => 'https://twitter.com/intent/tweet?text=' . Output::getClean(rtrim(Util::getSelfURL(), '/')) . URL::build('/forum/topic/' . $tid . '-' . $forum->titleToURL($topic->topic_title)),
     'SHARE_FACEBOOK' => $forum_language->get('forum', 'share_facebook'),
     'SHARE_FACEBOOK_URL' => 'https://www.facebook.com/sharer/sharer.php?u=' . Output::getClean(rtrim(Util::getSelfURL(), '/')) . URL::build('/forum/topic/' . $tid . '-' . $forum->titleToURL($topic->topic_title))
-));
+]);
 
 // Pagination
-$paginator = new Paginator((isset($template_pagination) ? $template_pagination : array()));
+$paginator = new Paginator((isset($template_pagination) ? $template_pagination : []));
 $results = $paginator->getLimited($posts, 10, $p, count($posts));
 $pagination = $paginator->generate(7, URL::build('/forum/topic/' . $tid . '-' . $forum->titleToURL($topic->topic_title), true));
 
 $smarty->assign('PAGINATION', $pagination);
 
 // Is Minecraft integration enabled?
-$mc_integration = $queries->getWhere('settings', array('name', '=', 'mc_integration'));
+$mc_integration = $queries->getWhere('settings', ['name', '=', 'mc_integration']);
 
 // Replies
-$replies = array();
+$replies = [];
 // Display the correct number of posts
 for ($n = 0; $n < count($results->data); $n++) {
     $post_creator = new User($results->data[$n]->post_creator);
@@ -602,7 +648,7 @@ for ($n = 0; $n < count($results->data); $n++) {
     else $heading = Output::getClean($topic->topic_title);
 
     // Which buttons do we need to display?
-    $buttons = array();
+    $buttons = [];
 
     if ($user->isLoggedIn()) {
         // Assign token
@@ -610,45 +656,45 @@ for ($n = 0; $n < count($results->data); $n++) {
 
         // Edit button
         if ($forum->canModerateForum($forum_parent[0]->id, $user_groups)) {
-            $buttons['edit'] = array(
+            $buttons['edit'] = [
                 'URL' => URL::build('/forum/edit/', 'pid=' . $results->data[$n]->id . '&amp;tid=' . $tid),
                 'TEXT' => $forum_language->get('forum', 'edit')
-            );
+            ];
         } else if ($user->data()->id == $results->data[$n]->post_creator && $forum->canEditTopic($forum_parent[0]->id, $user_groups)) {
             if ($topic->locked != 1) { // Can't edit if topic is locked
-                $buttons['edit'] = array(
+                $buttons['edit'] = [
                     'URL' => URL::build('/forum/edit/', 'pid=' . $results->data[$n]->id . '&amp;tid=' . $tid),
                     'TEXT' => $forum_language->get('forum', 'edit')
-                );
+                ];
             }
         }
 
         // Delete button
         if ($forum->canModerateForum($forum_parent[0]->id, $user_groups)) {
-            $buttons['delete'] = array(
+            $buttons['delete'] = [
                 'URL' => URL::build('/forum/delete_post/', 'pid=' . $results->data[$n]->id . '&amp;tid=' . $tid),
                 'TEXT' => $language->get('general', 'delete'),
                 'NUMBER' => $p . $n
-            );
-            $buttons['spam'] = array(
+            ];
+            $buttons['spam'] = [
                 'URL' => URL::build('/forum/spam/'),
                 'TEXT' => $language->get('moderator', 'spam')
-            );
+            ];
         }
 
         // Report button
-        $buttons['report'] = array(
+        $buttons['report'] = [
             'URL' => URL::build('/forum/report/'),
             'REPORT_TEXT' => $language->get('user', 'report_post_content'),
             'TEXT' => $language->get('general', 'report')
-        );
+        ];
 
         // Quote button
         if ($can_reply) {
             if ($forum->canModerateForum($forum_parent[0]->id, $user_groups) || $topic->locked != 1) {
-                $buttons['quote'] = array(
+                $buttons['quote'] = [
                     'TEXT' => $forum_language->get('forum', 'quote')
-                );
+                ];
             }
         }
     }
@@ -659,24 +705,25 @@ for ($n = 0; $n < count($results->data); $n++) {
     // TODO: Add setting to hide/show this
     if (Util::getSetting(DB::getInstance(), 'discord_integration', false)) {
         if ($post_creator->data()->discord_username != null) {
-            $fields[] = array('name' => $language->get('admin', 'discord'), 'value' => $post_creator->data()->discord_username);
+            $fields[] = ['name' => $language->get('admin', 'discord'), 'value' => $post_creator->data()->discord_username];
         }
     }
 
-    if ($mc_integration[0]->value == '1') $fields[] = array('name' => 'IGN', 'value' => $post_creator->getDisplayname(true));
+    if ($mc_integration[0]->value == '1') $fields[] = ['name' => 'IGN', 'value' => $post_creator->getDisplayname(true)];
 
     // Get post reactions
-    $post_reactions = array();
+    $post_reactions = [];
     $total_karma = 0;
+
     if ($reactions_enabled) {
-        $post_reactions_query = $queries->getWhere('forums_reactions', array('post_id', '=', $results->data[$n]->id));
+        $post_reactions_query = $queries->getWhere('forums_reactions', ['post_id', '=', $results->data[$n]->id]);
 
         if (count($post_reactions_query)) {
             foreach ($post_reactions_query as $item) {
-                if (!isset($post_reactions[$item->reaction_id])) {
+                if (! isset($post_reactions[$item->reaction_id])) {
                     $post_reactions[$item->reaction_id]['count'] = 1;
 
-                    $reaction = $queries->getWhere('reactions', array('id', '=', $item->reaction_id));
+                    $reaction = $queries->getWhere('reactions', ['id', '=', $item->reaction_id]);
                     $post_reactions[$item->reaction_id]['html'] = $reaction[0]->html;
                     $post_reactions[$item->reaction_id]['name'] = $reaction[0]->name;
 
@@ -687,13 +734,13 @@ for ($n = 0; $n < count($results->data); $n++) {
                 }
 
                 $reaction_user = new User($item->user_given);
-                $post_reactions[$item->reaction_id]['users'][] = array(
+                $post_reactions[$item->reaction_id]['users'][] = [
                     'username' => $reaction_user->getDisplayname(true),
                     'nickname' => $reaction_user->getDisplayname(),
                     'style' => $reaction_user->getGroupClass(),
                     'avatar' => $reaction_user->getAvatar('../', 500),
                     'profile' => $reaction_user->getProfileURL()
-                );
+                ];
             }
         }
     }
@@ -712,7 +759,7 @@ for ($n = 0; $n < count($results->data); $n++) {
         $post_date = date('d M Y, H:i', $results->data[$n]->created);
     }
 
-    $replies[] = array(
+    $replies[] = [
         'url' => $url,
         'heading' => $heading,
         'id' => $results->data[$n]->id,
@@ -728,8 +775,8 @@ for ($n = 0; $n < count($results->data); $n++) {
         'profile' => $post_creator->getProfileURL(),
         'user_style' => $post_creator->getGroupClass(),
         'user_groups' => $user_groups_html,
-        'user_posts_count' => str_replace('{x}', count($queries->getWhere('posts', array('post_creator', '=', $results->data[$n]->post_creator))), $forum_language->get('forum', 'x_posts')),
-        'user_topics_count' => str_replace('{x}', count($queries->getWhere('topics', array('topic_creator', '=', $results->data[$n]->post_creator))), $forum_language->get('forum', 'x_topics')),
+        'user_posts_count' => str_replace('{x}', count($queries->getWhere('posts', ['post_creator', '=', $results->data[$n]->post_creator])), $forum_language->get('forum', 'x_posts')),
+        'user_topics_count' => str_replace('{x}', count($queries->getWhere('topics', ['topic_creator', '=', $results->data[$n]->post_creator])), $forum_language->get('forum', 'x_topics')),
         'user_registered' => str_replace('{x}', $timeago->inWords(date('Y-m-d H:i:s', $post_creator->data()->joined), $language->getTimeLanguage()), $forum_language->get('forum', 'registered_x')),
         'user_registered_full' => date('d M Y', $post_creator->data()->joined),
         'user_reputation' => $post_creator->data()->reputation,
@@ -738,12 +785,12 @@ for ($n = 0; $n < count($results->data); $n++) {
         'buttons' => $buttons,
         'content' => $content,
         'signature' => Output::getPurified(htmlspecialchars_decode($signature)),
-        'fields' => (empty($fields) ? array() : $fields),
+        'fields' => (empty($fields) ? [] : $fields),
         'edited' => (is_null($results->data[$n]->last_edited) ? null : str_replace('{x}', $timeago->inWords(date('Y-m-d H:i:s', $results->data[$n]->last_edited), $language->getTimeLanguage()), $forum_language->get('forum', 'last_edited'))),
         'edited_full' => (is_null($results->data[$n]->last_edited) ? null : date('d M Y, H:i', $results->data[$n]->last_edited)),
         'post_reactions' => $post_reactions,
         'karma' => $total_karma
-    );
+    ];
 }
 
 $smarty->assign('REPLIES', $replies);
@@ -751,34 +798,35 @@ $smarty->assign('REPLIES', $replies);
 if ($user->isLoggedIn()) {
     // Reactions
     if ($reactions_enabled) {
-        $reactions = $queries->getWhere('reactions', array('enabled', '=', 1));
-        if (!count($reactions)) $reactions = array();
+        $reactions = $queries->getWhere('reactions', ['enabled', '=', 1]);
+
+        if (! count($reactions)) $reactions = [];
 
         $smarty->assign('REACTIONS', $reactions);
         $smarty->assign('REACTIONS_URL', URL::build('/forum/reactions'));
     }
 
     // Following?
-    $is_user_following = DB::getInstance()->query('SELECT id, existing_alerts FROM nl2_topics_following WHERE topic_id = ? AND user_id = ?', array($tid, $user->data()->id));
+    $is_user_following = DB::getInstance()->query('SELECT id, existing_alerts FROM nl2_topics_following WHERE topic_id = ? AND user_id = ?', [$tid, $user->data()->id]);
 
     if ($is_user_following->count()) {
         $is_user_following = $is_user_following->first();
 
         if ($is_user_following->existing_alerts == 1) {
-            $queries->update('topics_following', $is_user_following->id, array(
+            $queries->update('topics_following', $is_user_following->id, [
                 'existing_alerts' => 0
-            ));
+            ]);
         }
 
-        $smarty->assign(array(
+        $smarty->assign([
             'UNFOLLOW' => $forum_language->get('forum', 'unfollow'),
             'UNFOLLOW_URL' => URL::build('/forum/topic/' . $tid . '/', 'action=unfollow')
-        ));
+        ]);
     } else {
-        $smarty->assign(array(
+        $smarty->assign([
             'FOLLOW' => $forum_language->get('forum', 'follow'),
             'FOLLOW_URL' => URL::build('/forum/topic/' . $tid . '/', 'action=follow')
-        ));
+        ]);
     }
 }
 
@@ -791,25 +839,25 @@ if ($user->isLoggedIn() && $can_reply) {
             $smarty->assign('TOPIC_LOCKED_NOTICE', $forum_language->get('forum', 'topic_locked_notice'));
         }
 
-        $smarty->assign(array(
+        $smarty->assign([
             'CONTENT' => Output::getClean(Input::get('content')),
             'SUBMIT' => $language->get('general', 'submit')
-        ));
+        ]);
     }
 }
 
 // Assign Smarty language variables
-$smarty->assign(array(
+$smarty->assign([
     'POSTS' => $forum_language->get('forum', 'posts'),
     'BY' => ucfirst($forum_language->get('forum', 'by')),
     'CANCEL' => $language->get('general', 'cancel'),
-    'USER_ID' => (($user->isLoggedIn()) ? $user->data()->id  : 0),
+    'USER_ID' => (($user->isLoggedIn()) ? $user->data()->id : 0),
     'INSERT_QUOTES' => $forum_language->get('forum', 'insert_quotes'),
     'FORUM_TITLE' => Output::getClean($forum_parent[0]->forum_title),
     'STARTED_BY' => $forum_language->get('forum', 'started_by_x'),
     'SUCCESS' => $language->get('general', 'success'),
     'ERROR' => $language->get('general', 'error')
-));
+]);
 
 // Get post formatting type (HTML or Markdown)
 $cache->setCache('post_formatting');
@@ -820,9 +868,9 @@ if ($formatting == 'markdown') {
     $smarty->assign('MARKDOWN', true);
     $smarty->assign('MARKDOWN_HELP', $language->get('general', 'markdown_help'));
 
-    $template->addJSFiles(array(
-        (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/emojionearea/js/emojionearea.min.js' => array()
-    ));
+    $template->addJSFiles([
+        (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/emojionearea/js/emojionearea.min.js' => []
+    ]);
 
     $template->addJSScript('
 	  $(document).ready(function() {
@@ -832,11 +880,11 @@ if ($formatting == 'markdown') {
 	  });
 	');
 } else {
-    $template->addJSFiles(array(
-        (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/prism/prism.js' => array(),
-        (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/tinymce/plugins/spoiler/js/spoiler.js' => array(),
-        (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/tinymce/tinymce.min.js' => array()
-    ));
+    $template->addJSFiles([
+        (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/prism/prism.js' => [],
+        (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/tinymce/plugins/spoiler/js/spoiler.js' => [],
+        (defined('CONFIG_PATH') ? CONFIG_PATH : '') . '/core/assets/plugins/tinymce/tinymce.min.js' => []
+    ]);
 
     if ($user->isLoggedIn())
         $template->addJSScript(Input::createTinyEditor($language, 'quickreply'));
@@ -856,7 +904,7 @@ if ($user->isLoggedIn()) {
 
     $template->addJSScript('
 	$(document).ready(function() {
-		if(typeof $.cookie(\'' .  $tid . '-quoted\') === \'undefined\'){
+		if(typeof $.cookie(\'' . $tid . '-quoted\') === \'undefined\'){
 			$("#quoteButton").hide();
 		}
 	});
@@ -872,7 +920,7 @@ if ($user->isLoggedIn()) {
 			toastr.options.progressBar = true;
 			toastr.options.closeButton = true;
 			toastr.options.positionClass = \'toast-bottom-left\';
-			toastr.info(\'' .  $forum_language->get('forum', 'removed_quoted_post') . '\');
+			toastr.info(\'' . $forum_language->get('forum', 'removed_quoted_post') . '\');
 		}
 		else {
 			quotedPosts.push(post);
@@ -902,7 +950,7 @@ if ($user->isLoggedIn()) {
 	// Insert quoted posts to editor
 	function insertQuotes(){
 		var postData = {
-			"posts": JSON.parse($.cookie(\'' .  $tid . '-quoted\')),
+			"posts": JSON.parse($.cookie(\'' . $tid . '-quoted\')),
 			"topic": ' . $tid . '
 		};
 
@@ -941,15 +989,16 @@ if ($user->isLoggedIn()) {
 }
 
 // Load modules + template
-Module::loadPage($user, $pages, $cache, $smarty, array($navigation, $cc_nav, $mod_nav), $widgets, $template);
+Module::loadPage($user, $pages, $cache, $smarty, [$navigation, $cc_nav, $mod_nav], $widgets, $template);
 
 $page_load = microtime(true) - $start;
 define('PAGE_LOAD_TIME', str_replace('{x}', round($page_load, 3), $language->get('general', 'page_loaded_in')));
 
 $template->onPageLoad();
 
-require(ROOT_PATH . '/core/templates/navbar.php');
-require(ROOT_PATH . '/core/templates/footer.php');
+require (ROOT_PATH . '/core/templates/navbar.php');
+
+require (ROOT_PATH . '/core/templates/footer.php');
 
 // Display template
 $template->displayTemplate('forum/view_topic.tpl', $smarty);
diff --git a/modules/Forum/pages/panel/forums.php b/modules/Forum/pages/panel/forums.php
index 3ba549c9501ba6aef02650f56f785c50a6c5a1fc..877c333fdda810d5fabee0c0fcd7493815deabb5 100644
--- a/modules/Forum/pages/panel/forums.php
+++ b/modules/Forum/pages/panel/forums.php
@@ -11,24 +11,29 @@
 
 // Can the user view the panel?
 if ($user->isLoggedIn()) {
-    if (!$user->canViewACP()) {
+    if (! $user->canViewACP()) {
         // No
         Redirect::to(URL::build('/'));
+
         die();
     }
-    if (!$user->isAdmLoggedIn()) {
+
+    if (! $user->isAdmLoggedIn()) {
         // Needs to authenticate
         Redirect::to(URL::build('/panel/auth'));
+
         die();
-    } else {
-        if (!$user->hasPermission('admincp.forums')) {
-            require_once(ROOT_PATH . '/403.php');
+    }
+
+        if (! $user->hasPermission('admincp.forums')) {
+            require_once (ROOT_PATH . '/403.php');
+
             die();
         }
-    }
 } else {
     // Not logged in
     Redirect::to(URL::build('/login'));
+
     die();
 }
 
@@ -36,9 +41,10 @@ define('PAGE', 'panel');
 define('PARENT_PAGE', 'forum');
 define('PANEL_PAGE', 'forums');
 $page_title = $forum_language->get('forum', 'forums');
-require_once(ROOT_PATH . '/core/templates/backend_init.php');
 
-if (!isset($_GET['action']) && !isset($_GET['forum'])) {
+require_once (ROOT_PATH . '/core/templates/backend_init.php');
+
+if (! isset($_GET['action']) && ! isset($_GET['forum'])) {
     if (Input::exists()) {
         if (Token::check()) {
             try {
@@ -46,42 +52,46 @@ if (!isset($_GET['action']) && !isset($_GET['forum'])) {
                 if (isset($_POST['enabled']) && $_POST['enabled'] == 'on') $enabled = 1;
                 else $enabled = 0;
 
-                $forum_reactions_id = $queries->getWhere('settings', array('name', '=', 'forum_reactions'));
+                $forum_reactions_id = $queries->getWhere('settings', ['name', '=', 'forum_reactions']);
                 $forum_reactions_id = $forum_reactions_id[0]->id;
-                $queries->update('settings', $forum_reactions_id, array(
+                $queries->update('settings', $forum_reactions_id, [
                     'value' => $enabled
-                ));
+                ]);
 
                 Session::flash('admin_forums', $forum_language->get('forum', 'settings_updated_successfully'));
                 Redirect::to(URL::build('/panel/forums'));
+
                 die();
             } catch (Exception $e) {
-                $errors = array($e->getMessage());
+                $errors = [$e->getMessage()];
             }
         } else {
             // Invalid token
             Session::flash('admin_forums', $language->get('general', 'invalid_token'));
             Redirect::to(URL::build('/panel/forums'));
+
             die();
         }
     }
 
     $forums = $queries->orderAll('forums', 'forum_order', 'ASC');
-    $template_array = array();
+    $template_array = [];
 
     if (count($forums)) {
         $i = 1;
         $count = count($forums);
+
         foreach ($forums as $item) {
             if ($item->parent > 0) {
-                $parent_forum_query = $queries->getWhere('forums', array('id', '=', $item->parent));
+                $parent_forum_query = $queries->getWhere('forums', ['id', '=', $item->parent]);
+
                 if (count($parent_forum_query)) {
                     $parent_forum_count = 1;
                     $parent_forum = str_replace('{x}', Output::getClean(Output::getDecoded($parent_forum_query[0]->forum_title)), $forum_language->get('forum', 'parent_forum_x'));
                     $id = $parent_forum_query[0]->parent;
 
                     while ($parent_forum_count < 100 && $id > 0) {
-                        $parent_forum_query = $queries->getWhere('forums', array('id', '=', $parent_forum_query[0]->parent));
+                        $parent_forum_query = $queries->getWhere('forums', ['id', '=', $parent_forum_query[0]->parent]);
                         $id = $parent_forum_query[0]->parent;
                         $parent_forum_count++;
                     }
@@ -89,10 +99,9 @@ if (!isset($_GET['action']) && !isset($_GET['forum'])) {
                     $parent_forum = null;
                     $parent_forum_count = 0;
                 }
-            } else
-                $parent_forum_count = 0;
+            } else $parent_forum_count = 0;
 
-            $template_array[] = array(
+            $template_array[] = [
                 'edit_link' => URL::build('/panel/forums/', 'forum=' . Output::getClean($item->id)),
                 'delete_link' => URL::build('/panel/forums/', 'action=delete&fid=' . Output::getClean($item->id)),
                 'up_link' => ($i > 1 ? URL::build('/panel/forums/', 'action=order&dir=up&fid=' . Output::getClean($item->id)) : null),
@@ -102,15 +111,15 @@ if (!isset($_GET['action']) && !isset($_GET['forum'])) {
                 'id' => Output::getClean($item->id),
                 'parent_forum' => (($item->parent > 0) ? $parent_forum : null),
                 'parent_forum_count' => $parent_forum_count
-            );
+            ];
             $i++;
         }
     }
 
-    $forum_reactions = $queries->getWhere('settings', array('name', '=', 'forum_reactions'));
+    $forum_reactions = $queries->getWhere('settings', ['name', '=', 'forum_reactions']);
     $forum_reactions = $forum_reactions[0]->value;
 
-    $smarty->assign(array(
+    $smarty->assign([
         'NEW_FORUM' => $forum_language->get('forum', 'new_forum'),
         'NEW_FORUM_LINK' => URL::build('/panel/forums/', 'action=new'),
         'FORUMS_ARRAY' => $template_array,
@@ -118,33 +127,33 @@ if (!isset($_GET['action']) && !isset($_GET['forum'])) {
         'USE_REACTIONS_VALUE' => ($forum_reactions == 1),
         'NO_FORUMS' => $forum_language->get('forum', 'no_forums'),
         'REORDER_DRAG_URL' => URL::build('/panel/forums')
-    ));
+    ]);
 
     $template_file = 'forum/forums.tpl';
 } else if (isset($_GET['action'])) {
     switch ($_GET['action']) {
         case 'new':
-            if (!isset($_GET['step'])) {
+            if (! isset($_GET['step'])) {
                 // Step 1
                 if (Input::exists()) {
-                    $errors = array();
+                    $errors = [];
 
                     if (Token::check()) {
                         // Validate input
                         $validate = new Validate();
-                        $validation = $validate->check($_POST, array(
-                            'forumname' => array(
+                        $validation = $validate->check($_POST, [
+                            'forumname' => [
                                 'required' => true,
                                 'min' => 2,
                                 'max' => 150
-                            ),
-                            'forumdesc' => array(
+                            ],
+                            'forumdesc' => [
                                 'max' => 255
-                            ),
-                            'forum_icon' => array(
+                            ],
+                            'forum_icon' => [
                                 'max' => 256
-                            )
-                        ));
+                            ]
+                        ]);
 
                         if ($validation->passed()) {
                             // Create the forum
@@ -152,20 +161,22 @@ if (!isset($_GET['action']) && !isset($_GET['forum'])) {
                                 $description = Input::get('forumdesc');
 
                                 $last_forum_order = $queries->orderAll('forums', 'forum_order', 'DESC');
+
                                 if (count($last_forum_order)) $last_forum_order = $last_forum_order[0]->forum_order;
                                 else $last_forum_order = 0;
 
-                                $queries->create('forums', array(
+                                $queries->create('forums', [
                                     'forum_title' => Output::getClean(Input::get('forumname')),
                                     'forum_description' => Output::getClean($description),
                                     'forum_order' => $last_forum_order + 1,
                                     'forum_type' => Output::getClean(Input::get('forum_type')),
                                     'icon' => Output::getClean(Input::get('forum_icon'))
-                                ));
+                                ]);
 
                                 $forum_id = $queries->getLastId();
 
                                 Redirect::to(URL::build('/panel/forums/', 'action=new&step=2&forum=' . $forum_id));
+
                                 die();
                             } catch (Exception $e) {
                                 $errors[] = $e->getMessage();
@@ -176,24 +187,31 @@ if (!isset($_GET['action']) && !isset($_GET['forum'])) {
                                     switch ($item) {
                                         case (strpos($item, 'forumname') !== false):
                                             $errors[] = $forum_language->get('forum', 'input_forum_title');
+
                                             break;
                                     }
                                 } else if (strpos($item, 'minimum') !== false) {
                                     switch ($item) {
                                         case (strpos($item, 'forumname') !== false):
                                             $errors[] = $forum_language->get('forum', 'forum_name_minimum');
+
                                             break;
                                     }
                                 } else if (strpos($item, 'maximum') !== false) {
                                     switch ($item) {
                                         case (strpos($item, 'forumname') !== false):
                                             $errors[] = $forum_language->get('forum', 'forum_name_maximum');
+
                                             break;
+
                                         case (strpos($item, 'forumdesc') !== false):
                                             $errors[] = $forum_language->get('forum', 'forum_description_maximum');
+
                                             break;
+
                                         case (strpos($item, 'forum_icon') !== false):
                                             $errors[] = $forum_language->get('forum', 'forum_icon_maximum');
+
                                             break;
                                     }
                                 }
@@ -205,7 +223,7 @@ if (!isset($_GET['action']) && !isset($_GET['forum'])) {
                     }
                 }
 
-                $smarty->assign(array(
+                $smarty->assign([
                     'FORUM_TYPE' => $forum_language->get('forum', 'forum_type'),
                     'FORUM_TYPE_FORUM' => $forum_language->get('forum', 'forum_type_forum'),
                     'FORUM_TYPE_CATEGORY' => $forum_language->get('forum', 'forum_type_category'),
@@ -215,37 +233,42 @@ if (!isset($_GET['action']) && !isset($_GET['forum'])) {
                     'FORUM_DESCRIPTION_VALUE' => Output::getClean(Input::get('forumdesc')),
                     'FORUM_ICON' => $forum_language->get('forum', 'forum_icon'),
                     'FORUM_ICON_VALUE' => Output::getClean(Input::get('forum_icon'))
-                ));
+                ]);
 
                 $template_file = 'forum/forums_new_step_1.tpl';
             } else {
                 // Parent category, for type forum only
-                if (!isset($_GET['forum']) || !is_numeric($_GET['forum'])) {
+                if (! isset($_GET['forum']) || ! is_numeric($_GET['forum'])) {
                     Redirect::to(URL::build('/panel/forums'));
+
                     die();
                 }
 
                 // Get forum from database
-                $forum = $queries->getWhere('forums', array('id', '=', $_GET['forum']));
-                if (!count($forum)) {
+                $forum = $queries->getWhere('forums', ['id', '=', $_GET['forum']]);
+
+                if (! count($forum)) {
                     Redirect::to(URL::build('/panel/forums'));
+
                     die();
-                } else $forum = $forum[0];
+                }  $forum = $forum[0];
 
                 // Forums only
                 if ($forum->forum_type == 'category') {
                     Redirect::to(URL::build('/panel/forums/', 'forum=' . $forum->id));
+
                     die();
                 }
 
                 // Deal with input
                 if (Input::exists()) {
-                    $errors = array();
+                    $errors = [];
 
                     if (Token::check()) {
                         try {
                             if (isset($_POST['redirect']) && $_POST['redirect'] == 1) {
                                 $redirect = 1;
+
                                 if (isset($_POST['redirect_url']) && strlen($_POST['redirect_url']) > 0 && strlen($_POST['redirect_url']) <= 512) {
                                     $redirect_url = Output::getClean($_POST['redirect_url']);
                                 } else {
@@ -259,25 +282,24 @@ if (!isset($_GET['action']) && !isset($_GET['forum'])) {
                             if (isset($_POST['hooks']) && count($_POST['hooks'])) $hooks = json_encode($_POST['hooks']);
                             else $hooks = null;
 
-                            if (!isset($redirect_error)) {
+                            if (! isset($redirect_error)) {
                                 if (isset($_POST['parent']))
                                     $parent = $_POST['parent'];
-                                else
-                                    $parent = 0;
+                                else $parent = 0;
 
-                                $queries->update('forums', $forum->id, array(
+                                $queries->update('forums', $forum->id, [
                                     'parent' => $parent,
                                     'news' => Input::get('news_forum'),
                                     'redirect_forum' => $redirect,
                                     'redirect_url' => $redirect_url,
                                     'hooks' => $hooks
-                                ));
+                                ]);
 
                                 Redirect::to(URL::build('/panel/forums/', 'forum=' . $forum->id));
+
                                 die();
-                            } else {
-                                $errors[] = $forum_language->get('forum', 'invalid_redirect_url');
                             }
+                                $errors[] = $forum_language->get('forum', 'invalid_redirect_url');
                         } catch (Exception $e) {
                             $errors[] = $e->getMessage();
                         }
@@ -287,30 +309,31 @@ if (!isset($_GET['action']) && !isset($_GET['forum'])) {
                 }
 
                 // Get a list of forums
-                $forums = $queries->getWhere('forums', array('id', '<>', $forum->id));
-                $template_array = array();
+                $forums = $queries->getWhere('forums', ['id', '<>', $forum->id]);
+                $template_array = [];
 
                 if (count($forums)) {
                     foreach ($forums as $item) {
-                        $template_array[] = array(
+                        $template_array[] = [
                             'id' => Output::getClean($item->id),
                             'name' => Output::getClean(Output::getDecoded($item->forum_title))
-                        );
+                        ];
                     }
                 }
                 $hooks_query = $queries->orderAll('hooks', 'id', 'ASC');
-                $hooks_array = array();
+                $hooks_array = [];
+
                 if (count($hooks_query)) {
                     foreach ($hooks_query as $hook) {
                         if (in_array('newTopic', json_decode($hook->events))) {
-                            $hooks_array[] = array(
+                            $hooks_array[] = [
                                 'id' => $hook->id,
                                 'name' => Output::getClean($hook->name),
-                            );
+                            ];
                         }
                     }
                 }
-                $smarty->assign(array(
+                $smarty->assign([
                     'SELECT_PARENT_FORUM' => $forum_language->get('forum', 'select_a_parent_forum'),
                     'PARENT_FORUMS' => $template_array,
                     'DISPLAY_TOPICS_AS_NEWS' => $forum_language->get('forum', 'display_topics_as_news'),
@@ -321,12 +344,12 @@ if (!isset($_GET['action']) && !isset($_GET['forum'])) {
                     'HOOKS_ARRAY' => $hooks_array,
                     'INFO' => $language->get('general', 'info'),
                     'HOOK_SELECT_INFO' => $language->get('admin', 'hook_select_info')
-                ));
+                ]);
 
                 $template_file = 'forum/forums_new_step_2.tpl';
             }
 
-            $smarty->assign(array(
+            $smarty->assign([
                 'CREATING_FORUM' => $forum_language->get('forum', 'creating_forum'),
                 'CANCEL' => $language->get('general', 'cancel'),
                 'CANCEL_LINK' => URL::build('/panel/forums'),
@@ -334,81 +357,93 @@ if (!isset($_GET['action']) && !isset($_GET['forum'])) {
                 'YES' => $language->get('general', 'yes'),
                 'NO' => $language->get('general', 'no'),
                 'CONFIRM_CANCEL' => $language->get('general', 'confirm_cancel')
-            ));
+            ]);
 
             break;
 
         case 'order':
-            if (!isset($_GET['dir'])) {
+            if (! isset($_GET['dir'])) {
                 echo $forum_language->get('forum', 'invalid_action') . ' - <a href="' . URL::build('/panel/forums') . '">' . $language->get('general', 'back') . '</a>';
+
                 die();
             }
+
             if ($_GET['dir'] == 'up' || $_GET['dir'] == 'down') {
-                if (!isset($_GET['fid']) || !is_numeric($_GET['fid'])) {
+                if (! isset($_GET['fid']) || ! is_numeric($_GET['fid'])) {
                     echo $forum_language->get('forum', 'invalid_action') . ' - <a href="' . URL::build('/panel/forums') . '">' . $language->get('general', 'back') . '</a>';
+
                     die();
                 }
 
                 $dir = $_GET['dir'];
 
-                $forum_id = $queries->getWhere('forums', array('id', '=', $_GET['fid']));
+                $forum_id = $queries->getWhere('forums', ['id', '=', $_GET['fid']]);
                 $forum_id = $forum_id[0]->id;
 
-                $forum_order = $queries->getWhere('forums', array('id', '=', $_GET['fid']));
+                $forum_order = $queries->getWhere('forums', ['id', '=', $_GET['fid']]);
                 $forum_order = $forum_order[0]->forum_order;
 
                 $previous_forums = $queries->orderAll('forums', 'forum_order', 'ASC');
 
                 if ($dir == 'up') {
                     $n = 0;
+
                     foreach ($previous_forums as $previous_forum) {
                         if ($previous_forum->id == $_GET['fid']) {
                             $previous_fid = $previous_forums[$n - 1]->id;
                             $previous_f_order = $previous_forums[$n - 1]->forum_order;
+
                             break;
                         }
                         $n++;
                     }
 
                     try {
-                        if (isset($previous_fid) && isset($previous_f_order)) {
-                            $queries->update('forums', $forum_id, array(
+                        if (isset($previous_fid, $previous_f_order)) {
+                            $queries->update('forums', $forum_id, [
                                 'forum_order' => $previous_f_order
-                            ));
-                            $queries->update('forums', $previous_fid, array(
+                            ]);
+                            $queries->update('forums', $previous_fid, [
                                 'forum_order' => $previous_f_order + 1
-                            ));
+                            ]);
                         }
                     } catch (Exception $e) {
-                        $errors = array($e->getMessage());
+                        $errors = [$e->getMessage()];
                     }
 
                     Redirect::to(URL::build('/panel/forums'));
+
                     die();
-                } else if ($dir == 'down') {
+                }
+
+                if ($dir == 'down') {
                     $n = 0;
+
                     foreach ($previous_forums as $previous_forum) {
                         if ($previous_forum->id == $_GET['fid']) {
                             $previous_fid = $previous_forums[$n + 1]->id;
                             $previous_f_order = $previous_forums[$n + 1]->forum_order;
+
                             break;
                         }
                         $n++;
                     }
+
                     try {
-                        if (isset($previous_fid) && isset($previous_f_order)) {
-                            $queries->update('forums', $forum_id, array(
+                        if (isset($previous_fid, $previous_f_order)) {
+                            $queries->update('forums', $forum_id, [
                                 'forum_order' => $previous_f_order
-                            ));
-                            $queries->update('forums', $previous_fid, array(
+                            ]);
+                            $queries->update('forums', $previous_fid, [
                                 'forum_order' => $previous_f_order - 1
-                            ));
+                            ]);
                         }
                     } catch (Exception $e) {
-                        $errors = array($e->getMessage());
+                        $errors = [$e->getMessage()];
                     }
 
                     Redirect::to(URL::build('/panel/forums'));
+
                     die();
                 }
             } else if ($_GET['dir'] == 'drag') {
@@ -417,10 +452,11 @@ if (!isset($_GET['action']) && !isset($_GET['forum'])) {
                     $forums = json_decode($_GET['forums'])->forums;
 
                     $i = 0;
+
                     foreach ($forums as $item) {
-                        $queries->update('forums', $item, array(
+                        $queries->update('forums', $item, [
                             'forum_order' => $i
-                        ));
+                        ]);
 
                         $i++;
                     }
@@ -429,20 +465,25 @@ if (!isset($_GET['action']) && !isset($_GET['forum'])) {
                 die('Complete');
             } else {
                 echo $forum_language->get('forum', 'invalid_action') . ' - <a href="' . URL::build('/panel/forums') . '">' . $language->get('general', 'back') . '</a>';
+
                 die();
             }
+
             break;
 
         case 'delete':
-            if (!isset($_GET['fid']) || !is_numeric($_GET['fid'])) {
+            if (! isset($_GET['fid']) || ! is_numeric($_GET['fid'])) {
                 Redirect::to(URL::build('/panel/forums'));
+
                 die();
             }
 
             // Ensure forum exists
-            $forum = $queries->getWhere('forums', array('id', '=', $_GET['fid']));
-            if (!count($forum)) {
+            $forum = $queries->getWhere('forums', ['id', '=', $_GET['fid']]);
+
+            if (! count($forum)) {
                 Redirect::to(URL::build('/panel/forums'));
+
                 die();
             }
             $forum = $forum[0];
@@ -450,58 +491,63 @@ if (!isset($_GET['action']) && !isset($_GET['forum'])) {
             if (Input::exists()) {
                 if (Token::check()) {
                     if (Input::get('confirm') === 'true') {
-                        $forum_perms = $queries->getWhere('forums_permissions', array('forum_id', '=', $_GET['fid'])); // Get permissions to be deleted
+                        $forum_perms = $queries->getWhere('forums_permissions', ['forum_id', '=', $_GET['fid']]); // Get permissions to be deleted
+
                         if (Input::get('move_forum') === 'none') {
-                            $posts = $queries->getWhere('posts', array('forum_id', '=', $_GET['fid']));
-                            $topics = $queries->getWhere('topics', array('forum_id', '=', $_GET['fid']));
+                            $posts = $queries->getWhere('posts', ['forum_id', '=', $_GET['fid']]);
+                            $topics = $queries->getWhere('topics', ['forum_id', '=', $_GET['fid']]);
 
                             try {
                                 foreach ($posts as $post) {
-                                    $queries->delete('posts', array('id', '=', $post->id));
+                                    $queries->delete('posts', ['id', '=', $post->id]);
                                 }
+
                                 foreach ($topics as $topic) {
-                                    $queries->delete('topics', array('id', '=', $topic->id));
+                                    $queries->delete('topics', ['id', '=', $topic->id]);
                                 }
 
-                                $queries->delete('forums', array('id', '=', $_GET["fid"]));
+                                $queries->delete('forums', ['id', '=', $_GET['fid']]);
 
                                 // Forum perm deletion
                                 foreach ($forum_perms as $perm) {
-                                    $queries->delete('forums_permissions', array('id', '=', $perm->id));
+                                    $queries->delete('forums_permissions', ['id', '=', $perm->id]);
                                 }
 
                                 Session::flash('admin_forums', $forum_language->get('forum', 'forum_deleted_successfully'));
                                 Redirect::to(URL::build('/panel/forums'));
+
                                 die();
                             } catch (Exception $e) {
                                 die($e->getMessage());
                             }
                         } else {
                             $new_forum = Input::get('move_forum');
-                            $posts = $queries->getWhere('posts', array('forum_id', '=', $_GET['fid']));
-                            $topics = $queries->getWhere('topics', array('forum_id', '=', $_GET['fid']));
+                            $posts = $queries->getWhere('posts', ['forum_id', '=', $_GET['fid']]);
+                            $topics = $queries->getWhere('topics', ['forum_id', '=', $_GET['fid']]);
 
                             try {
                                 foreach ($posts as $post) {
-                                    $queries->update('posts', $post->id, array(
+                                    $queries->update('posts', $post->id, [
                                         'forum_id' => $new_forum
-                                    ));
+                                    ]);
                                 }
+
                                 foreach ($topics as $topic) {
-                                    $queries->update('topics', $topic->id, array(
+                                    $queries->update('topics', $topic->id, [
                                         'forum_id' => $new_forum
-                                    ));
+                                    ]);
                                 }
 
-                                $queries->delete('forums', array('id', '=', $_GET["fid"]));
+                                $queries->delete('forums', ['id', '=', $_GET['fid']]);
 
                                 // Forum perm deletion
                                 foreach ($forum_perms as $perm) {
-                                    $queries->delete('forums_permissions', array('id', '=', $perm->id));
+                                    $queries->delete('forums_permissions', ['id', '=', $perm->id]);
                                 }
 
                                 Session::flash('admin_forums', $forum_language->get('forum', 'forum_deleted_successfully'));
                                 Redirect::to(URL::build('/panel/forums'));
+
                                 die();
                             } catch (Exception $e) {
                                 die($e->getMessage());
@@ -509,28 +555,29 @@ if (!isset($_GET['action']) && !isset($_GET['forum'])) {
                         }
                     }
                 } else {
-                    $errors = array($language->get('general', 'invalid_token'));
+                    $errors = [$language->get('general', 'invalid_token')];
                 }
             }
 
             $other_forums = $queries->orderWhere('forums', 'parent > 0', 'forum_order', 'ASC');
-            $template_array = array();
+            $template_array = [];
+
             foreach ($other_forums as $item) {
                 if ($item->id == $forum->id)
                     continue;
 
-                $template_array[] = array(
+                $template_array[] = [
                     'id' => Output::getClean($item->id),
                     'name' => Output::getClean(Output::getDecoded($item->forum_title))
-                );
+                ];
             }
 
-            $smarty->assign(array(
+            $smarty->assign([
                 'DELETE_FORUM' => $forum_language->get('forum', 'delete_forum'),
                 'MOVE_TOPICS_AND_POSTS_TO' => $forum_language->get('forum', 'move_topics_and_posts_to'),
                 'DELETE_TOPICS_AND_POSTS' => $forum_language->get('forum', 'delete_topics_and_posts'),
                 'OTHER_FORUMS' => $template_array
-            ));
+            ]);
 
             $template_file = 'forum/forums_delete.tpl';
 
@@ -538,49 +585,52 @@ if (!isset($_GET['action']) && !isset($_GET['forum'])) {
 
         default:
             Redirect::to(URL::build('/panel/forums'));
+
             die();
+
             break;
     }
 } else if (isset($_GET['forum'])) {
     // Editing forum
-    if (!is_numeric($_GET['forum'])) {
+    if (! is_numeric($_GET['forum'])) {
         die();
-    } else {
-        $forum = $queries->getWhere('forums', array('id', '=', $_GET['forum']));
     }
-
-    if (!count($forum)) {
+        $forum = $queries->getWhere('forums', ['id', '=', $_GET['forum']]);
+    
+    if (! count($forum)) {
         Redirect::to(URL::build('/panel/forums'));
+
         die();
     }
 
     $available_forums = $queries->orderWhere('forums', 'id > 0', 'forum_order', 'ASC'); // Get a list of all forums which can be chosen as a parent
-    $groups = $queries->getWhere('groups', array('id', '<>', '0')); // Get a list of all groups
+    $groups = $queries->getWhere('groups', ['id', '<>', '0']); // Get a list of all groups
 
     if (Input::exists()) {
-        $errors = array();
+        $errors = [];
 
         if (Token::check()) {
             if (Input::get('action') == 'update') {
                 $validate = new Validate();
-                $validation = $validate->check($_POST, array(
-                    'title' => array(
+                $validation = $validate->check($_POST, [
+                    'title' => [
                         'required' => true,
                         'min' => 2,
                         'max' => 150
-                    ),
-                    'description' => array(
+                    ],
+                    'description' => [
                         'max' => 255
-                    ),
-                    'icon' => array(
+                    ],
+                    'icon' => [
                         'max' => 256
-                    )
-                ));
+                    ]
+                ]);
 
                 if ($validation->passed()) {
                     try {
                         if (isset($_POST['redirect']) && $_POST['redirect'] == 1) {
                             $redirect = 1;
+
                             if (isset($_POST['redirect_url']) && strlen($_POST['redirect_url']) > 0 && strlen($_POST['redirect_url']) <= 512) {
                                 $redirect_url = Output::getClean($_POST['redirect_url']);
                             } else {
@@ -595,8 +645,7 @@ if (!isset($_GET['action']) && !isset($_GET['forum'])) {
 
                         if (isset($_POST['parent_forum']))
                             $parent = $_POST['parent_forum'];
-                        else
-                            $parent = 0;
+                        else $parent = 0;
 
                         if (isset($_POST['hooks']) && count($_POST['hooks'])) $hooks = json_encode($_POST['hooks']);
                         else $hooks = null;
@@ -605,7 +654,7 @@ if (!isset($_GET['action']) && !isset($_GET['forum'])) {
                         else $default_labels = null;
 
                         // Update the forum
-                        $to_update = array(
+                        $to_update = [
                             'forum_title' => Output::getClean(Input::get('title')),
                             'forum_description' => Output::getClean(Input::get('description')),
                             'news' => Input::get('display'),
@@ -616,9 +665,9 @@ if (!isset($_GET['action']) && !isset($_GET['forum'])) {
                             'topic_placeholder' => Input::get('topic_placeholder'),
                             'hooks' => $hooks,
                             'default_labels' => $default_labels
-                        );
+                        ];
 
-                        if (!isset($redirect_error))
+                        if (! isset($redirect_error))
                             $to_update['redirect_url'] = $redirect_url;
 
                         $queries->update('forums', $_GET['forum'], $to_update);
@@ -634,16 +683,18 @@ if (!isset($_GET['action']) && !isset($_GET['forum'])) {
                     $view_others = Input::get('perm-view_others-0');
                     $moderate = 0;
 
-                    if (!($view)) $view = 0;
+                    if (! ($view)) $view = 0;
 
                     $forum_perm_exists = 0;
 
-                    $forum_perm_query = $queries->getWhere('forums_permissions', array('forum_id', '=', $_GET['forum']));
+                    $forum_perm_query = $queries->getWhere('forums_permissions', ['forum_id', '=', $_GET['forum']]);
+
                     if (count($forum_perm_query)) {
                         foreach ($forum_perm_query as $query) {
                             if ($query->group_id == 0) {
                                 $forum_perm_exists = 1;
                                 $update_id = $query->id;
+
                                 break;
                             }
                         }
@@ -652,16 +703,16 @@ if (!isset($_GET['action']) && !isset($_GET['forum'])) {
                     try {
                         if ($forum_perm_exists != 0) { // Permission already exists, update
                             // Update the forum
-                            $queries->update('forums_permissions', $update_id, array(
+                            $queries->update('forums_permissions', $update_id, [
                                 'view' => $view,
                                 'create_topic' => $create,
                                 'edit_topic' => $edit,
                                 'create_post' => $post,
                                 'view_other_topics' => $view_others,
                                 'moderate' => $moderate
-                            ));
+                            ]);
                         } else { // Permission doesn't exist, create
-                            $queries->create('forums_permissions', array(
+                            $queries->create('forums_permissions', [
                                 'group_id' => 0,
                                 'forum_id' => $_GET['forum'],
                                 'view' => $view,
@@ -670,7 +721,7 @@ if (!isset($_GET['action']) && !isset($_GET['forum'])) {
                                 'create_post' => $post,
                                 'view_other_topics' => $view_others,
                                 'moderate' => $moderate
-                            ));
+                            ]);
                         }
                     } catch (Exception $e) {
                         $errors[] = $e->getMessage();
@@ -685,12 +736,17 @@ if (!isset($_GET['action']) && !isset($_GET['forum'])) {
                         $view_others = Input::get('perm-view_others-' . $group->id);
                         $moderate = Input::get('perm-moderate-' . $group->id);
 
-                        if (!($view)) $view = 0;
-                        if (!($create)) $create = 0;
-                        if (!($edit)) $edit = 0;
-                        if (!($post)) $post = 0;
-                        if (!($view_others)) $view_others = 0;
-                        if (!($moderate)) $moderate = 0;
+                        if (! ($view)) $view = 0;
+
+                        if (! ($create)) $create = 0;
+
+                        if (! ($edit)) $edit = 0;
+
+                        if (! ($post)) $post = 0;
+
+                        if (! ($view_others)) $view_others = 0;
+
+                        if (! ($moderate)) $moderate = 0;
 
                         $forum_perm_exists = 0;
 
@@ -699,6 +755,7 @@ if (!isset($_GET['action']) && !isset($_GET['forum'])) {
                                 if ($query->group_id == $group->id) {
                                     $forum_perm_exists = 1;
                                     $update_id = $query->id;
+
                                     break;
                                 }
                             }
@@ -707,16 +764,16 @@ if (!isset($_GET['action']) && !isset($_GET['forum'])) {
                         try {
                             if ($forum_perm_exists != 0) { // Permission already exists, update
                                 // Update the forum
-                                $queries->update('forums_permissions', $update_id, array(
+                                $queries->update('forums_permissions', $update_id, [
                                     'view' => $view,
                                     'create_topic' => $create,
                                     'edit_topic' => $edit,
                                     'create_post' => $post,
                                     'view_other_topics' => $view_others,
                                     'moderate' => $moderate
-                                ));
+                                ]);
                             } else { // Permission doesn't exist, create
-                                $queries->create('forums_permissions', array(
+                                $queries->create('forums_permissions', [
                                     'group_id' => $group->id,
                                     'forum_id' => $_GET['forum'],
                                     'view' => $view,
@@ -725,7 +782,7 @@ if (!isset($_GET['action']) && !isset($_GET['forum'])) {
                                     'create_post' => $post,
                                     'view_other_topics' => $view_others,
                                     'moderate' => $moderate
-                                ));
+                                ]);
                             }
                         } catch (Exception $e) {
                             $errors[] = $e->getMessage();
@@ -734,36 +791,44 @@ if (!isset($_GET['action']) && !isset($_GET['forum'])) {
 
                     Session::flash('admin_forums', $forum_language->get('forum', 'forum_updated_successfully'));
                     Redirect::to(URL::build('/panel/forums'));
+
                     die();
-                } else {
+                }
+
                     foreach ($validation->errors() as $error) {
                         if (strpos($error, 'is required') !== false) {
                             switch ($error) {
                                 case (strpos($error, 'title') !== false):
                                     $errors[] = $forum_language->get('forum', 'input_forum_title');
+
                                     break;
                             }
                         } else if (strpos($error, 'minimum') !== false) {
                             switch ($error) {
                                 case (strpos($error, 'title') !== false):
                                     $errors[] = $forum_language->get('forum', 'forum_name_minimum');
+
                                     break;
                             }
                         } else if (strpos($error, 'maximum') !== false) {
                             switch ($error) {
                                 case (strpos($error, 'title') !== false):
                                     $errors[] = $forum_language->get('forum', 'forum_name_maximum');
+
                                     break;
+
                                 case (strpos($error, 'description') !== false):
                                     $errors[] = $forum_language->get('forum', 'forum_description_maximum');
+
                                     break;
+
                                 case (strpos($error, 'icon') !== false):
                                     $errors[] = $forum_language->get('forum', 'forum_icon_maximum');
+
                                     break;
                             }
                         }
                     }
-                }
             }
         } else {
             $errors[] = $language->get('general', 'invalid_token');
@@ -771,54 +836,57 @@ if (!isset($_GET['action']) && !isset($_GET['forum'])) {
     }
 
     $hooks_query = $queries->orderAll('hooks', 'id', 'ASC');
-    $hooks_array = array();
+    $hooks_array = [];
+
     if (count($hooks_query)) {
         foreach ($hooks_query as $hook) {
             if (in_array('newTopic', json_decode($hook->events))) {
-                $hooks_array[] = array(
+                $hooks_array[] = [
                     'id' => $hook->id,
                     'name' => Output::getClean($hook->name),
-                );
+                ];
             }
         }
     }
 
     $forum_hooks = $forum[0]->hooks;
 
-    $template_forums_array = array();
+    $template_forums_array = [];
+
     if (count($available_forums)) {
         foreach ($available_forums as $item) {
             if ($item->id == $forum[0]->id) continue;
-            $template_forums_array[] = array(
+            $template_forums_array[] = [
                 'id' => $item->id,
                 'title' => Output::getClean($item->forum_title)
-            );
+            ];
         }
     }
 
     // Get all forum permissions
-    $guest_query = DB::getInstance()->query('SELECT 0 AS id, `view`, view_other_topics FROM nl2_forums_permissions WHERE group_id = 0 AND forum_id = ?', array($forum[0]->id))->results();
-    $group_query = DB::getInstance()->query('SELECT id, name, `view`, create_topic, edit_topic, create_post, view_other_topics, moderate FROM nl2_groups A LEFT JOIN (SELECT group_id, `view`, create_topic, edit_topic, create_post, view_other_topics, moderate FROM nl2_forums_permissions WHERE forum_id = ?) B ON A.id = B.group_id ORDER BY `order` ASC', array($forum[0]->id))->results();
+    $guest_query = DB::getInstance()->query('SELECT 0 AS id, `view`, view_other_topics FROM nl2_forums_permissions WHERE group_id = 0 AND forum_id = ?', [$forum[0]->id])->results();
+    $group_query = DB::getInstance()->query('SELECT id, name, `view`, create_topic, edit_topic, create_post, view_other_topics, moderate FROM nl2_groups A LEFT JOIN (SELECT group_id, `view`, create_topic, edit_topic, create_post, view_other_topics, moderate FROM nl2_forums_permissions WHERE forum_id = ?) B ON A.id = B.group_id ORDER BY `order` ASC', [$forum[0]->id])->results();
 
     // Get default labels
-    $enabled_labels = $forum[0]->default_labels ? explode(',', $forum[0]->default_labels) : array();
-    $forum_labels = $queries->getWhere('forums_topic_labels', array('id', '<>', 0));
-    $available_labels = array();
+    $enabled_labels = $forum[0]->default_labels ? explode(',', $forum[0]->default_labels) : [];
+    $forum_labels = $queries->getWhere('forums_topic_labels', ['id', '<>', 0]);
+    $available_labels = [];
+
     if (count($forum_labels)) {
         foreach ($forum_labels as $label) {
             $forum_ids = explode(',', $label->fids);
 
             if (in_array($forum[0]->id, $forum_ids)) {
-                $available_labels[] = array(
+                $available_labels[] = [
                     'id' => Output::getClean($label->id),
                     'name' => Output::getClean($label->name),
                     'is_enabled' => in_array($label->id, $enabled_labels)
-                );
+                ];
             }
         }
     }
 
-    $smarty->assign(array(
+    $smarty->assign([
         'CANCEL' => $language->get('general', 'cancel'),
         'CANCEL_LINK' => URL::build('/panel/forums'),
         'ARE_YOU_SURE' => $language->get('general', 'are_you_sure'),
@@ -852,7 +920,7 @@ if (!isset($_GET['action']) && !isset($_GET['forum'])) {
         'HOOK_SELECT_INFO' => $language->get('admin', 'hook_select_info'),
         'FORUM_PERMISSIONS' => $forum_language->get('forum', 'forum_permissions'),
         'GUESTS' => $language->get('user', 'guests'),
-        'GUEST_PERMISSIONS' => (count($guest_query) ? $guest_query[0] : array()),
+        'GUEST_PERMISSIONS' => (count($guest_query) ? $guest_query[0] : []),
         'GROUP_PERMISSIONS' => $group_query,
         'GROUP' => $forum_language->get('forum', 'group'),
         'CAN_VIEW_FORUM' => $forum_language->get('forum', 'can_view_forum'),
@@ -866,30 +934,30 @@ if (!isset($_GET['action']) && !isset($_GET['forum'])) {
         'DEFAULT_LABELS' => $forum_language->get('forum', 'default_labels'),
         'DEFAULT_LABELS_INFO' => $forum_language->get('forum', 'default_labels_info'),
         'AVAILABLE_DEFAULT_LABELS' => $available_labels
-    ));
+    ]);
 
     $template_file = 'forum/forums_edit.tpl';
 }
 
 // Load modules + template
-Module::loadPage($user, $pages, $cache, $smarty, array($navigation, $cc_nav, $mod_nav), $widgets);
+Module::loadPage($user, $pages, $cache, $smarty, [$navigation, $cc_nav, $mod_nav], $widgets);
 
 if (Session::exists('admin_forums'))
     $success = Session::flash('admin_forums');
 
 if (isset($success))
-    $smarty->assign(array(
+    $smarty->assign([
         'SUCCESS' => $success,
         'SUCCESS_TITLE' => $language->get('general', 'success')
-    ));
+    ]);
 
 if (isset($errors) && count($errors))
-    $smarty->assign(array(
+    $smarty->assign([
         'ERRORS' => $errors,
         'ERRORS_TITLE' => $language->get('general', 'error')
-    ));
+    ]);
 
-$smarty->assign(array(
+$smarty->assign([
     'PARENT_PAGE' => PARENT_PAGE,
     'DASHBOARD' => $language->get('admin', 'dashboard'),
     'FORUM' => $forum_language->get('forum', 'forum'),
@@ -897,14 +965,14 @@ $smarty->assign(array(
     'PAGE' => PANEL_PAGE,
     'TOKEN' => Token::get(),
     'SUBMIT' => $language->get('general', 'submit')
-));
+]);
 
 $page_load = microtime(true) - $start;
 define('PAGE_LOAD_TIME', str_replace('{x}', round($page_load, 3), $language->get('general', 'page_loaded_in')));
 
 $template->onPageLoad();
 
-require(ROOT_PATH . '/core/templates/panel_navbar.php');
+require (ROOT_PATH . '/core/templates/panel_navbar.php');
 
 // Display template
 $template->displayTemplate($template_file, $smarty);
diff --git a/modules/Forum/pages/panel/labels.php b/modules/Forum/pages/panel/labels.php
index 23f9dda807c14cadabdc4ac7309b3a232fb5cf38..1cef03acc694194e05a797ee774d28b33c8cc17a 100644
--- a/modules/Forum/pages/panel/labels.php
+++ b/modules/Forum/pages/panel/labels.php
@@ -10,638 +10,652 @@
  */
 
 // Can the user view the panel?
-if($user->isLoggedIn()){
-	if(!$user->canViewACP()){
-		// No
-		Redirect::to(URL::build('/'));
-		die();
-	}
-	if(!$user->isAdmLoggedIn()){
-		// Needs to authenticate
-		Redirect::to(URL::build('/panel/auth'));
-		die();
-	} else {
-		if(!$user->hasPermission('admincp.forums')){
-			require_once(ROOT_PATH . '/403.php');
-			die();
-		}
-	}
+if ($user->isLoggedIn()){
+    if (! $user->canViewACP()){
+        // No
+        Redirect::to(URL::build('/'));
+
+        die();
+    }
+
+    if (! $user->isAdmLoggedIn()){
+        // Needs to authenticate
+        Redirect::to(URL::build('/panel/auth'));
+
+        die();
+    }
+
+        if (! $user->hasPermission('admincp.forums')){
+            require_once (ROOT_PATH . '/403.php');
+
+            die();
+        }
 } else {
-	// Not logged in
-	Redirect::to(URL::build('/login'));
-	die();
+    // Not logged in
+    Redirect::to(URL::build('/login'));
+
+    die();
 }
 
 define('PAGE', 'panel');
 define('PARENT_PAGE', 'forum');
 define('PANEL_PAGE', 'forum_labels');
 $page_title = $forum_language->get('forum', 'labels');
-require_once(ROOT_PATH . '/core/templates/backend_init.php');
-
-if(!isset($_GET['action'])){
-	// Topic labels
-	$topic_labels = $queries->getWhere('forums_topic_labels', array('id', '<>', 0));
-	$template_array = array();
-
-	if(count($topic_labels)){
-		foreach($topic_labels as $topic_label){
-			$label_type = $queries->getWhere('forums_labels', array('id', '=', $topic_label->label));
-			if(!count($label_type)) $label_type = 0;
-			else $label_type = $label_type[0];
-
-			// List of forums label is enabled in
-			$enabled_forums = explode(',', $topic_label->fids);
-			$forums_string = '';
-			foreach($enabled_forums as $item){
-				$forum_name = $queries->getWhere('forums', array('id', '=', $item));
-				if(count($forum_name)) $forums_string .= Output::getClean($forum_name[0]->forum_title) . ', '; else $forums_string .= $forum_language->get('forum', 'no_forums');
-			}
-			$forums_string = rtrim($forums_string, ', ');
-
-			$template_array[] = array(
-				'name' => str_replace('{x}', Output::getClean(Output::getDecoded($topic_label->name)), Output::getDecoded($label_type->html)),
-				'edit_link' => URL::build('/panel/forums/labels/', 'action=edit&lid=' . Output::getClean($topic_label->id)),
-				'delete_link' => URL::build('/panel/forums/labels/', 'action=delete&lid=' . Output::getClean($topic_label->id)),
-				'enabled_forums' => $forums_string
-			);
-		}
-	}
-
-	$smarty->assign(array(
-		'LABEL_TYPES' => $forum_language->get('forum', 'label_types'),
-		'LABEL_TYPES_LINK' => URL::build('/panel/forums/labels/', 'action=types'),
-		'NEW_LABEL' => $forum_language->get('forum', 'new_label'),
-		'NEW_LABEL_LINK' => URL::build('/panel/forums/labels/', 'action=new'),
-		'ALL_LABELS' => $template_array,
-		'EDIT' => $language->get('general', 'edit'),
-		'DELETE' => $language->get('general', 'delete'),
-		'CONFIRM_DELETE' => $language->get('general', 'confirm_deletion'),
-		'ARE_YOU_SURE' => $language->get('general', 'are_you_sure'),
-		'YES' => $language->get('general', 'yes'),
-		'NO' => $language->get('general', 'no'),
-		'NO_LABELS' => $forum_language->get('forum', 'no_labels_defined')
-	));
-
-	$template_file = 'forum/labels.tpl';
 
+require_once (ROOT_PATH . '/core/templates/backend_init.php');
+
+if (! isset($_GET['action'])){
+    // Topic labels
+    $topic_labels = $queries->getWhere('forums_topic_labels', ['id', '<>', 0]);
+    $template_array = [];
+
+    if (count($topic_labels)){
+        foreach ($topic_labels as $topic_label){
+            $label_type = $queries->getWhere('forums_labels', ['id', '=', $topic_label->label]);
+
+            if (! count($label_type)) $label_type = 0;
+            else $label_type = $label_type[0];
+
+            // List of forums label is enabled in
+            $enabled_forums = explode(',', $topic_label->fids);
+            $forums_string = '';
+
+            foreach ($enabled_forums as $item){
+                $forum_name = $queries->getWhere('forums', ['id', '=', $item]);
+
+                if (count($forum_name)) $forums_string .= Output::getClean($forum_name[0]->forum_title) . ', '; else $forums_string .= $forum_language->get('forum', 'no_forums');
+            }
+            $forums_string = rtrim($forums_string, ', ');
+
+            $template_array[] = [
+                'name' => str_replace('{x}', Output::getClean(Output::getDecoded($topic_label->name)), Output::getDecoded($label_type->html)),
+                'edit_link' => URL::build('/panel/forums/labels/', 'action=edit&lid=' . Output::getClean($topic_label->id)),
+                'delete_link' => URL::build('/panel/forums/labels/', 'action=delete&lid=' . Output::getClean($topic_label->id)),
+                'enabled_forums' => $forums_string
+            ];
+        }
+    }
+
+    $smarty->assign([
+        'LABEL_TYPES' => $forum_language->get('forum', 'label_types'),
+        'LABEL_TYPES_LINK' => URL::build('/panel/forums/labels/', 'action=types'),
+        'NEW_LABEL' => $forum_language->get('forum', 'new_label'),
+        'NEW_LABEL_LINK' => URL::build('/panel/forums/labels/', 'action=new'),
+        'ALL_LABELS' => $template_array,
+        'EDIT' => $language->get('general', 'edit'),
+        'DELETE' => $language->get('general', 'delete'),
+        'CONFIRM_DELETE' => $language->get('general', 'confirm_deletion'),
+        'ARE_YOU_SURE' => $language->get('general', 'are_you_sure'),
+        'YES' => $language->get('general', 'yes'),
+        'NO' => $language->get('general', 'no'),
+        'NO_LABELS' => $forum_language->get('forum', 'no_labels_defined')
+    ]);
+
+    $template_file = 'forum/labels.tpl';
 } else {
-	switch($_GET['action']){
-		case 'new':
-			// Deal with input
-			if(Input::exists()){
-				// Check token
-				if(Token::check()){
-					// Valid token
-					// Validate input
-					$validate = new Validate();
-
-					$validation = $validate->check($_POST, array(
-						'label_name' => array(
-							'required' => true,
-							'min' => 1,
-							'max' => 32
-						),
-						'label_id' => array(
-							'required' => true
-						)
-					));
-
-					if($validation->passed()){
-						// Create string containing selected forum IDs
-						$forum_string = '';
-						if(isset($_POST['label_forums']) && count($_POST['label_forums'])){
-							// Turn array of inputted forums into string of forums
-							foreach($_POST['label_forums'] as $item){
-								$forum_string .= $item . ',';
-							}
-						}
-
-						$forum_string = rtrim($forum_string, ',');
-
-						$group_string = '';
-						if(isset($_POST['label_groups']) && count($_POST['label_groups'])){
-							foreach($_POST['label_groups'] as $item){
-								$group_string .= $item . ',';
-							}
-						}
-
-						$group_string = rtrim($group_string, ',');
-
-						try {
-							$queries->create('forums_topic_labels', array(
-								'fids' => $forum_string,
-								'name' => Output::getClean(Input::get('label_name')),
-								'label' => Input::get('label_id'),
-								'gids' => $group_string
-							));
-
-							Session::flash('forum_labels', $forum_language->get('forum', 'label_creation_success'));
-							Redirect::to(URL::build('/panel/forums/labels'));
-							die();
-						} catch(Exception $e){
-							$errors = array($e->getMessage());
-						}
-
-					} else {
-						// Validation errors
-						$errors = array($forum_language->get('forum', 'label_creation_error'));
-					}
-
-				} else {
-					// Invalid token
-					$errors = array($language->get('general', 'invalid_token'));
-				}
-			}
-
-			// Get a list of labels
-			$labels = $queries->getWhere('forums_labels', array('id', '<>', 0));
-			$template_array = array();
-
-			if(count($labels)){
-				foreach($labels as $label){
-					$template_array[] = array(
-						'id' => Output::getClean($label->id),
-						'name' => str_replace('{x}', Output::getClean($label->name), Output::getDecoded($label->html))
-					);
-				}
-			}
-
-			// Get a list of forums
-			$forum_list = $queries->orderWhere('forums', 'parent <> 0', 'forum_order', 'ASC');
-			$template_forums = array();
-
-			if(count($forum_list)){
-				foreach($forum_list as $item){
-					$template_forums[] = array(
-						'id' => Output::getClean($item->id),
-						'name' => Output::getClean(Output::getDecoded($item->forum_title))
-					);
-				}
-			}
-
-			// Get a list of all groups
-			$group_list = $queries->getWhere('groups', array('id', '<>', 0));
-			$template_groups = array();
-
-			if(count($group_list)){
-				foreach($group_list as $item){
-					$template_groups[] = array(
-						'id' => Output::getClean($item->id),
-						'name' => Output::getClean(Output::getDecoded($item->name))
-					);
-				}
-			}
-
-			$smarty->assign(array(
-				'CREATING_LABEL' => $forum_language->get('forum', 'creating_label'),
-				'CANCEL' => $language->get('general', 'cancel'),
-				'CANCEL_LINK' => URL::build('/panel/forums/labels'),
-				'ARE_YOU_SURE' => $language->get('general', 'are_you_sure'),
-				'CONFIRM_CANCEL' => $language->get('general', 'confirm_cancel'),
-				'YES' => $language->get('general', 'yes'),
-				'NO' => $language->get('general', 'no'),
-				'LABEL_NAME' => $forum_language->get('forum', 'label_name'),
-				'LABEL_NAME_VALUE' => Output::getClean(Input::get('label_name')),
-				'LABEL_TYPE' => $forum_language->get('forum', 'label_type'),
-				'LABEL_TYPES' => $template_array,
-				'LABEL_FORUMS' => $forum_language->get('forum', 'label_forums'),
-				'ALL_FORUMS' => $template_forums,
-				'LABEL_GROUPS' => $forum_language->get('forum', 'label_groups'),
-				'ALL_GROUPS' => $template_groups
-			));
-
-			$template_file = 'forum/labels_new.tpl';
-
-			break;
-
-		case 'edit':
-			// Editing a label
-			if(!isset($_GET['lid']) || !is_numeric($_GET['lid'])){
-				// Check the label ID is valid
-				Redirect::to(URL::build('/panel/forums/labels'));
-				die();
-			}
-
-			// Does the label exist?
-			$label = $queries->getWhere('forums_topic_labels', array('id', '=', $_GET['lid']));
-			if(!count($label)){
-				// No, it doesn't exist
-				Redirect::to(URL::build('/panel/forums/labels'));
-				die();
-			} else {
-				$label = $label[0];
-			}
-
-			// Deal with input
-			if(Input::exists()){
-				// Check token
-				if(Token::check()){
-					// Valid token
-					// Validate input
-					$validate = new Validate();
-
-					$validation = $validate->check($_POST, array(
-						'label_name' => array(
-							'required' => true,
-							'min' => 1,
-							'max' => 32
-						),
-						'label_id' => array(
-							'required' => true
-						)
-					));
-
-					if($validation->passed()){
-						// Create string containing selected forum IDs
-						$forum_string = '';
-						if(isset($_POST['label_forums']) && count($_POST['label_forums'])){
-							foreach($_POST['label_forums'] as $item){
-								// Turn array of inputted forums into string of forums
-								$forum_string .= $item . ',';
-							}
-						}
-
-						$forum_string = rtrim($forum_string, ',');
-
-						$group_string = '';
-						if(isset($_POST['label_groups']) && count($_POST['label_groups'])){
-							foreach($_POST['label_groups'] as $item){
-								$group_string .= $item . ',';
-							}
-						}
-
-						$group_string = rtrim($group_string, ',');
-
-						try {
-							$queries->update('forums_topic_labels', $label->id, array(
-								'fids' => $forum_string,
-								'name' => Output::getClean(Input::get('label_name')),
-								'label' => Input::get('label_id'),
-								'gids' => $group_string
-							));
-
-							Session::flash('forum_labels', $forum_language->get('forum', 'label_edit_success'));
-							Redirect::to(URL::build('/panel/forums/labels', 'action=edit&lid=' . Output::getClean($label->id)));
-							die();
-						} catch(Exception $e){
-							$errors = array($e->getMessage());
-						}
-
-					} else {
-						// Validation errors
-						$errors = array($forum_language->get('forum', 'label_creation_error'));
-					}
-
-				} else {
-					// Invalid token
-					$errors = array($language->get('general', 'invalid_token'));
-				}
-			}
-
-			// Get a list of labels
-			$labels = $queries->getWhere('forums_labels', array('id', '<>', 0));
-			$template_array = array();
-
-			if(count($labels)){
-				foreach($labels as $item){
-					$template_array[] = array(
-						'id' => Output::getClean($item->id),
-						'name' => str_replace('{x}', Output::getClean($item->name), Output::getDecoded($item->html)),
-						'selected' => ($label->label == $item->id)
-					);
-				}
-			}
-
-			// Get a list of forums
-			$forum_list = $queries->orderWhere('forums', 'parent <> 0', 'forum_order', 'ASC');
-			$template_forums = array();
-
-			// Get a list of forums in which the label is enabled
-			$enabled_forums = explode(',', $label->fids);
-
-			if(count($forum_list)){
-				foreach($forum_list as $item){
-					$template_forums[] = array(
-						'id' => Output::getClean($item->id),
-						'name' => Output::getClean(Output::getDecoded($item->forum_title)),
-						'selected' => (in_array($item->id, $enabled_forums))
-					);
-				}
-			}
-
-			// Get a list of all groups
-			$group_list = $queries->getWhere('groups', array('id', '<>', 0));
-			$template_groups = array();
-
-			// Get a list of groups which have access to the label
-			$groups = explode(',', $label->gids);
-
-			if(count($group_list)){
-				foreach($group_list as $item){
-					$template_groups[] = array(
-						'id' => Output::getClean($item->id),
-						'name' => Output::getClean(Output::getDecoded($item->name)),
-						'selected' => (in_array($item->id, $groups))
-					);
-				}
-			}
-
-			$smarty->assign(array(
-				'EDITING_LABEL' => $forum_language->get('forum', 'editing_label'),
-				'CANCEL' => $language->get('general', 'cancel'),
-				'CANCEL_LINK' => URL::build('/panel/forums/labels'),
-				'ARE_YOU_SURE' => $language->get('general', 'are_you_sure'),
-				'CONFIRM_CANCEL' => $language->get('general', 'confirm_cancel'),
-				'YES' => $language->get('general', 'yes'),
-				'NO' => $language->get('general', 'no'),
-				'LABEL_NAME' => $forum_language->get('forum', 'label_name'),
-				'LABEL_NAME_VALUE' => Output::getClean($label->name),
-				'LABEL_TYPE' => $forum_language->get('forum', 'label_type'),
-				'LABEL_TYPES' => $template_array,
-				'LABEL_FORUMS' => $forum_language->get('forum', 'label_forums'),
-				'ALL_FORUMS' => $template_forums,
-				'LABEL_GROUPS' => $forum_language->get('forum', 'label_groups'),
-				'ALL_GROUPS' => $template_groups
-			));
-
-			$template_file = 'forum/labels_edit.tpl';
-
-			break;
-
-		case 'delete':
-			// Label deletion
-			if(!isset($_GET['lid']) || !is_numeric($_GET['lid'])){
-				// Check the label ID is valid
-				Redirect::to(URL::build('/panel/forums/labels'));
-				die();
-			}
-
-			try {
-				// Delete the label
-				$queries->delete('forums_topic_labels', array('id', '=', $_GET['lid']));
-				Session::flash('forum_labels', $forum_language->get('forum', 'label_deleted_successfully'));
-
-			} catch(Exception $e){
-				// Error, redirect anyway
-			}
-
-			Redirect::to(URL::build('/panel/forums/labels'));
-			die();
-
-			break;
-
-		case 'types':
-			// List label types
-			$labels = $queries->getWhere('forums_labels', array('id', '<>', 0));
-			$template_array = array();
-
-			if(count($labels)){
-				foreach($labels as $label){
-					$template_array[] = array(
-						'name' => str_replace('{x}', Output::getClean(Output::getDecoded($label->name)), Output::getDecoded($label->html)),
-						'edit_link' => URL::build('/panel/forums/labels/', 'action=edit_type&lid=' . Output::getClean($label->id)),
-						'delete_link' => URL::build('/panel/forums/labels/', 'action=delete_type&lid=' . Output::getClean($label->id)),
-					);
-				}
-			}
-
-			$smarty->assign(array(
-				'LABEL_TYPES' => $forum_language->get('forum', 'label_types'),
-				'LABELS_LINK' => URL::build('/panel/forums/labels'),
-				'NEW_LABEL_TYPE' => $forum_language->get('forum', 'new_label_type'),
-				'NEW_LABEL_TYPE_LINK' => URL::build('/panel/forums/labels/', 'action=new_type'),
-				'ALL_LABEL_TYPES' => $template_array,
-				'EDIT' => $language->get('general', 'edit'),
-				'DELETE' => $language->get('general', 'delete'),
-				'CONFIRM_DELETE' => $language->get('general', 'confirm_deletion'),
-				'ARE_YOU_SURE' => $language->get('general', 'are_you_sure'),
-				'YES' => $language->get('general', 'yes'),
-				'NO' => $language->get('general', 'no'),
-				'NO_LABEL_TYPES' => $forum_language->get('forum', 'no_label_types_defined')
-			));
-
-			$template_file = 'forum/labels_types.tpl';
-
-			break;
-
-		case 'new_type':
-			// Creating a label type
-			// Deal with input
-			if(Input::exists()){
-				// Check token
-				if(Token::check()){
-					// Valid token
-					// Validate input
-					$validate = new Validate();
-
-					$validation = $validate->check($_POST, array(
-						'label_name' => array(
-							'required' => true,
-							'min' => 1,
-							'max' => 32
-						),
-						'label_html' => array(
-							'required' => true,
-							'min' => 1,
-							'max' => 1024
-						)
-					));
-
-					if($validation->passed()){
-						try {
-							$queries->create('forums_labels', array(
-								'name' => Output::getClean(Input::get('label_name')),
-								'html' => Input::get('label_html')
-							));
-
-							Session::flash('forum_labels', $forum_language->get('forum', 'label_type_creation_success'));
-							Redirect::to(URL::build('/panel/forums/labels/', 'action=types'));
-							die();
-
-						} catch(Exception $e){
-							$errors = array($e->getMessage());
-						}
-
-					} else {
-						// Validation errors
-						$errors = array($forum_language->get('forum', 'label_type_creation_error'));
-					}
-
-				} else {
-					// Invalid token
-					$errors = array($language->get('general', 'invalid_token'));
-				}
-			}
-
-
-			$smarty->assign(array(
-				'LABEL_TYPES' => $forum_language->get('forum', 'label_types'),
-				'CREATING_LABEL_TYPE' => $forum_language->get('forum', 'creating_label_type'),
-				'CANCEL' => $language->get('general', 'cancel'),
-				'CONFIRM_CANCEL' => $language->get('general', 'confirm_cancel'),
-				'CANCEL_LINK' => URL::build('/panel/forums/labels/', 'action=types'),
-				'ARE_YOU_SURE' => $language->get('general', 'are_you_sure'),
-				'YES' => $language->get('general', 'yes'),
-				'NO' => $language->get('general', 'no'),
-				'LABEL_TYPE_NAME' => $forum_language->get('forum', 'label_type_name'),
-				'LABEL_TYPE_NAME_VALUE' => Output::getClean(Input::get('label_type_name')),
-				'LABEL_TYPE_HTML' => $forum_language->get('forum', 'label_type_html'),
-				'INFO' => $language->get('general', 'info'),
-				'LABEL_TYPE_HTML_INFO' => $forum_language->get('forum', 'label_type_html_help'),
-				'LABEL_TYPE_HTML_VALUE' => Output::getClean(Input::get('label_type_html'))
-			));
-
-			$template_file = 'forum/labels_types_new.tpl';
-
-			break;
-
-		case 'edit_type':
-			// Editing a label type
-			if(!isset($_GET['lid']) || !is_numeric($_GET['lid'])){
-				Redirect::to(URL::build('/panel/forums/labels/', 'action=types'));
-				die();
-			}
-
-			// Does the label exist?
-			$label = $queries->getWhere('forums_labels', array('id', '=', $_GET['lid']));
-			if(!count($label)){
-				// No, it doesn't exist
-				Redirect::to(URL::build('/panel/forums/labels/', 'action=types'));
-				die();
-			} else {
-				$label = $label[0];
-			}
-
-			// Deal with input
-			if(Input::exists()){
-				// Check token
-				if(Token::check()){
-					// Valid token
-					// Validate input
-					$validate = new Validate();
-
-					$validation = $validate->check($_POST, array(
-						'label_name' => array(
-							'required' => true,
-							'min' => 1,
-							'max' => 32
-						),
-						'label_html' => array(
-							'required' => true,
-							'min' => 1,
-							'max' => 1024
-						)
-					));
-
-					if($validation->passed()){
-						try {
-							$queries->update('forums_labels', $label->id, array(
-								'name' => Output::getClean(Input::get('label_name')),
-								'html' => Output::getDecoded(Input::get('label_html'))
-							));
-
-							Session::flash('forum_labels', $forum_language->get('forum', 'label_type_edit_success'));
-							Redirect::to(URL::build('/panel/forums/labels/', 'action=edit_type&lid=' . Output::getClean($label->id)));
-							die();
-						} catch(Exception $e){
-							$errors = array($e->getMessage());
-						}
-
-					} else {
-						// Validation errors
-						$errors = array($forum_language->get('forum', 'label_type_creation_error'));
-					}
-
-				} else {
-					// Invalid token
-					$errors = array($language->get('general', 'invalid_token'));
-				}
-			}
-
-			$smarty->assign(array(
-				'LABEL_TYPES' => $forum_language->get('forum', 'label_types'),
-				'EDITING_LABEL_TYPE' => $forum_language->get('forum', 'editing_label_type'),
-				'CANCEL' => $language->get('general', 'cancel'),
-				'CONFIRM_CANCEL' => $language->get('general', 'confirm_cancel'),
-				'CANCEL_LINK' => URL::build('/panel/forums/labels/', 'action=types'),
-				'ARE_YOU_SURE' => $language->get('general', 'are_you_sure'),
-				'YES' => $language->get('general', 'yes'),
-				'NO' => $language->get('general', 'no'),
-				'LABEL_TYPE_NAME' => $forum_language->get('forum', 'label_type_name'),
-				'LABEL_TYPE_NAME_VALUE' => Output::getClean($label->name),
-				'LABEL_TYPE_HTML' => $forum_language->get('forum', 'label_type_html'),
-				'INFO' => $language->get('general', 'info'),
-				'LABEL_TYPE_HTML_INFO' => $forum_language->get('forum', 'label_type_html_help'),
-				'LABEL_TYPE_HTML_VALUE' => Output::getClean($label->html)
-			));
-
-			$template_file = 'forum/labels_types_edit.tpl';
-
-			break;
-
-		case 'delete_type':
-			// Label deletion
-			if(!isset($_GET['lid']) || !is_numeric($_GET['lid'])){
-				// Check the label ID is valid
-				Redirect::to(URL::build('/panel/forums/labels/', 'action=types'));
-				die();
-			}
-			try {
-				// Delete the label
-				$queries->delete('forums_labels', array('id', '=', $_GET['lid']));
-				Session::flash('forum_labels', $forum_language->get('forum', 'label_type_deleted_successfully'));
-
-			} catch(Exception $e){
-				// Error, redirect anyway
-			}
-
-			Redirect::to(URL::build('/panel/forums/labels/', 'action=types'));
-			die();
-
-			break;
-
-		default:
-			Redirect::to(URL::build('/panel/forums/labels'));
-			die();
-			break;
-	}
-
+    switch($_GET['action']){
+        case 'new':
+            // Deal with input
+            if (Input::exists()){
+                // Check token
+                if (Token::check()){
+                    // Valid token
+                    // Validate input
+                    $validate = new Validate();
+
+                    $validation = $validate->check($_POST, [
+                        'label_name' => [
+                            'required' => true,
+                            'min' => 1,
+                            'max' => 32
+                        ],
+                        'label_id' => [
+                            'required' => true
+                        ]
+                    ]);
+
+                    if ($validation->passed()){
+                        // Create string containing selected forum IDs
+                        $forum_string = '';
+
+                        if (isset($_POST['label_forums']) && count($_POST['label_forums'])){
+                            // Turn array of inputted forums into string of forums
+                            foreach ($_POST['label_forums'] as $item){
+                                $forum_string .= $item . ',';
+                            }
+                        }
+
+                        $forum_string = rtrim($forum_string, ',');
+
+                        $group_string = '';
+
+                        if (isset($_POST['label_groups']) && count($_POST['label_groups'])){
+                            foreach ($_POST['label_groups'] as $item){
+                                $group_string .= $item . ',';
+                            }
+                        }
+
+                        $group_string = rtrim($group_string, ',');
+
+                        try {
+                            $queries->create('forums_topic_labels', [
+                                'fids' => $forum_string,
+                                'name' => Output::getClean(Input::get('label_name')),
+                                'label' => Input::get('label_id'),
+                                'gids' => $group_string
+                            ]);
+
+                            Session::flash('forum_labels', $forum_language->get('forum', 'label_creation_success'));
+                            Redirect::to(URL::build('/panel/forums/labels'));
+
+                            die();
+                        } catch (Exception $e){
+                            $errors = [$e->getMessage()];
+                        }
+                    } else {
+                        // Validation errors
+                        $errors = [$forum_language->get('forum', 'label_creation_error')];
+                    }
+                } else {
+                    // Invalid token
+                    $errors = [$language->get('general', 'invalid_token')];
+                }
+            }
+
+            // Get a list of labels
+            $labels = $queries->getWhere('forums_labels', ['id', '<>', 0]);
+            $template_array = [];
+
+            if (count($labels)){
+                foreach ($labels as $label){
+                    $template_array[] = [
+                        'id' => Output::getClean($label->id),
+                        'name' => str_replace('{x}', Output::getClean($label->name), Output::getDecoded($label->html))
+                    ];
+                }
+            }
+
+            // Get a list of forums
+            $forum_list = $queries->orderWhere('forums', 'parent <> 0', 'forum_order', 'ASC');
+            $template_forums = [];
+
+            if (count($forum_list)){
+                foreach ($forum_list as $item){
+                    $template_forums[] = [
+                        'id' => Output::getClean($item->id),
+                        'name' => Output::getClean(Output::getDecoded($item->forum_title))
+                    ];
+                }
+            }
+
+            // Get a list of all groups
+            $group_list = $queries->getWhere('groups', ['id', '<>', 0]);
+            $template_groups = [];
+
+            if (count($group_list)){
+                foreach ($group_list as $item){
+                    $template_groups[] = [
+                        'id' => Output::getClean($item->id),
+                        'name' => Output::getClean(Output::getDecoded($item->name))
+                    ];
+                }
+            }
+
+            $smarty->assign([
+                'CREATING_LABEL' => $forum_language->get('forum', 'creating_label'),
+                'CANCEL' => $language->get('general', 'cancel'),
+                'CANCEL_LINK' => URL::build('/panel/forums/labels'),
+                'ARE_YOU_SURE' => $language->get('general', 'are_you_sure'),
+                'CONFIRM_CANCEL' => $language->get('general', 'confirm_cancel'),
+                'YES' => $language->get('general', 'yes'),
+                'NO' => $language->get('general', 'no'),
+                'LABEL_NAME' => $forum_language->get('forum', 'label_name'),
+                'LABEL_NAME_VALUE' => Output::getClean(Input::get('label_name')),
+                'LABEL_TYPE' => $forum_language->get('forum', 'label_type'),
+                'LABEL_TYPES' => $template_array,
+                'LABEL_FORUMS' => $forum_language->get('forum', 'label_forums'),
+                'ALL_FORUMS' => $template_forums,
+                'LABEL_GROUPS' => $forum_language->get('forum', 'label_groups'),
+                'ALL_GROUPS' => $template_groups
+            ]);
+
+            $template_file = 'forum/labels_new.tpl';
+
+            break;
+
+        case 'edit':
+            // Editing a label
+            if (! isset($_GET['lid']) || ! is_numeric($_GET['lid'])){
+                // Check the label ID is valid
+                Redirect::to(URL::build('/panel/forums/labels'));
+
+                die();
+            }
+
+            // Does the label exist?
+            $label = $queries->getWhere('forums_topic_labels', ['id', '=', $_GET['lid']]);
+
+            if (! count($label)){
+                // No, it doesn't exist
+                Redirect::to(URL::build('/panel/forums/labels'));
+
+                die();
+            }
+                $label = $label[0];
+            
+            // Deal with input
+            if (Input::exists()){
+                // Check token
+                if (Token::check()){
+                    // Valid token
+                    // Validate input
+                    $validate = new Validate();
+
+                    $validation = $validate->check($_POST, [
+                        'label_name' => [
+                            'required' => true,
+                            'min' => 1,
+                            'max' => 32
+                        ],
+                        'label_id' => [
+                            'required' => true
+                        ]
+                    ]);
+
+                    if ($validation->passed()){
+                        // Create string containing selected forum IDs
+                        $forum_string = '';
+
+                        if (isset($_POST['label_forums']) && count($_POST['label_forums'])){
+                            foreach ($_POST['label_forums'] as $item){
+                                // Turn array of inputted forums into string of forums
+                                $forum_string .= $item . ',';
+                            }
+                        }
+
+                        $forum_string = rtrim($forum_string, ',');
+
+                        $group_string = '';
+
+                        if (isset($_POST['label_groups']) && count($_POST['label_groups'])){
+                            foreach ($_POST['label_groups'] as $item){
+                                $group_string .= $item . ',';
+                            }
+                        }
+
+                        $group_string = rtrim($group_string, ',');
+
+                        try {
+                            $queries->update('forums_topic_labels', $label->id, [
+                                'fids' => $forum_string,
+                                'name' => Output::getClean(Input::get('label_name')),
+                                'label' => Input::get('label_id'),
+                                'gids' => $group_string
+                            ]);
+
+                            Session::flash('forum_labels', $forum_language->get('forum', 'label_edit_success'));
+                            Redirect::to(URL::build('/panel/forums/labels', 'action=edit&lid=' . Output::getClean($label->id)));
+
+                            die();
+                        } catch (Exception $e){
+                            $errors = [$e->getMessage()];
+                        }
+                    } else {
+                        // Validation errors
+                        $errors = [$forum_language->get('forum', 'label_creation_error')];
+                    }
+                } else {
+                    // Invalid token
+                    $errors = [$language->get('general', 'invalid_token')];
+                }
+            }
+
+            // Get a list of labels
+            $labels = $queries->getWhere('forums_labels', ['id', '<>', 0]);
+            $template_array = [];
+
+            if (count($labels)){
+                foreach ($labels as $item){
+                    $template_array[] = [
+                        'id' => Output::getClean($item->id),
+                        'name' => str_replace('{x}', Output::getClean($item->name), Output::getDecoded($item->html)),
+                        'selected' => ($label->label == $item->id)
+                    ];
+                }
+            }
+
+            // Get a list of forums
+            $forum_list = $queries->orderWhere('forums', 'parent <> 0', 'forum_order', 'ASC');
+            $template_forums = [];
+
+            // Get a list of forums in which the label is enabled
+            $enabled_forums = explode(',', $label->fids);
+
+            if (count($forum_list)){
+                foreach ($forum_list as $item){
+                    $template_forums[] = [
+                        'id' => Output::getClean($item->id),
+                        'name' => Output::getClean(Output::getDecoded($item->forum_title)),
+                        'selected' => (in_array($item->id, $enabled_forums))
+                    ];
+                }
+            }
+
+            // Get a list of all groups
+            $group_list = $queries->getWhere('groups', ['id', '<>', 0]);
+            $template_groups = [];
+
+            // Get a list of groups which have access to the label
+            $groups = explode(',', $label->gids);
+
+            if (count($group_list)){
+                foreach ($group_list as $item){
+                    $template_groups[] = [
+                        'id' => Output::getClean($item->id),
+                        'name' => Output::getClean(Output::getDecoded($item->name)),
+                        'selected' => (in_array($item->id, $groups))
+                    ];
+                }
+            }
+
+            $smarty->assign([
+                'EDITING_LABEL' => $forum_language->get('forum', 'editing_label'),
+                'CANCEL' => $language->get('general', 'cancel'),
+                'CANCEL_LINK' => URL::build('/panel/forums/labels'),
+                'ARE_YOU_SURE' => $language->get('general', 'are_you_sure'),
+                'CONFIRM_CANCEL' => $language->get('general', 'confirm_cancel'),
+                'YES' => $language->get('general', 'yes'),
+                'NO' => $language->get('general', 'no'),
+                'LABEL_NAME' => $forum_language->get('forum', 'label_name'),
+                'LABEL_NAME_VALUE' => Output::getClean($label->name),
+                'LABEL_TYPE' => $forum_language->get('forum', 'label_type'),
+                'LABEL_TYPES' => $template_array,
+                'LABEL_FORUMS' => $forum_language->get('forum', 'label_forums'),
+                'ALL_FORUMS' => $template_forums,
+                'LABEL_GROUPS' => $forum_language->get('forum', 'label_groups'),
+                'ALL_GROUPS' => $template_groups
+            ]);
+
+            $template_file = 'forum/labels_edit.tpl';
+
+            break;
+
+        case 'delete':
+            // Label deletion
+            if (! isset($_GET['lid']) || ! is_numeric($_GET['lid'])){
+                // Check the label ID is valid
+                Redirect::to(URL::build('/panel/forums/labels'));
+
+                die();
+            }
+
+            try {
+                // Delete the label
+                $queries->delete('forums_topic_labels', ['id', '=', $_GET['lid']]);
+                Session::flash('forum_labels', $forum_language->get('forum', 'label_deleted_successfully'));
+            } catch (Exception $e){
+                // Error, redirect anyway
+            }
+
+            Redirect::to(URL::build('/panel/forums/labels'));
+
+            die();
+
+            break;
+
+        case 'types':
+            // List label types
+            $labels = $queries->getWhere('forums_labels', ['id', '<>', 0]);
+            $template_array = [];
+
+            if (count($labels)){
+                foreach ($labels as $label){
+                    $template_array[] = [
+                        'name' => str_replace('{x}', Output::getClean(Output::getDecoded($label->name)), Output::getDecoded($label->html)),
+                        'edit_link' => URL::build('/panel/forums/labels/', 'action=edit_type&lid=' . Output::getClean($label->id)),
+                        'delete_link' => URL::build('/panel/forums/labels/', 'action=delete_type&lid=' . Output::getClean($label->id)),
+                    ];
+                }
+            }
+
+            $smarty->assign([
+                'LABEL_TYPES' => $forum_language->get('forum', 'label_types'),
+                'LABELS_LINK' => URL::build('/panel/forums/labels'),
+                'NEW_LABEL_TYPE' => $forum_language->get('forum', 'new_label_type'),
+                'NEW_LABEL_TYPE_LINK' => URL::build('/panel/forums/labels/', 'action=new_type'),
+                'ALL_LABEL_TYPES' => $template_array,
+                'EDIT' => $language->get('general', 'edit'),
+                'DELETE' => $language->get('general', 'delete'),
+                'CONFIRM_DELETE' => $language->get('general', 'confirm_deletion'),
+                'ARE_YOU_SURE' => $language->get('general', 'are_you_sure'),
+                'YES' => $language->get('general', 'yes'),
+                'NO' => $language->get('general', 'no'),
+                'NO_LABEL_TYPES' => $forum_language->get('forum', 'no_label_types_defined')
+            ]);
+
+            $template_file = 'forum/labels_types.tpl';
+
+            break;
+
+        case 'new_type':
+            // Creating a label type
+            // Deal with input
+            if (Input::exists()){
+                // Check token
+                if (Token::check()){
+                    // Valid token
+                    // Validate input
+                    $validate = new Validate();
+
+                    $validation = $validate->check($_POST, [
+                        'label_name' => [
+                            'required' => true,
+                            'min' => 1,
+                            'max' => 32
+                        ],
+                        'label_html' => [
+                            'required' => true,
+                            'min' => 1,
+                            'max' => 1024
+                        ]
+                    ]);
+
+                    if ($validation->passed()){
+                        try {
+                            $queries->create('forums_labels', [
+                                'name' => Output::getClean(Input::get('label_name')),
+                                'html' => Input::get('label_html')
+                            ]);
+
+                            Session::flash('forum_labels', $forum_language->get('forum', 'label_type_creation_success'));
+                            Redirect::to(URL::build('/panel/forums/labels/', 'action=types'));
+
+                            die();
+                        } catch (Exception $e){
+                            $errors = [$e->getMessage()];
+                        }
+                    } else {
+                        // Validation errors
+                        $errors = [$forum_language->get('forum', 'label_type_creation_error')];
+                    }
+                } else {
+                    // Invalid token
+                    $errors = [$language->get('general', 'invalid_token')];
+                }
+            }
+
+            $smarty->assign([
+                'LABEL_TYPES' => $forum_language->get('forum', 'label_types'),
+                'CREATING_LABEL_TYPE' => $forum_language->get('forum', 'creating_label_type'),
+                'CANCEL' => $language->get('general', 'cancel'),
+                'CONFIRM_CANCEL' => $language->get('general', 'confirm_cancel'),
+                'CANCEL_LINK' => URL::build('/panel/forums/labels/', 'action=types'),
+                'ARE_YOU_SURE' => $language->get('general', 'are_you_sure'),
+                'YES' => $language->get('general', 'yes'),
+                'NO' => $language->get('general', 'no'),
+                'LABEL_TYPE_NAME' => $forum_language->get('forum', 'label_type_name'),
+                'LABEL_TYPE_NAME_VALUE' => Output::getClean(Input::get('label_type_name')),
+                'LABEL_TYPE_HTML' => $forum_language->get('forum', 'label_type_html'),
+                'INFO' => $language->get('general', 'info'),
+                'LABEL_TYPE_HTML_INFO' => $forum_language->get('forum', 'label_type_html_help'),
+                'LABEL_TYPE_HTML_VALUE' => Output::getClean(Input::get('label_type_html'))
+            ]);
+
+            $template_file = 'forum/labels_types_new.tpl';
+
+            break;
+
+        case 'edit_type':
+            // Editing a label type
+            if (! isset($_GET['lid']) || ! is_numeric($_GET['lid'])){
+                Redirect::to(URL::build('/panel/forums/labels/', 'action=types'));
+
+                die();
+            }
+
+            // Does the label exist?
+            $label = $queries->getWhere('forums_labels', ['id', '=', $_GET['lid']]);
+
+            if (! count($label)){
+                // No, it doesn't exist
+                Redirect::to(URL::build('/panel/forums/labels/', 'action=types'));
+
+                die();
+            }
+                $label = $label[0];
+            
+            // Deal with input
+            if (Input::exists()){
+                // Check token
+                if (Token::check()){
+                    // Valid token
+                    // Validate input
+                    $validate = new Validate();
+
+                    $validation = $validate->check($_POST, [
+                        'label_name' => [
+                            'required' => true,
+                            'min' => 1,
+                            'max' => 32
+                        ],
+                        'label_html' => [
+                            'required' => true,
+                            'min' => 1,
+                            'max' => 1024
+                        ]
+                    ]);
+
+                    if ($validation->passed()){
+                        try {
+                            $queries->update('forums_labels', $label->id, [
+                                'name' => Output::getClean(Input::get('label_name')),
+                                'html' => Output::getDecoded(Input::get('label_html'))
+                            ]);
+
+                            Session::flash('forum_labels', $forum_language->get('forum', 'label_type_edit_success'));
+                            Redirect::to(URL::build('/panel/forums/labels/', 'action=edit_type&lid=' . Output::getClean($label->id)));
+
+                            die();
+                        } catch (Exception $e){
+                            $errors = [$e->getMessage()];
+                        }
+                    } else {
+                        // Validation errors
+                        $errors = [$forum_language->get('forum', 'label_type_creation_error')];
+                    }
+                } else {
+                    // Invalid token
+                    $errors = [$language->get('general', 'invalid_token')];
+                }
+            }
+
+            $smarty->assign([
+                'LABEL_TYPES' => $forum_language->get('forum', 'label_types'),
+                'EDITING_LABEL_TYPE' => $forum_language->get('forum', 'editing_label_type'),
+                'CANCEL' => $language->get('general', 'cancel'),
+                'CONFIRM_CANCEL' => $language->get('general', 'confirm_cancel'),
+                'CANCEL_LINK' => URL::build('/panel/forums/labels/', 'action=types'),
+                'ARE_YOU_SURE' => $language->get('general', 'are_you_sure'),
+                'YES' => $language->get('general', 'yes'),
+                'NO' => $language->get('general', 'no'),
+                'LABEL_TYPE_NAME' => $forum_language->get('forum', 'label_type_name'),
+                'LABEL_TYPE_NAME_VALUE' => Output::getClean($label->name),
+                'LABEL_TYPE_HTML' => $forum_language->get('forum', 'label_type_html'),
+                'INFO' => $language->get('general', 'info'),
+                'LABEL_TYPE_HTML_INFO' => $forum_language->get('forum', 'label_type_html_help'),
+                'LABEL_TYPE_HTML_VALUE' => Output::getClean($label->html)
+            ]);
+
+            $template_file = 'forum/labels_types_edit.tpl';
+
+            break;
+
+        case 'delete_type':
+            // Label deletion
+            if (! isset($_GET['lid']) || ! is_numeric($_GET['lid'])){
+                // Check the label ID is valid
+                Redirect::to(URL::build('/panel/forums/labels/', 'action=types'));
+
+                die();
+            }
+
+            try {
+                // Delete the label
+                $queries->delete('forums_labels', ['id', '=', $_GET['lid']]);
+                Session::flash('forum_labels', $forum_language->get('forum', 'label_type_deleted_successfully'));
+            } catch (Exception $e){
+                // Error, redirect anyway
+            }
+
+            Redirect::to(URL::build('/panel/forums/labels/', 'action=types'));
+
+            die();
+
+            break;
+
+        default:
+            Redirect::to(URL::build('/panel/forums/labels'));
+
+            die();
+
+            break;
+    }
 }
 
 // Load modules + template
-Module::loadPage($user, $pages, $cache, $smarty, array($navigation, $cc_nav, $mod_nav), $widgets);
-
-if(Session::exists('forum_labels'))
-	$success = Session::flash('forum_labels');
-
-if(isset($success))
-	$smarty->assign(array(
-		'SUCCESS' => $success,
-		'SUCCESS_TITLE' => $language->get('general', 'success')
-	));
-
-if(isset($errors) && count($errors))
-	$smarty->assign(array(
-		'ERRORS' => $errors,
-		'ERRORS_TITLE' => $language->get('general', 'error')
-	));
-
-$smarty->assign(array(
-	'PARENT_PAGE' => PARENT_PAGE,
-	'DASHBOARD' => $language->get('admin', 'dashboard'),
-	'FORUM' => $forum_language->get('forum', 'forum'),
-	'LABELS' => $forum_language->get('forum', 'labels'),
-	'PAGE' => PANEL_PAGE,
-	'TOKEN' => Token::get(),
-	'SUBMIT' => $language->get('general', 'submit')
-));
+Module::loadPage($user, $pages, $cache, $smarty, [$navigation, $cc_nav, $mod_nav], $widgets);
+
+if (Session::exists('forum_labels'))
+    $success = Session::flash('forum_labels');
+
+if (isset($success))
+    $smarty->assign([
+        'SUCCESS' => $success,
+        'SUCCESS_TITLE' => $language->get('general', 'success')
+    ]);
+
+if (isset($errors) && count($errors))
+    $smarty->assign([
+        'ERRORS' => $errors,
+        'ERRORS_TITLE' => $language->get('general', 'error')
+    ]);
+
+$smarty->assign([
+    'PARENT_PAGE' => PARENT_PAGE,
+    'DASHBOARD' => $language->get('admin', 'dashboard'),
+    'FORUM' => $forum_language->get('forum', 'forum'),
+    'LABELS' => $forum_language->get('forum', 'labels'),
+    'PAGE' => PANEL_PAGE,
+    'TOKEN' => Token::get(),
+    'SUBMIT' => $language->get('general', 'submit')
+]);
 
 $page_load = microtime(true) - $start;
 define('PAGE_LOAD_TIME', str_replace('{x}', round($page_load, 3), $language->get('general', 'page_loaded_in')));
 
 $template->onPageLoad();
 
-require(ROOT_PATH . '/core/templates/panel_navbar.php');
+require (ROOT_PATH . '/core/templates/panel_navbar.php');
 
 // Display template
 $template->displayTemplate($template_file, $smarty);
diff --git a/modules/Forum/pages/user/following_topics.php b/modules/Forum/pages/user/following_topics.php
index 822eb0be4429786aa9407821de35e3dcb53d906f..3278418866381ca693eb730d24d6fcae5ea7651c 100644
--- a/modules/Forum/pages/user/following_topics.php
+++ b/modules/Forum/pages/user/following_topics.php
@@ -10,63 +10,67 @@
  */
 
 // Must be logged in
-if (!$user->isLoggedIn()) {
+if (! $user->isLoggedIn()) {
     Redirect::to(URL::build('/'));
+
     die();
 }
 
 // Always define page name for navbar
 define('PAGE', 'cc_following_topics');
 $page_title = $forum_language->get('forum', 'following_topics');
-require_once(ROOT_PATH . '/core/templates/frontend_init.php');
-require_once(ROOT_PATH . '/modules/Forum/classes/Forum.php');
+
+require_once (ROOT_PATH . '/core/templates/frontend_init.php');
+
+require_once (ROOT_PATH . '/modules/Forum/classes/Forum.php');
 
 $forum = new Forum();
 $timeago = new Timeago(TIMEZONE);
 
 if (Input::exists() && Input::get('action') == 'purge') {
     if (Token::check(Input::get('token'))) {
-        DB::getInstance()->createQuery('DELETE FROM nl2_topics_following WHERE user_id = ?', array($user->data()->id));
+        DB::getInstance()->createQuery('DELETE FROM nl2_topics_following WHERE user_id = ?', [$user->data()->id]);
         Session::flash('success_post', $forum_language->get('forum', 'all_topics_unfollowed'));
     }
 }
 
 $user_groups = $user->getGroups();
 $groups = '(';
+
 foreach ($user_groups as $group) {
     $groups .= Output::getClean($group->id) . ',';
 }
 $groups = rtrim($groups, ',') . ')';
-$topics = DB::getInstance()->query('SELECT nl2_topics.id AS id, nl2_topics.topic_title AS topic_title, nl2_topics.topic_creator AS topic_creator, nl2_topics.topic_date AS topic_date, nl2_topics.topic_last_user AS last_user, nl2_topics.topic_reply_date AS topic_reply_date, nl2_topics_following.existing_alerts AS existing_alerts FROM nl2_topics LEFT JOIN nl2_topics_following ON nl2_topics.id = nl2_topics_following.topic_id WHERE deleted = 0 AND nl2_topics.id IN (SELECT topic_id FROM nl2_topics_following WHERE user_id = ?) AND forum_id IN (SELECT forum_id FROM nl2_forums_permissions WHERE group_id IN ' . $groups . ' AND `view` = 1) ORDER BY nl2_topics.topic_reply_date DESC', array($user->data()->id))->results();
+$topics = DB::getInstance()->query('SELECT nl2_topics.id AS id, nl2_topics.topic_title AS topic_title, nl2_topics.topic_creator AS topic_creator, nl2_topics.topic_date AS topic_date, nl2_topics.topic_last_user AS last_user, nl2_topics.topic_reply_date AS topic_reply_date, nl2_topics_following.existing_alerts AS existing_alerts FROM nl2_topics LEFT JOIN nl2_topics_following ON nl2_topics.id = nl2_topics_following.topic_id WHERE deleted = 0 AND nl2_topics.id IN (SELECT topic_id FROM nl2_topics_following WHERE user_id = ?) AND forum_id IN (SELECT forum_id FROM nl2_forums_permissions WHERE group_id IN ' . $groups . ' AND `view` = 1) ORDER BY nl2_topics.topic_reply_date DESC', [$user->data()->id])->results();
 
 // Pagination
 $p = (isset($_GET['p']) && is_numeric($_GET['p'])) ? $_GET['p'] : 1;
-$paginator = new Paginator((isset($template_pagination) ? $template_pagination : array()));
+$paginator = new Paginator((isset($template_pagination) ? $template_pagination : []));
 $results = $paginator->getLimited($topics, 10, $p, count($topics));
 $pagination = $paginator->generate(7, URL::build('/user/following_topics/', true));
 
 if (count($topics))
     $smarty->assign('PAGINATION', $pagination);
-else
-    $smarty->assign('PAGINATION', '');
+else $smarty->assign('PAGINATION', '');
 
-$template_array = array();
-$authors = array();
+$template_array = [];
+$authors = [];
 
 for ($n = 0; $n < count($results->data); $n++) {
     $topic = $results->data[$n];
 
     // Topic author/last poster
-    if (!array_key_exists($topic->topic_creator, $authors)) {
+    if (! array_key_exists($topic->topic_creator, $authors)) {
         $authors[$topic->topic_creator] = new User($topic->topic_creator);
     }
-    if (!array_key_exists($topic->topic_last_user, $authors)) {
+
+    if (! array_key_exists($topic->topic_last_user, $authors)) {
         $authors[$topic->topic_last_user] = new User($topic->topic_last_user);
     }
 
-    $last_post = DB::getInstance()->query('SELECT id FROM nl2_posts WHERE deleted = 0 AND topic_id = ? ORDER BY created DESC LIMIT 1', array($topic->id))->first();
+    $last_post = DB::getInstance()->query('SELECT id FROM nl2_posts WHERE deleted = 0 AND topic_id = ? ORDER BY created DESC LIMIT 1', [$topic->id])->first();
 
-    $template_array[] = array(
+    $template_array[] = [
         'topic_title' => Output::getClean($topic->topic_title),
         'topic_date' => $timeago->inWords(date('d M Y, H:i', $topic->topic_date), $language->getTimeLanguage()),
         'topic_date_full' => date('d M Y, H:i', $topic->topic_date),
@@ -88,7 +92,7 @@ for ($n = 0; $n < count($results->data); $n++) {
         'last_post_link' => URL::build('/forum/topic/' . $topic->id . '-' . $forum->titleToURL($topic->topic_title), 'pid=' . $last_post->id),
         'unread' => $topic->existing_alerts == 1,
         'unfollow_link' => URL::build('/forum/topic/' . $topic->id, 'action=unfollow&return=list')
-    );
+    ];
 }
 
 if (Session::exists('success_post')) {
@@ -96,7 +100,7 @@ if (Session::exists('success_post')) {
 }
 
 // Language values
-$smarty->assign(array(
+$smarty->assign([
     'USER_CP' => $language->get('user', 'user_cp'),
     'FOLLOWING_TOPICS' => $forum_language->get('forum', 'following_topics'),
     'TOPICS_LIST' => $template_array,
@@ -109,20 +113,21 @@ $smarty->assign(array(
     'NO' => $language->get('general', 'no'),
     'SUCCESS' => $language->get('general', 'success'),
     'TOKEN' => Token::get()
-));
+]);
 
 // Load modules + template
-Module::loadPage($user, $pages, $cache, $smarty, array($navigation, $cc_nav, $mod_nav), $widgets, $template);
+Module::loadPage($user, $pages, $cache, $smarty, [$navigation, $cc_nav, $mod_nav], $widgets, $template);
 
-require(ROOT_PATH . '/core/templates/cc_navbar.php');
+require (ROOT_PATH . '/core/templates/cc_navbar.php');
 
 $page_load = microtime(true) - $start;
 define('PAGE_LOAD_TIME', str_replace('{x}', round($page_load, 3), $language->get('general', 'page_loaded_in')));
 
 $template->onPageLoad();
 
-require(ROOT_PATH . '/core/templates/navbar.php');
-require(ROOT_PATH . '/core/templates/footer.php');
+require (ROOT_PATH . '/core/templates/navbar.php');
+
+require (ROOT_PATH . '/core/templates/footer.php');
 
 // Display template
 $template->displayTemplate('forum/following_topics.tpl', $smarty);
diff --git a/modules/Forum/profile_tab.php b/modules/Forum/profile_tab.php
index da5b10ec6090d72dde7dc0fd00d7488d61188b1d..84f38e8f1fc0d2a41a3636836422bafb3d97f432 100644
--- a/modules/Forum/profile_tab.php
+++ b/modules/Forum/profile_tab.php
@@ -9,38 +9,41 @@
  *  Forum module - forum profile tab
  */
 
-if (!isset($forum) || (isset($forum) && !$forum instanceof Forum)) {
-    require_once(ROOT_PATH . '/modules/Forum/classes/Forum.php');
+if (! isset($forum) || (isset($forum) && ! $forum instanceof Forum)) {
+    require_once (ROOT_PATH . '/modules/Forum/classes/Forum.php');
     $forum = new Forum();
 }
 
 // Get latest posts
 $latest_posts = $queries->orderWhere('posts', 'post_creator = ' . $query->id . ' AND deleted = 0', 'post_date', 'DESC LIMIT 15');
-if (!count($latest_posts)) {
+
+if (! count($latest_posts)) {
     $smarty->assign('NO_POSTS', $forum_language->get('forum', 'user_no_posts'));
 } else {
     // Check permissions
     $n = 0;
 
-    if (!$user->isLoggedIn()) {
-        $groups = array(0);
+    if (! $user->isLoggedIn()) {
+        $groups = [0];
     } else {
         $groups = $user->getAllGroups();
     }
 
     // Array to assign posts to
-    $posts = array();
+    $posts = [];
 
     foreach ($latest_posts as $latest_post) {
         if ($n == 5) break;
 
         // Is the post somewhere the user can view?
         $permission = false;
-        $forum_permissions = $queries->getWhere('forums_permissions', array('forum_id', '=', $latest_post->forum_id));
+        $forum_permissions = $queries->getWhere('forums_permissions', ['forum_id', '=', $latest_post->forum_id]);
+
         foreach ($forum_permissions as $forum_permission) {
             if (in_array($forum_permission->group_id, $groups)) {
                 if ($forum_permission->view == 1 && $forum_permission->view_other_topics == 1) {
                     $permission = true;
+
                     break;
                 }
             }
@@ -52,8 +55,9 @@ if (!count($latest_posts)) {
         if ($latest_post->deleted == 1) continue;
 
         // Get topic title
-        $topic_title = $queries->getWhere('topics', array('id', '=', $latest_post->topic_id));
-        if (!count($topic_title)) continue;
+        $topic_title = $queries->getWhere('topics', ['id', '=', $latest_post->topic_id]);
+
+        if (! count($topic_title)) continue;
         $topic_title = htmlspecialchars($topic_title[0]->topic_title);
 
         if (is_null($latest_post->created)) {
@@ -64,21 +68,21 @@ if (!count($latest_posts)) {
             $date_full = date('d M Y, H:i', $latest_post->created);
         }
 
-        $posts[] = array(
+        $posts[] = [
             'link' => URL::build('/forum/topic/' . $latest_post->topic_id . '-' . $forum->titleToURL($topic_title), 'pid=' . $latest_post->id),
             'title' => $topic_title,
             'content' => Output::getPurified($emojione->unicodeToImage(htmlspecialchars_decode($latest_post->post_content))),
             'date_friendly' => $date_friendly,
             'date_full' => $date_full
-        );
+        ];
 
         $n++;
     }
 }
 
 // Smarty
-$smarty->assign(array(
-    'PF_LATEST_POSTS' => (isset($posts)) ? $posts : array(),
+$smarty->assign([
+    'PF_LATEST_POSTS' => (isset($posts)) ? $posts : [],
     'PF_LATEST_POSTS_TITLE' => $forum_language->get('forum', 'latest_posts'),
     'FORUM_TAB_TITLE' => $forum_language->get('forum', 'forum')
-));
+]);
diff --git a/modules/Forum/widgets/LatestPostsWidget.php b/modules/Forum/widgets/LatestPostsWidget.php
index fdede1b6756d9350d744450c36614e7b3f5cb68f..b1900be73ef84d32f612a3802c24349a8a09e8aa 100644
--- a/modules/Forum/widgets/LatestPostsWidget.php
+++ b/modules/Forum/widgets/LatestPostsWidget.php
@@ -8,23 +8,26 @@
  *
  *  Latest Posts Widget
  */
-class LatestPostsWidget extends WidgetBase {
-
-    private $_smarty, 
-            $_language, 
-            $_cache, 
+class LatestPostsWidget extends WidgetBase
+{
+    private $_smarty,
+ 
+            $_language,
+ 
+            $_cache,
+ 
             $_user;
 
-    public function __construct($pages = array(), $latest_posts_language, $by_language, $smarty, $cache, $user, $language){
-    	$this->_smarty = $smarty;
-    	$this->_cache = $cache;
-    	$this->_user = $user;
-    	$this->_language = $language;
+    public function __construct($pages = [], $latest_posts_language, $by_language, $smarty, $cache, $user, $language) {
+        $this->_smarty = $smarty;
+        $this->_cache = $cache;
+        $this->_user = $user;
+        $this->_language = $language;
 
         parent::__construct($pages);
 
         // Get widget
-        $widget_query = DB::getInstance()->query('SELECT `location`, `order` FROM nl2_widgets WHERE `name` = ?', array('Latest Posts'))->first();
+        $widget_query = DB::getInstance()->query('SELECT `location`, `order` FROM nl2_widgets WHERE `name` = ?', ['Latest Posts'])->first();
 
         // Set widget variables
         $this->_module = 'Forum';
@@ -33,107 +36,109 @@ class LatestPostsWidget extends WidgetBase {
         $this->_description = 'Display latest posts from your forum.';
         $this->_order = isset($widget_query->order) ? $widget_query->order : null;
 
-        $this->_smarty->assign(array(
-        	'LATEST_POSTS' => $latest_posts_language,
-	        'BY' => $by_language
-        ));
+        $this->_smarty->assign([
+            'LATEST_POSTS' => $latest_posts_language,
+            'BY' => $by_language
+        ]);
     }
 
     public function initialise() {
-	    require_once(ROOT_PATH . '/modules/Forum/classes/Forum.php');
-	    $forum = new Forum();
-	    $queries = new Queries();
-	    $timeago = new Timeago(TIMEZONE);
-
-		// Get user group IDs
-		$user_groups = $this->_user->getAllGroupIds();
-
-	    $this->_cache->setCache('forum_discussions_' . rtrim(implode('-', $user_groups), '-'));
-	    if($this->_cache->isCached('discussions')){
-		    $template_array = $this->_cache->retrieve('discussions');
-
-	    } else {
-		    // Generate latest posts
-		    $discussions = $forum->getLatestDiscussions($user_groups, ($this->_user->isLoggedIn() ? $this->_user->data()->id : 0));
-
-		    $n = 0;
-		    // Calculate the number of discussions to display (5 max)
-		    if(count($discussions) <= 5){
-			    $limit = count($discussions);
-		    } else {
-			    $limit = 5;
-		    }
-
-		    $template_array = array();
-
-		    // Generate an array to pass to template
-		    while($n < $limit){
-			    // Get the name of the forum from the ID
-			    $forum_name = $queries->getWhere('forums', array('id', '=', $discussions[$n]['forum_id']));
-			    $forum_name = Output::getPurified(htmlspecialchars_decode($forum_name[0]->forum_title));
-
-			    // Get the number of replies
-			    $posts = $queries->getWhere('posts', array('topic_id', '=', $discussions[$n]['id']));
-			    $posts = count($posts);
-
-			    // Is there a label?
-			    if($discussions[$n]['label'] != 0){ // yes
-				    // Get label
-				    $label = $queries->getWhere('forums_topic_labels', array('id', '=', $discussions[$n]['label']));
-				    if(count($label)){
-					    $label = $label[0];
-
-					    $label_html = $queries->getWhere('forums_labels', array('id', '=', $label->label));
-					    if(count($label_html)){
-						    $label_html = $label_html[0]->html;
-						    $label = str_replace('{x}', Output::getClean($label->name), $label_html);
-					    } else $label = '';
-				    } else $label = '';
-			    } else { // no
-				    $label = '';
-			    }
-
-			    // Add to array
-				$topic_creator = new User($discussions[$n]['topic_creator']);
-				$last_reply_user = new User($discussions[$n]['topic_last_user']);
-			    $template_array[] = array(
-				    'topic_title' => Output::getClean($discussions[$n]['topic_title']),
-				    'topic_id' => $discussions[$n]['id'],
-				    'topic_created_rough' => $timeago->inWords(date('d M Y, H:i', $discussions[$n]['topic_date']), $this->_language->getTimeLanguage()),
-				    'topic_created' => date('d M Y, H:i', $discussions[$n]['topic_date']),
-				    'topic_created_username' => $topic_creator->getDisplayname(),
-				    'topic_created_mcname' => $topic_creator->getDisplayname(true),
-				    'topic_created_style' => $topic_creator->getGroupClass(),
-				    'topic_created_user_id' => Output::getClean($discussions[$n]['topic_creator']),
-				    'locked' => $discussions[$n]['locked'],
-				    'forum_name' => $forum_name,
-				    'forum_id' => $discussions[$n]['forum_id'],
-				    'views' => $discussions[$n]['topic_views'],
-				    'posts' => $posts,
-				    'last_reply_avatar' => $last_reply_user->getAvatar("../", 64),
-				    'last_reply_rough' => $timeago->inWords(date('d M Y, H:i', $discussions[$n]['topic_reply_date']), $this->_language->getTimeLanguage()),
-				    'last_reply' => date('d M Y, H:i', $discussions[$n]['topic_reply_date']),
-				    'last_reply_username' => $last_reply_user->getDisplayname(),
-				    'last_reply_mcname' => $last_reply_user->getDisplayname(true),
-				    'last_reply_style' => $last_reply_user->getGroupClass(),
-				    'last_reply_user_id' => Output::getClean($discussions[$n]['topic_last_user']),
-				    'label' => $label,
-				    'link' => URL::build('/forum/topic/' . $discussions[$n]['id'] . '-' . $forum->titleToURL($discussions[$n]['topic_title'])),
-				    'forum_link' => URL::build('/forum/forum/' . $discussions[$n]['forum_id']),
-				    'author_link' => $topic_creator->getProfileURL(),
-				    'last_reply_profile_link' => $last_reply_user->getProfileURL(),
-				    'last_reply_link' => URL::build('/forum/topic/' . $discussions[$n]['id'] . '-' . $forum->titleToURL($discussions[$n]['topic_title']), 'pid=' . $discussions[$n]['last_post_id'])
-			    );
-
-			    $n++;
-		    }
-
-		    $this->_cache->store('discussions', $template_array, 60);
-	    }
-
-	    // Generate HTML code for widget
-	    $this->_smarty->assign('LATEST_POSTS_ARRAY', $template_array);
-
-	    $this->_content = $this->_smarty->fetch('widgets/forum/latest_posts.tpl');
+        require_once (ROOT_PATH . '/modules/Forum/classes/Forum.php');
+        $forum = new Forum();
+        $queries = new Queries();
+        $timeago = new Timeago(TIMEZONE);
+
+        // Get user group IDs
+        $user_groups = $this->_user->getAllGroupIds();
+
+        $this->_cache->setCache('forum_discussions_' . rtrim(implode('-', $user_groups), '-'));
+
+        if ($this->_cache->isCached('discussions')){
+            $template_array = $this->_cache->retrieve('discussions');
+        } else {
+            // Generate latest posts
+            $discussions = $forum->getLatestDiscussions($user_groups, ($this->_user->isLoggedIn() ? $this->_user->data()->id : 0));
+
+            $n = 0;
+            // Calculate the number of discussions to display (5 max)
+            if (count($discussions) <= 5){
+                $limit = count($discussions);
+            } else {
+                $limit = 5;
+            }
+
+            $template_array = [];
+
+            // Generate an array to pass to template
+            while ($n < $limit){
+                // Get the name of the forum from the ID
+                $forum_name = $queries->getWhere('forums', ['id', '=', $discussions[$n]['forum_id']]);
+                $forum_name = Output::getPurified(htmlspecialchars_decode($forum_name[0]->forum_title));
+
+                // Get the number of replies
+                $posts = $queries->getWhere('posts', ['topic_id', '=', $discussions[$n]['id']]);
+                $posts = count($posts);
+
+                // Is there a label?
+                if ($discussions[$n]['label'] != 0){ // yes
+                    // Get label
+                    $label = $queries->getWhere('forums_topic_labels', ['id', '=', $discussions[$n]['label']]);
+
+                    if (count($label)){
+                        $label = $label[0];
+
+                        $label_html = $queries->getWhere('forums_labels', ['id', '=', $label->label]);
+
+                        if (count($label_html)){
+                            $label_html = $label_html[0]->html;
+                            $label = str_replace('{x}', Output::getClean($label->name), $label_html);
+                        } else $label = '';
+                    } else $label = '';
+                } else { // no
+                    $label = '';
+                }
+
+                // Add to array
+                $topic_creator = new User($discussions[$n]['topic_creator']);
+                $last_reply_user = new User($discussions[$n]['topic_last_user']);
+                $template_array[] = [
+                    'topic_title' => Output::getClean($discussions[$n]['topic_title']),
+                    'topic_id' => $discussions[$n]['id'],
+                    'topic_created_rough' => $timeago->inWords(date('d M Y, H:i', $discussions[$n]['topic_date']), $this->_language->getTimeLanguage()),
+                    'topic_created' => date('d M Y, H:i', $discussions[$n]['topic_date']),
+                    'topic_created_username' => $topic_creator->getDisplayname(),
+                    'topic_created_mcname' => $topic_creator->getDisplayname(true),
+                    'topic_created_style' => $topic_creator->getGroupClass(),
+                    'topic_created_user_id' => Output::getClean($discussions[$n]['topic_creator']),
+                    'locked' => $discussions[$n]['locked'],
+                    'forum_name' => $forum_name,
+                    'forum_id' => $discussions[$n]['forum_id'],
+                    'views' => $discussions[$n]['topic_views'],
+                    'posts' => $posts,
+                    'last_reply_avatar' => $last_reply_user->getAvatar('../', 64),
+                    'last_reply_rough' => $timeago->inWords(date('d M Y, H:i', $discussions[$n]['topic_reply_date']), $this->_language->getTimeLanguage()),
+                    'last_reply' => date('d M Y, H:i', $discussions[$n]['topic_reply_date']),
+                    'last_reply_username' => $last_reply_user->getDisplayname(),
+                    'last_reply_mcname' => $last_reply_user->getDisplayname(true),
+                    'last_reply_style' => $last_reply_user->getGroupClass(),
+                    'last_reply_user_id' => Output::getClean($discussions[$n]['topic_last_user']),
+                    'label' => $label,
+                    'link' => URL::build('/forum/topic/' . $discussions[$n]['id'] . '-' . $forum->titleToURL($discussions[$n]['topic_title'])),
+                    'forum_link' => URL::build('/forum/forum/' . $discussions[$n]['forum_id']),
+                    'author_link' => $topic_creator->getProfileURL(),
+                    'last_reply_profile_link' => $last_reply_user->getProfileURL(),
+                    'last_reply_link' => URL::build('/forum/topic/' . $discussions[$n]['id'] . '-' . $forum->titleToURL($discussions[$n]['topic_title']), 'pid=' . $discussions[$n]['last_post_id'])
+                ];
+
+                $n++;
+            }
+
+            $this->_cache->store('discussions', $template_array, 60);
+        }
+
+        // Generate HTML code for widget
+        $this->_smarty->assign('LATEST_POSTS_ARRAY', $template_array);
+
+        $this->_content = $this->_smarty->fetch('widgets/forum/latest_posts.tpl');
     }
-}
\ No newline at end of file
+}
diff --git a/rewrite_test.php b/rewrite_test.php
index 8a904d23ae7dd89999bbb9a5cbce5f67d1a25d45..ec61b2c4d133cf951092b869ff6013450b93fcf0 100644
--- a/rewrite_test.php
+++ b/rewrite_test.php
@@ -42,7 +42,6 @@
             <?php
             if (isset($_GET['route']) && $_GET['route'] == '/rewrite_test') {
                 echo '<div class="alert alert-success">Rewrite enabled!</div>';
-
             } else {
                 echo '<div class="alert alert-danger">Rewrite disabled!</div>';
             }
diff --git a/uploads/upload_image.php b/uploads/upload_image.php
index 783de038892bdd5294c60577965d1445fe445b96..8e11386688946a6e80d5bf322e5f7629ff938b6e 100644
--- a/uploads/upload_image.php
+++ b/uploads/upload_image.php
@@ -12,22 +12,23 @@
 define('ROOT_PATH', realpath(__DIR__ . '/..'));
 $page = 'image_upload';
 
-require('../core/init.php');
+require ('../core/init.php');
 
 if ($user->isLoggedIn()) {
     // Require Bulletproof
-    require('../core/includes/bulletproof/bulletproof.php');
+    require ('../core/includes/bulletproof/bulletproof.php');
 
-    if (!is_dir(ROOT_PATH . '/uploads/images')) {
+    if (! is_dir(ROOT_PATH . '/uploads/images')) {
         mkdir(ROOT_PATH . '/uploads/images');
     }
 
     $image = new Bulletproof\Image($_FILES);
 
     $image->setSize(1000, 2 * 1048576)
-        ->setMime(array('jpeg', 'png', 'gif'))
+        ->setMime(['jpeg', 'png', 'gif'])
         ->setDimension(2000, 2000)
-        ->setLocation(ROOT_PATH . '/uploads/images/' . $user->data()->id, 0777);
+        ->setLocation(ROOT_PATH . '/uploads/images/' . $user->data()->id, 0777)
+    ;
 
     if ($image['upload']) {
         $upload = $image->upload();
@@ -42,20 +43,19 @@ if ($user->isLoggedIn()) {
 
             $url = ((defined('CONFIG_PATH')) ? CONFIG_PATH : '' . '/uploads/images/' . $user->data()->id . '/' . $image->getName() . '.' . $image->getMime());
 
-            echo json_encode(array(
+            echo json_encode([
                 'uploaded' => '1',
                 'fileName' => $image->getName() . $image->getMime(),
                 'url' => $url
-            ));
+            ]);
         } else {
-            echo json_encode(array(
+            echo json_encode([
                 'uploaded' => '0',
-                'error' => array('message' => $image->getError() . ' ' . $image->getMime())
-            ));
+                'error' => ['message' => $image->getError() . ' ' . $image->getMime()]
+            ]);
         }
     }
-} else
-    echo json_encode(array(
+} else echo json_encode([
         'uploaded' => '0',
-        'error' => array('You are not logged in')
-    ));
+        'error' => ['You are not logged in']
+    ]);
